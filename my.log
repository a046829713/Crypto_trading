2023-02-02 09:41 DEBUG matplotlib data path: C:\Users\user\Desktop\程式專區\lab_vbt\lib\site-packages\matplotlib\mpl-data
2023-02-02 09:41 DEBUG CONFIGDIR=C:\Users\user\.matplotlib
2023-02-02 09:41 DEBUG interactive is False
2023-02-02 09:41 DEBUG platform is win32
2023-02-02 09:41 DEBUG CACHEDIR=C:\Users\user\.matplotlib
2023-02-02 09:41 DEBUG Using fontManager instance from C:\Users\user\.matplotlib\fontlist-v330.json
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): api.binance.com:443
2023-02-02 09:41 DEBUG https://api.binance.com:443 "GET /api/v3/ping HTTP/1.1" 200 2
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): notify-api.line.me:443
2023-02-02 09:41 DEBUG https://notify-api.line.me:443 "POST /api/notify?message=%0ACrypto_trading+%E6%AD%A3%E5%BC%8F%E4%BA%A4%E6%98%93%E5%95%9F%E5%8B%95 HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): fapi.binance.com:443
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "POST /fapi/v1/leverage?leverage=20&symbol=ETHUSDT&timestamp=1675302085222&signature=89eee892c51ed34056489e6ea3abb26eb0dcf0d8b7f2afe34b8129be429110a9 HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "POST /fapi/v1/leverage?leverage=20&symbol=BTCUSDT&timestamp=1675302085437&signature=1e8dca5f391d06a6337ec26c0030ed21db9552ba8cbbb6944f047f34e3b277fa HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): api.binance.com:443
2023-02-02 09:41 DEBUG https://api.binance.com:443 "GET /api/v3/ping HTTP/1.1" 200 2
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): fapi.binance.com:443
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?interval=1m&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302091764&interval=1m&limit=1&startTime=0&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1674965040000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675025040000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675085040000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675145040000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675205040000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675265040000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): api.binance.com:443
2023-02-02 09:41 DEBUG https://api.binance.com:443 "GET /api/v3/ping HTTP/1.1" 200 2
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): fapi.binance.com:443
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?interval=1m&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302100735&interval=1m&limit=1&startTime=0&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1674964860000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675024860000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675084860000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675144860000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675204860000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675264860000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): api.binance.com:443
2023-02-02 09:41 DEBUG https://api.binance.com:443 "GET /api/v3/ping HTTP/1.1" 200 2
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): fapi.binance.com:443
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?interval=1m&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302103569&interval=1m&limit=1&startTime=0&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675302060000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): api.binance.com:443
2023-02-02 09:41 DEBUG https://api.binance.com:443 "GET /api/v3/ping HTTP/1.1" 200 2
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): fapi.binance.com:443
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?interval=1m&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302104454&interval=1m&limit=1&startTime=0&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302120000&interval=1m&limit=1000&startTime=1675302060000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=436)
           2	LOAD_GLOBAL(arg=0, lineno=436)
           4	LOAD_ATTR(arg=1, lineno=436)
           6	LOAD_FAST(arg=6, lineno=436)
           8	LOAD_CONST(arg=1, lineno=436)
          10	CALL_FUNCTION_KW(arg=1, lineno=436)
          12	STORE_FAST(arg=13, lineno=436)
          14	LOAD_GLOBAL(arg=0, lineno=437)
          16	LOAD_ATTR(arg=1, lineno=437)
          18	LOAD_FAST(arg=6, lineno=437)
          20	LOAD_CONST(arg=1, lineno=437)
          22	CALL_FUNCTION_KW(arg=1, lineno=437)
          24	STORE_FAST(arg=14, lineno=437)
          26	LOAD_GLOBAL(arg=0, lineno=438)
          28	LOAD_ATTR(arg=1, lineno=438)
          30	LOAD_FAST(arg=6, lineno=438)
          32	LOAD_CONST(arg=1, lineno=438)
          34	CALL_FUNCTION_KW(arg=1, lineno=438)
          36	STORE_FAST(arg=15, lineno=438)
          38	LOAD_GLOBAL(arg=0, lineno=439)
          40	LOAD_ATTR(arg=1, lineno=439)
          42	LOAD_FAST(arg=6, lineno=439)
          44	LOAD_CONST(arg=1, lineno=439)
          46	CALL_FUNCTION_KW(arg=1, lineno=439)
          48	STORE_FAST(arg=16, lineno=439)
          50	LOAD_GLOBAL(arg=0, lineno=440)
          52	LOAD_ATTR(arg=1, lineno=440)
          54	LOAD_FAST(arg=6, lineno=440)
          56	LOAD_CONST(arg=1, lineno=440)
          58	CALL_FUNCTION_KW(arg=1, lineno=440)
          60	STORE_FAST(arg=17, lineno=440)
          62	LOAD_GLOBAL(arg=0, lineno=441)
          64	LOAD_ATTR(arg=1, lineno=441)
          66	LOAD_FAST(arg=6, lineno=441)
          68	LOAD_CONST(arg=1, lineno=441)
          70	CALL_FUNCTION_KW(arg=1, lineno=441)
          72	STORE_FAST(arg=18, lineno=441)
          74	LOAD_GLOBAL(arg=0, lineno=442)
          76	LOAD_ATTR(arg=1, lineno=442)
          78	LOAD_FAST(arg=6, lineno=442)
          80	LOAD_CONST(arg=1, lineno=442)
          82	CALL_FUNCTION_KW(arg=1, lineno=442)
          84	STORE_FAST(arg=19, lineno=442)
          86	LOAD_GLOBAL(arg=0, lineno=443)
          88	LOAD_ATTR(arg=1, lineno=443)
          90	LOAD_FAST(arg=6, lineno=443)
          92	LOAD_CONST(arg=1, lineno=443)
          94	CALL_FUNCTION_KW(arg=1, lineno=443)
          96	STORE_FAST(arg=20, lineno=443)
          98	LOAD_GLOBAL(arg=0, lineno=444)
         100	LOAD_ATTR(arg=1, lineno=444)
         102	LOAD_FAST(arg=6, lineno=444)
         104	LOAD_CONST(arg=1, lineno=444)
         106	CALL_FUNCTION_KW(arg=1, lineno=444)
         108	STORE_FAST(arg=21, lineno=444)
         110	LOAD_GLOBAL(arg=0, lineno=445)
         112	LOAD_ATTR(arg=1, lineno=445)
         114	LOAD_FAST(arg=6, lineno=445)
         116	LOAD_CONST(arg=1, lineno=445)
         118	CALL_FUNCTION_KW(arg=1, lineno=445)
         120	STORE_FAST(arg=22, lineno=445)
         122	LOAD_GLOBAL(arg=0, lineno=446)
         124	LOAD_ATTR(arg=1, lineno=446)
         126	LOAD_FAST(arg=6, lineno=446)
         128	LOAD_CONST(arg=1, lineno=446)
         130	CALL_FUNCTION_KW(arg=1, lineno=446)
         132	STORE_FAST(arg=23, lineno=446)
         134	LOAD_CONST(arg=2, lineno=449)
         136	STORE_FAST(arg=24, lineno=449)
         138	LOAD_CONST(arg=2, lineno=450)
         140	STORE_FAST(arg=25, lineno=450)
         142	LOAD_CONST(arg=2, lineno=451)
         144	STORE_FAST(arg=26, lineno=451)
         146	LOAD_CONST(arg=2, lineno=452)
         148	STORE_FAST(arg=27, lineno=452)
         150	LOAD_CONST(arg=2, lineno=453)
         152	STORE_FAST(arg=28, lineno=453)
         154	LOAD_CONST(arg=2, lineno=454)
         156	STORE_FAST(arg=29, lineno=454)
         158	LOAD_FAST(arg=7, lineno=455)
         160	STORE_FAST(arg=30, lineno=455)
         162	LOAD_CONST(arg=2, lineno=456)
         164	STORE_FAST(arg=31, lineno=456)
         166	LOAD_FAST(arg=9, lineno=457)
         168	STORE_FAST(arg=32, lineno=457)
         170	LOAD_FAST(arg=9, lineno=458)
         172	STORE_FAST(arg=33, lineno=458)
         174	LOAD_CONST(arg=2, lineno=459)
         176	STORE_FAST(arg=34, lineno=459)
         178	LOAD_CONST(arg=2, lineno=460)
         180	STORE_FAST(arg=35, lineno=460)
         182	LOAD_CONST(arg=2, lineno=461)
         184	STORE_FAST(arg=36, lineno=461)
         186	LOAD_CONST(arg=2, lineno=462)
         188	STORE_FAST(arg=37, lineno=462)
         190	LOAD_FAST(arg=8, lineno=465)
         192	STORE_FAST(arg=8, lineno=465)
         194	LOAD_FAST(arg=10, lineno=466)
         196	STORE_FAST(arg=10, lineno=466)
         198	LOAD_CONST(arg=3, lineno=467)
         200	STORE_FAST(arg=38, lineno=467)
         202	LOAD_GLOBAL(arg=2, lineno=470)
         204	LOAD_FAST(arg=6, lineno=471)
         206	LOAD_FAST(arg=1, lineno=471)
         208	LOAD_FAST(arg=2, lineno=471)
         210	LOAD_FAST(arg=3, lineno=471)
         212	LOAD_FAST(arg=11, lineno=471)
         214	CALL_FUNCTION(arg=5, lineno=470)
         216	STORE_FAST(arg=39, lineno=470)
         218	LOAD_GLOBAL(arg=2, lineno=473)
         220	LOAD_FAST(arg=6, lineno=474)
         222	LOAD_FAST(arg=1, lineno=474)
         224	LOAD_FAST(arg=2, lineno=474)
         226	LOAD_FAST(arg=3, lineno=474)
         228	LOAD_FAST(arg=12, lineno=474)
         230	CALL_FUNCTION(arg=5, lineno=473)
         232	STORE_FAST(arg=40, lineno=473)
         234	LOAD_GLOBAL(arg=3, lineno=477)
         236	LOAD_FAST(arg=1, lineno=478)
         238	LOAD_FAST(arg=4, lineno=478)
         240	LOAD_FAST(arg=39, lineno=478)
         242	LOAD_FAST(arg=40, lineno=478)
         244	LOAD_FAST(arg=2, lineno=478)
         246	LOAD_FAST(arg=5, lineno=478)
         248	CALL_FUNCTION(arg=6, lineno=477)
         250	STORE_FAST(arg=41, lineno=477)
         252	LOAD_GLOBAL(arg=4, lineno=481)
         254	LOAD_FAST(arg=6, lineno=481)
         256	CALL_FUNCTION(arg=1, lineno=481)
         258	GET_ITER(arg=None, lineno=481)
>        260	FOR_ITER(arg=392, lineno=481)
         264	STORE_FAST(arg=42, lineno=481)
         266	LOAD_FAST(arg=0, lineno=482)
         268	LOAD_FAST(arg=42, lineno=482)
         270	BINARY_SUBSCR(arg=None, lineno=482)
         272	STORE_FAST(arg=43, lineno=482)
         274	LOAD_FAST(arg=41, lineno=483)
         276	LOAD_FAST(arg=42, lineno=483)
         278	BINARY_SUBSCR(arg=None, lineno=483)
         280	STORE_FAST(arg=44, lineno=483)
         282	LOAD_FAST(arg=24, lineno=484)
         284	STORE_FAST(arg=45, lineno=484)
         286	LOAD_FAST(arg=25, lineno=485)
         288	STORE_FAST(arg=46, lineno=485)
         290	LOAD_FAST(arg=44, lineno=488)
         292	LOAD_CONST(arg=4, lineno=488)
         294	COMPARE_OP(arg=2, lineno=488)
         296	POP_JUMP_IF_FALSE(arg=304, lineno=488)
         300	LOAD_CONST(arg=4, lineno=489)
         302	STORE_FAST(arg=24, lineno=489)
>        304	LOAD_FAST(arg=44, lineno=490)
         306	LOAD_CONST(arg=5, lineno=490)
         308	COMPARE_OP(arg=2, lineno=490)
         310	POP_JUMP_IF_FALSE(arg=318, lineno=490)
         314	LOAD_CONST(arg=2, lineno=491)
         316	STORE_FAST(arg=24, lineno=491)
>        318	LOAD_FAST(arg=24, lineno=493)
         320	LOAD_FAST(arg=13, lineno=493)
         322	LOAD_FAST(arg=42, lineno=493)
         324	STORE_SUBSCR(arg=None, lineno=493)
         326	LOAD_GLOBAL(arg=5, lineno=496)
         328	LOAD_FAST(arg=25, lineno=497)
         330	LOAD_FAST(arg=43, lineno=497)
         332	LOAD_FAST(arg=24, lineno=497)
         334	LOAD_FAST(arg=45, lineno=497)
         336	LOAD_FAST(arg=8, lineno=497)
         338	LOAD_FAST(arg=38, lineno=497)
         340	CALL_FUNCTION(arg=6, lineno=496)
         342	STORE_FAST(arg=25, lineno=496)
         344	LOAD_GLOBAL(arg=6, lineno=500)
         346	LOAD_FAST(arg=26, lineno=501)
         348	LOAD_FAST(arg=43, lineno=501)
         350	LOAD_FAST(arg=24, lineno=501)
         352	LOAD_FAST(arg=45, lineno=501)
         354	LOAD_FAST(arg=8, lineno=501)
         356	LOAD_FAST(arg=38, lineno=501)
         358	CALL_FUNCTION(arg=6, lineno=500)
         360	STORE_FAST(arg=26, lineno=500)
         362	LOAD_GLOBAL(arg=7, lineno=504)
         364	LOAD_FAST(arg=27, lineno=505)
         366	LOAD_FAST(arg=10, lineno=505)
         368	LOAD_FAST(arg=32, lineno=505)
         370	LOAD_FAST(arg=43, lineno=505)
         372	LOAD_FAST(arg=24, lineno=505)
         374	LOAD_FAST(arg=45, lineno=505)
         376	CALL_FUNCTION(arg=6, lineno=504)
         378	STORE_FAST(arg=27, lineno=504)
         380	LOAD_GLOBAL(arg=8, lineno=508)
         382	LOAD_FAST(arg=28, lineno=509)
         384	LOAD_FAST(arg=10, lineno=509)
         386	LOAD_FAST(arg=33, lineno=509)
         388	LOAD_FAST(arg=43, lineno=509)
         390	LOAD_FAST(arg=24, lineno=509)
         392	LOAD_FAST(arg=45, lineno=509)
         394	CALL_FUNCTION(arg=6, lineno=508)
         396	STORE_FAST(arg=28, lineno=508)
         398	LOAD_GLOBAL(arg=9, lineno=512)
         400	LOAD_FAST(arg=29, lineno=513)
         402	LOAD_FAST(arg=24, lineno=513)
         404	LOAD_FAST(arg=45, lineno=513)
         406	LOAD_FAST(arg=27, lineno=513)
         408	LOAD_FAST(arg=43, lineno=513)
         410	LOAD_FAST(arg=32, lineno=513)
         412	LOAD_FAST(arg=25, lineno=513)
         414	CALL_FUNCTION(arg=7, lineno=512)
         416	STORE_FAST(arg=29, lineno=512)
         418	LOAD_GLOBAL(arg=10, lineno=516)
         420	LOAD_FAST(arg=30, lineno=517)
         422	LOAD_FAST(arg=24, lineno=517)
         424	LOAD_FAST(arg=45, lineno=517)
         426	LOAD_FAST(arg=27, lineno=517)
         428	LOAD_FAST(arg=28, lineno=517)
         430	LOAD_FAST(arg=33, lineno=517)
         432	LOAD_FAST(arg=46, lineno=517)
         434	LOAD_FAST(arg=26, lineno=517)
         436	CALL_FUNCTION(arg=8, lineno=516)
         438	STORE_FAST(arg=30, lineno=516)
         440	LOAD_GLOBAL(arg=11, lineno=520)
         442	LOAD_FAST(arg=31, lineno=521)
         444	LOAD_FAST(arg=24, lineno=521)
         446	LOAD_FAST(arg=45, lineno=521)
         448	LOAD_FAST(arg=43, lineno=521)
         450	LOAD_FAST(arg=33, lineno=521)
         452	LOAD_FAST(arg=46, lineno=521)
         454	CALL_FUNCTION(arg=6, lineno=520)
         456	STORE_FAST(arg=31, lineno=520)
         458	LOAD_FAST(arg=31, lineno=524)
         460	LOAD_CONST(arg=2, lineno=524)
         462	COMPARE_OP(arg=4, lineno=524)
         464	POP_JUMP_IF_FALSE(arg=476, lineno=524)
         468	LOAD_FAST(arg=34, lineno=525)
         470	LOAD_FAST(arg=31, lineno=525)
         472	BINARY_ADD(arg=None, lineno=525)
         474	STORE_FAST(arg=34, lineno=525)
>        476	LOAD_FAST(arg=31, lineno=528)
         478	LOAD_CONST(arg=2, lineno=528)
         480	COMPARE_OP(arg=0, lineno=528)
         482	POP_JUMP_IF_FALSE(arg=494, lineno=528)
         486	LOAD_FAST(arg=35, lineno=529)
         488	LOAD_FAST(arg=31, lineno=529)
         490	BINARY_ADD(arg=None, lineno=529)
         492	STORE_FAST(arg=35, lineno=529)
>        494	LOAD_FAST(arg=24, lineno=532)
         496	LOAD_CONST(arg=4, lineno=532)
         498	COMPARE_OP(arg=2, lineno=532)
         500	POP_JUMP_IF_FALSE(arg=524, lineno=532)
         504	LOAD_FAST(arg=45, lineno=532)
         506	LOAD_CONST(arg=2, lineno=532)
         508	COMPARE_OP(arg=2, lineno=532)
         510	POP_JUMP_IF_FALSE(arg=524, lineno=532)
         514	LOAD_FAST(arg=36, lineno=533)
         516	LOAD_FAST(arg=27, lineno=533)
         518	BINARY_ADD(arg=None, lineno=533)
         520	STORE_FAST(arg=36, lineno=533)
         522	JUMP_FORWARD(arg=28, lineno=533)
>        524	LOAD_FAST(arg=24, lineno=534)
         526	LOAD_CONST(arg=2, lineno=534)
         528	COMPARE_OP(arg=2, lineno=534)
         530	POP_JUMP_IF_FALSE(arg=552, lineno=534)
         534	LOAD_FAST(arg=45, lineno=534)
         536	LOAD_CONST(arg=4, lineno=534)
         538	COMPARE_OP(arg=2, lineno=534)
         540	POP_JUMP_IF_FALSE(arg=552, lineno=534)
         544	LOAD_FAST(arg=36, lineno=535)
         546	LOAD_FAST(arg=28, lineno=535)
         548	BINARY_ADD(arg=None, lineno=535)
         550	STORE_FAST(arg=36, lineno=535)
>        552	LOAD_FAST(arg=7, lineno=538)
         554	LOAD_FAST(arg=36, lineno=538)
         556	BINARY_SUBTRACT(arg=None, lineno=538)
         558	LOAD_FAST(arg=34, lineno=538)
         560	BINARY_ADD(arg=None, lineno=538)
         562	LOAD_FAST(arg=35, lineno=538)
         564	BINARY_ADD(arg=None, lineno=538)
         566	LOAD_FAST(arg=29, lineno=538)
         568	BINARY_ADD(arg=None, lineno=538)
         570	STORE_FAST(arg=37, lineno=538)
         572	LOAD_FAST(arg=25, lineno=541)
         574	LOAD_FAST(arg=14, lineno=541)
         576	LOAD_FAST(arg=42, lineno=541)
         578	STORE_SUBSCR(arg=None, lineno=541)
         580	LOAD_FAST(arg=27, lineno=542)
         582	LOAD_FAST(arg=15, lineno=542)
         584	LOAD_FAST(arg=42, lineno=542)
         586	STORE_SUBSCR(arg=None, lineno=542)
         588	LOAD_FAST(arg=28, lineno=543)
         590	LOAD_FAST(arg=16, lineno=543)
         592	LOAD_FAST(arg=42, lineno=543)
         594	STORE_SUBSCR(arg=None, lineno=543)
         596	LOAD_FAST(arg=29, lineno=544)
         598	LOAD_FAST(arg=17, lineno=544)
         600	LOAD_FAST(arg=42, lineno=544)
         602	STORE_SUBSCR(arg=None, lineno=544)
         604	LOAD_FAST(arg=30, lineno=545)
         606	LOAD_FAST(arg=18, lineno=545)
         608	LOAD_FAST(arg=42, lineno=545)
         610	STORE_SUBSCR(arg=None, lineno=545)
         612	LOAD_FAST(arg=31, lineno=546)
         614	LOAD_FAST(arg=19, lineno=546)
         616	LOAD_FAST(arg=42, lineno=546)
         618	STORE_SUBSCR(arg=None, lineno=546)
         620	LOAD_FAST(arg=34, lineno=547)
         622	LOAD_FAST(arg=20, lineno=547)
         624	LOAD_FAST(arg=42, lineno=547)
         626	STORE_SUBSCR(arg=None, lineno=547)
         628	LOAD_FAST(arg=35, lineno=548)
         630	LOAD_FAST(arg=21, lineno=548)
         632	LOAD_FAST(arg=42, lineno=548)
         634	STORE_SUBSCR(arg=None, lineno=548)
         636	LOAD_FAST(arg=36, lineno=549)
         638	LOAD_FAST(arg=22, lineno=549)
         640	LOAD_FAST(arg=42, lineno=549)
         642	STORE_SUBSCR(arg=None, lineno=549)
         644	LOAD_FAST(arg=37, lineno=550)
         646	LOAD_FAST(arg=23, lineno=550)
         648	LOAD_FAST(arg=42, lineno=550)
         650	STORE_SUBSCR(arg=None, lineno=550)
         652	JUMP_ABSOLUTE(arg=260, lineno=550)
>        656	LOAD_GLOBAL(arg=12, lineno=556)
         658	LOAD_FAST(arg=13, lineno=556)
         660	CALL_FUNCTION(arg=1, lineno=556)
         662	STORE_FAST(arg=47, lineno=556)
         664	LOAD_FAST(arg=47, lineno=557)
         666	LOAD_FAST(arg=13, lineno=557)
         668	LOAD_FAST(arg=14, lineno=557)
         670	LOAD_FAST(arg=15, lineno=557)
         672	LOAD_FAST(arg=16, lineno=557)
         674	LOAD_FAST(arg=17, lineno=557)
         676	LOAD_FAST(arg=18, lineno=557)
         678	LOAD_FAST(arg=19, lineno=557)
         680	LOAD_FAST(arg=20, lineno=557)
         682	LOAD_FAST(arg=21, lineno=557)
         684	LOAD_FAST(arg=22, lineno=557)
         686	LOAD_FAST(arg=23, lineno=557)
         688	BUILD_TUPLE(arg=12, lineno=557)
         690	RETURN_VALUE(arg=None, lineno=557)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=436)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=436)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=436)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=6, lineno=436)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=436)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$Length6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION_KW(arg=1, lineno=436)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$Length6.2', '$const8.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=STORE_FAST(arg=13, lineno=436)
2023-02-02 09:41 DEBUG stack ['$10call_function_kw.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=437)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=437)
2023-02-02 09:41 DEBUG stack ['$14load_global.5']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=6, lineno=437)
2023-02-02 09:41 DEBUG stack ['$16load_attr.6']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=437)
2023-02-02 09:41 DEBUG stack ['$16load_attr.6', '$Length18.7']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=CALL_FUNCTION_KW(arg=1, lineno=437)
2023-02-02 09:41 DEBUG stack ['$16load_attr.6', '$Length18.7', '$const20.8']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=STORE_FAST(arg=14, lineno=437)
2023-02-02 09:41 DEBUG stack ['$22call_function_kw.9']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=438)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_ATTR(arg=1, lineno=438)
2023-02-02 09:41 DEBUG stack ['$26load_global.10']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=6, lineno=438)
2023-02-02 09:41 DEBUG stack ['$28load_attr.11']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=438)
2023-02-02 09:41 DEBUG stack ['$28load_attr.11', '$Length30.12']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=CALL_FUNCTION_KW(arg=1, lineno=438)
2023-02-02 09:41 DEBUG stack ['$28load_attr.11', '$Length30.12', '$const32.13']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=STORE_FAST(arg=15, lineno=438)
2023-02-02 09:41 DEBUG stack ['$34call_function_kw.14']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=439)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=1, lineno=439)
2023-02-02 09:41 DEBUG stack ['$38load_global.15']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=6, lineno=439)
2023-02-02 09:41 DEBUG stack ['$40load_attr.16']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=439)
2023-02-02 09:41 DEBUG stack ['$40load_attr.16', '$Length42.17']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=CALL_FUNCTION_KW(arg=1, lineno=439)
2023-02-02 09:41 DEBUG stack ['$40load_attr.16', '$Length42.17', '$const44.18']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=STORE_FAST(arg=16, lineno=439)
2023-02-02 09:41 DEBUG stack ['$46call_function_kw.19']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=440)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_ATTR(arg=1, lineno=440)
2023-02-02 09:41 DEBUG stack ['$50load_global.20']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=6, lineno=440)
2023-02-02 09:41 DEBUG stack ['$52load_attr.21']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=LOAD_CONST(arg=1, lineno=440)
2023-02-02 09:41 DEBUG stack ['$52load_attr.21', '$Length54.22']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=CALL_FUNCTION_KW(arg=1, lineno=440)
2023-02-02 09:41 DEBUG stack ['$52load_attr.21', '$Length54.22', '$const56.23']
2023-02-02 09:41 DEBUG dispatch pc=60, inst=STORE_FAST(arg=17, lineno=440)
2023-02-02 09:41 DEBUG stack ['$58call_function_kw.24']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_GLOBAL(arg=0, lineno=441)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=441)
2023-02-02 09:41 DEBUG stack ['$62load_global.25']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=441)
2023-02-02 09:41 DEBUG stack ['$64load_attr.26']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=441)
2023-02-02 09:41 DEBUG stack ['$64load_attr.26', '$Length66.27']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=CALL_FUNCTION_KW(arg=1, lineno=441)
2023-02-02 09:41 DEBUG stack ['$64load_attr.26', '$Length66.27', '$const68.28']
2023-02-02 09:41 DEBUG dispatch pc=72, inst=STORE_FAST(arg=18, lineno=441)
2023-02-02 09:41 DEBUG stack ['$70call_function_kw.29']
2023-02-02 09:41 DEBUG dispatch pc=74, inst=LOAD_GLOBAL(arg=0, lineno=442)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=76, inst=LOAD_ATTR(arg=1, lineno=442)
2023-02-02 09:41 DEBUG stack ['$74load_global.30']
2023-02-02 09:41 DEBUG dispatch pc=78, inst=LOAD_FAST(arg=6, lineno=442)
2023-02-02 09:41 DEBUG stack ['$76load_attr.31']
2023-02-02 09:41 DEBUG dispatch pc=80, inst=LOAD_CONST(arg=1, lineno=442)
2023-02-02 09:41 DEBUG stack ['$76load_attr.31', '$Length78.32']
2023-02-02 09:41 DEBUG dispatch pc=82, inst=CALL_FUNCTION_KW(arg=1, lineno=442)
2023-02-02 09:41 DEBUG stack ['$76load_attr.31', '$Length78.32', '$const80.33']
2023-02-02 09:41 DEBUG dispatch pc=84, inst=STORE_FAST(arg=19, lineno=442)
2023-02-02 09:41 DEBUG stack ['$82call_function_kw.34']
2023-02-02 09:41 DEBUG dispatch pc=86, inst=LOAD_GLOBAL(arg=0, lineno=443)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=88, inst=LOAD_ATTR(arg=1, lineno=443)
2023-02-02 09:41 DEBUG stack ['$86load_global.35']
2023-02-02 09:41 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=443)
2023-02-02 09:41 DEBUG stack ['$88load_attr.36']
2023-02-02 09:41 DEBUG dispatch pc=92, inst=LOAD_CONST(arg=1, lineno=443)
2023-02-02 09:41 DEBUG stack ['$88load_attr.36', '$Length90.37']
2023-02-02 09:41 DEBUG dispatch pc=94, inst=CALL_FUNCTION_KW(arg=1, lineno=443)
2023-02-02 09:41 DEBUG stack ['$88load_attr.36', '$Length90.37', '$const92.38']
2023-02-02 09:41 DEBUG dispatch pc=96, inst=STORE_FAST(arg=20, lineno=443)
2023-02-02 09:41 DEBUG stack ['$94call_function_kw.39']
2023-02-02 09:41 DEBUG dispatch pc=98, inst=LOAD_GLOBAL(arg=0, lineno=444)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=100, inst=LOAD_ATTR(arg=1, lineno=444)
2023-02-02 09:41 DEBUG stack ['$98load_global.40']
2023-02-02 09:41 DEBUG dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=444)
2023-02-02 09:41 DEBUG stack ['$100load_attr.41']
2023-02-02 09:41 DEBUG dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=444)
2023-02-02 09:41 DEBUG stack ['$100load_attr.41', '$Length102.42']
2023-02-02 09:41 DEBUG dispatch pc=106, inst=CALL_FUNCTION_KW(arg=1, lineno=444)
2023-02-02 09:41 DEBUG stack ['$100load_attr.41', '$Length102.42', '$const104.43']
2023-02-02 09:41 DEBUG dispatch pc=108, inst=STORE_FAST(arg=21, lineno=444)
2023-02-02 09:41 DEBUG stack ['$106call_function_kw.44']
2023-02-02 09:41 DEBUG dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=445)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=112, inst=LOAD_ATTR(arg=1, lineno=445)
2023-02-02 09:41 DEBUG stack ['$110load_global.45']
2023-02-02 09:41 DEBUG dispatch pc=114, inst=LOAD_FAST(arg=6, lineno=445)
2023-02-02 09:41 DEBUG stack ['$112load_attr.46']
2023-02-02 09:41 DEBUG dispatch pc=116, inst=LOAD_CONST(arg=1, lineno=445)
2023-02-02 09:41 DEBUG stack ['$112load_attr.46', '$Length114.47']
2023-02-02 09:41 DEBUG dispatch pc=118, inst=CALL_FUNCTION_KW(arg=1, lineno=445)
2023-02-02 09:41 DEBUG stack ['$112load_attr.46', '$Length114.47', '$const116.48']
2023-02-02 09:41 DEBUG dispatch pc=120, inst=STORE_FAST(arg=22, lineno=445)
2023-02-02 09:41 DEBUG stack ['$118call_function_kw.49']
2023-02-02 09:41 DEBUG dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=446)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=124, inst=LOAD_ATTR(arg=1, lineno=446)
2023-02-02 09:41 DEBUG stack ['$122load_global.50']
2023-02-02 09:41 DEBUG dispatch pc=126, inst=LOAD_FAST(arg=6, lineno=446)
2023-02-02 09:41 DEBUG stack ['$124load_attr.51']
2023-02-02 09:41 DEBUG dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=446)
2023-02-02 09:41 DEBUG stack ['$124load_attr.51', '$Length126.52']
2023-02-02 09:41 DEBUG dispatch pc=130, inst=CALL_FUNCTION_KW(arg=1, lineno=446)
2023-02-02 09:41 DEBUG stack ['$124load_attr.51', '$Length126.52', '$const128.53']
2023-02-02 09:41 DEBUG dispatch pc=132, inst=STORE_FAST(arg=23, lineno=446)
2023-02-02 09:41 DEBUG stack ['$130call_function_kw.54']
2023-02-02 09:41 DEBUG dispatch pc=134, inst=LOAD_CONST(arg=2, lineno=449)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=136, inst=STORE_FAST(arg=24, lineno=449)
2023-02-02 09:41 DEBUG stack ['$const134.55']
2023-02-02 09:41 DEBUG dispatch pc=138, inst=LOAD_CONST(arg=2, lineno=450)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=140, inst=STORE_FAST(arg=25, lineno=450)
2023-02-02 09:41 DEBUG stack ['$const138.56']
2023-02-02 09:41 DEBUG dispatch pc=142, inst=LOAD_CONST(arg=2, lineno=451)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=144, inst=STORE_FAST(arg=26, lineno=451)
2023-02-02 09:41 DEBUG stack ['$const142.57']
2023-02-02 09:41 DEBUG dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=452)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=148, inst=STORE_FAST(arg=27, lineno=452)
2023-02-02 09:41 DEBUG stack ['$const146.58']
2023-02-02 09:41 DEBUG dispatch pc=150, inst=LOAD_CONST(arg=2, lineno=453)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=152, inst=STORE_FAST(arg=28, lineno=453)
2023-02-02 09:41 DEBUG stack ['$const150.59']
2023-02-02 09:41 DEBUG dispatch pc=154, inst=LOAD_CONST(arg=2, lineno=454)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=156, inst=STORE_FAST(arg=29, lineno=454)
2023-02-02 09:41 DEBUG stack ['$const154.60']
2023-02-02 09:41 DEBUG dispatch pc=158, inst=LOAD_FAST(arg=7, lineno=455)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=160, inst=STORE_FAST(arg=30, lineno=455)
2023-02-02 09:41 DEBUG stack ['$init_cash158.61']
2023-02-02 09:41 DEBUG dispatch pc=162, inst=LOAD_CONST(arg=2, lineno=456)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=164, inst=STORE_FAST(arg=31, lineno=456)
2023-02-02 09:41 DEBUG stack ['$const162.62']
2023-02-02 09:41 DEBUG dispatch pc=166, inst=LOAD_FAST(arg=9, lineno=457)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=168, inst=STORE_FAST(arg=32, lineno=457)
2023-02-02 09:41 DEBUG stack ['$size166.63']
2023-02-02 09:41 DEBUG dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=458)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=172, inst=STORE_FAST(arg=33, lineno=458)
2023-02-02 09:41 DEBUG stack ['$size170.64']
2023-02-02 09:41 DEBUG dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=459)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=176, inst=STORE_FAST(arg=34, lineno=459)
2023-02-02 09:41 DEBUG stack ['$const174.65']
2023-02-02 09:41 DEBUG dispatch pc=178, inst=LOAD_CONST(arg=2, lineno=460)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=180, inst=STORE_FAST(arg=35, lineno=460)
2023-02-02 09:41 DEBUG stack ['$const178.66']
2023-02-02 09:41 DEBUG dispatch pc=182, inst=LOAD_CONST(arg=2, lineno=461)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=184, inst=STORE_FAST(arg=36, lineno=461)
2023-02-02 09:41 DEBUG stack ['$const182.67']
2023-02-02 09:41 DEBUG dispatch pc=186, inst=LOAD_CONST(arg=2, lineno=462)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=188, inst=STORE_FAST(arg=37, lineno=462)
2023-02-02 09:41 DEBUG stack ['$const186.68']
2023-02-02 09:41 DEBUG dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=465)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=192, inst=STORE_FAST(arg=8, lineno=465)
2023-02-02 09:41 DEBUG stack ['$slippage190.69']
2023-02-02 09:41 DEBUG dispatch pc=194, inst=LOAD_FAST(arg=10, lineno=466)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=196, inst=STORE_FAST(arg=10, lineno=466)
2023-02-02 09:41 DEBUG stack ['$fee194.70']
2023-02-02 09:41 DEBUG dispatch pc=198, inst=LOAD_CONST(arg=3, lineno=467)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=200, inst=STORE_FAST(arg=38, lineno=467)
2023-02-02 09:41 DEBUG stack ['$const198.71']
2023-02-02 09:41 DEBUG dispatch pc=202, inst=LOAD_GLOBAL(arg=2, lineno=470)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=204, inst=LOAD_FAST(arg=6, lineno=471)
2023-02-02 09:41 DEBUG stack ['$202load_global.72']
2023-02-02 09:41 DEBUG dispatch pc=206, inst=LOAD_FAST(arg=1, lineno=471)
2023-02-02 09:41 DEBUG stack ['$202load_global.72', '$Length204.73']
2023-02-02 09:41 DEBUG dispatch pc=208, inst=LOAD_FAST(arg=2, lineno=471)
2023-02-02 09:41 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74']
2023-02-02 09:41 DEBUG dispatch pc=210, inst=LOAD_FAST(arg=3, lineno=471)
2023-02-02 09:41 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74', '$low_array208.75']
2023-02-02 09:41 DEBUG dispatch pc=212, inst=LOAD_FAST(arg=11, lineno=471)
2023-02-02 09:41 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74', '$low_array208.75', '$close_array210.76']
2023-02-02 09:41 DEBUG dispatch pc=214, inst=CALL_FUNCTION(arg=5, lineno=470)
2023-02-02 09:41 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74', '$low_array208.75', '$close_array210.76', '$ATR_short1212.77']
2023-02-02 09:41 DEBUG dispatch pc=216, inst=STORE_FAST(arg=39, lineno=470)
2023-02-02 09:41 DEBUG stack ['$214call_function.78']
2023-02-02 09:41 DEBUG dispatch pc=218, inst=LOAD_GLOBAL(arg=2, lineno=473)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=220, inst=LOAD_FAST(arg=6, lineno=474)
2023-02-02 09:41 DEBUG stack ['$218load_global.79']
2023-02-02 09:41 DEBUG dispatch pc=222, inst=LOAD_FAST(arg=1, lineno=474)
2023-02-02 09:41 DEBUG stack ['$218load_global.79', '$Length220.80']
2023-02-02 09:41 DEBUG dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=474)
2023-02-02 09:41 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81']
2023-02-02 09:41 DEBUG dispatch pc=226, inst=LOAD_FAST(arg=3, lineno=474)
2023-02-02 09:41 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81', '$low_array224.82']
2023-02-02 09:41 DEBUG dispatch pc=228, inst=LOAD_FAST(arg=12, lineno=474)
2023-02-02 09:41 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81', '$low_array224.82', '$close_array226.83']
2023-02-02 09:41 DEBUG dispatch pc=230, inst=CALL_FUNCTION(arg=5, lineno=473)
2023-02-02 09:41 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81', '$low_array224.82', '$close_array226.83', '$ATR_long2228.84']
2023-02-02 09:41 DEBUG dispatch pc=232, inst=STORE_FAST(arg=40, lineno=473)
2023-02-02 09:41 DEBUG stack ['$230call_function.85']
2023-02-02 09:41 DEBUG dispatch pc=234, inst=LOAD_GLOBAL(arg=3, lineno=477)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=236, inst=LOAD_FAST(arg=1, lineno=478)
2023-02-02 09:41 DEBUG stack ['$234load_global.86']
2023-02-02 09:41 DEBUG dispatch pc=238, inst=LOAD_FAST(arg=4, lineno=478)
2023-02-02 09:41 DEBUG stack ['$234load_global.86', '$high_array236.87']
2023-02-02 09:41 DEBUG dispatch pc=240, inst=LOAD_FAST(arg=39, lineno=478)
2023-02-02 09:41 DEBUG stack ['$234load_global.86', '$high_array236.87', '$highestarr238.88']
2023-02-02 09:41 DEBUG dispatch pc=242, inst=LOAD_FAST(arg=40, lineno=478)
2023-02-02 09:41 DEBUG stack ['$234load_global.86', '$high_array236.87', '$highestarr238.88', '$ATR_short240.89']
2023-02-02 09:41 DEBUG dispatch pc=244, inst=LOAD_FAST(arg=2, lineno=478)
2023-02-02 09:41 DEBUG stack ['$234load_global.86', '$high_array236.87', '$highestarr238.88', '$ATR_short240.89', '$ATR_long242.90']
2023-02-02 09:41 DEBUG dispatch pc=246, inst=LOAD_FAST(arg=5, lineno=478)
2023-02-02 09:41 DEBUG stack ['$234load_global.86', '$high_array236.87', '$highestarr238.88', '$ATR_short240.89', '$ATR_long242.90', '$low_array244.91']
2023-02-02 09:41 DEBUG dispatch pc=248, inst=CALL_FUNCTION(arg=6, lineno=477)
2023-02-02 09:41 DEBUG stack ['$234load_global.86', '$high_array236.87', '$highestarr238.88', '$ATR_short240.89', '$ATR_long242.90', '$low_array244.91', '$lowestarr246.92']
2023-02-02 09:41 DEBUG dispatch pc=250, inst=STORE_FAST(arg=41, lineno=477)
2023-02-02 09:41 DEBUG stack ['$248call_function.93']
2023-02-02 09:41 DEBUG dispatch pc=252, inst=LOAD_GLOBAL(arg=4, lineno=481)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=254, inst=LOAD_FAST(arg=6, lineno=481)
2023-02-02 09:41 DEBUG stack ['$252load_global.94']
2023-02-02 09:41 DEBUG dispatch pc=256, inst=CALL_FUNCTION(arg=1, lineno=481)
2023-02-02 09:41 DEBUG stack ['$252load_global.94', '$Length254.95']
2023-02-02 09:41 DEBUG dispatch pc=258, inst=GET_ITER(arg=None, lineno=481)
2023-02-02 09:41 DEBUG stack ['$256call_function.96']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=260, stack=('$258get_iter.97',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=260 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi260.0']
2023-02-02 09:41 DEBUG dispatch pc=260, inst=FOR_ITER(arg=392, lineno=481)
2023-02-02 09:41 DEBUG stack ['$phi260.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=656, stack=(), blockstack=(), npush=0), Edge(pc=264, stack=('$phi260.0', '$260for_iter.2'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=656 nstack_initial=0), State(pc_initial=264 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=656, inst=LOAD_GLOBAL(arg=12, lineno=556)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=658, inst=LOAD_FAST(arg=13, lineno=556)
2023-02-02 09:41 DEBUG stack ['$656load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=660, inst=CALL_FUNCTION(arg=1, lineno=556)
2023-02-02 09:41 DEBUG stack ['$656load_global.0', '$marketpostion_array658.1']
2023-02-02 09:41 DEBUG dispatch pc=662, inst=STORE_FAST(arg=47, lineno=556)
2023-02-02 09:41 DEBUG stack ['$660call_function.2']
2023-02-02 09:41 DEBUG dispatch pc=664, inst=LOAD_FAST(arg=47, lineno=557)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=666, inst=LOAD_FAST(arg=13, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3']
2023-02-02 09:41 DEBUG dispatch pc=668, inst=LOAD_FAST(arg=14, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4']
2023-02-02 09:41 DEBUG dispatch pc=670, inst=LOAD_FAST(arg=15, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5']
2023-02-02 09:41 DEBUG dispatch pc=672, inst=LOAD_FAST(arg=16, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6']
2023-02-02 09:41 DEBUG dispatch pc=674, inst=LOAD_FAST(arg=17, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7']
2023-02-02 09:41 DEBUG dispatch pc=676, inst=LOAD_FAST(arg=18, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8']
2023-02-02 09:41 DEBUG dispatch pc=678, inst=LOAD_FAST(arg=19, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8', '$ClosedPostionprofit_array676.9']
2023-02-02 09:41 DEBUG dispatch pc=680, inst=LOAD_FAST(arg=20, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8', '$ClosedPostionprofit_array676.9', '$profit_array678.10']
2023-02-02 09:41 DEBUG dispatch pc=682, inst=LOAD_FAST(arg=21, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8', '$ClosedPostionprofit_array676.9', '$profit_array678.10', '$Gross_profit_array680.11']
2023-02-02 09:41 DEBUG dispatch pc=684, inst=LOAD_FAST(arg=22, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8', '$ClosedPostionprofit_array676.9', '$profit_array678.10', '$Gross_profit_array680.11', '$Gross_loss_array682.12']
2023-02-02 09:41 DEBUG dispatch pc=686, inst=LOAD_FAST(arg=23, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8', '$ClosedPostionprofit_array676.9', '$profit_array678.10', '$Gross_profit_array680.11', '$Gross_loss_array682.12', '$all_Fees_array684.13']
2023-02-02 09:41 DEBUG dispatch pc=688, inst=BUILD_TUPLE(arg=12, lineno=557)
2023-02-02 09:41 DEBUG stack ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8', '$ClosedPostionprofit_array676.9', '$profit_array678.10', '$Gross_profit_array680.11', '$Gross_loss_array682.12', '$all_Fees_array684.13', '$netprofit_array686.14']
2023-02-02 09:41 DEBUG dispatch pc=690, inst=RETURN_VALUE(arg=None, lineno=557)
2023-02-02 09:41 DEBUG stack ['$688build_tuple.15']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=264 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi264.0', '$phi264.1']
2023-02-02 09:41 DEBUG dispatch pc=264, inst=STORE_FAST(arg=42, lineno=481)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$phi264.1']
2023-02-02 09:41 DEBUG dispatch pc=266, inst=LOAD_FAST(arg=0, lineno=482)
2023-02-02 09:41 DEBUG stack ['$phi264.0']
2023-02-02 09:41 DEBUG dispatch pc=268, inst=LOAD_FAST(arg=42, lineno=482)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$open_array266.2']
2023-02-02 09:41 DEBUG dispatch pc=270, inst=BINARY_SUBSCR(arg=None, lineno=482)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$open_array266.2', '$i268.3']
2023-02-02 09:41 DEBUG dispatch pc=272, inst=STORE_FAST(arg=43, lineno=482)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$270binary_subscr.4']
2023-02-02 09:41 DEBUG dispatch pc=274, inst=LOAD_FAST(arg=41, lineno=483)
2023-02-02 09:41 DEBUG stack ['$phi264.0']
2023-02-02 09:41 DEBUG dispatch pc=276, inst=LOAD_FAST(arg=42, lineno=483)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$shiftorder274.5']
2023-02-02 09:41 DEBUG dispatch pc=278, inst=BINARY_SUBSCR(arg=None, lineno=483)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$shiftorder274.5', '$i276.6']
2023-02-02 09:41 DEBUG dispatch pc=280, inst=STORE_FAST(arg=44, lineno=483)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$278binary_subscr.7']
2023-02-02 09:41 DEBUG dispatch pc=282, inst=LOAD_FAST(arg=24, lineno=484)
2023-02-02 09:41 DEBUG stack ['$phi264.0']
2023-02-02 09:41 DEBUG dispatch pc=284, inst=STORE_FAST(arg=45, lineno=484)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$marketpostion282.8']
2023-02-02 09:41 DEBUG dispatch pc=286, inst=LOAD_FAST(arg=25, lineno=485)
2023-02-02 09:41 DEBUG stack ['$phi264.0']
2023-02-02 09:41 DEBUG dispatch pc=288, inst=STORE_FAST(arg=46, lineno=485)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$entryprice286.9']
2023-02-02 09:41 DEBUG dispatch pc=290, inst=LOAD_FAST(arg=44, lineno=488)
2023-02-02 09:41 DEBUG stack ['$phi264.0']
2023-02-02 09:41 DEBUG dispatch pc=292, inst=LOAD_CONST(arg=4, lineno=488)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$current_order290.10']
2023-02-02 09:41 DEBUG dispatch pc=294, inst=COMPARE_OP(arg=2, lineno=488)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$current_order290.10', '$const292.11']
2023-02-02 09:41 DEBUG dispatch pc=296, inst=POP_JUMP_IF_FALSE(arg=304, lineno=488)
2023-02-02 09:41 DEBUG stack ['$phi264.0', '$294compare_op.12']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=300, stack=('$phi264.0',), blockstack=(), npush=0), Edge(pc=304, stack=('$phi264.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=300 nstack_initial=1), State(pc_initial=304 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi300.0']
2023-02-02 09:41 DEBUG dispatch pc=300, inst=LOAD_CONST(arg=4, lineno=489)
2023-02-02 09:41 DEBUG stack ['$phi300.0']
2023-02-02 09:41 DEBUG dispatch pc=302, inst=STORE_FAST(arg=24, lineno=489)
2023-02-02 09:41 DEBUG stack ['$phi300.0', '$const300.1']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=304, stack=('$phi300.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=304 nstack_initial=1), State(pc_initial=304 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi304.0']
2023-02-02 09:41 DEBUG dispatch pc=304, inst=LOAD_FAST(arg=44, lineno=490)
2023-02-02 09:41 DEBUG stack ['$phi304.0']
2023-02-02 09:41 DEBUG dispatch pc=306, inst=LOAD_CONST(arg=5, lineno=490)
2023-02-02 09:41 DEBUG stack ['$phi304.0', '$current_order304.1']
2023-02-02 09:41 DEBUG dispatch pc=308, inst=COMPARE_OP(arg=2, lineno=490)
2023-02-02 09:41 DEBUG stack ['$phi304.0', '$current_order304.1', '$const306.2']
2023-02-02 09:41 DEBUG dispatch pc=310, inst=POP_JUMP_IF_FALSE(arg=318, lineno=490)
2023-02-02 09:41 DEBUG stack ['$phi304.0', '$308compare_op.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=314, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=318, stack=('$phi304.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=304 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=314 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi314.0']
2023-02-02 09:41 DEBUG dispatch pc=314, inst=LOAD_CONST(arg=2, lineno=491)
2023-02-02 09:41 DEBUG stack ['$phi314.0']
2023-02-02 09:41 DEBUG dispatch pc=316, inst=STORE_FAST(arg=24, lineno=491)
2023-02-02 09:41 DEBUG stack ['$phi314.0', '$const314.1']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=318, stack=('$phi314.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=318 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=318, inst=LOAD_FAST(arg=24, lineno=493)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=320, inst=LOAD_FAST(arg=13, lineno=493)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$marketpostion318.1']
2023-02-02 09:41 DEBUG dispatch pc=322, inst=LOAD_FAST(arg=42, lineno=493)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$marketpostion318.1', '$marketpostion_array320.2']
2023-02-02 09:41 DEBUG dispatch pc=324, inst=STORE_SUBSCR(arg=None, lineno=493)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$marketpostion318.1', '$marketpostion_array320.2', '$i322.3']
2023-02-02 09:41 DEBUG dispatch pc=326, inst=LOAD_GLOBAL(arg=5, lineno=496)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=328, inst=LOAD_FAST(arg=25, lineno=497)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$326load_global.4']
2023-02-02 09:41 DEBUG dispatch pc=330, inst=LOAD_FAST(arg=43, lineno=497)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$326load_global.4', '$entryprice328.5']
2023-02-02 09:41 DEBUG dispatch pc=332, inst=LOAD_FAST(arg=24, lineno=497)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$326load_global.4', '$entryprice328.5', '$Open330.6']
2023-02-02 09:41 DEBUG dispatch pc=334, inst=LOAD_FAST(arg=45, lineno=497)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$326load_global.4', '$entryprice328.5', '$Open330.6', '$marketpostion332.7']
2023-02-02 09:41 DEBUG dispatch pc=336, inst=LOAD_FAST(arg=8, lineno=497)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$326load_global.4', '$entryprice328.5', '$Open330.6', '$marketpostion332.7', '$last_marketpostion334.8']
2023-02-02 09:41 DEBUG dispatch pc=338, inst=LOAD_FAST(arg=38, lineno=497)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$326load_global.4', '$entryprice328.5', '$Open330.6', '$marketpostion332.7', '$last_marketpostion334.8', '$slippage336.9']
2023-02-02 09:41 DEBUG dispatch pc=340, inst=CALL_FUNCTION(arg=6, lineno=496)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$326load_global.4', '$entryprice328.5', '$Open330.6', '$marketpostion332.7', '$last_marketpostion334.8', '$slippage336.9', '$direction338.10']
2023-02-02 09:41 DEBUG dispatch pc=342, inst=STORE_FAST(arg=25, lineno=496)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$340call_function.11']
2023-02-02 09:41 DEBUG dispatch pc=344, inst=LOAD_GLOBAL(arg=6, lineno=500)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=346, inst=LOAD_FAST(arg=26, lineno=501)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$344load_global.12']
2023-02-02 09:41 DEBUG dispatch pc=348, inst=LOAD_FAST(arg=43, lineno=501)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$344load_global.12', '$exitsprice346.13']
2023-02-02 09:41 DEBUG dispatch pc=350, inst=LOAD_FAST(arg=24, lineno=501)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$344load_global.12', '$exitsprice346.13', '$Open348.14']
2023-02-02 09:41 DEBUG dispatch pc=352, inst=LOAD_FAST(arg=45, lineno=501)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$344load_global.12', '$exitsprice346.13', '$Open348.14', '$marketpostion350.15']
2023-02-02 09:41 DEBUG dispatch pc=354, inst=LOAD_FAST(arg=8, lineno=501)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$344load_global.12', '$exitsprice346.13', '$Open348.14', '$marketpostion350.15', '$last_marketpostion352.16']
2023-02-02 09:41 DEBUG dispatch pc=356, inst=LOAD_FAST(arg=38, lineno=501)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$344load_global.12', '$exitsprice346.13', '$Open348.14', '$marketpostion350.15', '$last_marketpostion352.16', '$slippage354.17']
2023-02-02 09:41 DEBUG dispatch pc=358, inst=CALL_FUNCTION(arg=6, lineno=500)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$344load_global.12', '$exitsprice346.13', '$Open348.14', '$marketpostion350.15', '$last_marketpostion352.16', '$slippage354.17', '$direction356.18']
2023-02-02 09:41 DEBUG dispatch pc=360, inst=STORE_FAST(arg=26, lineno=500)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$358call_function.19']
2023-02-02 09:41 DEBUG dispatch pc=362, inst=LOAD_GLOBAL(arg=7, lineno=504)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=364, inst=LOAD_FAST(arg=27, lineno=505)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$362load_global.20']
2023-02-02 09:41 DEBUG dispatch pc=366, inst=LOAD_FAST(arg=10, lineno=505)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$362load_global.20', '$buy_Fees364.21']
2023-02-02 09:41 DEBUG dispatch pc=368, inst=LOAD_FAST(arg=32, lineno=505)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$362load_global.20', '$buy_Fees364.21', '$fee366.22']
2023-02-02 09:41 DEBUG dispatch pc=370, inst=LOAD_FAST(arg=43, lineno=505)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$362load_global.20', '$buy_Fees364.21', '$fee366.22', '$buy_sizes368.23']
2023-02-02 09:41 DEBUG dispatch pc=372, inst=LOAD_FAST(arg=24, lineno=505)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$362load_global.20', '$buy_Fees364.21', '$fee366.22', '$buy_sizes368.23', '$Open370.24']
2023-02-02 09:41 DEBUG dispatch pc=374, inst=LOAD_FAST(arg=45, lineno=505)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$362load_global.20', '$buy_Fees364.21', '$fee366.22', '$buy_sizes368.23', '$Open370.24', '$marketpostion372.25']
2023-02-02 09:41 DEBUG dispatch pc=376, inst=CALL_FUNCTION(arg=6, lineno=504)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$362load_global.20', '$buy_Fees364.21', '$fee366.22', '$buy_sizes368.23', '$Open370.24', '$marketpostion372.25', '$last_marketpostion374.26']
2023-02-02 09:41 DEBUG dispatch pc=378, inst=STORE_FAST(arg=27, lineno=504)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$376call_function.27']
2023-02-02 09:41 DEBUG dispatch pc=380, inst=LOAD_GLOBAL(arg=8, lineno=508)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=382, inst=LOAD_FAST(arg=28, lineno=509)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$380load_global.28']
2023-02-02 09:41 DEBUG dispatch pc=384, inst=LOAD_FAST(arg=10, lineno=509)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$380load_global.28', '$sell_Fees382.29']
2023-02-02 09:41 DEBUG dispatch pc=386, inst=LOAD_FAST(arg=33, lineno=509)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$380load_global.28', '$sell_Fees382.29', '$fee384.30']
2023-02-02 09:41 DEBUG dispatch pc=388, inst=LOAD_FAST(arg=43, lineno=509)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$380load_global.28', '$sell_Fees382.29', '$fee384.30', '$sell_sizes386.31']
2023-02-02 09:41 DEBUG dispatch pc=390, inst=LOAD_FAST(arg=24, lineno=509)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$380load_global.28', '$sell_Fees382.29', '$fee384.30', '$sell_sizes386.31', '$Open388.32']
2023-02-02 09:41 DEBUG dispatch pc=392, inst=LOAD_FAST(arg=45, lineno=509)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$380load_global.28', '$sell_Fees382.29', '$fee384.30', '$sell_sizes386.31', '$Open388.32', '$marketpostion390.33']
2023-02-02 09:41 DEBUG dispatch pc=394, inst=CALL_FUNCTION(arg=6, lineno=508)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$380load_global.28', '$sell_Fees382.29', '$fee384.30', '$sell_sizes386.31', '$Open388.32', '$marketpostion390.33', '$last_marketpostion392.34']
2023-02-02 09:41 DEBUG dispatch pc=396, inst=STORE_FAST(arg=28, lineno=508)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$394call_function.35']
2023-02-02 09:41 DEBUG dispatch pc=398, inst=LOAD_GLOBAL(arg=9, lineno=512)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=400, inst=LOAD_FAST(arg=29, lineno=513)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36']
2023-02-02 09:41 DEBUG dispatch pc=402, inst=LOAD_FAST(arg=24, lineno=513)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36', '$OpenPostionprofit400.37']
2023-02-02 09:41 DEBUG dispatch pc=404, inst=LOAD_FAST(arg=45, lineno=513)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36', '$OpenPostionprofit400.37', '$marketpostion402.38']
2023-02-02 09:41 DEBUG dispatch pc=406, inst=LOAD_FAST(arg=27, lineno=513)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36', '$OpenPostionprofit400.37', '$marketpostion402.38', '$last_marketpostion404.39']
2023-02-02 09:41 DEBUG dispatch pc=408, inst=LOAD_FAST(arg=43, lineno=513)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36', '$OpenPostionprofit400.37', '$marketpostion402.38', '$last_marketpostion404.39', '$buy_Fees406.40']
2023-02-02 09:41 DEBUG dispatch pc=410, inst=LOAD_FAST(arg=32, lineno=513)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36', '$OpenPostionprofit400.37', '$marketpostion402.38', '$last_marketpostion404.39', '$buy_Fees406.40', '$Open408.41']
2023-02-02 09:41 DEBUG dispatch pc=412, inst=LOAD_FAST(arg=25, lineno=513)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36', '$OpenPostionprofit400.37', '$marketpostion402.38', '$last_marketpostion404.39', '$buy_Fees406.40', '$Open408.41', '$buy_sizes410.42']
2023-02-02 09:41 DEBUG dispatch pc=414, inst=CALL_FUNCTION(arg=7, lineno=512)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$398load_global.36', '$OpenPostionprofit400.37', '$marketpostion402.38', '$last_marketpostion404.39', '$buy_Fees406.40', '$Open408.41', '$buy_sizes410.42', '$entryprice412.43']
2023-02-02 09:41 DEBUG dispatch pc=416, inst=STORE_FAST(arg=29, lineno=512)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$414call_function.44']
2023-02-02 09:41 DEBUG dispatch pc=418, inst=LOAD_GLOBAL(arg=10, lineno=516)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=420, inst=LOAD_FAST(arg=30, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45']
2023-02-02 09:41 DEBUG dispatch pc=422, inst=LOAD_FAST(arg=24, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46']
2023-02-02 09:41 DEBUG dispatch pc=424, inst=LOAD_FAST(arg=45, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46', '$marketpostion422.47']
2023-02-02 09:41 DEBUG dispatch pc=426, inst=LOAD_FAST(arg=27, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46', '$marketpostion422.47', '$last_marketpostion424.48']
2023-02-02 09:41 DEBUG dispatch pc=428, inst=LOAD_FAST(arg=28, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46', '$marketpostion422.47', '$last_marketpostion424.48', '$buy_Fees426.49']
2023-02-02 09:41 DEBUG dispatch pc=430, inst=LOAD_FAST(arg=33, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46', '$marketpostion422.47', '$last_marketpostion424.48', '$buy_Fees426.49', '$sell_Fees428.50']
2023-02-02 09:41 DEBUG dispatch pc=432, inst=LOAD_FAST(arg=46, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46', '$marketpostion422.47', '$last_marketpostion424.48', '$buy_Fees426.49', '$sell_Fees428.50', '$sell_sizes430.51']
2023-02-02 09:41 DEBUG dispatch pc=434, inst=LOAD_FAST(arg=26, lineno=517)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46', '$marketpostion422.47', '$last_marketpostion424.48', '$buy_Fees426.49', '$sell_Fees428.50', '$sell_sizes430.51', '$last_entryprice432.52']
2023-02-02 09:41 DEBUG dispatch pc=436, inst=CALL_FUNCTION(arg=8, lineno=516)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$418load_global.45', '$ClosedPostionprofit420.46', '$marketpostion422.47', '$last_marketpostion424.48', '$buy_Fees426.49', '$sell_Fees428.50', '$sell_sizes430.51', '$last_entryprice432.52', '$exitsprice434.53']
2023-02-02 09:41 DEBUG dispatch pc=438, inst=STORE_FAST(arg=30, lineno=516)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$436call_function.54']
2023-02-02 09:41 DEBUG dispatch pc=440, inst=LOAD_GLOBAL(arg=11, lineno=520)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=442, inst=LOAD_FAST(arg=31, lineno=521)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$440load_global.55']
2023-02-02 09:41 DEBUG dispatch pc=444, inst=LOAD_FAST(arg=24, lineno=521)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$440load_global.55', '$profit442.56']
2023-02-02 09:41 DEBUG dispatch pc=446, inst=LOAD_FAST(arg=45, lineno=521)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$440load_global.55', '$profit442.56', '$marketpostion444.57']
2023-02-02 09:41 DEBUG dispatch pc=448, inst=LOAD_FAST(arg=43, lineno=521)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$440load_global.55', '$profit442.56', '$marketpostion444.57', '$last_marketpostion446.58']
2023-02-02 09:41 DEBUG dispatch pc=450, inst=LOAD_FAST(arg=33, lineno=521)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$440load_global.55', '$profit442.56', '$marketpostion444.57', '$last_marketpostion446.58', '$Open448.59']
2023-02-02 09:41 DEBUG dispatch pc=452, inst=LOAD_FAST(arg=46, lineno=521)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$440load_global.55', '$profit442.56', '$marketpostion444.57', '$last_marketpostion446.58', '$Open448.59', '$sell_sizes450.60']
2023-02-02 09:41 DEBUG dispatch pc=454, inst=CALL_FUNCTION(arg=6, lineno=520)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$440load_global.55', '$profit442.56', '$marketpostion444.57', '$last_marketpostion446.58', '$Open448.59', '$sell_sizes450.60', '$last_entryprice452.61']
2023-02-02 09:41 DEBUG dispatch pc=456, inst=STORE_FAST(arg=31, lineno=520)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$454call_function.62']
2023-02-02 09:41 DEBUG dispatch pc=458, inst=LOAD_FAST(arg=31, lineno=524)
2023-02-02 09:41 DEBUG stack ['$phi318.0']
2023-02-02 09:41 DEBUG dispatch pc=460, inst=LOAD_CONST(arg=2, lineno=524)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$profit458.63']
2023-02-02 09:41 DEBUG dispatch pc=462, inst=COMPARE_OP(arg=4, lineno=524)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$profit458.63', '$const460.64']
2023-02-02 09:41 DEBUG dispatch pc=464, inst=POP_JUMP_IF_FALSE(arg=476, lineno=524)
2023-02-02 09:41 DEBUG stack ['$phi318.0', '$462compare_op.65']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=468, stack=('$phi318.0',), blockstack=(), npush=0), Edge(pc=476, stack=('$phi318.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=318 nstack_initial=1), State(pc_initial=468 nstack_initial=1), State(pc_initial=476 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=468 nstack_initial=1), State(pc_initial=476 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi468.0']
2023-02-02 09:41 DEBUG dispatch pc=468, inst=LOAD_FAST(arg=34, lineno=525)
2023-02-02 09:41 DEBUG stack ['$phi468.0']
2023-02-02 09:41 DEBUG dispatch pc=470, inst=LOAD_FAST(arg=31, lineno=525)
2023-02-02 09:41 DEBUG stack ['$phi468.0', '$Gross_profit468.1']
2023-02-02 09:41 DEBUG dispatch pc=472, inst=BINARY_ADD(arg=None, lineno=525)
2023-02-02 09:41 DEBUG stack ['$phi468.0', '$Gross_profit468.1', '$profit470.2']
2023-02-02 09:41 DEBUG dispatch pc=474, inst=STORE_FAST(arg=34, lineno=525)
2023-02-02 09:41 DEBUG stack ['$phi468.0', '$472binary_add.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=476, stack=('$phi468.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=476 nstack_initial=1), State(pc_initial=476 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi476.0']
2023-02-02 09:41 DEBUG dispatch pc=476, inst=LOAD_FAST(arg=31, lineno=528)
2023-02-02 09:41 DEBUG stack ['$phi476.0']
2023-02-02 09:41 DEBUG dispatch pc=478, inst=LOAD_CONST(arg=2, lineno=528)
2023-02-02 09:41 DEBUG stack ['$phi476.0', '$profit476.1']
2023-02-02 09:41 DEBUG dispatch pc=480, inst=COMPARE_OP(arg=0, lineno=528)
2023-02-02 09:41 DEBUG stack ['$phi476.0', '$profit476.1', '$const478.2']
2023-02-02 09:41 DEBUG dispatch pc=482, inst=POP_JUMP_IF_FALSE(arg=494, lineno=528)
2023-02-02 09:41 DEBUG stack ['$phi476.0', '$480compare_op.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=486, stack=('$phi476.0',), blockstack=(), npush=0), Edge(pc=494, stack=('$phi476.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=476 nstack_initial=1), State(pc_initial=486 nstack_initial=1), State(pc_initial=494 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=486 nstack_initial=1), State(pc_initial=494 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi486.0']
2023-02-02 09:41 DEBUG dispatch pc=486, inst=LOAD_FAST(arg=35, lineno=529)
2023-02-02 09:41 DEBUG stack ['$phi486.0']
2023-02-02 09:41 DEBUG dispatch pc=488, inst=LOAD_FAST(arg=31, lineno=529)
2023-02-02 09:41 DEBUG stack ['$phi486.0', '$Gross_loss486.1']
2023-02-02 09:41 DEBUG dispatch pc=490, inst=BINARY_ADD(arg=None, lineno=529)
2023-02-02 09:41 DEBUG stack ['$phi486.0', '$Gross_loss486.1', '$profit488.2']
2023-02-02 09:41 DEBUG dispatch pc=492, inst=STORE_FAST(arg=35, lineno=529)
2023-02-02 09:41 DEBUG stack ['$phi486.0', '$490binary_add.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=494, stack=('$phi486.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=494 nstack_initial=1), State(pc_initial=494 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi494.0']
2023-02-02 09:41 DEBUG dispatch pc=494, inst=LOAD_FAST(arg=24, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi494.0']
2023-02-02 09:41 DEBUG dispatch pc=496, inst=LOAD_CONST(arg=4, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi494.0', '$marketpostion494.1']
2023-02-02 09:41 DEBUG dispatch pc=498, inst=COMPARE_OP(arg=2, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi494.0', '$marketpostion494.1', '$const496.2']
2023-02-02 09:41 DEBUG dispatch pc=500, inst=POP_JUMP_IF_FALSE(arg=524, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi494.0', '$498compare_op.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=504, stack=('$phi494.0',), blockstack=(), npush=0), Edge(pc=524, stack=('$phi494.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=494 nstack_initial=1), State(pc_initial=504 nstack_initial=1), State(pc_initial=524 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=504 nstack_initial=1), State(pc_initial=524 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi504.0']
2023-02-02 09:41 DEBUG dispatch pc=504, inst=LOAD_FAST(arg=45, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi504.0']
2023-02-02 09:41 DEBUG dispatch pc=506, inst=LOAD_CONST(arg=2, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi504.0', '$last_marketpostion504.1']
2023-02-02 09:41 DEBUG dispatch pc=508, inst=COMPARE_OP(arg=2, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi504.0', '$last_marketpostion504.1', '$const506.2']
2023-02-02 09:41 DEBUG dispatch pc=510, inst=POP_JUMP_IF_FALSE(arg=524, lineno=532)
2023-02-02 09:41 DEBUG stack ['$phi504.0', '$508compare_op.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=514, stack=('$phi504.0',), blockstack=(), npush=0), Edge(pc=524, stack=('$phi504.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=524 nstack_initial=1), State(pc_initial=514 nstack_initial=1), State(pc_initial=524 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi524.0']
2023-02-02 09:41 DEBUG dispatch pc=524, inst=LOAD_FAST(arg=24, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi524.0']
2023-02-02 09:41 DEBUG dispatch pc=526, inst=LOAD_CONST(arg=2, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi524.0', '$marketpostion524.1']
2023-02-02 09:41 DEBUG dispatch pc=528, inst=COMPARE_OP(arg=2, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi524.0', '$marketpostion524.1', '$const526.2']
2023-02-02 09:41 DEBUG dispatch pc=530, inst=POP_JUMP_IF_FALSE(arg=552, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi524.0', '$528compare_op.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=534, stack=('$phi524.0',), blockstack=(), npush=0), Edge(pc=552, stack=('$phi524.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=514 nstack_initial=1), State(pc_initial=524 nstack_initial=1), State(pc_initial=534 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi514.0']
2023-02-02 09:41 DEBUG dispatch pc=514, inst=LOAD_FAST(arg=36, lineno=533)
2023-02-02 09:41 DEBUG stack ['$phi514.0']
2023-02-02 09:41 DEBUG dispatch pc=516, inst=LOAD_FAST(arg=27, lineno=533)
2023-02-02 09:41 DEBUG stack ['$phi514.0', '$all_Fees514.1']
2023-02-02 09:41 DEBUG dispatch pc=518, inst=BINARY_ADD(arg=None, lineno=533)
2023-02-02 09:41 DEBUG stack ['$phi514.0', '$all_Fees514.1', '$buy_Fees516.2']
2023-02-02 09:41 DEBUG dispatch pc=520, inst=STORE_FAST(arg=36, lineno=533)
2023-02-02 09:41 DEBUG stack ['$phi514.0', '$518binary_add.3']
2023-02-02 09:41 DEBUG dispatch pc=522, inst=JUMP_FORWARD(arg=28, lineno=533)
2023-02-02 09:41 DEBUG stack ['$phi514.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=552, stack=('$phi514.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=524 nstack_initial=1), State(pc_initial=534 nstack_initial=1), State(pc_initial=552 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=534 nstack_initial=1), State(pc_initial=552 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi534.0']
2023-02-02 09:41 DEBUG dispatch pc=534, inst=LOAD_FAST(arg=45, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi534.0']
2023-02-02 09:41 DEBUG dispatch pc=536, inst=LOAD_CONST(arg=4, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi534.0', '$last_marketpostion534.1']
2023-02-02 09:41 DEBUG dispatch pc=538, inst=COMPARE_OP(arg=2, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi534.0', '$last_marketpostion534.1', '$const536.2']
2023-02-02 09:41 DEBUG dispatch pc=540, inst=POP_JUMP_IF_FALSE(arg=552, lineno=534)
2023-02-02 09:41 DEBUG stack ['$phi534.0', '$538compare_op.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=544, stack=('$phi534.0',), blockstack=(), npush=0), Edge(pc=552, stack=('$phi534.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=552 nstack_initial=1), State(pc_initial=552 nstack_initial=1), State(pc_initial=544 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=552, inst=LOAD_FAST(arg=7, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=554, inst=LOAD_FAST(arg=36, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$init_cash552.1']
2023-02-02 09:41 DEBUG dispatch pc=556, inst=BINARY_SUBTRACT(arg=None, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$init_cash552.1', '$all_Fees554.2']
2023-02-02 09:41 DEBUG dispatch pc=558, inst=LOAD_FAST(arg=34, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$556binary_subtract.3']
2023-02-02 09:41 DEBUG dispatch pc=560, inst=BINARY_ADD(arg=None, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$556binary_subtract.3', '$Gross_profit558.4']
2023-02-02 09:41 DEBUG dispatch pc=562, inst=LOAD_FAST(arg=35, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$560binary_add.5']
2023-02-02 09:41 DEBUG dispatch pc=564, inst=BINARY_ADD(arg=None, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$560binary_add.5', '$Gross_loss562.6']
2023-02-02 09:41 DEBUG dispatch pc=566, inst=LOAD_FAST(arg=29, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$564binary_add.7']
2023-02-02 09:41 DEBUG dispatch pc=568, inst=BINARY_ADD(arg=None, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$564binary_add.7', '$OpenPostionprofit566.8']
2023-02-02 09:41 DEBUG dispatch pc=570, inst=STORE_FAST(arg=37, lineno=538)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$568binary_add.9']
2023-02-02 09:41 DEBUG dispatch pc=572, inst=LOAD_FAST(arg=25, lineno=541)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=574, inst=LOAD_FAST(arg=14, lineno=541)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$entryprice572.10']
2023-02-02 09:41 DEBUG dispatch pc=576, inst=LOAD_FAST(arg=42, lineno=541)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$entryprice572.10', '$entryprice_array574.11']
2023-02-02 09:41 DEBUG dispatch pc=578, inst=STORE_SUBSCR(arg=None, lineno=541)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$entryprice572.10', '$entryprice_array574.11', '$i576.12']
2023-02-02 09:41 DEBUG dispatch pc=580, inst=LOAD_FAST(arg=27, lineno=542)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=582, inst=LOAD_FAST(arg=15, lineno=542)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$buy_Fees580.13']
2023-02-02 09:41 DEBUG dispatch pc=584, inst=LOAD_FAST(arg=42, lineno=542)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$buy_Fees580.13', '$buy_Fees_array582.14']
2023-02-02 09:41 DEBUG dispatch pc=586, inst=STORE_SUBSCR(arg=None, lineno=542)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$buy_Fees580.13', '$buy_Fees_array582.14', '$i584.15']
2023-02-02 09:41 DEBUG dispatch pc=588, inst=LOAD_FAST(arg=28, lineno=543)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=590, inst=LOAD_FAST(arg=16, lineno=543)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$sell_Fees588.16']
2023-02-02 09:41 DEBUG dispatch pc=592, inst=LOAD_FAST(arg=42, lineno=543)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$sell_Fees588.16', '$sell_Fees_array590.17']
2023-02-02 09:41 DEBUG dispatch pc=594, inst=STORE_SUBSCR(arg=None, lineno=543)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$sell_Fees588.16', '$sell_Fees_array590.17', '$i592.18']
2023-02-02 09:41 DEBUG dispatch pc=596, inst=LOAD_FAST(arg=29, lineno=544)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=598, inst=LOAD_FAST(arg=17, lineno=544)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$OpenPostionprofit596.19']
2023-02-02 09:41 DEBUG dispatch pc=600, inst=LOAD_FAST(arg=42, lineno=544)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$OpenPostionprofit596.19', '$OpenPostionprofit_array598.20']
2023-02-02 09:41 DEBUG dispatch pc=602, inst=STORE_SUBSCR(arg=None, lineno=544)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$OpenPostionprofit596.19', '$OpenPostionprofit_array598.20', '$i600.21']
2023-02-02 09:41 DEBUG dispatch pc=604, inst=LOAD_FAST(arg=30, lineno=545)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=606, inst=LOAD_FAST(arg=18, lineno=545)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$ClosedPostionprofit604.22']
2023-02-02 09:41 DEBUG dispatch pc=608, inst=LOAD_FAST(arg=42, lineno=545)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$ClosedPostionprofit604.22', '$ClosedPostionprofit_array606.23']
2023-02-02 09:41 DEBUG dispatch pc=610, inst=STORE_SUBSCR(arg=None, lineno=545)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$ClosedPostionprofit604.22', '$ClosedPostionprofit_array606.23', '$i608.24']
2023-02-02 09:41 DEBUG dispatch pc=612, inst=LOAD_FAST(arg=31, lineno=546)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=614, inst=LOAD_FAST(arg=19, lineno=546)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$profit612.25']
2023-02-02 09:41 DEBUG dispatch pc=616, inst=LOAD_FAST(arg=42, lineno=546)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$profit612.25', '$profit_array614.26']
2023-02-02 09:41 DEBUG dispatch pc=618, inst=STORE_SUBSCR(arg=None, lineno=546)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$profit612.25', '$profit_array614.26', '$i616.27']
2023-02-02 09:41 DEBUG dispatch pc=620, inst=LOAD_FAST(arg=34, lineno=547)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=622, inst=LOAD_FAST(arg=20, lineno=547)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$Gross_profit620.28']
2023-02-02 09:41 DEBUG dispatch pc=624, inst=LOAD_FAST(arg=42, lineno=547)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$Gross_profit620.28', '$Gross_profit_array622.29']
2023-02-02 09:41 DEBUG dispatch pc=626, inst=STORE_SUBSCR(arg=None, lineno=547)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$Gross_profit620.28', '$Gross_profit_array622.29', '$i624.30']
2023-02-02 09:41 DEBUG dispatch pc=628, inst=LOAD_FAST(arg=35, lineno=548)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=630, inst=LOAD_FAST(arg=21, lineno=548)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$Gross_loss628.31']
2023-02-02 09:41 DEBUG dispatch pc=632, inst=LOAD_FAST(arg=42, lineno=548)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$Gross_loss628.31', '$Gross_loss_array630.32']
2023-02-02 09:41 DEBUG dispatch pc=634, inst=STORE_SUBSCR(arg=None, lineno=548)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$Gross_loss628.31', '$Gross_loss_array630.32', '$i632.33']
2023-02-02 09:41 DEBUG dispatch pc=636, inst=LOAD_FAST(arg=36, lineno=549)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=638, inst=LOAD_FAST(arg=22, lineno=549)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$all_Fees636.34']
2023-02-02 09:41 DEBUG dispatch pc=640, inst=LOAD_FAST(arg=42, lineno=549)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$all_Fees636.34', '$all_Fees_array638.35']
2023-02-02 09:41 DEBUG dispatch pc=642, inst=STORE_SUBSCR(arg=None, lineno=549)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$all_Fees636.34', '$all_Fees_array638.35', '$i640.36']
2023-02-02 09:41 DEBUG dispatch pc=644, inst=LOAD_FAST(arg=37, lineno=550)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG dispatch pc=646, inst=LOAD_FAST(arg=23, lineno=550)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$netprofit644.37']
2023-02-02 09:41 DEBUG dispatch pc=648, inst=LOAD_FAST(arg=42, lineno=550)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$netprofit644.37', '$netprofit_array646.38']
2023-02-02 09:41 DEBUG dispatch pc=650, inst=STORE_SUBSCR(arg=None, lineno=550)
2023-02-02 09:41 DEBUG stack ['$phi552.0', '$netprofit644.37', '$netprofit_array646.38', '$i648.39']
2023-02-02 09:41 DEBUG dispatch pc=652, inst=JUMP_ABSOLUTE(arg=260, lineno=550)
2023-02-02 09:41 DEBUG stack ['$phi552.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=260, stack=('$phi552.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=552 nstack_initial=1), State(pc_initial=544 nstack_initial=1), State(pc_initial=552 nstack_initial=1), State(pc_initial=260 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=544 nstack_initial=1), State(pc_initial=552 nstack_initial=1), State(pc_initial=260 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi544.0']
2023-02-02 09:41 DEBUG dispatch pc=544, inst=LOAD_FAST(arg=36, lineno=535)
2023-02-02 09:41 DEBUG stack ['$phi544.0']
2023-02-02 09:41 DEBUG dispatch pc=546, inst=LOAD_FAST(arg=28, lineno=535)
2023-02-02 09:41 DEBUG stack ['$phi544.0', '$all_Fees544.1']
2023-02-02 09:41 DEBUG dispatch pc=548, inst=BINARY_ADD(arg=None, lineno=535)
2023-02-02 09:41 DEBUG stack ['$phi544.0', '$all_Fees544.1', '$sell_Fees546.2']
2023-02-02 09:41 DEBUG dispatch pc=550, inst=STORE_FAST(arg=36, lineno=535)
2023-02-02 09:41 DEBUG stack ['$phi544.0', '$548binary_add.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=552, stack=('$phi544.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=552 nstack_initial=1), State(pc_initial=260 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=260 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=552 nstack_initial=1)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=260 nstack_initial=1): {'$phi260.0'},
             State(pc_initial=264 nstack_initial=2): {'$phi264.1'},
             State(pc_initial=300 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=1): set(),
             State(pc_initial=314 nstack_initial=1): set(),
             State(pc_initial=318 nstack_initial=1): set(),
             State(pc_initial=468 nstack_initial=1): set(),
             State(pc_initial=476 nstack_initial=1): set(),
             State(pc_initial=486 nstack_initial=1): set(),
             State(pc_initial=494 nstack_initial=1): set(),
             State(pc_initial=504 nstack_initial=1): set(),
             State(pc_initial=514 nstack_initial=1): set(),
             State(pc_initial=524 nstack_initial=1): set(),
             State(pc_initial=534 nstack_initial=1): set(),
             State(pc_initial=544 nstack_initial=1): set(),
             State(pc_initial=552 nstack_initial=1): set(),
             State(pc_initial=656 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {'$phi260.0': State(pc_initial=0 nstack_initial=0),
 '$phi264.1': State(pc_initial=260 nstack_initial=1)}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi260.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi552.0',
                            State(pc_initial=552 nstack_initial=1))},
             '$phi264.0': {('$phi260.0',
                            State(pc_initial=260 nstack_initial=1))},
             '$phi264.1': {('$260for_iter.2',
                            State(pc_initial=260 nstack_initial=1))},
             '$phi300.0': {('$phi264.0',
                            State(pc_initial=264 nstack_initial=2))},
             '$phi304.0': {('$phi264.0',
                            State(pc_initial=264 nstack_initial=2)),
                           ('$phi300.0',
                            State(pc_initial=300 nstack_initial=1))},
             '$phi314.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=1))},
             '$phi318.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=1)),
                           ('$phi314.0',
                            State(pc_initial=314 nstack_initial=1))},
             '$phi468.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi476.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=1)),
                           ('$phi468.0',
                            State(pc_initial=468 nstack_initial=1))},
             '$phi486.0': {('$phi476.0',
                            State(pc_initial=476 nstack_initial=1))},
             '$phi494.0': {('$phi476.0',
                            State(pc_initial=476 nstack_initial=1)),
                           ('$phi486.0',
                            State(pc_initial=486 nstack_initial=1))},
             '$phi504.0': {('$phi494.0',
                            State(pc_initial=494 nstack_initial=1))},
             '$phi514.0': {('$phi504.0',
                            State(pc_initial=504 nstack_initial=1))},
             '$phi524.0': {('$phi494.0',
                            State(pc_initial=494 nstack_initial=1)),
                           ('$phi504.0',
                            State(pc_initial=504 nstack_initial=1))},
             '$phi534.0': {('$phi524.0',
                            State(pc_initial=524 nstack_initial=1))},
             '$phi544.0': {('$phi534.0',
                            State(pc_initial=534 nstack_initial=1))},
             '$phi552.0': {('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi260.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi264.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi264.1': {('$260for_iter.2',
                            State(pc_initial=260 nstack_initial=1))},
             '$phi300.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi304.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi314.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi318.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi468.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi476.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi486.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi494.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi504.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi514.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi524.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi524.0',
                            State(pc_initial=524 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi534.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi544.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi514.0',
                            State(pc_initial=514 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi552.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi260.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.1': {('$260for_iter.2',
                            State(pc_initial=260 nstack_initial=1))},
             '$phi300.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi468.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi476.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi486.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi494.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi504.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi514.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi534.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi544.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi552.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi260.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi264.1': {('$260for_iter.2',
                            State(pc_initial=260 nstack_initial=1))},
             '$phi300.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi468.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi476.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi486.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi494.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi504.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi514.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi524.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi534.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi544.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi552.0': {('$258get_iter.97',
                            State(pc_initial=0 nstack_initial=0))}})
2023-02-02 09:41 DEBUG keep phismap: {'$phi260.0': {('$258get_iter.97', State(pc_initial=0 nstack_initial=0))},
 '$phi264.1': {('$260for_iter.2', State(pc_initial=260 nstack_initial=1))}}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi260.0': '$258get_iter.97'},
             State(pc_initial=260 nstack_initial=1): {'$phi264.1': '$260for_iter.2'}})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$Length6.2'}), (8, {'res': '$const8.3'}), (10, {'func': '$4load_attr.1', 'args': ['$Length6.2'], 'names': '$const8.3', 'res': '$10call_function_kw.4'}), (12, {'value': '$10call_function_kw.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$Length18.7'}), (20, {'res': '$const20.8'}), (22, {'func': '$16load_attr.6', 'args': ['$Length18.7'], 'names': '$const20.8', 'res': '$22call_function_kw.9'}), (24, {'value': '$22call_function_kw.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'res': '$Length30.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$28load_attr.11', 'args': ['$Length30.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$38load_global.15'}), (40, {'item': '$38load_global.15', 'res': '$40load_attr.16'}), (42, {'res': '$Length42.17'}), (44, {'res': '$const44.18'}), (46, {'func': '$40load_attr.16', 'args': ['$Length42.17'], 'names': '$const44.18', 'res': '$46call_function_kw.19'}), (48, {'value': '$46call_function_kw.19'}), (50, {'res': '$50load_global.20'}), (52, {'item': '$50load_global.20', 'res': '$52load_attr.21'}), (54, {'res': '$Length54.22'}), (56, {'res': '$const56.23'}), (58, {'func': '$52load_attr.21', 'args': ['$Length54.22'], 'names': '$const56.23', 'res': '$58call_function_kw.24'}), (60, {'value': '$58call_function_kw.24'}), (62, {'res': '$62load_global.25'}), (64, {'item': '$62load_global.25', 'res': '$64load_attr.26'}), (66, {'res': '$Length66.27'}), (68, {'res': '$const68.28'}), (70, {'func': '$64load_attr.26', 'args': ['$Length66.27'], 'names': '$const68.28', 'res': '$70call_function_kw.29'}), (72, {'value': '$70call_function_kw.29'}), (74, {'res': '$74load_global.30'}), (76, {'item': '$74load_global.30', 'res': '$76load_attr.31'}), (78, {'res': '$Length78.32'}), (80, {'res': '$const80.33'}), (82, {'func': '$76load_attr.31', 'args': ['$Length78.32'], 'names': '$const80.33', 'res': '$82call_function_kw.34'}), (84, {'value': '$82call_function_kw.34'}), (86, {'res': '$86load_global.35'}), (88, {'item': '$86load_global.35', 'res': '$88load_attr.36'}), (90, {'res': '$Length90.37'}), (92, {'res': '$const92.38'}), (94, {'func': '$88load_attr.36', 'args': ['$Length90.37'], 'names': '$const92.38', 'res': '$94call_function_kw.39'}), (96, {'value': '$94call_function_kw.39'}), (98, {'res': '$98load_global.40'}), (100, {'item': '$98load_global.40', 'res': '$100load_attr.41'}), (102, {'res': '$Length102.42'}), (104, {'res': '$const104.43'}), (106, {'func': '$100load_attr.41', 'args': ['$Length102.42'], 'names': '$const104.43', 'res': '$106call_function_kw.44'}), (108, {'value': '$106call_function_kw.44'}), (110, {'res': '$110load_global.45'}), (112, {'item': '$110load_global.45', 'res': '$112load_attr.46'}), (114, {'res': '$Length114.47'}), (116, {'res': '$const116.48'}), (118, {'func': '$112load_attr.46', 'args': ['$Length114.47'], 'names': '$const116.48', 'res': '$118call_function_kw.49'}), (120, {'value': '$118call_function_kw.49'}), (122, {'res': '$122load_global.50'}), (124, {'item': '$122load_global.50', 'res': '$124load_attr.51'}), (126, {'res': '$Length126.52'}), (128, {'res': '$const128.53'}), (130, {'func': '$124load_attr.51', 'args': ['$Length126.52'], 'names': '$const128.53', 'res': '$130call_function_kw.54'}), (132, {'value': '$130call_function_kw.54'}), (134, {'res': '$const134.55'}), (136, {'value': '$const134.55'}), (138, {'res': '$const138.56'}), (140, {'value': '$const138.56'}), (142, {'res': '$const142.57'}), (144, {'value': '$const142.57'}), (146, {'res': '$const146.58'}), (148, {'value': '$const146.58'}), (150, {'res': '$const150.59'}), (152, {'value': '$const150.59'}), (154, {'res': '$const154.60'}), (156, {'value': '$const154.60'}), (158, {'res': '$init_cash158.61'}), (160, {'value': '$init_cash158.61'}), (162, {'res': '$const162.62'}), (164, {'value': '$const162.62'}), (166, {'res': '$size166.63'}), (168, {'value': '$size166.63'}), (170, {'res': '$size170.64'}), (172, {'value': '$size170.64'}), (174, {'res': '$const174.65'}), (176, {'value': '$const174.65'}), (178, {'res': '$const178.66'}), (180, {'value': '$const178.66'}), (182, {'res': '$const182.67'}), (184, {'value': '$const182.67'}), (186, {'res': '$const186.68'}), (188, {'value': '$const186.68'}), (190, {'res': '$slippage190.69'}), (192, {'value': '$slippage190.69'}), (194, {'res': '$fee194.70'}), (196, {'value': '$fee194.70'}), (198, {'res': '$const198.71'}), (200, {'value': '$const198.71'}), (202, {'res': '$202load_global.72'}), (204, {'res': '$Length204.73'}), (206, {'res': '$high_array206.74'}), (208, {'res': '$low_array208.75'}), (210, {'res': '$close_array210.76'}), (212, {'res': '$ATR_short1212.77'}), (214, {'func': '$202load_global.72', 'args': ['$Length204.73', '$high_array206.74', '$low_array208.75', '$close_array210.76', '$ATR_short1212.77'], 'res': '$214call_function.78'}), (216, {'value': '$214call_function.78'}), (218, {'res': '$218load_global.79'}), (220, {'res': '$Length220.80'}), (222, {'res': '$high_array222.81'}), (224, {'res': '$low_array224.82'}), (226, {'res': '$close_array226.83'}), (228, {'res': '$ATR_long2228.84'}), (230, {'func': '$218load_global.79', 'args': ['$Length220.80', '$high_array222.81', '$low_array224.82', '$close_array226.83', '$ATR_long2228.84'], 'res': '$230call_function.85'}), (232, {'value': '$230call_function.85'}), (234, {'res': '$234load_global.86'}), (236, {'res': '$high_array236.87'}), (238, {'res': '$highestarr238.88'}), (240, {'res': '$ATR_short240.89'}), (242, {'res': '$ATR_long242.90'}), (244, {'res': '$low_array244.91'}), (246, {'res': '$lowestarr246.92'}), (248, {'func': '$234load_global.86', 'args': ['$high_array236.87', '$highestarr238.88', '$ATR_short240.89', '$ATR_long242.90', '$low_array244.91', '$lowestarr246.92'], 'res': '$248call_function.93'}), (250, {'value': '$248call_function.93'}), (252, {'res': '$252load_global.94'}), (254, {'res': '$Length254.95'}), (256, {'func': '$252load_global.94', 'args': ['$Length254.95'], 'res': '$256call_function.96'}), (258, {'value': '$256call_function.96', 'res': '$258get_iter.97'})), outgoing_phis={'$phi260.0': '$258get_iter.97'}, blockstack=(), active_try_block=None, outgoing_edgepushed={260: ('$258get_iter.97',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=260 nstack_initial=1):
AdaptBlockInfo(insts=((260, {'iterator': '$phi260.0', 'pair': '$260for_iter.1', 'indval': '$260for_iter.2', 'pred': '$260for_iter.3'}),), outgoing_phis={'$phi264.1': '$260for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={656: (), 264: ('$phi260.0', '$260for_iter.2')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=264 nstack_initial=2):
AdaptBlockInfo(insts=((264, {'value': '$phi264.1'}), (266, {'res': '$open_array266.2'}), (268, {'res': '$i268.3'}), (270, {'index': '$i268.3', 'target': '$open_array266.2', 'res': '$270binary_subscr.4'}), (272, {'value': '$270binary_subscr.4'}), (274, {'res': '$shiftorder274.5'}), (276, {'res': '$i276.6'}), (278, {'index': '$i276.6', 'target': '$shiftorder274.5', 'res': '$278binary_subscr.7'}), (280, {'value': '$278binary_subscr.7'}), (282, {'res': '$marketpostion282.8'}), (284, {'value': '$marketpostion282.8'}), (286, {'res': '$entryprice286.9'}), (288, {'value': '$entryprice286.9'}), (290, {'res': '$current_order290.10'}), (292, {'res': '$const292.11'}), (294, {'lhs': '$current_order290.10', 'rhs': '$const292.11', 'res': '$294compare_op.12'}), (296, {'pred': '$294compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ('$phi264.0',), 304: ('$phi264.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=300 nstack_initial=1):
AdaptBlockInfo(insts=((300, {'res': '$const300.1'}), (302, {'value': '$const300.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi300.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=304 nstack_initial=1):
AdaptBlockInfo(insts=((304, {'res': '$current_order304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$current_order304.1', 'rhs': '$const306.2', 'res': '$308compare_op.3'}), (310, {'pred': '$308compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={314: ('$phi304.0',), 318: ('$phi304.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=314 nstack_initial=1):
AdaptBlockInfo(insts=((314, {'res': '$const314.1'}), (316, {'value': '$const314.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ('$phi314.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=318 nstack_initial=1):
AdaptBlockInfo(insts=((318, {'res': '$marketpostion318.1'}), (320, {'res': '$marketpostion_array320.2'}), (322, {'res': '$i322.3'}), (324, {'target': '$marketpostion_array320.2', 'index': '$i322.3', 'value': '$marketpostion318.1'}), (326, {'res': '$326load_global.4'}), (328, {'res': '$entryprice328.5'}), (330, {'res': '$Open330.6'}), (332, {'res': '$marketpostion332.7'}), (334, {'res': '$last_marketpostion334.8'}), (336, {'res': '$slippage336.9'}), (338, {'res': '$direction338.10'}), (340, {'func': '$326load_global.4', 'args': ['$entryprice328.5', '$Open330.6', '$marketpostion332.7', '$last_marketpostion334.8', '$slippage336.9', '$direction338.10'], 'res': '$340call_function.11'}), (342, {'value': '$340call_function.11'}), (344, {'res': '$344load_global.12'}), (346, {'res': '$exitsprice346.13'}), (348, {'res': '$Open348.14'}), (350, {'res': '$marketpostion350.15'}), (352, {'res': '$last_marketpostion352.16'}), (354, {'res': '$slippage354.17'}), (356, {'res': '$direction356.18'}), (358, {'func': '$344load_global.12', 'args': ['$exitsprice346.13', '$Open348.14', '$marketpostion350.15', '$last_marketpostion352.16', '$slippage354.17', '$direction356.18'], 'res': '$358call_function.19'}), (360, {'value': '$358call_function.19'}), (362, {'res': '$362load_global.20'}), (364, {'res': '$buy_Fees364.21'}), (366, {'res': '$fee366.22'}), (368, {'res': '$buy_sizes368.23'}), (370, {'res': '$Open370.24'}), (372, {'res': '$marketpostion372.25'}), (374, {'res': '$last_marketpostion374.26'}), (376, {'func': '$362load_global.20', 'args': ['$buy_Fees364.21', '$fee366.22', '$buy_sizes368.23', '$Open370.24', '$marketpostion372.25', '$last_marketpostion374.26'], 'res': '$376call_function.27'}), (378, {'value': '$376call_function.27'}), (380, {'res': '$380load_global.28'}), (382, {'res': '$sell_Fees382.29'}), (384, {'res': '$fee384.30'}), (386, {'res': '$sell_sizes386.31'}), (388, {'res': '$Open388.32'}), (390, {'res': '$marketpostion390.33'}), (392, {'res': '$last_marketpostion392.34'}), (394, {'func': '$380load_global.28', 'args': ['$sell_Fees382.29', '$fee384.30', '$sell_sizes386.31', '$Open388.32', '$marketpostion390.33', '$last_marketpostion392.34'], 'res': '$394call_function.35'}), (396, {'value': '$394call_function.35'}), (398, {'res': '$398load_global.36'}), (400, {'res': '$OpenPostionprofit400.37'}), (402, {'res': '$marketpostion402.38'}), (404, {'res': '$last_marketpostion404.39'}), (406, {'res': '$buy_Fees406.40'}), (408, {'res': '$Open408.41'}), (410, {'res': '$buy_sizes410.42'}), (412, {'res': '$entryprice412.43'}), (414, {'func': '$398load_global.36', 'args': ['$OpenPostionprofit400.37', '$marketpostion402.38', '$last_marketpostion404.39', '$buy_Fees406.40', '$Open408.41', '$buy_sizes410.42', '$entryprice412.43'], 'res': '$414call_function.44'}), (416, {'value': '$414call_function.44'}), (418, {'res': '$418load_global.45'}), (420, {'res': '$ClosedPostionprofit420.46'}), (422, {'res': '$marketpostion422.47'}), (424, {'res': '$last_marketpostion424.48'}), (426, {'res': '$buy_Fees426.49'}), (428, {'res': '$sell_Fees428.50'}), (430, {'res': '$sell_sizes430.51'}), (432, {'res': '$last_entryprice432.52'}), (434, {'res': '$exitsprice434.53'}), (436, {'func': '$418load_global.45', 'args': ['$ClosedPostionprofit420.46', '$marketpostion422.47', '$last_marketpostion424.48', '$buy_Fees426.49', '$sell_Fees428.50', '$sell_sizes430.51', '$last_entryprice432.52', '$exitsprice434.53'], 'res': '$436call_function.54'}), (438, {'value': '$436call_function.54'}), (440, {'res': '$440load_global.55'}), (442, {'res': '$profit442.56'}), (444, {'res': '$marketpostion444.57'}), (446, {'res': '$last_marketpostion446.58'}), (448, {'res': '$Open448.59'}), (450, {'res': '$sell_sizes450.60'}), (452, {'res': '$last_entryprice452.61'}), (454, {'func': '$440load_global.55', 'args': ['$profit442.56', '$marketpostion444.57', '$last_marketpostion446.58', '$Open448.59', '$sell_sizes450.60', '$last_entryprice452.61'], 'res': '$454call_function.62'}), (456, {'value': '$454call_function.62'}), (458, {'res': '$profit458.63'}), (460, {'res': '$const460.64'}), (462, {'lhs': '$profit458.63', 'rhs': '$const460.64', 'res': '$462compare_op.65'}), (464, {'pred': '$462compare_op.65'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={468: ('$phi318.0',), 476: ('$phi318.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=468 nstack_initial=1):
AdaptBlockInfo(insts=((468, {'res': '$Gross_profit468.1'}), (470, {'res': '$profit470.2'}), (472, {'lhs': '$Gross_profit468.1', 'rhs': '$profit470.2', 'res': '$472binary_add.3'}), (474, {'value': '$472binary_add.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={476: ('$phi468.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=476 nstack_initial=1):
AdaptBlockInfo(insts=((476, {'res': '$profit476.1'}), (478, {'res': '$const478.2'}), (480, {'lhs': '$profit476.1', 'rhs': '$const478.2', 'res': '$480compare_op.3'}), (482, {'pred': '$480compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={486: ('$phi476.0',), 494: ('$phi476.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=486 nstack_initial=1):
AdaptBlockInfo(insts=((486, {'res': '$Gross_loss486.1'}), (488, {'res': '$profit488.2'}), (490, {'lhs': '$Gross_loss486.1', 'rhs': '$profit488.2', 'res': '$490binary_add.3'}), (492, {'value': '$490binary_add.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={494: ('$phi486.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=494 nstack_initial=1):
AdaptBlockInfo(insts=((494, {'res': '$marketpostion494.1'}), (496, {'res': '$const496.2'}), (498, {'lhs': '$marketpostion494.1', 'rhs': '$const496.2', 'res': '$498compare_op.3'}), (500, {'pred': '$498compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={504: ('$phi494.0',), 524: ('$phi494.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=504 nstack_initial=1):
AdaptBlockInfo(insts=((504, {'res': '$last_marketpostion504.1'}), (506, {'res': '$const506.2'}), (508, {'lhs': '$last_marketpostion504.1', 'rhs': '$const506.2', 'res': '$508compare_op.3'}), (510, {'pred': '$508compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={514: ('$phi504.0',), 524: ('$phi504.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=514 nstack_initial=1):
AdaptBlockInfo(insts=((514, {'res': '$all_Fees514.1'}), (516, {'res': '$buy_Fees516.2'}), (518, {'lhs': '$all_Fees514.1', 'rhs': '$buy_Fees516.2', 'res': '$518binary_add.3'}), (520, {'value': '$518binary_add.3'}), (522, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={552: ('$phi514.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=524 nstack_initial=1):
AdaptBlockInfo(insts=((524, {'res': '$marketpostion524.1'}), (526, {'res': '$const526.2'}), (528, {'lhs': '$marketpostion524.1', 'rhs': '$const526.2', 'res': '$528compare_op.3'}), (530, {'pred': '$528compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={534: ('$phi524.0',), 552: ('$phi524.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=534 nstack_initial=1):
AdaptBlockInfo(insts=((534, {'res': '$last_marketpostion534.1'}), (536, {'res': '$const536.2'}), (538, {'lhs': '$last_marketpostion534.1', 'rhs': '$const536.2', 'res': '$538compare_op.3'}), (540, {'pred': '$538compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={544: ('$phi534.0',), 552: ('$phi534.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=544 nstack_initial=1):
AdaptBlockInfo(insts=((544, {'res': '$all_Fees544.1'}), (546, {'res': '$sell_Fees546.2'}), (548, {'lhs': '$all_Fees544.1', 'rhs': '$sell_Fees546.2', 'res': '$548binary_add.3'}), (550, {'value': '$548binary_add.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={552: ('$phi544.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=552 nstack_initial=1):
AdaptBlockInfo(insts=((552, {'res': '$init_cash552.1'}), (554, {'res': '$all_Fees554.2'}), (556, {'lhs': '$init_cash552.1', 'rhs': '$all_Fees554.2', 'res': '$556binary_subtract.3'}), (558, {'res': '$Gross_profit558.4'}), (560, {'lhs': '$556binary_subtract.3', 'rhs': '$Gross_profit558.4', 'res': '$560binary_add.5'}), (562, {'res': '$Gross_loss562.6'}), (564, {'lhs': '$560binary_add.5', 'rhs': '$Gross_loss562.6', 'res': '$564binary_add.7'}), (566, {'res': '$OpenPostionprofit566.8'}), (568, {'lhs': '$564binary_add.7', 'rhs': '$OpenPostionprofit566.8', 'res': '$568binary_add.9'}), (570, {'value': '$568binary_add.9'}), (572, {'res': '$entryprice572.10'}), (574, {'res': '$entryprice_array574.11'}), (576, {'res': '$i576.12'}), (578, {'target': '$entryprice_array574.11', 'index': '$i576.12', 'value': '$entryprice572.10'}), (580, {'res': '$buy_Fees580.13'}), (582, {'res': '$buy_Fees_array582.14'}), (584, {'res': '$i584.15'}), (586, {'target': '$buy_Fees_array582.14', 'index': '$i584.15', 'value': '$buy_Fees580.13'}), (588, {'res': '$sell_Fees588.16'}), (590, {'res': '$sell_Fees_array590.17'}), (592, {'res': '$i592.18'}), (594, {'target': '$sell_Fees_array590.17', 'index': '$i592.18', 'value': '$sell_Fees588.16'}), (596, {'res': '$OpenPostionprofit596.19'}), (598, {'res': '$OpenPostionprofit_array598.20'}), (600, {'res': '$i600.21'}), (602, {'target': '$OpenPostionprofit_array598.20', 'index': '$i600.21', 'value': '$OpenPostionprofit596.19'}), (604, {'res': '$ClosedPostionprofit604.22'}), (606, {'res': '$ClosedPostionprofit_array606.23'}), (608, {'res': '$i608.24'}), (610, {'target': '$ClosedPostionprofit_array606.23', 'index': '$i608.24', 'value': '$ClosedPostionprofit604.22'}), (612, {'res': '$profit612.25'}), (614, {'res': '$profit_array614.26'}), (616, {'res': '$i616.27'}), (618, {'target': '$profit_array614.26', 'index': '$i616.27', 'value': '$profit612.25'}), (620, {'res': '$Gross_profit620.28'}), (622, {'res': '$Gross_profit_array622.29'}), (624, {'res': '$i624.30'}), (626, {'target': '$Gross_profit_array622.29', 'index': '$i624.30', 'value': '$Gross_profit620.28'}), (628, {'res': '$Gross_loss628.31'}), (630, {'res': '$Gross_loss_array630.32'}), (632, {'res': '$i632.33'}), (634, {'target': '$Gross_loss_array630.32', 'index': '$i632.33', 'value': '$Gross_loss628.31'}), (636, {'res': '$all_Fees636.34'}), (638, {'res': '$all_Fees_array638.35'}), (640, {'res': '$i640.36'}), (642, {'target': '$all_Fees_array638.35', 'index': '$i640.36', 'value': '$all_Fees636.34'}), (644, {'res': '$netprofit644.37'}), (646, {'res': '$netprofit_array646.38'}), (648, {'res': '$i648.39'}), (650, {'target': '$netprofit_array646.38', 'index': '$i648.39', 'value': '$netprofit644.37'}), (652, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={260: ('$phi552.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=656 nstack_initial=0):
AdaptBlockInfo(insts=((656, {'res': '$656load_global.0'}), (658, {'res': '$marketpostion_array658.1'}), (660, {'func': '$656load_global.0', 'args': ['$marketpostion_array658.1'], 'res': '$660call_function.2'}), (662, {'value': '$660call_function.2'}), (664, {'res': '$neworders664.3'}), (666, {'res': '$marketpostion_array666.4'}), (668, {'res': '$entryprice_array668.5'}), (670, {'res': '$buy_Fees_array670.6'}), (672, {'res': '$sell_Fees_array672.7'}), (674, {'res': '$OpenPostionprofit_array674.8'}), (676, {'res': '$ClosedPostionprofit_array676.9'}), (678, {'res': '$profit_array678.10'}), (680, {'res': '$Gross_profit_array680.11'}), (682, {'res': '$Gross_loss_array682.12'}), (684, {'res': '$all_Fees_array684.13'}), (686, {'res': '$netprofit_array686.14'}), (688, {'items': ['$neworders664.3', '$marketpostion_array666.4', '$entryprice_array668.5', '$buy_Fees_array670.6', '$sell_Fees_array672.7', '$OpenPostionprofit_array674.8', '$ClosedPostionprofit_array676.9', '$profit_array678.10', '$Gross_profit_array680.11', '$Gross_loss_array682.12', '$all_Fees_array684.13', '$netprofit_array686.14'], 'res': '$688build_tuple.15'}), (690, {'retval': '$688build_tuple.15', 'castval': '$690return_value.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    open_array = arg(0, name=open_array)     ['open_array']
    high_array = arg(1, name=high_array)     ['high_array']
    low_array = arg(2, name=low_array)       ['low_array']
    close_array = arg(3, name=close_array)   ['close_array']
    highestarr = arg(4, name=highestarr)     ['highestarr']
    lowestarr = arg(5, name=lowestarr)       ['lowestarr']
    Length = arg(6, name=Length)             ['Length']
    init_cash = arg(7, name=init_cash)       ['init_cash']
    slippage = arg(8, name=slippage)         ['slippage']
    size = arg(9, name=size)                 ['size']
    fee = arg(10, name=fee)                  ['fee']
    ATR_short1 = arg(11, name=ATR_short1)    ['ATR_short1']
    ATR_long2 = arg(12, name=ATR_long2)      ['ATR_long2']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'Length', 'marketpostion_array']
    $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=empty) ['$14load_global.5', '$16load_attr.6']
    entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$16load_attr.6', 'Length', 'entryprice_array']
    $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=empty) ['$26load_global.10', '$28load_attr.11']
    buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$28load_attr.11', 'Length', 'buy_Fees_array']
    $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$38load_global.15']
    $40load_attr.16 = getattr(value=$38load_global.15, attr=empty) ['$38load_global.15', '$40load_attr.16']
    sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$40load_attr.16', 'Length', 'sell_Fees_array']
    $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.20']
    $52load_attr.21 = getattr(value=$50load_global.20, attr=empty) ['$50load_global.20', '$52load_attr.21']
    OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$52load_attr.21', 'Length', 'OpenPostionprofit_array']
    $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$62load_global.25']
    $64load_attr.26 = getattr(value=$62load_global.25, attr=empty) ['$62load_global.25', '$64load_attr.26']
    ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$64load_attr.26', 'ClosedPostionprofit_array', 'Length']
    $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$74load_global.30']
    $76load_attr.31 = getattr(value=$74load_global.30, attr=empty) ['$74load_global.30', '$76load_attr.31']
    profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$76load_attr.31', 'Length', 'profit_array']
    $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$86load_global.35']
    $88load_attr.36 = getattr(value=$86load_global.35, attr=empty) ['$86load_global.35', '$88load_attr.36']
    Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$88load_attr.36', 'Gross_profit_array', 'Length']
    $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$98load_global.40']
    $100load_attr.41 = getattr(value=$98load_global.40, attr=empty) ['$100load_attr.41', '$98load_global.40']
    Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$100load_attr.41', 'Gross_loss_array', 'Length']
    $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.45']
    $112load_attr.46 = getattr(value=$110load_global.45, attr=empty) ['$110load_global.45', '$112load_attr.46']
    all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$112load_attr.46', 'Length', 'all_Fees_array']
    $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$122load_global.50']
    $124load_attr.51 = getattr(value=$122load_global.50, attr=empty) ['$122load_global.50', '$124load_attr.51']
    netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None) ['$124load_attr.51', 'Length', 'netprofit_array']
    marketpostion = const(int, 0)            ['marketpostion']
    entryprice = const(int, 0)               ['entryprice']
    exitsprice = const(int, 0)               ['exitsprice']
    buy_Fees = const(int, 0)                 ['buy_Fees']
    sell_Fees = const(int, 0)                ['sell_Fees']
    OpenPostionprofit = const(int, 0)        ['OpenPostionprofit']
    ClosedPostionprofit = init_cash          ['ClosedPostionprofit', 'init_cash']
    profit = const(int, 0)                   ['profit']
    buy_sizes = size                         ['buy_sizes', 'size']
    sell_sizes = size                        ['sell_sizes', 'size']
    Gross_profit = const(int, 0)             ['Gross_profit']
    Gross_loss = const(int, 0)               ['Gross_loss']
    all_Fees = const(int, 0)                 ['all_Fees']
    netprofit = const(int, 0)                ['netprofit']
    slippage.1 = slippage                    ['slippage', 'slippage.1']
    fee.1 = fee                              ['fee', 'fee.1']
    direction = const(str, buyonly)          ['direction']
    $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>)) ['$202load_global.72']
    ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None) ['$202load_global.72', 'ATR_short', 'ATR_short1', 'Length', 'close_array', 'high_array', 'low_array']
    $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>)) ['$218load_global.79']
    ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.79', 'ATR_long', 'ATR_long2', 'Length', 'close_array', 'high_array', 'low_array']
    $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>)) ['$234load_global.86']
    shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None) ['$234load_global.86', 'ATR_long', 'ATR_short', 'high_array', 'highestarr', 'low_array', 'lowestarr', 'shiftorder']
    $252load_global.94 = global(range: <class 'range'>) ['$252load_global.94']
    $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None) ['$252load_global.94', '$256call_function.96', 'Length']
    $258get_iter.97 = getiter(value=$256call_function.96) ['$256call_function.96', '$258get_iter.97']
    $phi260.0 = $258get_iter.97              ['$258get_iter.97', '$phi260.0']
    jump 260                                 []
label 260:
    $260for_iter.1 = iternext(value=$phi260.0) ['$260for_iter.1', '$phi260.0']
    $260for_iter.2 = pair_first(value=$260for_iter.1) ['$260for_iter.1', '$260for_iter.2']
    $260for_iter.3 = pair_second(value=$260for_iter.1) ['$260for_iter.1', '$260for_iter.3']
    $phi264.1 = $260for_iter.2               ['$260for_iter.2', '$phi264.1']
    branch $260for_iter.3, 264, 656          ['$260for_iter.3']
label 264:
    i = $phi264.1                            ['$phi264.1', 'i']
    Open = getitem(value=open_array, index=i, fn=<built-in function getitem>) ['Open', 'i', 'open_array']
    current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>) ['current_order', 'i', 'shiftorder']
    last_marketpostion = marketpostion       ['last_marketpostion', 'marketpostion']
    last_entryprice = entryprice             ['entryprice', 'last_entryprice']
    $const292.11 = const(int, 1)             ['$const292.11']
    $294compare_op.12 = current_order == $const292.11 ['$294compare_op.12', '$const292.11', 'current_order']
    bool296 = global(bool: <class 'bool'>)   ['bool296']
    $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None) ['$294compare_op.12', '$296pred', 'bool296']
    branch $296pred, 300, 304                ['$296pred']
label 300:
    marketpostion = const(int, 1)            ['marketpostion']
    jump 304                                 []
label 304:
    $const306.2 = const(int, -1)             ['$const306.2']
    $308compare_op.3 = current_order == $const306.2 ['$308compare_op.3', '$const306.2', 'current_order']
    bool310 = global(bool: <class 'bool'>)   ['bool310']
    $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None) ['$308compare_op.3', '$310pred', 'bool310']
    branch $310pred, 314, 318                ['$310pred']
label 314:
    marketpostion = const(int, 0)            ['marketpostion']
    jump 318                                 []
label 318:
    marketpostion_array[i] = marketpostion   ['i', 'marketpostion', 'marketpostion_array']
    $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>)) ['$326load_global.4']
    entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None) ['$326load_global.4', 'Open', 'direction', 'entryprice', 'entryprice', 'last_marketpostion', 'marketpostion', 'slippage.1']
    $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>)) ['$344load_global.12']
    exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None) ['$344load_global.12', 'Open', 'direction', 'exitsprice', 'exitsprice', 'last_marketpostion', 'marketpostion', 'slippage.1']
    $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>)) ['$362load_global.20']
    buy_Fees = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None) ['$362load_global.20', 'Open', 'buy_Fees', 'buy_Fees', 'buy_sizes', 'fee.1', 'last_marketpostion', 'marketpostion']
    $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>)) ['$380load_global.28']
    sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None) ['$380load_global.28', 'Open', 'fee.1', 'last_marketpostion', 'marketpostion', 'sell_Fees', 'sell_Fees', 'sell_sizes']
    $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>)) ['$398load_global.36']
    OpenPostionprofit = call $398load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit, nb.py:454), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None) ['$398load_global.36', 'Open', 'OpenPostionprofit', 'OpenPostionprofit', 'buy_Fees', 'buy_sizes', 'entryprice', 'last_marketpostion', 'marketpostion']
    $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>)) ['$418load_global.45']
    ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None) ['$418load_global.45', 'ClosedPostionprofit', 'ClosedPostionprofit', 'buy_Fees', 'exitsprice', 'last_entryprice', 'last_marketpostion', 'marketpostion', 'sell_Fees', 'sell_sizes']
    $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>)) ['$440load_global.55']
    profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None) ['$440load_global.55', 'Open', 'last_entryprice', 'last_marketpostion', 'marketpostion', 'profit', 'profit', 'sell_sizes']
    $const460.64 = const(int, 0)             ['$const460.64']
    $462compare_op.65 = profit > $const460.64 ['$462compare_op.65', '$const460.64', 'profit']
    bool464 = global(bool: <class 'bool'>)   ['bool464']
    $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None) ['$462compare_op.65', '$464pred', 'bool464']
    branch $464pred, 468, 476                ['$464pred']
label 468:
    $472binary_add.3 = Gross_profit + profit ['$472binary_add.3', 'Gross_profit', 'profit']
    Gross_profit = $472binary_add.3          ['$472binary_add.3', 'Gross_profit']
    jump 476                                 []
label 476:
    $const478.2 = const(int, 0)              ['$const478.2']
    $480compare_op.3 = profit < $const478.2  ['$480compare_op.3', '$const478.2', 'profit']
    bool482 = global(bool: <class 'bool'>)   ['bool482']
    $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None) ['$480compare_op.3', '$482pred', 'bool482']
    branch $482pred, 486, 494                ['$482pred']
label 486:
    $490binary_add.3 = Gross_loss + profit   ['$490binary_add.3', 'Gross_loss', 'profit']
    Gross_loss = $490binary_add.3            ['$490binary_add.3', 'Gross_loss']
    jump 494                                 []
label 494:
    $const496.2 = const(int, 1)              ['$const496.2']
    $498compare_op.3 = marketpostion == $const496.2 ['$498compare_op.3', '$const496.2', 'marketpostion']
    bool500 = global(bool: <class 'bool'>)   ['bool500']
    $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None) ['$498compare_op.3', '$500pred', 'bool500']
    branch $500pred, 504, 524                ['$500pred']
label 504:
    $const506.2 = const(int, 0)              ['$const506.2']
    $508compare_op.3 = last_marketpostion == $const506.2 ['$508compare_op.3', '$const506.2', 'last_marketpostion']
    bool510 = global(bool: <class 'bool'>)   ['bool510']
    $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None) ['$508compare_op.3', '$510pred', 'bool510']
    branch $510pred, 514, 524                ['$510pred']
label 514:
    $518binary_add.3 = all_Fees + buy_Fees   ['$518binary_add.3', 'all_Fees', 'buy_Fees']
    all_Fees = $518binary_add.3              ['$518binary_add.3', 'all_Fees']
    jump 552                                 []
label 524:
    $const526.2 = const(int, 0)              ['$const526.2']
    $528compare_op.3 = marketpostion == $const526.2 ['$528compare_op.3', '$const526.2', 'marketpostion']
    bool530 = global(bool: <class 'bool'>)   ['bool530']
    $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None) ['$528compare_op.3', '$530pred', 'bool530']
    branch $530pred, 534, 552                ['$530pred']
label 534:
    $const536.2 = const(int, 1)              ['$const536.2']
    $538compare_op.3 = last_marketpostion == $const536.2 ['$538compare_op.3', '$const536.2', 'last_marketpostion']
    bool540 = global(bool: <class 'bool'>)   ['bool540']
    $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None) ['$538compare_op.3', '$540pred', 'bool540']
    branch $540pred, 544, 552                ['$540pred']
label 544:
    $548binary_add.3 = all_Fees + sell_Fees  ['$548binary_add.3', 'all_Fees', 'sell_Fees']
    all_Fees = $548binary_add.3              ['$548binary_add.3', 'all_Fees']
    jump 552                                 []
label 552:
    $556binary_subtract.3 = init_cash - all_Fees ['$556binary_subtract.3', 'all_Fees', 'init_cash']
    $560binary_add.5 = $556binary_subtract.3 + Gross_profit ['$556binary_subtract.3', '$560binary_add.5', 'Gross_profit']
    $564binary_add.7 = $560binary_add.5 + Gross_loss ['$560binary_add.5', '$564binary_add.7', 'Gross_loss']
    netprofit = $564binary_add.7 + OpenPostionprofit ['$564binary_add.7', 'OpenPostionprofit', 'netprofit']
    entryprice_array[i] = entryprice         ['entryprice', 'entryprice_array', 'i']
    buy_Fees_array[i] = buy_Fees             ['buy_Fees', 'buy_Fees_array', 'i']
    sell_Fees_array[i] = sell_Fees           ['i', 'sell_Fees', 'sell_Fees_array']
    OpenPostionprofit_array[i] = OpenPostionprofit ['OpenPostionprofit', 'OpenPostionprofit_array', 'i']
    ClosedPostionprofit_array[i] = ClosedPostionprofit ['ClosedPostionprofit', 'ClosedPostionprofit_array', 'i']
    profit_array[i] = profit                 ['i', 'profit', 'profit_array']
    Gross_profit_array[i] = Gross_profit     ['Gross_profit', 'Gross_profit_array', 'i']
    Gross_loss_array[i] = Gross_loss         ['Gross_loss', 'Gross_loss_array', 'i']
    all_Fees_array[i] = all_Fees             ['all_Fees', 'all_Fees_array', 'i']
    netprofit_array[i] = netprofit           ['i', 'netprofit', 'netprofit_array']
    jump 260                                 []
label 656:
    $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>)) ['$656load_global.0']
    neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None) ['$656load_global.0', 'marketpostion_array', 'neworders']
    $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)]) ['$688build_tuple.15', 'ClosedPostionprofit_array', 'Gross_loss_array', 'Gross_profit_array', 'OpenPostionprofit_array', 'all_Fees_array', 'buy_Fees_array', 'entryprice_array', 'marketpostion_array', 'netprofit_array', 'neworders', 'profit_array', 'sell_Fees_array']
    $690return_value.16 = cast(value=$688build_tuple.15) ['$688build_tuple.15', '$690return_value.16']
    return $690return_value.16               ['$690return_value.16']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = call $398load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit, nb.py:454), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C5A8E50>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$100load_attr.41': [<numba.core.ir.Assign object at 0x000001A51C546EB0>],
             '$110load_global.45': [<numba.core.ir.Assign object at 0x000001A51C548610>],
             '$112load_attr.46': [<numba.core.ir.Assign object at 0x000001A51C548790>],
             '$122load_global.50': [<numba.core.ir.Assign object at 0x000001A51C548EB0>],
             '$124load_attr.51': [<numba.core.ir.Assign object at 0x000001A51C54A070>],
             '$14load_global.5': [<numba.core.ir.Assign object at 0x000001A51C53AFD0>],
             '$16load_attr.6': [<numba.core.ir.Assign object at 0x000001A51C53E190>],
             '$202load_global.72': [<numba.core.ir.Assign object at 0x000001A51C550310>],
             '$218load_global.79': [<numba.core.ir.Assign object at 0x000001A51C550CD0>],
             '$234load_global.86': [<numba.core.ir.Assign object at 0x000001A51C5526D0>],
             '$252load_global.94': [<numba.core.ir.Assign object at 0x000001A51C5541F0>],
             '$256call_function.96': [<numba.core.ir.Assign object at 0x000001A51C5544C0>],
             '$258get_iter.97': [<numba.core.ir.Assign object at 0x000001A51C554610>],
             '$260for_iter.1': [<numba.core.ir.Assign object at 0x000001A51C5435E0>],
             '$260for_iter.2': [<numba.core.ir.Assign object at 0x000001A51C546130>],
             '$260for_iter.3': [<numba.core.ir.Assign object at 0x000001A51C548040>],
             '$26load_global.10': [<numba.core.ir.Assign object at 0x000001A51C53E8B0>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0x000001A51C53EA30>],
             '$294compare_op.12': [<numba.core.ir.Assign object at 0x000001A51C554AF0>],
             '$296pred': [<numba.core.ir.Assign object at 0x000001A51C554D90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C53A730>],
             '$308compare_op.3': [<numba.core.ir.Assign object at 0x000001A51C559250>],
             '$310pred': [<numba.core.ir.Assign object at 0x000001A51C5594F0>],
             '$326load_global.4': [<numba.core.ir.Assign object at 0x000001A51C559DF0>],
             '$344load_global.12': [<numba.core.ir.Assign object at 0x000001A51C55B8B0>],
             '$362load_global.20': [<numba.core.ir.Assign object at 0x000001A51C55E370>],
             '$380load_global.28': [<numba.core.ir.Assign object at 0x000001A51C55EDF0>],
             '$38load_global.15': [<numba.core.ir.Assign object at 0x000001A51C541190>],
             '$398load_global.36': [<numba.core.ir.Assign object at 0x000001A51C5608B0>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x000001A51C541310>],
             '$418load_global.45': [<numba.core.ir.Assign object at 0x000001A51C562490>],
             '$440load_global.55': [<numba.core.ir.Assign object at 0x000001A51C564190>],
             '$462compare_op.65': [<numba.core.ir.Assign object at 0x000001A51C564EB0>],
             '$464pred': [<numba.core.ir.Assign object at 0x000001A51C566190>],
             '$472binary_add.3': [<numba.core.ir.Assign object at 0x000001A51C55BFA0>],
             '$480compare_op.3': [<numba.core.ir.Assign object at 0x000001A51C5602E0>],
             '$482pred': [<numba.core.ir.Assign object at 0x000001A51C560C40>],
             '$490binary_add.3': [<numba.core.ir.Assign object at 0x000001A51C562B80>],
             '$498compare_op.3': [<numba.core.ir.Assign object at 0x000001A51C5598B0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001A51C53A8B0>],
             '$500pred': [<numba.core.ir.Assign object at 0x000001A51C566310>],
             '$508compare_op.3': [<numba.core.ir.Assign object at 0x000001A51C566820>],
             '$50load_global.20': [<numba.core.ir.Assign object at 0x000001A51C541A30>],
             '$510pred': [<numba.core.ir.Assign object at 0x000001A51C566AC0>],
             '$518binary_add.3': [<numba.core.ir.Assign object at 0x000001A51C566F40>],
             '$528compare_op.3': [<numba.core.ir.Assign object at 0x000001A51C568550>],
             '$52load_attr.21': [<numba.core.ir.Assign object at 0x000001A51C541BB0>],
             '$530pred': [<numba.core.ir.Assign object at 0x000001A51C5687F0>],
             '$538compare_op.3': [<numba.core.ir.Assign object at 0x000001A51C568D00>],
             '$540pred': [<numba.core.ir.Assign object at 0x000001A51C568FA0>],
             '$548binary_add.3': [<numba.core.ir.Assign object at 0x000001A51C56C460>],
             '$556binary_subtract.3': [<numba.core.ir.Assign object at 0x000001A51C56C940>],
             '$560binary_add.5': [<numba.core.ir.Assign object at 0x000001A51C56CBE0>],
             '$564binary_add.7': [<numba.core.ir.Assign object at 0x000001A51C56CE80>],
             '$62load_global.25': [<numba.core.ir.Assign object at 0x000001A51C543310>],
             '$64load_attr.26': [<numba.core.ir.Assign object at 0x000001A51C543490>],
             '$656load_global.0': [<numba.core.ir.Assign object at 0x000001A51C56E8B0>],
             '$688build_tuple.15': [<numba.core.ir.Assign object at 0x000001A51C575430>],
             '$690return_value.16': [<numba.core.ir.Assign object at 0x000001A51C575580>],
             '$74load_global.30': [<numba.core.ir.Assign object at 0x000001A51C543BB0>],
             '$76load_attr.31': [<numba.core.ir.Assign object at 0x000001A51C543D30>],
             '$86load_global.35': [<numba.core.ir.Assign object at 0x000001A51C546490>],
             '$88load_attr.36': [<numba.core.ir.Assign object at 0x000001A51C546610>],
             '$98load_global.40': [<numba.core.ir.Assign object at 0x000001A51C546D30>],
             '$const292.11': [<numba.core.ir.Assign object at 0x000001A51C554970>],
             '$const306.2': [<numba.core.ir.Assign object at 0x000001A51C5590D0>],
             '$const460.64': [<numba.core.ir.Assign object at 0x000001A51C564D30>],
             '$const478.2': [<numba.core.ir.Assign object at 0x000001A51C55EC40>],
             '$const496.2': [<numba.core.ir.Assign object at 0x000001A51C564880>],
             '$const506.2': [<numba.core.ir.Assign object at 0x000001A51C5666A0>],
             '$const526.2': [<numba.core.ir.Assign object at 0x000001A51C5683D0>],
             '$const536.2': [<numba.core.ir.Assign object at 0x000001A51C568B80>],
             '$phi260.0': [<numba.core.ir.Assign object at 0x000001A51C53ABB0>],
             '$phi264.1': [<numba.core.ir.Assign object at 0x000001A51C541CD0>],
             'ATR_long': [<numba.core.ir.Assign object at 0x000001A51C552460>],
             'ATR_long2': [<numba.core.ir.Assign object at 0x000001A51C53A5B0>],
             'ATR_short': [<numba.core.ir.Assign object at 0x000001A51C550A60>],
             'ATR_short1': [<numba.core.ir.Assign object at 0x000001A51C53A490>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x000001A51C54B850>,
                                     <numba.core.ir.Assign object at 0x000001A51C562F40>],
             'ClosedPostionprofit_array': [<numba.core.ir.Assign object at 0x000001A51C543A60>],
             'Gross_loss': [<numba.core.ir.Assign object at 0x000001A51C54D3D0>,
                            <numba.core.ir.Assign object at 0x000001A51C562DC0>],
             'Gross_loss_array': [<numba.core.ir.Assign object at 0x000001A51C5484C0>],
             'Gross_profit': [<numba.core.ir.Assign object at 0x000001A51C54D130>,
                              <numba.core.ir.Assign object at 0x000001A51C55E1C0>],
             'Gross_profit_array': [<numba.core.ir.Assign object at 0x000001A51C546BE0>],
             'Length': [<numba.core.ir.Assign object at 0x000001A51C4F2EB0>],
             'Open': [<numba.core.ir.Assign object at 0x000001A51C54D520>],
             'OpenPostionprofit': [<numba.core.ir.Assign object at 0x000001A51C54B4F0>,
                                   <numba.core.ir.Assign object at 0x000001A51C562280>],
             'OpenPostionprofit_array': [<numba.core.ir.Assign object at 0x000001A51C5431C0>],
             'all_Fees': [<numba.core.ir.Assign object at 0x000001A51C54D670>,
                          <numba.core.ir.Assign object at 0x000001A51C568040>,
                          <numba.core.ir.Assign object at 0x000001A51C56C520>],
             'all_Fees_array': [<numba.core.ir.Assign object at 0x000001A51C548D60>],
             'bool296': [<numba.core.ir.Assign object at 0x000001A51C554C70>],
             'bool310': [<numba.core.ir.Assign object at 0x000001A51C5593D0>],
             'bool464': [<numba.core.ir.Assign object at 0x000001A51C566070>],
             'bool482': [<numba.core.ir.Assign object at 0x000001A51C560700>],
             'bool500': [<numba.core.ir.Assign object at 0x000001A51C559F40>],
             'bool510': [<numba.core.ir.Assign object at 0x000001A51C5669A0>],
             'bool530': [<numba.core.ir.Assign object at 0x000001A51C5686D0>],
             'bool540': [<numba.core.ir.Assign object at 0x000001A51C568E80>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x000001A51C54AF70>,
                          <numba.core.ir.Assign object at 0x000001A51C55EBE0>],
             'buy_Fees_array': [<numba.core.ir.Assign object at 0x000001A51C541040>],
             'buy_sizes': [<numba.core.ir.Assign object at 0x000001A51C54BD30>],
             'close_array': [<numba.core.ir.Assign object at 0x000001A51C4F2B50>],
             'current_order': [<numba.core.ir.Assign object at 0x000001A51C550F40>],
             'direction': [<numba.core.ir.Assign object at 0x000001A51C550070>],
             'entryprice': [<numba.core.ir.Assign object at 0x000001A51C54AA30>,
                            <numba.core.ir.Assign object at 0x000001A51C55B6A0>],
             'entryprice_array': [<numba.core.ir.Assign object at 0x000001A51C53E760>],
             'exitsprice': [<numba.core.ir.Assign object at 0x000001A51C54ACD0>,
                            <numba.core.ir.Assign object at 0x000001A51C55E160>],
             'fee': [<numba.core.ir.Assign object at 0x000001A51C53A370>],
             'fee.1': [<numba.core.ir.Assign object at 0x000001A51C54DEB0>],
             'high_array': [<numba.core.ir.Assign object at 0x000001A51C4F22B0>],
             'highestarr': [<numba.core.ir.Assign object at 0x000001A51C4F2C70>],
             'i': [<numba.core.ir.Assign object at 0x000001A51C54AB80>],
             'init_cash': [<numba.core.ir.Assign object at 0x000001A51C4F2FD0>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x000001A51C5546D0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51C552CA0>],
             'low_array': [<numba.core.ir.Assign object at 0x000001A51C4F2A30>],
             'lowestarr': [<numba.core.ir.Assign object at 0x000001A51C4F2D90>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51C54A790>,
                               <numba.core.ir.Assign object at 0x000001A51C552550>,
                               <numba.core.ir.Assign object at 0x000001A51C559730>],
             'marketpostion_array': [<numba.core.ir.Assign object at 0x000001A51C53AE80>],
             'netprofit': [<numba.core.ir.Assign object at 0x000001A51C54D910>,
                           <numba.core.ir.Assign object at 0x000001A51C56E160>],
             'netprofit_array': [<numba.core.ir.Assign object at 0x000001A51C54A640>],
             'neworders': [<numba.core.ir.Assign object at 0x000001A51C570400>],
             'open_array': [<numba.core.ir.Assign object at 0x000001A51C4F2370>],
             'profit': [<numba.core.ir.Assign object at 0x000001A51C54B9D0>,
                        <numba.core.ir.Assign object at 0x000001A51C564A00>],
             'profit_array': [<numba.core.ir.Assign object at 0x000001A51C546340>],
             'sell_Fees': [<numba.core.ir.Assign object at 0x000001A51C54B250>,
                           <numba.core.ir.Assign object at 0x000001A51C5606A0>],
             'sell_Fees_array': [<numba.core.ir.Assign object at 0x000001A51C5418E0>],
             'sell_sizes': [<numba.core.ir.Assign object at 0x000001A51C54BF70>],
             'shiftorder': [<numba.core.ir.Assign object at 0x000001A51C552F40>],
             'size': [<numba.core.ir.Assign object at 0x000001A51C53A250>],
             'slippage': [<numba.core.ir.Assign object at 0x000001A51C53A130>],
             'slippage.1': [<numba.core.ir.Assign object at 0x000001A51C54DC70>]})
2023-02-02 09:41 DEBUG SSA violators {'ClosedPostionprofit',
 'Gross_loss',
 'Gross_profit',
 'OpenPostionprofit',
 'all_Fees',
 'buy_Fees',
 'entryprice',
 'exitsprice',
 'marketpostion',
 'netprofit',
 'profit',
 'sell_Fees'}
2023-02-02 09:41 DEBUG Fix SSA violator on var OpenPostionprofit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG first assign: OpenPostionprofit
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = call $398load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit, nb.py:454), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit, nb.py:454), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C4F2130>],
             318: [<numba.core.ir.Assign object at 0x000001A51C5A89D0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit, nb.py:454), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='OpenPostionprofit' stmt=OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit, nb.py:454), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node OpenPostionprofit.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG incoming_def OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit, nb.py:454), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit
2023-02-02 09:41 DEBUG find_def var='OpenPostionprofit' stmt=netprofit = $564binary_add.7 + OpenPostionprofit
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-02-02 09:41 DEBUG find_def var='OpenPostionprofit' stmt=OpenPostionprofit_array[i] = OpenPostionprofit
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2490>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var buy_Fees
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG first assign: buy_Fees
2023-02-02 09:41 DEBUG replaced with: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: buy_Fees.1 = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C4F28E0>],
             318: [<numba.core.ir.Assign object at 0x000001A51C5A85B0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='buy_Fees' stmt=buy_Fees.1 = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node buy_Fees.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG incoming_def buy_Fees.1 = call $362load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees, nb.py:452), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='buy_Fees' stmt=OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='buy_Fees' stmt=ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees, nb.py:452), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees
2023-02-02 09:41 DEBUG find_def var='buy_Fees' stmt=$518binary_add.3 = all_Fees + buy_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 514
2023-02-02 09:41 DEBUG idom 504 from label 514
2023-02-02 09:41 DEBUG find_def_from_bottom label 504
2023-02-02 09:41 DEBUG find_def_from_top label 504
2023-02-02 09:41 DEBUG idom 494 from label 504
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-02-02 09:41 DEBUG find_def var='buy_Fees' stmt=buy_Fees_array[i] = buy_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A89D0>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var ClosedPostionprofit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG first assign: ClosedPostionprofit
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575C70>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C575AC0>],
             318: [<numba.core.ir.Assign object at 0x000001A51C5A8D00>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node ClosedPostionprofit.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit, nb.py:455), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var Gross_profit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG first assign: Gross_profit
2023-02-02 09:41 DEBUG replaced with: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit = $472binary_add.3
2023-02-02 09:41 DEBUG replaced with: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C575B20>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C4F2940>],
             468: [<numba.core.ir.Assign object at 0x000001A51C5A8970>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG find_def var='Gross_profit' stmt=$472binary_add.3 = Gross_profit + profit
2023-02-02 09:41 DEBUG find_def_from_top label 468
2023-02-02 09:41 DEBUG idom 318 from label 468
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node Gross_profit.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG insert phi node Gross_profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 468
2023-02-02 09:41 DEBUG incoming_def Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG incoming_def Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459)], incoming_blocks=[0])
2023-02-02 09:41 DEBUG incoming_def Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG replaced with: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG find_def var='Gross_profit' stmt=$560binary_add.5 = $556binary_subtract.3 + Gross_profit
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG replaced with: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG find_def var='Gross_profit' stmt=Gross_profit_array[i] = Gross_profit
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG replaced with: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A8D00>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var netprofit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG first assign: netprofit
2023-02-02 09:41 DEBUG replaced with: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG replaced with: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C4F21F0>],
             552: [<numba.core.ir.Assign object at 0x000001A51C5A2340>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG find_def var='netprofit' stmt=netprofit_array[i] = netprofit
2023-02-02 09:41 DEBUG replaced with: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5759D0>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var entryprice
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG first assign: entryprice
2023-02-02 09:41 DEBUG replaced with: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: entryprice.1 = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8EE0>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C5A8100>],
             318: [<numba.core.ir.Assign object at 0x000001A51C4F2640>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice
2023-02-02 09:41 DEBUG find_def var='entryprice' stmt=last_entryprice = entryprice
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node entryprice.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def entryprice = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG incoming_def entryprice.1 = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='entryprice' stmt=entryprice.1 = call $326load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice, nb.py:450), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG replaced with: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='entryprice' stmt=OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice, nb.py:450)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG find_def var='entryprice' stmt=entryprice_array[i] = entryprice
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2520>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var exitsprice
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG first assign: exitsprice
2023-02-02 09:41 DEBUG replaced with: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: exitsprice.1 = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2D60>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C5A28B0>],
             318: [<numba.core.ir.Assign object at 0x000001A51C5A8AC0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='exitsprice' stmt=exitsprice.1 = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node exitsprice.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG incoming_def exitsprice.1 = call $344load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice, nb.py:451), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='exitsprice' stmt=ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice, nb.py:451)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2640>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var profit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG first assign: profit
2023-02-02 09:41 DEBUG replaced with: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: profit.1 = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C5A89D0>],
             318: [<numba.core.ir.Assign object at 0x000001A51C5A2370>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='profit' stmt=profit.1 = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node profit.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def profit = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG incoming_def profit.1 = call $440load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit, nb.py:456), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG find_def var='profit' stmt=$462compare_op.65 = profit > $const460.64
2023-02-02 09:41 DEBUG replaced with: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG find_def var='profit' stmt=$472binary_add.3 = Gross_profit.2 + profit
2023-02-02 09:41 DEBUG find_def_from_top label 468
2023-02-02 09:41 DEBUG idom 318 from label 468
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG find_def var='profit' stmt=$480compare_op.3 = profit < $const478.2
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG find_def var='profit' stmt=$490binary_add.3 = Gross_loss + profit
2023-02-02 09:41 DEBUG find_def_from_top label 486
2023-02-02 09:41 DEBUG idom 476 from label 486
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit
2023-02-02 09:41 DEBUG find_def var='profit' stmt=profit_array[i] = profit
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2670>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var sell_Fees
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG first assign: sell_Fees
2023-02-02 09:41 DEBUG replaced with: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: sell_Fees.1 = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C4F2520>],
             318: [<numba.core.ir.Assign object at 0x000001A51C5A2040>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees.1 = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='sell_Fees' stmt=sell_Fees.1 = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node sell_Fees.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG incoming_def sell_Fees.1 = call $380load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees, nb.py:453), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='sell_Fees' stmt=ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees, nb.py:453), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG find_def var='sell_Fees' stmt=$548binary_add.3 = all_Fees + sell_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 544
2023-02-02 09:41 DEBUG idom 534 from label 544
2023-02-02 09:41 DEBUG find_def_from_bottom label 534
2023-02-02 09:41 DEBUG find_def_from_top label 534
2023-02-02 09:41 DEBUG idom 524 from label 534
2023-02-02 09:41 DEBUG find_def_from_bottom label 524
2023-02-02 09:41 DEBUG find_def_from_top label 524
2023-02-02 09:41 DEBUG idom 494 from label 524
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: $548binary_add.3 = all_Fees + sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG find_def var='sell_Fees' stmt=sell_Fees_array[i] = sell_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: sell_Fees_array[i] = sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A83A0>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var all_Fees
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG first assign: all_Fees
2023-02-02 09:41 DEBUG replaced with: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:453), Var(sell_Fees.1, nb.py:508)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $518binary_add.3
2023-02-02 09:41 DEBUG replaced with: all_Fees.1 = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees = $548binary_add.3
2023-02-02 09:41 DEBUG replaced with: all_Fees.2 = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C5A2730>],
             514: [<numba.core.ir.Assign object at 0x000001A51C5A8160>],
             544: [<numba.core.ir.Assign object at 0x000001A51C5C94F0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:453), Var(sell_Fees.1, nb.py:508)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG find_def var='all_Fees' stmt=$518binary_add.3 = all_Fees + buy_Fees.1
2023-02-02 09:41 DEBUG find_def_from_top label 514
2023-02-02 09:41 DEBUG idom 504 from label 514
2023-02-02 09:41 DEBUG find_def_from_bottom label 504
2023-02-02 09:41 DEBUG find_def_from_top label 504
2023-02-02 09:41 DEBUG idom 494 from label 504
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node all_Fees.3 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG insert phi node all_Fees.4 = phi(incoming_values=[], incoming_blocks=[]) at 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 544
2023-02-02 09:41 DEBUG incoming_def all_Fees.2 = $548binary_add.3
2023-02-02 09:41 DEBUG find_def_from_bottom label 514
2023-02-02 09:41 DEBUG incoming_def all_Fees.1 = $518binary_add.3
2023-02-02 09:41 DEBUG find_def_from_bottom label 524
2023-02-02 09:41 DEBUG find_def_from_top label 524
2023-02-02 09:41 DEBUG idom 494 from label 524
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG incoming_def all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:461)], incoming_blocks=[0])
2023-02-02 09:41 DEBUG find_def_from_bottom label 534
2023-02-02 09:41 DEBUG find_def_from_top label 534
2023-02-02 09:41 DEBUG idom 524 from label 534
2023-02-02 09:41 DEBUG find_def_from_bottom label 524
2023-02-02 09:41 DEBUG find_def_from_top label 524
2023-02-02 09:41 DEBUG idom 494 from label 524
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG incoming_def all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:461)], incoming_blocks=[0])
2023-02-02 09:41 DEBUG incoming_def all_Fees.4 = phi(incoming_values=[Var(all_Fees.2, nb.py:535), Var(all_Fees.1, nb.py:533), Var(all_Fees.3, nb.py:533), Var(all_Fees.3, nb.py:533)], incoming_blocks=[544, 514, 524, 534])
2023-02-02 09:41 DEBUG replaced with: $518binary_add.3 = all_Fees.3 + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.1 = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees + sell_Fees.1
2023-02-02 09:41 DEBUG find_def var='all_Fees' stmt=$548binary_add.3 = all_Fees + sell_Fees.1
2023-02-02 09:41 DEBUG find_def_from_top label 544
2023-02-02 09:41 DEBUG idom 534 from label 544
2023-02-02 09:41 DEBUG find_def_from_bottom label 534
2023-02-02 09:41 DEBUG find_def_from_top label 534
2023-02-02 09:41 DEBUG idom 524 from label 534
2023-02-02 09:41 DEBUG find_def_from_bottom label 524
2023-02-02 09:41 DEBUG find_def_from_top label 524
2023-02-02 09:41 DEBUG idom 494 from label 524
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG replaced with: $548binary_add.3 = all_Fees.3 + sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.2 = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG find_def var='all_Fees' stmt=$556binary_subtract.3 = init_cash - all_Fees
2023-02-02 09:41 DEBUG replaced with: $556binary_subtract.3 = init_cash - all_Fees.4
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG find_def var='all_Fees' stmt=all_Fees_array[i] = all_Fees
2023-02-02 09:41 DEBUG replaced with: all_Fees_array[i] = all_Fees.4
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C4F2250>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var marketpostion
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG first assign: marketpostion
2023-02-02 09:41 DEBUG replaced with: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:461), Var(all_Fees.4, nb.py:533)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:453), Var(sell_Fees.1, nb.py:508)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 1)
2023-02-02 09:41 DEBUG replaced with: marketpostion.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: marketpostion.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees.3 + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.1 = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees.3 + sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.2 = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: all_Fees.4 = phi(incoming_values=[Var(all_Fees.2, nb.py:535), Var(all_Fees.1, nb.py:533), Var(all_Fees.3, nb.py:533), Var(all_Fees.3, nb.py:533)], incoming_blocks=[544, 514, 524, 534])
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees.4
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees.4
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5A8610>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C5A8F40>],
             300: [<numba.core.ir.Assign object at 0x000001A51C5A2FD0>],
             314: [<numba.core.ir.Assign object at 0x000001A51C4F2190>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:461), Var(all_Fees.4, nb.py:533)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:453), Var(sell_Fees.1, nb.py:508)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=last_marketpostion = marketpostion
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node marketpostion.3 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG insert phi node marketpostion.4 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG insert phi node marketpostion.5 = phi(incoming_values=[], incoming_blocks=[]) at 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG incoming_def marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:449)], incoming_blocks=[0])
2023-02-02 09:41 DEBUG find_def_from_bottom label 300
2023-02-02 09:41 DEBUG incoming_def marketpostion.1 = const(int, 1)
2023-02-02 09:41 DEBUG incoming_def marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:481), Var(marketpostion.1, nb.py:489)], incoming_blocks=[264, 300])
2023-02-02 09:41 DEBUG find_def_from_bottom label 314
2023-02-02 09:41 DEBUG incoming_def marketpostion.2 = const(int, 0)
2023-02-02 09:41 DEBUG incoming_def marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:481), Var(marketpostion.2, nb.py:491)], incoming_blocks=[304, 314])
2023-02-02 09:41 DEBUG replaced with: last_marketpostion = marketpostion.3
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=marketpostion_array[i] = marketpostion
2023-02-02 09:41 DEBUG replaced with: marketpostion_array[i] = marketpostion.4
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=profit.1 = call $440load_global.55(profit.2, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion, nb.py:449), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG replaced with: profit.1 = call $440load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=$498compare_op.3 = marketpostion == $const496.2
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: $498compare_op.3 = marketpostion.4 == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees.3 + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.1 = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG find_def var='marketpostion' stmt=$528compare_op.3 = marketpostion == $const526.2
2023-02-02 09:41 DEBUG find_def_from_top label 524
2023-02-02 09:41 DEBUG idom 494 from label 524
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG idom 476 from label 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG replaced with: $528compare_op.3 = marketpostion.4 == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees.3 + sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.2 = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: all_Fees.4 = phi(incoming_values=[Var(all_Fees.2, nb.py:535), Var(all_Fees.1, nb.py:533), Var(all_Fees.3, nb.py:533), Var(all_Fees.3, nb.py:533)], incoming_blocks=[544, 514, 524, 534])
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees.4
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees.4
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2700>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Fix SSA violator on var Gross_loss
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG first assign: Gross_loss
2023-02-02 09:41 DEBUG replaced with: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:449), Var(marketpostion.4, nb.py:481)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:461), Var(all_Fees.4, nb.py:533)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:453), Var(sell_Fees.1, nb.py:508)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:481), Var(marketpostion.1, nb.py:489)], incoming_blocks=[264, 300])
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:481), Var(marketpostion.2, nb.py:491)], incoming_blocks=[304, 314])
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss = $490binary_add.3
2023-02-02 09:41 DEBUG replaced with: Gross_loss.1 = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion.4 == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees.3 + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.1 = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion.4 == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees.3 + sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.2 = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: all_Fees.4 = phi(incoming_values=[Var(all_Fees.2, nb.py:535), Var(all_Fees.1, nb.py:533), Var(all_Fees.3, nb.py:533), Var(all_Fees.3, nb.py:533)], incoming_blocks=[544, 514, 524, 534])
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees.4
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees.4
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C5C9D90>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C5C9250>],
             486: [<numba.core.ir.Assign object at 0x000001A51C5C5BE0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: Length = arg(6, name=Length)
2023-02-02 09:41 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-02-02 09:41 DEBUG on stmt: size = arg(9, name=size)
2023-02-02 09:41 DEBUG on stmt: fee = arg(10, name=fee)
2023-02-02 09:41 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-02-02 09:41 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-02-02 09:41 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-02-02 09:41 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-02-02 09:41 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-02-02 09:41 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:436))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: marketpostion = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = size
2023-02-02 09:41 DEBUG on stmt: sell_sizes = size
2023-02-02 09:41 DEBUG on stmt: Gross_profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: all_Fees = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: netprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: slippage.1 = slippage
2023-02-02 09:41 DEBUG on stmt: fee.1 = fee
2023-02-02 09:41 DEBUG on stmt: direction = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_short1, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001A516A98E50>))
2023-02-02 09:41 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:436), Var(high_array, nb.py:436), Var(low_array, nb.py:436), Var(close_array, nb.py:436), Var(ATR_long2, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $234load_global.86 = global(TurtleStrategy: CPUDispatcher(<function TurtleStrategy at 0x000001A516B641F0>))
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $234load_global.86(high_array, highestarr, ATR_short, ATR_long, low_array, lowestarr, func=$234load_global.86, args=[Var(high_array, nb.py:436), Var(highestarr, nb.py:436), Var(ATR_short, nb.py:470), Var(ATR_long, nb.py:473), Var(low_array, nb.py:436), Var(lowestarr, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $252load_global.94 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $256call_function.96 = call $252load_global.94(Length, func=$252load_global.94, args=[Var(Length, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $258get_iter.97 = getiter(value=$256call_function.96)
2023-02-02 09:41 DEBUG on stmt: $phi260.0 = $258get_iter.97
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 260
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:449), Var(marketpostion.4, nb.py:481)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:461), Var(all_Fees.4, nb.py:533)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:453), Var(sell_Fees.1, nb.py:508)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:456), Var(profit.1, nb.py:520)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:451), Var(exitsprice.1, nb.py:500)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:450), Var(entryprice.1, nb.py:496)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:459), Var(Gross_profit.3, nb.py:525)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:455), Var(ClosedPostionprofit.1, nb.py:516)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:452), Var(buy_Fees.1, nb.py:504)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:454), Var(OpenPostionprofit.1, nb.py:512)], incoming_blocks=[0, 552])
2023-02-02 09:41 DEBUG on stmt: $260for_iter.1 = iternext(value=$phi260.0)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.2 = pair_first(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $260for_iter.3 = pair_second(value=$260for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi264.1 = $260for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $260for_iter.3, 264, 656
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 264
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: i = $phi264.1
2023-02-02 09:41 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-02-02 09:41 DEBUG on stmt: last_entryprice = entryprice.2
2023-02-02 09:41 DEBUG on stmt: $const292.11 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $294compare_op.12 = current_order == $const292.11
2023-02-02 09:41 DEBUG on stmt: bool296 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $296pred = call bool296($294compare_op.12, func=bool296, args=(Var($294compare_op.12, nb.py:488),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $296pred, 300, 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 300
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: jump 304
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 304
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:481), Var(marketpostion.1, nb.py:489)], incoming_blocks=[264, 300])
2023-02-02 09:41 DEBUG on stmt: $const306.2 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: $308compare_op.3 = current_order == $const306.2
2023-02-02 09:41 DEBUG on stmt: bool310 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $310pred = call bool310($308compare_op.3, func=bool310, args=(Var($308compare_op.3, nb.py:490),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $310pred, 314, 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 314
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 318
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 318
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:481), Var(marketpostion.2, nb.py:491)], incoming_blocks=[304, 314])
2023-02-02 09:41 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-02-02 09:41 DEBUG on stmt: $326load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x000001A516B0BC10>))
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = call $326load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$326load_global.4, args=[Var(entryprice.2, nb.py:481), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $344load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x000001A516B0BDC0>))
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = call $344load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$344load_global.12, args=[Var(exitsprice.2, nb.py:493), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(slippage.1, nb.py:465), Var(direction, nb.py:467)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $362load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x000001A516B0BF70>))
2023-02-02 09:41 DEBUG on stmt: buy_Fees.1 = call $362load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$362load_global.20, args=[Var(buy_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(buy_sizes, nb.py:457), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $380load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x000001A516B5A160>))
2023-02-02 09:41 DEBUG on stmt: sell_Fees.1 = call $380load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$380load_global.28, args=[Var(sell_Fees.2, nb.py:493), Var(fee.1, nb.py:466), Var(sell_sizes, nb.py:458), Var(Open, nb.py:482), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $398load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x000001A516B5A310>))
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = call $398load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$398load_global.36, args=[Var(OpenPostionprofit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(Open, nb.py:482), Var(buy_sizes, nb.py:457), Var(entryprice.1, nb.py:496)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $418load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x000001A516B5A4C0>))
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = call $418load_global.45(ClosedPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$418load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(buy_Fees.1, nb.py:504), Var(sell_Fees.1, nb.py:508), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485), Var(exitsprice.1, nb.py:500)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $440load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x000001A516B5A670>))
2023-02-02 09:41 DEBUG on stmt: profit.1 = call $440load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$440load_global.55, args=[Var(profit.2, nb.py:493), Var(marketpostion.4, nb.py:481), Var(last_marketpostion, nb.py:484), Var(Open, nb.py:482), Var(sell_sizes, nb.py:458), Var(last_entryprice, nb.py:485)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const460.64 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $462compare_op.65 = profit.1 > $const460.64
2023-02-02 09:41 DEBUG on stmt: bool464 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $464pred = call bool464($462compare_op.65, func=bool464, args=(Var($462compare_op.65, nb.py:524),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $464pred, 468, 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 468
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $472binary_add.3 = Gross_profit.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit.1 = $472binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 476
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 476
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.1, nb.py:525), Var(Gross_profit.2, nb.py:525)], incoming_blocks=[468, 318])
2023-02-02 09:41 DEBUG on stmt: $const478.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $480compare_op.3 = profit.1 < $const478.2
2023-02-02 09:41 DEBUG on stmt: bool482 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $482pred = call bool482($480compare_op.3, func=bool482, args=(Var($480compare_op.3, nb.py:528),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $482pred, 486, 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 486
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG find_def var='Gross_loss' stmt=$490binary_add.3 = Gross_loss + profit.1
2023-02-02 09:41 DEBUG find_def_from_top label 486
2023-02-02 09:41 DEBUG idom 476 from label 486
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG find_def_from_top label 260
2023-02-02 09:41 DEBUG insert phi node Gross_loss.2 = phi(incoming_values=[], incoming_blocks=[]) at 260
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def Gross_loss = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 552
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG find_def_from_top label 494
2023-02-02 09:41 DEBUG insert phi node Gross_loss.3 = phi(incoming_values=[], incoming_blocks=[]) at 494
2023-02-02 09:41 DEBUG find_def_from_bottom label 476
2023-02-02 09:41 DEBUG find_def_from_top label 476
2023-02-02 09:41 DEBUG idom 318 from label 476
2023-02-02 09:41 DEBUG find_def_from_bottom label 318
2023-02-02 09:41 DEBUG find_def_from_top label 318
2023-02-02 09:41 DEBUG idom 304 from label 318
2023-02-02 09:41 DEBUG find_def_from_bottom label 304
2023-02-02 09:41 DEBUG find_def_from_top label 304
2023-02-02 09:41 DEBUG idom 264 from label 304
2023-02-02 09:41 DEBUG find_def_from_bottom label 264
2023-02-02 09:41 DEBUG find_def_from_top label 264
2023-02-02 09:41 DEBUG idom 260 from label 264
2023-02-02 09:41 DEBUG find_def_from_bottom label 260
2023-02-02 09:41 DEBUG incoming_def Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:460)], incoming_blocks=[0])
2023-02-02 09:41 DEBUG find_def_from_bottom label 486
2023-02-02 09:41 DEBUG incoming_def Gross_loss.1 = $490binary_add.3
2023-02-02 09:41 DEBUG incoming_def Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.2, nb.py:529), Var(Gross_loss.1, nb.py:529)], incoming_blocks=[476, 486])
2023-02-02 09:41 DEBUG replaced with: $490binary_add.3 = Gross_loss.2 + profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_loss.1 = $490binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 494
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 494
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $const496.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $498compare_op.3 = marketpostion.4 == $const496.2
2023-02-02 09:41 DEBUG on stmt: bool500 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $500pred = call bool500($498compare_op.3, func=bool500, args=(Var($498compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $500pred, 504, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 504
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $const506.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $508compare_op.3 = last_marketpostion == $const506.2
2023-02-02 09:41 DEBUG on stmt: bool510 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $510pred = call bool510($508compare_op.3, func=bool510, args=(Var($508compare_op.3, nb.py:532),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $510pred, 514, 524
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 514
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $518binary_add.3 = all_Fees.3 + buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.1 = $518binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 524
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $const526.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $528compare_op.3 = marketpostion.4 == $const526.2
2023-02-02 09:41 DEBUG on stmt: bool530 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $530pred = call bool530($528compare_op.3, func=bool530, args=(Var($528compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $530pred, 534, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 534
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $const536.2 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $538compare_op.3 = last_marketpostion == $const536.2
2023-02-02 09:41 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:534),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $540pred, 544, 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 544
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $548binary_add.3 = all_Fees.3 + sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: all_Fees.2 = $548binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 552
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 552
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: all_Fees.4 = phi(incoming_values=[Var(all_Fees.2, nb.py:535), Var(all_Fees.1, nb.py:533), Var(all_Fees.3, nb.py:533), Var(all_Fees.3, nb.py:533)], incoming_blocks=[544, 514, 524, 534])
2023-02-02 09:41 DEBUG on stmt: $556binary_subtract.3 = init_cash - all_Fees.4
2023-02-02 09:41 DEBUG on stmt: $560binary_add.5 = $556binary_subtract.3 + Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: $564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG find_def var='Gross_loss' stmt=$564binary_add.7 = $560binary_add.5 + Gross_loss
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG replaced with: $564binary_add.7 = $560binary_add.5 + Gross_loss.3
2023-02-02 09:41 DEBUG on stmt: netprofit.1 = $564binary_add.7 + OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-02-02 09:41 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-02-02 09:41 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-02-02 09:41 DEBUG on stmt: profit_array[i] = profit.1
2023-02-02 09:41 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-02-02 09:41 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG find_def var='Gross_loss' stmt=Gross_loss_array[i] = Gross_loss
2023-02-02 09:41 DEBUG find_def_from_top label 552
2023-02-02 09:41 DEBUG idom 494 from label 552
2023-02-02 09:41 DEBUG find_def_from_bottom label 494
2023-02-02 09:41 DEBUG replaced with: Gross_loss_array[i] = Gross_loss.3
2023-02-02 09:41 DEBUG on stmt: all_Fees_array[i] = all_Fees.4
2023-02-02 09:41 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-02-02 09:41 DEBUG on stmt: jump 260
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 656
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C5A2370>
2023-02-02 09:41 DEBUG on stmt: $656load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x000001A516B5AB80>))
2023-02-02 09:41 DEBUG on stmt: neworders = call $656load_global.0(marketpostion_array, func=$656load_global.0, args=[Var(marketpostion_array, nb.py:436)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $688build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:556), Var(marketpostion_array, nb.py:436), Var(entryprice_array, nb.py:437), Var(buy_Fees_array, nb.py:438), Var(sell_Fees_array, nb.py:439), Var(OpenPostionprofit_array, nb.py:440), Var(ClosedPostionprofit_array, nb.py:441), Var(profit_array, nb.py:442), Var(Gross_profit_array, nb.py:443), Var(Gross_loss_array, nb.py:444), Var(all_Fees_array, nb.py:445), Var(netprofit_array, nb.py:446)])
2023-02-02 09:41 DEBUG on stmt: $690return_value.16 = cast(value=$688build_tuple.15)
2023-02-02 09:41 DEBUG on stmt: return $690return_value.16
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$10call_function.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C614790>
2023-02-02 09:41 DEBUG on stmt: shape = arg(0, name=shape)
2023-02-02 09:41 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-02-02 09:41 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-02-02 09:41 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001A51C61DAF0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51C61DC40>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C61D580>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001A51C61D940>],
             'dtype': [<numba.core.ir.Assign object at 0x000001A51C61D400>],
             'shape': [<numba.core.ir.Assign object at 0x000001A51C61D2E0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3979)
           2	LOAD_FAST(arg=0, lineno=3979)
           4	LOAD_METHOD(arg=0, lineno=3979)
           6	LOAD_FAST(arg=1, lineno=3979)
           8	LOAD_FAST(arg=2, lineno=3979)
          10	CALL_METHOD(arg=2, lineno=3979)
          12	RETURN_VALUE(arg=None, lineno=3979)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3979)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3979)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3979)
2023-02-02 09:41 DEBUG stack ['$arrtype2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3979)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3979)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$size6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3979)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$size6.2', '$align8.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3979)
2023-02-02 09:41 DEBUG stack ['$10call_method.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C6F03D0>
2023-02-02 09:41 DEBUG on stmt: arrtype = arg(0, name=arrtype)
2023-02-02 09:41 DEBUG on stmt: size = arg(1, name=size)
2023-02-02 09:41 DEBUG on stmt: align = arg(2, name=align)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
2023-02-02 09:41 DEBUG on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_method.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x000001A51C6693D0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51C669520>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51C66DFA0>],
             'align': [<numba.core.ir.Assign object at 0x000001A51C66DD00>],
             'arrtype': [<numba.core.ir.Assign object at 0x000001A51C66DAC0>],
             'size': [<numba.core.ir.Assign object at 0x000001A51C66DBE0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3972)
           2	LOAD_GLOBAL(arg=0, lineno=3972)
           4	LOAD_FAST(arg=1, lineno=3972)
           6	LOAD_FAST(arg=2, lineno=3972)
           8	CALL_FUNCTION(arg=2, lineno=3972)
          10	RETURN_VALUE(arg=None, lineno=3972)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3972)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3972)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3972)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3972)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$allocsize4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3972)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3972)
2023-02-02 09:41 DEBUG stack ['$8call_function.3']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C66D820>
2023-02-02 09:41 DEBUG on stmt: cls = arg(0, name=cls)
2023-02-02 09:41 DEBUG on stmt: allocsize = arg(1, name=allocsize)
2023-02-02 09:41 DEBUG on stmt: align = arg(2, name=align)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2023-02-02 09:41 DEBUG on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $10return_value.4 = cast(value=$8call_function.3)
2023-02-02 09:41 DEBUG on stmt: return $10return_value.4
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000001A51C705070>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C6FBAF0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000001A51C6FBEE0>],
             'align': [<numba.core.ir.Assign object at 0x000001A51C6FB970>],
             'allocsize': [<numba.core.ir.Assign object at 0x000001A51C6FB850>],
             'cls': [<numba.core.ir.Assign object at 0x000001A51C6FB340>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=52)
           2	LOAD_GLOBAL(arg=0, lineno=52)
           4	LOAD_METHOD(arg=1, lineno=52)
           6	LOAD_FAST(arg=3, lineno=52)
           8	LOAD_CONST(arg=1, lineno=52)
          10	CALL_METHOD(arg=2, lineno=52)
          12	STORE_FAST(arg=5, lineno=52)
          14	LOAD_CONST(arg=2, lineno=53)
          16	LOAD_FAST(arg=5, lineno=53)
          18	LOAD_CONST(arg=2, lineno=53)
          20	STORE_SUBSCR(arg=None, lineno=53)
          22	LOAD_CONST(arg=6, lineno=55)
          24	LOAD_CONST(arg=4, lineno=55)
          26	LOAD_CONST(arg=5, lineno=55)
          28	MAKE_FUNCTION(arg=1, lineno=55)
          30	STORE_FAST(arg=6, lineno=55)
          32	LOAD_GLOBAL(arg=0, lineno=65)
          34	LOAD_METHOD(arg=2, lineno=65)
          36	LOAD_FAST(arg=3, lineno=65)
          38	LOAD_FAST(arg=2, lineno=65)
          40	BINARY_SUBTRACT(arg=None, lineno=65)
          42	LOAD_GLOBAL(arg=0, lineno=66)
          44	LOAD_METHOD(arg=3, lineno=66)
          46	LOAD_FAST(arg=1, lineno=66)
          48	LOAD_FAST(arg=5, lineno=66)
          50	BINARY_SUBTRACT(arg=None, lineno=66)
          52	CALL_METHOD(arg=1, lineno=66)
          54	CALL_METHOD(arg=2, lineno=65)
          56	STORE_FAST(arg=7, lineno=65)
          58	LOAD_GLOBAL(arg=0, lineno=67)
          60	LOAD_METHOD(arg=2, lineno=67)
          62	LOAD_FAST(arg=7, lineno=67)
          64	LOAD_GLOBAL(arg=0, lineno=67)
          66	LOAD_METHOD(arg=3, lineno=67)
          68	LOAD_FAST(arg=2, lineno=67)
          70	LOAD_FAST(arg=5, lineno=67)
          72	BINARY_SUBTRACT(arg=None, lineno=67)
          74	CALL_METHOD(arg=1, lineno=67)
          76	CALL_METHOD(arg=2, lineno=67)
          78	STORE_FAST(arg=8, lineno=67)
          80	LOAD_FAST(arg=6, lineno=68)
          82	LOAD_FAST(arg=8, lineno=68)
          84	LOAD_FAST(arg=4, lineno=68)
          86	CALL_FUNCTION(arg=2, lineno=68)
          88	STORE_FAST(arg=9, lineno=68)
          90	LOAD_FAST(arg=9, lineno=70)
          92	RETURN_VALUE(arg=None, lineno=70)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=52)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=52)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=52)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=52)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=52)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$close_array6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=52)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$close_array6.2', '$const8.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=STORE_FAST(arg=5, lineno=52)
2023-02-02 09:41 DEBUG stack ['$10call_method.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=53)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=5, lineno=53)
2023-02-02 09:41 DEBUG stack ['$const14.5']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=53)
2023-02-02 09:41 DEBUG stack ['$const14.5', '$last_close_array16.6']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=STORE_SUBSCR(arg=None, lineno=53)
2023-02-02 09:41 DEBUG stack ['$const14.5', '$last_close_array16.6', '$const18.7']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_CONST(arg=6, lineno=55)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=4, lineno=55)
2023-02-02 09:41 DEBUG stack ['$const22.8']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_CONST(arg=5, lineno=55)
2023-02-02 09:41 DEBUG stack ['$const22.8', '$const24.9']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=MAKE_FUNCTION(arg=1, lineno=55)
2023-02-02 09:41 DEBUG stack ['$const22.8', '$const24.9', '$const26.10']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=STORE_FAST(arg=6, lineno=55)
2023-02-02 09:41 DEBUG stack ['$28make_function.11']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=65)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=65)
2023-02-02 09:41 DEBUG stack ['$32load_global.12']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=65)
2023-02-02 09:41 DEBUG stack ['$34load_method.13']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=65)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$close_array36.14']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=65)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$close_array36.14', '$low_array38.15']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=66)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$40binary_subtract.16']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_METHOD(arg=3, lineno=66)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$42load_global.17']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=66)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=66)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$high_array46.19']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=BINARY_SUBTRACT(arg=None, lineno=66)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$high_array46.19', '$last_close_array48.20']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=66)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$50binary_subtract.21']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=CALL_METHOD(arg=2, lineno=65)
2023-02-02 09:41 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$52call_method.22']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=STORE_FAST(arg=7, lineno=65)
2023-02-02 09:41 DEBUG stack ['$54call_method.23']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=67)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=60, inst=LOAD_METHOD(arg=2, lineno=67)
2023-02-02 09:41 DEBUG stack ['$58load_global.24']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=LOAD_GLOBAL(arg=0, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25', '$each_num62.26']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=LOAD_METHOD(arg=3, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25', '$each_num62.26', '$64load_global.27']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=LOAD_FAST(arg=2, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$low_array68.29']
2023-02-02 09:41 DEBUG dispatch pc=72, inst=BINARY_SUBTRACT(arg=None, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$low_array68.29', '$last_close_array70.30']
2023-02-02 09:41 DEBUG dispatch pc=74, inst=CALL_METHOD(arg=1, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$72binary_subtract.31']
2023-02-02 09:41 DEBUG dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=67)
2023-02-02 09:41 DEBUG stack ['$60load_method.25', '$each_num62.26', '$74call_method.32']
2023-02-02 09:41 DEBUG dispatch pc=78, inst=STORE_FAST(arg=8, lineno=67)
2023-02-02 09:41 DEBUG stack ['$76call_method.33']
2023-02-02 09:41 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=68)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=82, inst=LOAD_FAST(arg=8, lineno=68)
2023-02-02 09:41 DEBUG stack ['$moving_average80.34']
2023-02-02 09:41 DEBUG dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=68)
2023-02-02 09:41 DEBUG stack ['$moving_average80.34', '$TR82.35']
2023-02-02 09:41 DEBUG dispatch pc=86, inst=CALL_FUNCTION(arg=2, lineno=68)
2023-02-02 09:41 DEBUG stack ['$moving_average80.34', '$TR82.35', '$parameter_timeperiod84.36']
2023-02-02 09:41 DEBUG dispatch pc=88, inst=STORE_FAST(arg=9, lineno=68)
2023-02-02 09:41 DEBUG stack ['$86call_function.37']
2023-02-02 09:41 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=9, lineno=70)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=70)
2023-02-02 09:41 DEBUG stack ['$ATR90.38']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$close_array6.2'}), (8, {'res': '$const8.3'}), (10, {'func': '$4load_method.1', 'args': ['$close_array6.2', '$const8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$last_close_array16.6'}), (18, {'res': '$const18.7'}), (20, {'target': '$last_close_array16.6', 'index': '$const18.7', 'value': '$const14.5'}), (22, {'res': '$const22.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$const26.10'}), (28, {'name': '$const26.10', 'code': '$const24.9', 'closure': None, 'annotations': None, 'kwdefaults': None, 'defaults': '$const22.8', 'res': '$28make_function.11'}), (30, {'value': '$28make_function.11'}), (32, {'res': '$32load_global.12'}), (34, {'item': '$32load_global.12', 'res': '$34load_method.13'}), (36, {'res': '$close_array36.14'}), (38, {'res': '$low_array38.15'}), (40, {'lhs': '$close_array36.14', 'rhs': '$low_array38.15', 'res': '$40binary_subtract.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_method.18'}), (46, {'res': '$high_array46.19'}), (48, {'res': '$last_close_array48.20'}), (50, {'lhs': '$high_array46.19', 'rhs': '$last_close_array48.20', 'res': '$50binary_subtract.21'}), (52, {'func': '$44load_method.18', 'args': ['$50binary_subtract.21'], 'res': '$52call_method.22'}), (54, {'func': '$34load_method.13', 'args': ['$40binary_subtract.16', '$52call_method.22'], 'res': '$54call_method.23'}), (56, {'value': '$54call_method.23'}), (58, {'res': '$58load_global.24'}), (60, {'item': '$58load_global.24', 'res': '$60load_method.25'}), (62, {'res': '$each_num62.26'}), (64, {'res': '$64load_global.27'}), (66, {'item': '$64load_global.27', 'res': '$66load_method.28'}), (68, {'res': '$low_array68.29'}), (70, {'res': '$last_close_array70.30'}), (72, {'lhs': '$low_array68.29', 'rhs': '$last_close_array70.30', 'res': '$72binary_subtract.31'}), (74, {'func': '$66load_method.28', 'args': ['$72binary_subtract.31'], 'res': '$74call_method.32'}), (76, {'func': '$60load_method.25', 'args': ['$each_num62.26', '$74call_method.32'], 'res': '$76call_method.33'}), (78, {'value': '$76call_method.33'}), (80, {'res': '$moving_average80.34'}), (82, {'res': '$TR82.35'}), (84, {'res': '$parameter_timeperiod84.36'}), (86, {'func': '$moving_average80.34', 'args': ['$TR82.35', '$parameter_timeperiod84.36'], 'res': '$86call_function.37'}), (88, {'value': '$86call_function.37'}), (90, {'res': '$ATR90.38'}), (92, {'retval': '$ATR90.38', 'castval': '$92return_value.39'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    Length = arg(0, name=Length)             ['Length']
    high_array = arg(1, name=high_array)     ['high_array']
    low_array = arg(2, name=low_array)       ['low_array']
    close_array = arg(3, name=close_array)   ['close_array']
    parameter_timeperiod = arg(4, name=parameter_timeperiod) ['parameter_timeperiod']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=roll) ['$2load_global.0', '$4load_method.1']
    $const8.3 = const(int, 1)                ['$const8.3']
    last_close_array = call $4load_method.1(close_array, $const8.3, func=$4load_method.1, args=[Var(close_array, nb.py:52), Var($const8.3, nb.py:52)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$const8.3', 'close_array', 'last_close_array']
    $const14.5 = const(int, 0)               ['$const14.5']
    $const18.7 = const(int, 0)               ['$const18.7']
    last_close_array[$const18.7] = $const14.5 ['$const14.5', '$const18.7', 'last_close_array']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.8 = build_tuple(items=[Var($const_3, nb.py:55)]) ['$const22.8', '$const_3']
    $const24.9 = const(code, <code object moving_average at 0x000001A515E7C870, file "c:\Users\user\Desktop\程式專區\lab_vbt\Crypto_trading\Count\nb.py", line 55>) ['$const24.9']
    $const26.10 = const(str, get_ATR.<locals>.moving_average) ['$const26.10']
    moving_average = make_function(name=$const26.10, code=<code object moving_average at 0x000001A515E7C870, file "c:\Users\user\Desktop\程式專區\lab_vbt\Crypto_trading\Count\nb.py", line 55>, closure=None, defaults=$const22.8) ['$const22.8', '$const26.10', 'moving_average']
    $32load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$32load_global.12']
    $34load_method.13 = getattr(value=$32load_global.12, attr=maximum) ['$32load_global.12', '$34load_method.13']
    $40binary_subtract.16 = close_array - low_array ['$40binary_subtract.16', 'close_array', 'low_array']
    $42load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=abs) ['$42load_global.17', '$44load_method.18']
    $50binary_subtract.21 = high_array - last_close_array ['$50binary_subtract.21', 'high_array', 'last_close_array']
    $52call_method.22 = call $44load_method.18($50binary_subtract.21, func=$44load_method.18, args=[Var($50binary_subtract.21, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_method.18', '$50binary_subtract.21', '$52call_method.22']
    each_num = call $34load_method.13($40binary_subtract.16, $52call_method.22, func=$34load_method.13, args=[Var($40binary_subtract.16, nb.py:65), Var($52call_method.22, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_method.13', '$40binary_subtract.16', '$52call_method.22', 'each_num']
    $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.24']
    $60load_method.25 = getattr(value=$58load_global.24, attr=maximum) ['$58load_global.24', '$60load_method.25']
    $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$64load_global.27']
    $66load_method.28 = getattr(value=$64load_global.27, attr=abs) ['$64load_global.27', '$66load_method.28']
    $72binary_subtract.31 = low_array - last_close_array ['$72binary_subtract.31', 'last_close_array', 'low_array']
    $74call_method.32 = call $66load_method.28($72binary_subtract.31, func=$66load_method.28, args=[Var($72binary_subtract.31, nb.py:67)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.28', '$72binary_subtract.31', '$74call_method.32']
    TR = call $60load_method.25(each_num, $74call_method.32, func=$60load_method.25, args=[Var(each_num, nb.py:65), Var($74call_method.32, nb.py:67)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.25', '$74call_method.32', 'TR', 'each_num']
    ATR = call moving_average(TR, parameter_timeperiod, func=moving_average, args=[Var(TR, nb.py:67), Var(parameter_timeperiod, nb.py:52)], kws=(), vararg=None, varkwarg=None, target=None) ['ATR', 'TR', 'moving_average', 'parameter_timeperiod']
    $92return_value.39 = cast(value=ATR)     ['$92return_value.39', 'ATR']
    return $92return_value.39                ['$92return_value.39']

2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=59)
           2	LOAD_GLOBAL(arg=0, lineno=59)
           4	LOAD_METHOD(arg=1, lineno=59)
           6	LOAD_FAST(arg=0, lineno=59)
           8	CALL_METHOD(arg=1, lineno=59)
          10	STORE_FAST(arg=2, lineno=59)
          12	LOAD_FAST(arg=2, lineno=60)
          14	LOAD_FAST(arg=1, lineno=60)
          16	LOAD_CONST(arg=1, lineno=60)
          18	BUILD_SLICE(arg=2, lineno=60)
          20	BINARY_SUBSCR(arg=None, lineno=60)
          22	LOAD_FAST(arg=2, lineno=60)
          24	LOAD_CONST(arg=1, lineno=60)
          26	LOAD_FAST(arg=1, lineno=60)
          28	UNARY_NEGATIVE(arg=None, lineno=60)
          30	BUILD_SLICE(arg=2, lineno=60)
          32	BINARY_SUBSCR(arg=None, lineno=60)
          34	BINARY_SUBTRACT(arg=None, lineno=60)
          36	LOAD_FAST(arg=2, lineno=60)
          38	LOAD_FAST(arg=1, lineno=60)
          40	LOAD_CONST(arg=1, lineno=60)
          42	BUILD_SLICE(arg=2, lineno=60)
          44	STORE_SUBSCR(arg=None, lineno=60)
          46	LOAD_GLOBAL(arg=0, lineno=61)
          48	LOAD_ATTR(arg=2, lineno=61)
          50	LOAD_FAST(arg=2, lineno=61)
          52	LOAD_CONST(arg=1, lineno=61)
          54	LOAD_FAST(arg=1, lineno=61)
          56	BUILD_SLICE(arg=2, lineno=61)
          58	STORE_SUBSCR(arg=None, lineno=61)
          60	LOAD_FAST(arg=2, lineno=62)
          62	LOAD_FAST(arg=1, lineno=62)
          64	BINARY_TRUE_DIVIDE(arg=None, lineno=62)
          66	RETURN_VALUE(arg=None, lineno=62)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=59)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=59)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=59)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=59)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=59)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$a6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=59)
2023-02-02 09:41 DEBUG stack ['$8call_method.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=60)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=60)
2023-02-02 09:41 DEBUG stack ['$ret12.4']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=60)
2023-02-02 09:41 DEBUG stack ['$ret12.4', '$n14.5']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=60)
2023-02-02 09:41 DEBUG stack ['$ret12.4', '$n14.5', '$const16.6']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=60)
2023-02-02 09:41 DEBUG stack ['$ret12.4', '$18build_slice.8']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=60)
2023-02-02 09:41 DEBUG stack ['$20binary_subscr.9']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=60)
2023-02-02 09:41 DEBUG stack ['$20binary_subscr.9', '$ret22.10']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=60)
2023-02-02 09:41 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=UNARY_NEGATIVE(arg=None, lineno=60)
2023-02-02 09:41 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11', '$n26.12']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=60)
2023-02-02 09:41 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11', '$28unary_negative.13']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=60)
2023-02-02 09:41 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$30build_slice.15']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2023-02-02 09:41 DEBUG stack ['$20binary_subscr.9', '$32binary_subscr.16']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=60)
2023-02-02 09:41 DEBUG stack ['$34binary_subtract.17']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=60)
2023-02-02 09:41 DEBUG stack ['$34binary_subtract.17', '$ret36.18']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=60)
2023-02-02 09:41 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$n38.19']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=BUILD_SLICE(arg=2, lineno=60)
2023-02-02 09:41 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$n38.19', '$const40.20']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=60)
2023-02-02 09:41 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$42build_slice.22']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=61)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=48, inst=LOAD_ATTR(arg=2, lineno=61)
2023-02-02 09:41 DEBUG stack ['$46load_global.23']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=61)
2023-02-02 09:41 DEBUG stack ['$48load_attr.24']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=61)
2023-02-02 09:41 DEBUG stack ['$48load_attr.24', '$ret50.25']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=61)
2023-02-02 09:41 DEBUG stack ['$48load_attr.24', '$ret50.25', '$const52.26']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=61)
2023-02-02 09:41 DEBUG stack ['$48load_attr.24', '$ret50.25', '$const52.26', '$n54.27']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=STORE_SUBSCR(arg=None, lineno=61)
2023-02-02 09:41 DEBUG stack ['$48load_attr.24', '$ret50.25', '$56build_slice.29']
2023-02-02 09:41 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=62)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=62)
2023-02-02 09:41 DEBUG stack ['$ret60.30']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=62)
2023-02-02 09:41 DEBUG stack ['$ret60.30', '$n62.31']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=62)
2023-02-02 09:41 DEBUG stack ['$64binary_true_divide.32']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$ret12.4'}), (14, {'res': '$n14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$n14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'index': '$18build_slice.8', 'target': '$ret12.4', 'res': '$20binary_subscr.9'}), (22, {'res': '$ret22.10'}), (24, {'res': '$const24.11'}), (26, {'res': '$n26.12'}), (28, {'value': '$n26.12', 'res': '$28unary_negative.13'}), (30, {'start': '$const24.11', 'stop': '$28unary_negative.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$ret22.10', 'res': '$32binary_subscr.16'}), (34, {'lhs': '$20binary_subscr.9', 'rhs': '$32binary_subscr.16', 'res': '$34binary_subtract.17'}), (36, {'res': '$ret36.18'}), (38, {'res': '$n38.19'}), (40, {'res': '$const40.20'}), (42, {'start': '$n38.19', 'stop': '$const40.20', 'step': None, 'res': '$42build_slice.22', 'slicevar': '$42build_slice.21'}), (44, {'target': '$ret36.18', 'index': '$42build_slice.22', 'value': '$34binary_subtract.17'}), (46, {'res': '$46load_global.23'}), (48, {'item': '$46load_global.23', 'res': '$48load_attr.24'}), (50, {'res': '$ret50.25'}), (52, {'res': '$const52.26'}), (54, {'res': '$n54.27'}), (56, {'start': '$const52.26', 'stop': '$n54.27', 'step': None, 'res': '$56build_slice.29', 'slicevar': '$56build_slice.28'}), (58, {'target': '$ret50.25', 'index': '$56build_slice.29', 'value': '$48load_attr.24'}), (60, {'res': '$ret60.30'}), (62, {'res': '$n62.31'}), (64, {'lhs': '$ret60.30', 'rhs': '$n62.31', 'res': '$64binary_true_divide.32'}), (66, {'retval': '$64binary_true_divide.32', 'castval': '$66return_value.33'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    n = arg(1, name=n)                       ['n']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cumsum) ['$2load_global.0', '$4load_method.1']
    ret = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, nb.py:59)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'ret']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7(n, $const16.6, func=$18build_slice.7, args=(Var(n, nb.py:59), Var($const16.6, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const16.6', 'n']
    $20binary_subscr.9 = getitem(value=ret, index=$18build_slice.8, fn=<built-in function getitem>) ['$18build_slice.8', '$20binary_subscr.9', 'ret']
    $const24.11 = const(NoneType, None)      ['$const24.11']
    $28unary_negative.13 = unary(fn=<built-in function neg>, value=n) ['$28unary_negative.13', 'n']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const24.11, $28unary_negative.13, func=$30build_slice.14, args=(Var($const24.11, nb.py:60), Var($28unary_negative.13, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None) ['$28unary_negative.13', '$30build_slice.14', '$30build_slice.15', '$const24.11']
    $32binary_subscr.16 = getitem(value=ret, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'ret']
    $34binary_subtract.17 = $20binary_subscr.9 - $32binary_subscr.16 ['$20binary_subscr.9', '$32binary_subscr.16', '$34binary_subtract.17']
    $const40.20 = const(NoneType, None)      ['$const40.20']
    $42build_slice.21 = global(slice: <class 'slice'>) ['$42build_slice.21']
    $42build_slice.22 = call $42build_slice.21(n, $const40.20, func=$42build_slice.21, args=(Var(n, nb.py:59), Var($const40.20, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None) ['$42build_slice.21', '$42build_slice.22', '$const40.20', 'n']
    ret[$42build_slice.22] = $34binary_subtract.17 ['$34binary_subtract.17', '$42build_slice.22', 'ret']
    $46load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$46load_global.23']
    $48load_attr.24 = getattr(value=$46load_global.23, attr=nan) ['$46load_global.23', '$48load_attr.24']
    $const52.26 = const(NoneType, None)      ['$const52.26']
    $56build_slice.28 = global(slice: <class 'slice'>) ['$56build_slice.28']
    $56build_slice.29 = call $56build_slice.28($const52.26, n, func=$56build_slice.28, args=(Var($const52.26, nb.py:61), Var(n, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None) ['$56build_slice.28', '$56build_slice.29', '$const52.26', 'n']
    ret[$56build_slice.29] = $48load_attr.24 ['$48load_attr.24', '$56build_slice.29', 'ret']
    $64binary_true_divide.32 = ret / n       ['$64binary_true_divide.32', 'n', 'ret']
    $66return_value.33 = cast(value=$64binary_true_divide.32) ['$64binary_true_divide.32', '$66return_value.33']
    return $66return_value.33                ['$66return_value.33']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C77E940>
2023-02-02 09:41 DEBUG on stmt: a = arg(0, name=a)
2023-02-02 09:41 DEBUG on stmt: n = arg(1, name=n)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cumsum)
2023-02-02 09:41 DEBUG on stmt: ret = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, nb.py:59)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const16.6 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: $18build_slice.8 = call $18build_slice.7(n, $const16.6, func=$18build_slice.7, args=(Var(n, nb.py:59), Var($const16.6, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $20binary_subscr.9 = getitem(value=ret, index=$18build_slice.8, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const24.11 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: $28unary_negative.13 = unary(fn=<built-in function neg>, value=n)
2023-02-02 09:41 DEBUG on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: $30build_slice.15 = call $30build_slice.14($const24.11, $28unary_negative.13, func=$30build_slice.14, args=(Var($const24.11, nb.py:60), Var($28unary_negative.13, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $32binary_subscr.16 = getitem(value=ret, index=$30build_slice.15, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $34binary_subtract.17 = $20binary_subscr.9 - $32binary_subscr.16
2023-02-02 09:41 DEBUG on stmt: $const40.20 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: $42build_slice.21 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: $42build_slice.22 = call $42build_slice.21(n, $const40.20, func=$42build_slice.21, args=(Var(n, nb.py:59), Var($const40.20, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: ret[$42build_slice.22] = $34binary_subtract.17
2023-02-02 09:41 DEBUG on stmt: $46load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $48load_attr.24 = getattr(value=$46load_global.23, attr=nan)
2023-02-02 09:41 DEBUG on stmt: $const52.26 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: $56build_slice.28 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: $56build_slice.29 = call $56build_slice.28($const52.26, n, func=$56build_slice.28, args=(Var($const52.26, nb.py:61), Var(n, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: ret[$56build_slice.29] = $48load_attr.24
2023-02-02 09:41 DEBUG on stmt: $64binary_true_divide.32 = ret / n
2023-02-02 09:41 DEBUG on stmt: $66return_value.33 = cast(value=$64binary_true_divide.32)
2023-02-02 09:41 DEBUG on stmt: return $66return_value.33
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$18build_slice.7': [<numba.core.ir.Assign object at 0x000001A51C7737C0>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x000001A51C7738E0>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x000001A51C773A30>],
             '$28unary_negative.13': [<numba.core.ir.Assign object at 0x000001A51C773F70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C755FA0>],
             '$30build_slice.14': [<numba.core.ir.Assign object at 0x000001A51C775160>],
             '$30build_slice.15': [<numba.core.ir.Assign object at 0x000001A51C775280>],
             '$32binary_subscr.16': [<numba.core.ir.Assign object at 0x000001A51C7753D0>],
             '$34binary_subtract.17': [<numba.core.ir.Assign object at 0x000001A51C775550>],
             '$42build_slice.21': [<numba.core.ir.Assign object at 0x000001A51C775AC0>],
             '$42build_slice.22': [<numba.core.ir.Assign object at 0x000001A51C775BE0>],
             '$46load_global.23': [<numba.core.ir.Assign object at 0x000001A51C775DF0>],
             '$48load_attr.24': [<numba.core.ir.Assign object at 0x000001A51C775F70>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51C76EE80>],
             '$56build_slice.28': [<numba.core.ir.Assign object at 0x000001A51C777520>],
             '$56build_slice.29': [<numba.core.ir.Assign object at 0x000001A51C777640>],
             '$64binary_true_divide.32': [<numba.core.ir.Assign object at 0x000001A51C777A90>],
             '$66return_value.33': [<numba.core.ir.Assign object at 0x000001A51C777C10>],
             '$const16.6': [<numba.core.ir.Assign object at 0x000001A51C773610>],
             '$const24.11': [<numba.core.ir.Assign object at 0x000001A51C773CD0>],
             '$const40.20': [<numba.core.ir.Assign object at 0x000001A51C775910>],
             '$const52.26': [<numba.core.ir.Assign object at 0x000001A51C777250>],
             'a': [<numba.core.ir.Assign object at 0x000001A51C603A30>],
             'n': [<numba.core.ir.Assign object at 0x000001A51C755C70>],
             'ret': [<numba.core.ir.Assign object at 0x000001A51C773160>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C779DC0>
2023-02-02 09:41 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-02-02 09:41 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-02-02 09:41 DEBUG on stmt: parameter_timeperiod = arg(4, name=parameter_timeperiod)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=roll)
2023-02-02 09:41 DEBUG on stmt: $const8.3 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: last_close_array = call $4load_method.1(close_array, $const8.3, func=$4load_method.1, args=[Var(close_array, nb.py:52), Var($const8.3, nb.py:52)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const14.5 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $const18.7 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: last_close_array[0] = $const14.5
2023-02-02 09:41 DEBUG on stmt: $32load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $34load_method.13 = getattr(value=$32load_global.12, attr=maximum)
2023-02-02 09:41 DEBUG on stmt: $40binary_subtract.16 = close_array - low_array
2023-02-02 09:41 DEBUG on stmt: $42load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=abs)
2023-02-02 09:41 DEBUG on stmt: $50binary_subtract.21 = high_array - last_close_array
2023-02-02 09:41 DEBUG on stmt: $52call_method.22 = call $44load_method.18($50binary_subtract.21, func=$44load_method.18, args=[Var($50binary_subtract.21, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: each_num = call $34load_method.13($40binary_subtract.16, $52call_method.22, func=$34load_method.13, args=[Var($40binary_subtract.16, nb.py:65), Var($52call_method.22, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $60load_method.25 = getattr(value=$58load_global.24, attr=maximum)
2023-02-02 09:41 DEBUG on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=abs)
2023-02-02 09:41 DEBUG on stmt: $72binary_subtract.31 = low_array - last_close_array
2023-02-02 09:41 DEBUG on stmt: $74call_method.32 = call $66load_method.28($72binary_subtract.31, func=$66load_method.28, args=[Var($72binary_subtract.31, nb.py:67)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: TR = call $60load_method.25(each_num, $74call_method.32, func=$60load_method.25, args=[Var(each_num, nb.py:65), Var($74call_method.32, nb.py:67)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6_a = TR
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6_n = parameter_timeperiod
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v2load_global_0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v4load_method_1 = getattr(value=closure__locals__moving_average_v6__v2load_global_0, attr=cumsum)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6_ret = call closure__locals__moving_average_v6__v4load_method_1(closure__locals__moving_average_v6_a, func=closure__locals__moving_average_v6__v4load_method_1, args=[Var(closure__locals__moving_average_v6_a, nb.py:59)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__vconst16_6 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v18build_slice_7 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v18build_slice_8 = call closure__locals__moving_average_v6__v18build_slice_7(closure__locals__moving_average_v6_n, closure__locals__moving_average_v6__vconst16_6, func=closure__locals__moving_average_v6__v18build_slice_7, args=(Var(closure__locals__moving_average_v6_n, nb.py:59), Var(closure__locals__moving_average_v6__vconst16_6, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v20binary_subscr_9 = getitem(value=closure__locals__moving_average_v6_ret, index=closure__locals__moving_average_v6__v18build_slice_8, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__vconst24_11 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v28unary_negative_13 = unary(fn=<built-in function neg>, value=closure__locals__moving_average_v6_n)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v30build_slice_14 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v30build_slice_15 = call closure__locals__moving_average_v6__v30build_slice_14(closure__locals__moving_average_v6__vconst24_11, closure__locals__moving_average_v6__v28unary_negative_13, func=closure__locals__moving_average_v6__v30build_slice_14, args=(Var(closure__locals__moving_average_v6__vconst24_11, nb.py:60), Var(closure__locals__moving_average_v6__v28unary_negative_13, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v32binary_subscr_16 = getitem(value=closure__locals__moving_average_v6_ret, index=closure__locals__moving_average_v6__v30build_slice_15, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v34binary_subtract_17 = closure__locals__moving_average_v6__v20binary_subscr_9 - closure__locals__moving_average_v6__v32binary_subscr_16
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__vconst40_20 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v42build_slice_21 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v42build_slice_22 = call closure__locals__moving_average_v6__v42build_slice_21(closure__locals__moving_average_v6_n, closure__locals__moving_average_v6__vconst40_20, func=closure__locals__moving_average_v6__v42build_slice_21, args=(Var(closure__locals__moving_average_v6_n, nb.py:59), Var(closure__locals__moving_average_v6__vconst40_20, nb.py:60)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6_ret[closure__locals__moving_average_v6__v42build_slice_22] = closure__locals__moving_average_v6__v34binary_subtract_17
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v46load_global_23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v48load_attr_24 = getattr(value=closure__locals__moving_average_v6__v46load_global_23, attr=nan)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__vconst52_26 = const(NoneType, None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v56build_slice_28 = global(slice: <class 'slice'>)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v56build_slice_29 = call closure__locals__moving_average_v6__v56build_slice_28(closure__locals__moving_average_v6__vconst52_26, closure__locals__moving_average_v6_n, func=closure__locals__moving_average_v6__v56build_slice_28, args=(Var(closure__locals__moving_average_v6__vconst52_26, nb.py:61), Var(closure__locals__moving_average_v6_n, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6_ret[closure__locals__moving_average_v6__v56build_slice_29] = closure__locals__moving_average_v6__v48load_attr_24
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v64binary_true_divide_32 = closure__locals__moving_average_v6_ret / closure__locals__moving_average_v6_n
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v66return_value_33 = closure__locals__moving_average_v6__v64binary_true_divide_32
2023-02-02 09:41 DEBUG on stmt: ATR = closure__locals__moving_average_v6__v66return_value_33
2023-02-02 09:41 DEBUG on stmt: $92return_value.39 = cast(value=ATR)
2023-02-02 09:41 DEBUG on stmt: return $92return_value.39
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C762430>],
             '$32load_global.12': [<numba.core.ir.Assign object at 0x000001A51C7699D0>],
             '$34load_method.13': [<numba.core.ir.Assign object at 0x000001A51C769B50>],
             '$40binary_subtract.16': [<numba.core.ir.Assign object at 0x000001A51C769F10>],
             '$42load_global.17': [<numba.core.ir.Assign object at 0x000001A51C76B0D0>],
             '$44load_method.18': [<numba.core.ir.Assign object at 0x000001A51C76B250>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51C7625B0>],
             '$50binary_subtract.21': [<numba.core.ir.Assign object at 0x000001A51C76B610>],
             '$52call_method.22': [<numba.core.ir.Assign object at 0x000001A51C76B7C0>],
             '$58load_global.24': [<numba.core.ir.Assign object at 0x000001A51C76BBB0>],
             '$60load_method.25': [<numba.core.ir.Assign object at 0x000001A51C76BD30>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x000001A51C76BFD0>],
             '$66load_method.28': [<numba.core.ir.Assign object at 0x000001A51C76C190>],
             '$72binary_subtract.31': [<numba.core.ir.Assign object at 0x000001A51C76C550>],
             '$74call_method.32': [<numba.core.ir.Assign object at 0x000001A51C76C700>],
             '$92return_value.39': [<numba.core.ir.Assign object at 0x000001A51C76E250>],
             '$const14.5': [<numba.core.ir.Assign object at 0x000001A51C762C70>],
             '$const18.7': [<numba.core.ir.Assign object at 0x000001A51C762F10>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001A51C762850>],
             'ATR': [<numba.core.ir.Assign object at 0x000001A51C783730>],
             'TR': [<numba.core.ir.Assign object at 0x000001A51C76C880>],
             'close_array': [<numba.core.ir.Assign object at 0x000001A51C7622E0>],
             'closure__locals__moving_average_v6__v18build_slice_7': [<numba.core.ir.Assign object at 0x000001A51C7737C0>],
             'closure__locals__moving_average_v6__v18build_slice_8': [<numba.core.ir.Assign object at 0x000001A51C7738E0>],
             'closure__locals__moving_average_v6__v20binary_subscr_9': [<numba.core.ir.Assign object at 0x000001A51C773A30>],
             'closure__locals__moving_average_v6__v28unary_negative_13': [<numba.core.ir.Assign object at 0x000001A51C773F70>],
             'closure__locals__moving_average_v6__v2load_global_0': [<numba.core.ir.Assign object at 0x000001A51C755FA0>],
             'closure__locals__moving_average_v6__v30build_slice_14': [<numba.core.ir.Assign object at 0x000001A51C775160>],
             'closure__locals__moving_average_v6__v30build_slice_15': [<numba.core.ir.Assign object at 0x000001A51C775280>],
             'closure__locals__moving_average_v6__v32binary_subscr_16': [<numba.core.ir.Assign object at 0x000001A51C7753D0>],
             'closure__locals__moving_average_v6__v34binary_subtract_17': [<numba.core.ir.Assign object at 0x000001A51C775550>],
             'closure__locals__moving_average_v6__v42build_slice_21': [<numba.core.ir.Assign object at 0x000001A51C775AC0>],
             'closure__locals__moving_average_v6__v42build_slice_22': [<numba.core.ir.Assign object at 0x000001A51C775BE0>],
             'closure__locals__moving_average_v6__v46load_global_23': [<numba.core.ir.Assign object at 0x000001A51C775DF0>],
             'closure__locals__moving_average_v6__v48load_attr_24': [<numba.core.ir.Assign object at 0x000001A51C775F70>],
             'closure__locals__moving_average_v6__v4load_method_1': [<numba.core.ir.Assign object at 0x000001A51C76EE80>],
             'closure__locals__moving_average_v6__v56build_slice_28': [<numba.core.ir.Assign object at 0x000001A51C777520>],
             'closure__locals__moving_average_v6__v56build_slice_29': [<numba.core.ir.Assign object at 0x000001A51C777640>],
             'closure__locals__moving_average_v6__v64binary_true_divide_32': [<numba.core.ir.Assign object at 0x000001A51C777A90>],
             'closure__locals__moving_average_v6__v66return_value_33': [<numba.core.ir.Assign object at 0x000001A51C777C10>],
             'closure__locals__moving_average_v6__vconst16_6': [<numba.core.ir.Assign object at 0x000001A51C773610>],
             'closure__locals__moving_average_v6__vconst24_11': [<numba.core.ir.Assign object at 0x000001A51C773CD0>],
             'closure__locals__moving_average_v6__vconst40_20': [<numba.core.ir.Assign object at 0x000001A51C775910>],
             'closure__locals__moving_average_v6__vconst52_26': [<numba.core.ir.Assign object at 0x000001A51C777250>],
             'closure__locals__moving_average_v6_a': [<numba.core.ir.Assign object at 0x000001A51C603A30>],
             'closure__locals__moving_average_v6_n': [<numba.core.ir.Assign object at 0x000001A51C755C70>],
             'closure__locals__moving_average_v6_ret': [<numba.core.ir.Assign object at 0x000001A51C773160>],
             'each_num': [<numba.core.ir.Assign object at 0x000001A51C76B940>],
             'high_array': [<numba.core.ir.Assign object at 0x000001A51C61DDC0>],
             'last_close_array': [<numba.core.ir.Assign object at 0x000001A51C762A00>],
             'low_array': [<numba.core.ir.Assign object at 0x000001A51C7620D0>],
             'parameter_timeperiod': [<numba.core.ir.Assign object at 0x000001A51C7621C0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2226)
           2	LOAD_GLOBAL(arg=0, lineno=2226)
           4	LOAD_METHOD(arg=1, lineno=2226)
           6	LOAD_FAST(arg=0, lineno=2226)
           8	CALL_METHOD(arg=1, lineno=2226)
          10	STORE_FAST(arg=2, lineno=2226)
          12	LOAD_GLOBAL(arg=0, lineno=2227)
          14	LOAD_ATTR(arg=2, lineno=2227)
          16	LOAD_FAST(arg=2, lineno=2227)
          18	LOAD_ATTR(arg=3, lineno=2227)
          20	LOAD_FAST(arg=2, lineno=2227)
          22	LOAD_ATTR(arg=4, lineno=2227)
          24	LOAD_CONST(arg=1, lineno=2227)
          26	CALL_FUNCTION_KW(arg=2, lineno=2227)
          28	STORE_FAST(arg=3, lineno=2227)
          30	LOAD_FAST(arg=2, lineno=2230)
          32	LOAD_ATTR(arg=5, lineno=2230)
          34	STORE_FAST(arg=4, lineno=2230)
          36	LOAD_GLOBAL(arg=6, lineno=2231)
          38	LOAD_FAST(arg=2, lineno=2231)
          40	LOAD_ATTR(arg=7, lineno=2231)
          42	CALL_FUNCTION(arg=1, lineno=2231)
          44	GET_ITER(arg=None, lineno=2231)
>         46	FOR_ITER(arg=32, lineno=2231)
          48	STORE_FAST(arg=5, lineno=2231)
          50	LOAD_FAST(arg=5, lineno=2232)
          52	LOAD_FAST(arg=1, lineno=2232)
          54	BINARY_ADD(arg=None, lineno=2232)
          56	LOAD_FAST(arg=2, lineno=2232)
          58	LOAD_ATTR(arg=7, lineno=2232)
          60	BINARY_MODULO(arg=None, lineno=2232)
          62	STORE_FAST(arg=6, lineno=2232)
          64	LOAD_FAST(arg=4, lineno=2233)
          66	LOAD_FAST(arg=5, lineno=2233)
          68	BINARY_SUBSCR(arg=None, lineno=2233)
          70	LOAD_FAST(arg=3, lineno=2233)
          72	LOAD_ATTR(arg=5, lineno=2233)
          74	LOAD_FAST(arg=6, lineno=2233)
          76	STORE_SUBSCR(arg=None, lineno=2233)
          78	JUMP_ABSOLUTE(arg=46, lineno=2233)
>         80	LOAD_FAST(arg=3, lineno=2235)
          82	RETURN_VALUE(arg=None, lineno=2235)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2226)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2226)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$a6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$8call_method.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2227)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$12load_global.4']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=3, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$arr16.6']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$arr20.8']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=CALL_FUNCTION_KW(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', '$const24.10']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$26call_function_kw.11']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2230)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=5, lineno=2230)
2023-02-02 09:41 DEBUG stack ['$arr30.12']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2230)
2023-02-02 09:41 DEBUG stack ['$32load_attr.13']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=6, lineno=2231)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$36load_global.14']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=7, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$36load_global.14', '$arr38.15']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=1, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$36load_global.14', '$40load_attr.16']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$42call_function.17']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.18',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi46.0']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=FOR_ITER(arg=32, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$phi46.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2235)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=2235)
2023-02-02 09:41 DEBUG stack ['$out80.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=48 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi48.0', '$phi48.1']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=STORE_FAST(arg=5, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$phi48.1']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$i50.2']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$i50.2', '$shift52.3']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$54binary_add.4']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=LOAD_ATTR(arg=7, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$54binary_add.4', '$arr56.5']
2023-02-02 09:41 DEBUG dispatch pc=60, inst=BINARY_MODULO(arg=None, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$54binary_add.4', '$58load_attr.6']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=STORE_FAST(arg=6, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$60binary_modulo.7']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$arr_flat64.8']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$arr_flat64.8', '$i66.9']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10']
2023-02-02 09:41 DEBUG dispatch pc=72, inst=LOAD_ATTR(arg=5, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$out70.11']
2023-02-02 09:41 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=6, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12']
2023-02-02 09:41 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12', '$idx74.13']
2023-02-02 09:41 DEBUG dispatch pc=78, inst=JUMP_ABSOLUTE(arg=46, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=80 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG keep phismap: {'$phi46.0': {('$44get_iter.18', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.18'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_attr.7'}), (20, {'res': '$arr20.8'}), (22, {'item': '$arr20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'func': '$14load_attr.5', 'args': ['$18load_attr.7', '$22load_attr.9'], 'names': '$const24.10', 'res': '$26call_function_kw.11'}), (28, {'value': '$26call_function_kw.11'}), (30, {'res': '$arr30.12'}), (32, {'item': '$arr30.12', 'res': '$32load_attr.13'}), (34, {'value': '$32load_attr.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$arr38.15'}), (40, {'item': '$arr38.15', 'res': '$40load_attr.16'}), (42, {'func': '$36load_global.14', 'args': ['$40load_attr.16'], 'res': '$42call_function.17'}), (44, {'value': '$42call_function.17', 'res': '$44get_iter.18'})), outgoing_phis={'$phi46.0': '$44get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.18',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 48: ('$phi46.0', '$46for_iter.2')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$i50.2'}), (52, {'res': '$shift52.3'}), (54, {'lhs': '$i50.2', 'rhs': '$shift52.3', 'res': '$54binary_add.4'}), (56, {'res': '$arr56.5'}), (58, {'item': '$arr56.5', 'res': '$58load_attr.6'}), (60, {'lhs': '$54binary_add.4', 'rhs': '$58load_attr.6', 'res': '$60binary_modulo.7'}), (62, {'value': '$60binary_modulo.7'}), (64, {'res': '$arr_flat64.8'}), (66, {'res': '$i66.9'}), (68, {'index': '$i66.9', 'target': '$arr_flat64.8', 'res': '$68binary_subscr.10'}), (70, {'res': '$out70.11'}), (72, {'item': '$out70.11', 'res': '$72load_attr.12'}), (74, {'res': '$idx74.13'}), (76, {'target': '$72load_attr.12', 'index': '$idx74.13', 'value': '$68binary_subscr.10'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$out80.0'}), (82, {'retval': '$out80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    shift = arg(1, name=shift)               ['shift']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'arr']
    $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.4']
    $14load_attr.5 = getattr(value=$12load_global.4, attr=empty) ['$12load_global.4', '$14load_attr.5']
    $18load_attr.7 = getattr(value=arr, attr=shape) ['$18load_attr.7', 'arr']
    $22load_attr.9 = getattr(value=arr, attr=dtype) ['$22load_attr.9', 'arr']
    out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', 'out']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $36load_global.14 = global(range: <class 'range'>) ['$36load_global.14']
    $40load_attr.16 = getattr(value=arr, attr=size) ['$40load_attr.16', 'arr']
    $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.14', '$40load_attr.16', '$42call_function.17']
    $44get_iter.18 = getiter(value=$42call_function.17) ['$42call_function.17', '$44get_iter.18']
    $phi46.0 = $44get_iter.18                ['$44get_iter.18', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 80             ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    $54binary_add.4 = i + shift              ['$54binary_add.4', 'i', 'shift']
    $58load_attr.6 = getattr(value=arr, attr=size) ['$58load_attr.6', 'arr']
    idx = $54binary_add.4 % $58load_attr.6   ['$54binary_add.4', '$58load_attr.6', 'idx']
    $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>) ['$68binary_subscr.10', 'arr_flat', 'i']
    $72load_attr.12 = getattr(value=out, attr=flat) ['$72load_attr.12', 'out']
    $72load_attr.12[idx] = $68binary_subscr.10 ['$68binary_subscr.10', '$72load_attr.12', 'idx']
    jump 46                                  []
label 80:
    $82return_value.1 = cast(value=out)      ['$82return_value.1', 'out']
    return $82return_value.1                 ['$82return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7792B0>
2023-02-02 09:41 DEBUG on stmt: a = arg(0, name=a)
2023-02-02 09:41 DEBUG on stmt: shift = arg(1, name=shift)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
2023-02-02 09:41 DEBUG on stmt: arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $18load_attr.7 = getattr(value=arr, attr=shape)
2023-02-02 09:41 DEBUG on stmt: $22load_attr.9 = getattr(value=arr, attr=dtype)
2023-02-02 09:41 DEBUG on stmt: out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-02-02 09:41 DEBUG on stmt: $36load_global.14 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=arr, attr=size)
2023-02-02 09:41 DEBUG on stmt: $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $44get_iter.18 = getiter(value=$42call_function.17)
2023-02-02 09:41 DEBUG on stmt: $phi46.0 = $44get_iter.18
2023-02-02 09:41 DEBUG on stmt: jump 46
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 46
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7792B0>
2023-02-02 09:41 DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
2023-02-02 09:41 DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi48.1 = $46for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $46for_iter.3, 48, 80
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 48
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7792B0>
2023-02-02 09:41 DEBUG on stmt: i = $phi48.1
2023-02-02 09:41 DEBUG on stmt: $54binary_add.4 = i + shift
2023-02-02 09:41 DEBUG on stmt: $58load_attr.6 = getattr(value=arr, attr=size)
2023-02-02 09:41 DEBUG on stmt: idx = $54binary_add.4 % $58load_attr.6
2023-02-02 09:41 DEBUG on stmt: $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $72load_attr.12 = getattr(value=out, attr=flat)
2023-02-02 09:41 DEBUG on stmt: $72load_attr.12[idx] = $68binary_subscr.10
2023-02-02 09:41 DEBUG on stmt: jump 46
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 80
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7792B0>
2023-02-02 09:41 DEBUG on stmt: $82return_value.1 = cast(value=out)
2023-02-02 09:41 DEBUG on stmt: return $82return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x000001A51C6F0880>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x000001A51C7313A0>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x000001A51C720370>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x000001A51C720C70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C77E0D0>],
             '$36load_global.14': [<numba.core.ir.Assign object at 0x000001A51C720430>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x000001A51C71BC10>],
             '$42call_function.17': [<numba.core.ir.Assign object at 0x000001A51C71BAC0>],
             '$44get_iter.18': [<numba.core.ir.Assign object at 0x000001A51C71B640>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x000001A51C71B7C0>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x000001A51C71B370>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x000001A51C71B490>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51C77E430>],
             '$54binary_add.4': [<numba.core.ir.Assign object at 0x000001A51C7777C0>],
             '$58load_attr.6': [<numba.core.ir.Assign object at 0x000001A51C779370>],
             '$68binary_subscr.10': [<numba.core.ir.Assign object at 0x000001A51C71B2B0>],
             '$72load_attr.12': [<numba.core.ir.Assign object at 0x000001A51C71B100>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x000001A51C72ED60>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x000001A51C775520>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x000001A51C773790>],
             'a': [<numba.core.ir.Assign object at 0x000001A51C77EA90>],
             'arr': [<numba.core.ir.Assign object at 0x000001A51C775730>],
             'arr_flat': [<numba.core.ir.Assign object at 0x000001A51C720F40>],
             'i': [<numba.core.ir.Assign object at 0x000001A51C6038B0>],
             'idx': [<numba.core.ir.Assign object at 0x000001A51C71BE80>],
             'out': [<numba.core.ir.Assign object at 0x000001A51C720820>],
             'shift': [<numba.core.ir.Assign object at 0x000001A51C77E220>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4428)
           2	LOAD_FAST(arg=0, lineno=4428)
           4	RETURN_VALUE(arg=None, lineno=4428)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4428)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4428)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4428)
2023-02-02 09:41 DEBUG stack ['$a2.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710D30>
2023-02-02 09:41 DEBUG on stmt: a = arg(0, name=a)
2023-02-02 09:41 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-02-02 09:41 DEBUG on stmt: $4return_value.1 = cast(value=a)
2023-02-02 09:41 DEBUG on stmt: return $4return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x000001A51C72E7F0>],
             'a': [<numba.core.ir.Assign object at 0x000001A51C710640>],
             'dtype': [<numba.core.ir.Assign object at 0x000001A51C72E2B0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$10call_function.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C6FB400>
2023-02-02 09:41 DEBUG on stmt: shape = arg(0, name=shape)
2023-02-02 09:41 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-02-02 09:41 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-02-02 09:41 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001A51C7FE970>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51C7FEAC0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C7FE400>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001A51C7FE7C0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001A51C7FE280>],
             'shape': [<numba.core.ir.Assign object at 0x000001A51C7F0A60>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=52)
           6	LOAD_FAST(arg=3, lineno=52)
           8	BINARY_SUBTRACT(arg=None, lineno=1)
          10	LOAD_GLOBAL(arg=1, lineno=1)
          12	LOAD_FAST(arg=1, lineno=52)
          14	LOAD_FAST(arg=2, lineno=52)
          16	BINARY_SUBTRACT(arg=None, lineno=1)
          18	CALL_FUNCTION(arg=1, lineno=1)
          20	CALL_FUNCTION(arg=2, lineno=1)
          22	RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=52)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=52)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$close_array_14.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$close_array_14.1', '$low_array_16.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$8binary_subtract.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=52)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=52)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$high_array_112.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$high_array_112.5', '$last_close_array_114.6']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$16binary_subtract.7']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$18call_function.8']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$20call_function.9']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$close_array_14.1'}), (6, {'res': '$low_array_16.2'}), (8, {'lhs': '$close_array_14.1', 'rhs': '$low_array_16.2', 'res': '$8binary_subtract.3'}), (10, {'res': '$10load_global.4'}), (12, {'res': '$high_array_112.5'}), (14, {'res': '$last_close_array_114.6'}), (16, {'lhs': '$high_array_112.5', 'rhs': '$last_close_array_114.6', 'res': '$16binary_subtract.7'}), (18, {'func': '$10load_global.4', 'args': ['$16binary_subtract.7'], 'res': '$18call_function.8'}), (20, {'func': '$2load_global.0', 'args': ['$8binary_subtract.3', '$18call_function.8'], 'res': '$20call_function.9'}), (22, {'retval': '$20call_function.9', 'castval': '$22return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    close_array_1 = arg(0, name=close_array_1) ['close_array_1']
    high_array_1 = arg(1, name=high_array_1) ['high_array_1']
    last_close_array_1 = arg(2, name=last_close_array_1) ['last_close_array_1']
    low_array_1 = arg(3, name=low_array_1)   ['low_array_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x1a57f5bad4: <ufunc 'maximum'>) ['$2load_global.0']
    $8binary_subtract.3 = close_array_1 - low_array_1 ['$8binary_subtract.3', 'close_array_1', 'low_array_1']
    $10load_global.4 = global(__ufunc_or_dufunc_0x1a574cbec4: <ufunc 'absolute'>) ['$10load_global.4']
    $16binary_subtract.7 = high_array_1 - last_close_array_1 ['$16binary_subtract.7', 'high_array_1', 'last_close_array_1']
    $18call_function.8 = call $10load_global.4($16binary_subtract.7, func=$10load_global.4, args=[Var($16binary_subtract.7, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.4', '$16binary_subtract.7', '$18call_function.8']
    $20call_function.9 = call $2load_global.0($8binary_subtract.3, $18call_function.8, func=$2load_global.0, args=[Var($8binary_subtract.3, nb.py:1), Var($18call_function.8, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$20call_function.9', '$2load_global.0', '$8binary_subtract.3']
    $22return_value.10 = cast(value=$20call_function.9) ['$20call_function.9', '$22return_value.10']
    return $22return_value.10                ['$22return_value.10']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8BDD00>
2023-02-02 09:41 DEBUG on stmt: close_array_1 = arg(0, name=close_array_1)
2023-02-02 09:41 DEBUG on stmt: high_array_1 = arg(1, name=high_array_1)
2023-02-02 09:41 DEBUG on stmt: last_close_array_1 = arg(2, name=last_close_array_1)
2023-02-02 09:41 DEBUG on stmt: low_array_1 = arg(3, name=low_array_1)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x1a57f5bad4: <ufunc 'maximum'>)
2023-02-02 09:41 DEBUG on stmt: $8binary_subtract.3 = close_array_1 - low_array_1
2023-02-02 09:41 DEBUG on stmt: $10load_global.4 = global(__ufunc_or_dufunc_0x1a574cbec4: <ufunc 'absolute'>)
2023-02-02 09:41 DEBUG on stmt: $16binary_subtract.7 = high_array_1 - last_close_array_1
2023-02-02 09:41 DEBUG on stmt: $18call_function.8 = call $10load_global.4($16binary_subtract.7, func=$10load_global.4, args=[Var($16binary_subtract.7, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $20call_function.9 = call $2load_global.0($8binary_subtract.3, $18call_function.8, func=$2load_global.0, args=[Var($8binary_subtract.3, nb.py:1), Var($18call_function.8, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $22return_value.10 = cast(value=$20call_function.9)
2023-02-02 09:41 DEBUG on stmt: return $22return_value.10
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x000001A51C8DB6A0>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x000001A51C8DBA60>],
             '$18call_function.8': [<numba.core.ir.Assign object at 0x000001A51C8DBC10>],
             '$20call_function.9': [<numba.core.ir.Assign object at 0x000001A51C8DBD90>],
             '$22return_value.10': [<numba.core.ir.Assign object at 0x000001A51C8DBEE0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C8DB160>],
             '$8binary_subtract.3': [<numba.core.ir.Assign object at 0x000001A51C8DB520>],
             'close_array_1': [<numba.core.ir.Assign object at 0x000001A51C8D0820>],
             'high_array_1': [<numba.core.ir.Assign object at 0x000001A51C8D4FA0>],
             'last_close_array_1': [<numba.core.ir.Assign object at 0x000001A51C8D4AF0>],
             'low_array_1': [<numba.core.ir.Assign object at 0x000001A51C8D49D0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=205)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
2023-02-02 09:41 DEBUG stack ['$src_ndim2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
2023-02-02 09:41 DEBUG stack ['$src_ndim2.0', '$dest_ndim4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
2023-02-02 09:41 DEBUG stack ['$const10.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=14 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
2023-02-02 09:41 DEBUG stack ['$const14.0']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
2023-02-02 09:41 DEBUG stack ['$dest_ndim18.1']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
2023-02-02 09:41 DEBUG stack ['$dest_ndim18.1', '$src_ndim20.2']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
2023-02-02 09:41 DEBUG stack ['$22binary_subtract.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
2023-02-02 09:41 DEBUG stack ['$src_index26.0']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
2023-02-02 09:41 DEBUG stack ['$src_index26.0', '$src_ndim28.1']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
2023-02-02 09:41 DEBUG stack ['$30compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
2023-02-02 09:41 DEBUG stack ['$src_shape34.0']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
2023-02-02 09:41 DEBUG stack ['$src_shape34.0', '$src_index36.1']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
2023-02-02 09:41 DEBUG stack ['$38binary_subscr.2']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
2023-02-02 09:41 DEBUG stack ['$dest_shape42.3']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
2023-02-02 09:41 DEBUG stack ['$dest_shape42.3', '$dest_index44.4']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
2023-02-02 09:41 DEBUG stack ['$46binary_subscr.5']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
2023-02-02 09:41 DEBUG stack ['$dest_dim_size50.6']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
2023-02-02 09:41 DEBUG stack ['$dest_dim_size50.6', '$const52.7']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
2023-02-02 09:41 DEBUG stack ['$54compare_op.8']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
2023-02-02 09:41 DEBUG stack ['$dest_index120.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
2023-02-02 09:41 DEBUG stack ['$src_dim_size58.0']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
2023-02-02 09:41 DEBUG stack ['$src_dim_size58.0', '$dest_dim_size60.1']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
2023-02-02 09:41 DEBUG stack ['$62compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
2023-02-02 09:41 DEBUG stack ['$src_dim_size86.0']
2023-02-02 09:41 DEBUG dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
2023-02-02 09:41 DEBUG stack ['$src_dim_size86.0', '$const88.1']
2023-02-02 09:41 DEBUG dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
2023-02-02 09:41 DEBUG stack ['$90compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
2023-02-02 09:41 DEBUG stack ['$src_dim_size66.0']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
2023-02-02 09:41 DEBUG stack ['$src_dim_size66.0', '$const68.1']
2023-02-02 09:41 DEBUG dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
2023-02-02 09:41 DEBUG stack ['$70compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
2023-02-02 09:41 DEBUG stack ['$src_index102.0']
2023-02-02 09:41 DEBUG dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
2023-02-02 09:41 DEBUG stack ['$src_index102.0', '$const104.1']
2023-02-02 09:41 DEBUG dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
2023-02-02 09:41 DEBUG stack ['$106inplace_add.2']
2023-02-02 09:41 DEBUG dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
2023-02-02 09:41 DEBUG stack ['$dest_index110.3']
2023-02-02 09:41 DEBUG dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
2023-02-02 09:41 DEBUG stack ['$dest_index110.3', '$const112.4']
2023-02-02 09:41 DEBUG dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
2023-02-02 09:41 DEBUG stack ['$114inplace_add.5']
2023-02-02 09:41 DEBUG dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
2023-02-02 09:41 DEBUG stack ['$src_dim_size94.0']
2023-02-02 09:41 DEBUG dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
2023-02-02 09:41 DEBUG stack ['$src_dim_size94.0', '$dest_shape96.1']
2023-02-02 09:41 DEBUG dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
2023-02-02 09:41 DEBUG stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
2023-02-02 09:41 DEBUG stack ['$dest_index74.0']
2023-02-02 09:41 DEBUG dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$dest_index74.0', '$const76.1']
2023-02-02 09:41 DEBUG dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$78binary_add.2']
2023-02-02 09:41 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$80unary_negative.3']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-02-02 09:41 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-02-02 09:41 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-02-02 09:41 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 14
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $const10.0 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.1
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: src_index = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-02-02 09:41 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $32pred, 34, 120
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const52.7 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 86
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-02-02 09:41 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $64pred, 66, 102
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 66
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $const68.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-02-02 09:41 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $72pred, 74, 102
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 74
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $const76.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-02-02 09:41 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-02-02 09:41 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-02-02 09:41 DEBUG on stmt: return $82return_value.4
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 86
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $const88.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-02-02 09:41 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $92pred, 94, 102
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 94
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-02-02 09:41 DEBUG on stmt: jump 102
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 102
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $const104.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: src_index = $106inplace_add.2
2023-02-02 09:41 DEBUG on stmt: $const112.4 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: dest_index = $114inplace_add.5
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 120
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8FF1C0>
2023-02-02 09:41 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-02-02 09:41 DEBUG on stmt: return $122return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x000001A51C954520>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x000001A51C954A00>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x000001A51C954E20>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x000001A51C8FF730>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C90AC40>],
             '$32pred': [<numba.core.ir.Assign object at 0x000001A51C90AEE0>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x000001A51C90DD60>],
             '$56pred': [<numba.core.ir.Assign object at 0x000001A51C90F040>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C90F280>],
             '$64pred': [<numba.core.ir.Assign object at 0x000001A51C90F520>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C90A340>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C90F9A0>],
             '$72pred': [<numba.core.ir.Assign object at 0x000001A51C90FC40>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x000001A51C951160>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x000001A51C9512E0>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x000001A51C951460>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51C90A5E0>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C951940>],
             '$92pred': [<numba.core.ir.Assign object at 0x000001A51C951BE0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x000001A51C90A7C0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x000001A51C9543A0>],
             '$const112.4': [<numba.core.ir.Assign object at 0x000001A51C954880>],
             '$const52.7': [<numba.core.ir.Assign object at 0x000001A51C90DBE0>],
             '$const68.1': [<numba.core.ir.Assign object at 0x000001A51C90F820>],
             '$const76.1': [<numba.core.ir.Assign object at 0x000001A51C90FFA0>],
             '$const88.1': [<numba.core.ir.Assign object at 0x000001A51C9517C0>],
             'bool32': [<numba.core.ir.Assign object at 0x000001A51C90ADC0>],
             'bool56': [<numba.core.ir.Assign object at 0x000001A51C90DEE0>],
             'bool64': [<numba.core.ir.Assign object at 0x000001A51C90F400>],
             'bool72': [<numba.core.ir.Assign object at 0x000001A51C90FB20>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51C90A4C0>],
             'bool92': [<numba.core.ir.Assign object at 0x000001A51C951AC0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x000001A51C90D820>],
             'dest_index': [<numba.core.ir.Assign object at 0x000001A51C90A670>,
                            <numba.core.ir.Assign object at 0x000001A51C954AC0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x000001A51C8FFE20>],
             'dest_shape': [<numba.core.ir.Assign object at 0x000001A51C8FFF40>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x000001A51C90D340>],
             'src_index': [<numba.core.ir.Assign object at 0x000001A51C8F7580>,
                           <numba.core.ir.Assign object at 0x000001A51C9545E0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x000001A51C8FFB80>],
             'src_shape': [<numba.core.ir.Assign object at 0x000001A51C8FFD00>]})
2023-02-02 09:41 DEBUG SSA violators {'dest_index', 'src_index'}
2023-02-02 09:41 DEBUG Fix SSA violator on var dest_index
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-02-02 09:41 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-02-02 09:41 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-02-02 09:41 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 14
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const10.0 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.1
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: src_index = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-02-02 09:41 DEBUG first assign: dest_index
2023-02-02 09:41 DEBUG replaced with: dest_index = dest_ndim - src_ndim
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-02-02 09:41 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $32pred, 34, 120
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const52.7 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 86
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-02-02 09:41 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $64pred, 66, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 66
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const68.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-02-02 09:41 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $72pred, 74, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 74
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const76.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-02-02 09:41 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-02-02 09:41 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-02-02 09:41 DEBUG on stmt: return $82return_value.4
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 86
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const88.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-02-02 09:41 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $92pred, 94, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 94
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-02-02 09:41 DEBUG on stmt: jump 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 102
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const104.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: src_index = $106inplace_add.2
2023-02-02 09:41 DEBUG on stmt: $const112.4 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: dest_index = $114inplace_add.5
2023-02-02 09:41 DEBUG replaced with: dest_index.1 = $114inplace_add.5
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 120
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-02-02 09:41 DEBUG on stmt: return $122return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x000001A51C8DB8E0>],
             102: [<numba.core.ir.Assign object at 0x000001A51C8F7EE0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-02-02 09:41 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-02-02 09:41 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-02-02 09:41 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 14
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const10.0 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.1
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: src_index = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-02-02 09:41 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $32pred, 34, 120
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG find_def_from_top label 34
2023-02-02 09:41 DEBUG idom 26 from label 34
2023-02-02 09:41 DEBUG find_def_from_bottom label 26
2023-02-02 09:41 DEBUG find_def_from_top label 26
2023-02-02 09:41 DEBUG insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2023-02-02 09:41 DEBUG find_def_from_bottom label 102
2023-02-02 09:41 DEBUG incoming_def dest_index.1 = $114inplace_add.5
2023-02-02 09:41 DEBUG find_def_from_bottom label 14
2023-02-02 09:41 DEBUG incoming_def dest_index = dest_ndim - src_ndim
2023-02-02 09:41 DEBUG replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const52.7 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 86
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-02-02 09:41 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $64pred, 66, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 66
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const68.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-02-02 09:41 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $72pred, 74, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 74
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const76.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-02-02 09:41 DEBUG find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
2023-02-02 09:41 DEBUG find_def_from_top label 74
2023-02-02 09:41 DEBUG idom 66 from label 74
2023-02-02 09:41 DEBUG find_def_from_bottom label 66
2023-02-02 09:41 DEBUG find_def_from_top label 66
2023-02-02 09:41 DEBUG idom 58 from label 66
2023-02-02 09:41 DEBUG find_def_from_bottom label 58
2023-02-02 09:41 DEBUG find_def_from_top label 58
2023-02-02 09:41 DEBUG idom 34 from label 58
2023-02-02 09:41 DEBUG find_def_from_bottom label 34
2023-02-02 09:41 DEBUG find_def_from_top label 34
2023-02-02 09:41 DEBUG idom 26 from label 34
2023-02-02 09:41 DEBUG find_def_from_bottom label 26
2023-02-02 09:41 DEBUG replaced with: $78binary_add.2 = dest_index.2 + $const76.1
2023-02-02 09:41 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-02-02 09:41 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-02-02 09:41 DEBUG on stmt: return $82return_value.4
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 86
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const88.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-02-02 09:41 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $92pred, 94, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 94
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-02-02 09:41 DEBUG find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
2023-02-02 09:41 DEBUG find_def_from_top label 94
2023-02-02 09:41 DEBUG idom 86 from label 94
2023-02-02 09:41 DEBUG find_def_from_bottom label 86
2023-02-02 09:41 DEBUG find_def_from_top label 86
2023-02-02 09:41 DEBUG idom 34 from label 86
2023-02-02 09:41 DEBUG find_def_from_bottom label 34
2023-02-02 09:41 DEBUG find_def_from_top label 34
2023-02-02 09:41 DEBUG idom 26 from label 34
2023-02-02 09:41 DEBUG find_def_from_bottom label 26
2023-02-02 09:41 DEBUG replaced with: dest_shape[dest_index.2] = src_dim_size
2023-02-02 09:41 DEBUG on stmt: jump 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 102
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $const104.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: src_index = $106inplace_add.2
2023-02-02 09:41 DEBUG on stmt: $const112.4 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG find_def_from_top label 102
2023-02-02 09:41 DEBUG idom 34 from label 102
2023-02-02 09:41 DEBUG find_def_from_bottom label 34
2023-02-02 09:41 DEBUG find_def_from_top label 34
2023-02-02 09:41 DEBUG idom 26 from label 34
2023-02-02 09:41 DEBUG find_def_from_bottom label 26
2023-02-02 09:41 DEBUG replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 120
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E5130>
2023-02-02 09:41 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-02-02 09:41 DEBUG find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
2023-02-02 09:41 DEBUG find_def_from_top label 120
2023-02-02 09:41 DEBUG idom 26 from label 120
2023-02-02 09:41 DEBUG find_def_from_bottom label 26
2023-02-02 09:41 DEBUG replaced with: $122return_value.1 = cast(value=dest_index.2)
2023-02-02 09:41 DEBUG on stmt: return $122return_value.1
2023-02-02 09:41 DEBUG Fix SSA violator on var src_index
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-02-02 09:41 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-02-02 09:41 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-02-02 09:41 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 14
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: $const10.0 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.1
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: src_index = const(int, 0)
2023-02-02 09:41 DEBUG first assign: src_index
2023-02-02 09:41 DEBUG replaced with: src_index = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
2023-02-02 09:41 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-02-02 09:41 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $32pred, 34, 120
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const52.7 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 86
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-02-02 09:41 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $64pred, 66, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 66
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: $const68.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-02-02 09:41 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $72pred, 74, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 74
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: $const76.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2023-02-02 09:41 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-02-02 09:41 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-02-02 09:41 DEBUG on stmt: return $82return_value.4
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 86
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: $const88.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-02-02 09:41 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $92pred, 94, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 94
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: dest_shape[dest_index.2] = src_dim_size
2023-02-02 09:41 DEBUG on stmt: jump 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 102
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: $const104.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: src_index = $106inplace_add.2
2023-02-02 09:41 DEBUG replaced with: src_index.1 = $106inplace_add.2
2023-02-02 09:41 DEBUG on stmt: $const112.4 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 120
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C954070>
2023-02-02 09:41 DEBUG on stmt: $122return_value.1 = cast(value=dest_index.2)
2023-02-02 09:41 DEBUG on stmt: return $122return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x000001A51C8F73D0>],
             102: [<numba.core.ir.Assign object at 0x000001A51C8BDB80>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-02-02 09:41 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-02-02 09:41 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-02-02 09:41 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 14
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: $const10.0 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.1
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: src_index = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
2023-02-02 09:41 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-02-02 09:41 DEBUG find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
2023-02-02 09:41 DEBUG find_def_from_top label 26
2023-02-02 09:41 DEBUG insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2023-02-02 09:41 DEBUG find_def_from_bottom label 102
2023-02-02 09:41 DEBUG incoming_def src_index.1 = $106inplace_add.2
2023-02-02 09:41 DEBUG find_def_from_bottom label 14
2023-02-02 09:41 DEBUG incoming_def src_index = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $30compare_op.2 = src_index.2 < src_ndim
2023-02-02 09:41 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $32pred, 34, 120
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG find_def_from_top label 34
2023-02-02 09:41 DEBUG idom 26 from label 34
2023-02-02 09:41 DEBUG find_def_from_bottom label 26
2023-02-02 09:41 DEBUG replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const52.7 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 86
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-02-02 09:41 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $64pred, 66, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 66
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: $const68.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-02-02 09:41 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $72pred, 74, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 74
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: $const76.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2023-02-02 09:41 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-02-02 09:41 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-02-02 09:41 DEBUG on stmt: return $82return_value.4
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 86
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: $const88.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-02-02 09:41 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $92pred, 94, 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 94
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: dest_shape[dest_index.2] = src_dim_size
2023-02-02 09:41 DEBUG on stmt: jump 102
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 102
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: $const104.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG find_def_from_top label 102
2023-02-02 09:41 DEBUG idom 34 from label 102
2023-02-02 09:41 DEBUG find_def_from_bottom label 34
2023-02-02 09:41 DEBUG find_def_from_top label 34
2023-02-02 09:41 DEBUG idom 26 from label 34
2023-02-02 09:41 DEBUG find_def_from_bottom label 26
2023-02-02 09:41 DEBUG replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: src_index.1 = $106inplace_add.2
2023-02-02 09:41 DEBUG on stmt: $const112.4 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-02-02 09:41 DEBUG on stmt: jump 26
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 120
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8E29A0>
2023-02-02 09:41 DEBUG on stmt: $122return_value.1 = cast(value=dest_index.2)
2023-02-02 09:41 DEBUG on stmt: return $122return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=65)
           6	LOAD_GLOBAL(arg=1, lineno=1)
           8	LOAD_FAST(arg=2, lineno=52)
          10	LOAD_FAST(arg=1, lineno=52)
          12	BINARY_SUBTRACT(arg=None, lineno=1)
          14	CALL_FUNCTION(arg=1, lineno=1)
          16	CALL_FUNCTION(arg=2, lineno=1)
          18	RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=65)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$each_num_14.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=52)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=52)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$low_array_28.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$low_array_28.3', '$last_close_array_210.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$12binary_subtract.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=1)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$14call_function.6']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$16call_function.7']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$each_num_14.1'}), (6, {'res': '$6load_global.2'}), (8, {'res': '$low_array_28.3'}), (10, {'res': '$last_close_array_210.4'}), (12, {'lhs': '$low_array_28.3', 'rhs': '$last_close_array_210.4', 'res': '$12binary_subtract.5'}), (14, {'func': '$6load_global.2', 'args': ['$12binary_subtract.5'], 'res': '$14call_function.6'}), (16, {'func': '$2load_global.0', 'args': ['$each_num_14.1', '$14call_function.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    each_num_1 = arg(0, name=each_num_1)     ['each_num_1']
    last_close_array_2 = arg(1, name=last_close_array_2) ['last_close_array_2']
    low_array_2 = arg(2, name=low_array_2)   ['low_array_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x1a57f5bad4: <ufunc 'maximum'>) ['$2load_global.0']
    $6load_global.2 = global(__ufunc_or_dufunc_0x1a574cbec4: <ufunc 'absolute'>) ['$6load_global.2']
    $12binary_subtract.5 = low_array_2 - last_close_array_2 ['$12binary_subtract.5', 'last_close_array_2', 'low_array_2']
    $14call_function.6 = call $6load_global.2($12binary_subtract.5, func=$6load_global.2, args=[Var($12binary_subtract.5, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_subtract.5', '$14call_function.6', '$6load_global.2']
    $16call_function.7 = call $2load_global.0(each_num_1, $14call_function.6, func=$2load_global.0, args=[Var(each_num_1, nb.py:1), Var($14call_function.6, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$14call_function.6', '$16call_function.7', '$2load_global.0', 'each_num_1']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C989340>
2023-02-02 09:41 DEBUG on stmt: each_num_1 = arg(0, name=each_num_1)
2023-02-02 09:41 DEBUG on stmt: last_close_array_2 = arg(1, name=last_close_array_2)
2023-02-02 09:41 DEBUG on stmt: low_array_2 = arg(2, name=low_array_2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x1a57f5bad4: <ufunc 'maximum'>)
2023-02-02 09:41 DEBUG on stmt: $6load_global.2 = global(__ufunc_or_dufunc_0x1a574cbec4: <ufunc 'absolute'>)
2023-02-02 09:41 DEBUG on stmt: $12binary_subtract.5 = low_array_2 - last_close_array_2
2023-02-02 09:41 DEBUG on stmt: $14call_function.6 = call $6load_global.2($12binary_subtract.5, func=$6load_global.2, args=[Var($12binary_subtract.5, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $16call_function.7 = call $2load_global.0(each_num_1, $14call_function.6, func=$2load_global.0, args=[Var(each_num_1, nb.py:1), Var($14call_function.6, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $18return_value.8 = cast(value=$16call_function.7)
2023-02-02 09:41 DEBUG on stmt: return $18return_value.8
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$12binary_subtract.5': [<numba.core.ir.Assign object at 0x000001A51C998250>],
             '$14call_function.6': [<numba.core.ir.Assign object at 0x000001A51C998400>],
             '$16call_function.7': [<numba.core.ir.Assign object at 0x000001A51C998580>],
             '$18return_value.8': [<numba.core.ir.Assign object at 0x000001A51C9986D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C994BB0>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x000001A51C994E50>],
             'each_num_1': [<numba.core.ir.Assign object at 0x000001A51C994370>],
             'last_close_array_2': [<numba.core.ir.Assign object at 0x000001A51C9941C0>],
             'low_array_2': [<numba.core.ir.Assign object at 0x000001A51C994A30>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=377)
           2	LOAD_GLOBAL(arg=0, lineno=377)
           4	LOAD_METHOD(arg=1, lineno=377)
           6	LOAD_FAST(arg=0, lineno=377)
           8	LOAD_ATTR(arg=2, lineno=377)
          10	LOAD_DEREF(arg=0, lineno=377)
          12	CALL_METHOD(arg=2, lineno=377)
          14	STORE_FAST(arg=1, lineno=377)
          16	LOAD_DEREF(arg=1, lineno=378)
          18	STORE_FAST(arg=2, lineno=378)
          20	LOAD_GLOBAL(arg=3, lineno=379)
          22	LOAD_FAST(arg=0, lineno=379)
          24	LOAD_ATTR(arg=4, lineno=379)
          26	CALL_FUNCTION(arg=1, lineno=379)
          28	GET_ITER(arg=None, lineno=379)
>         30	FOR_ITER(arg=24, lineno=379)
          32	UNPACK_SEQUENCE(arg=2, lineno=379)
          34	STORE_FAST(arg=3, lineno=379)
          36	STORE_FAST(arg=4, lineno=379)
          38	LOAD_FAST(arg=2, lineno=380)
          40	LOAD_FAST(arg=4, lineno=380)
          42	INPLACE_ADD(arg=None, lineno=380)
          44	STORE_FAST(arg=2, lineno=380)
          46	LOAD_FAST(arg=2, lineno=381)
          48	LOAD_FAST(arg=1, lineno=381)
          50	LOAD_FAST(arg=3, lineno=381)
          52	STORE_SUBSCR(arg=None, lineno=381)
          54	JUMP_ABSOLUTE(arg=30, lineno=381)
>         56	LOAD_FAST(arg=1, lineno=382)
          58	RETURN_VALUE(arg=None, lineno=382)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=377)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=377)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=377)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=377)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=377)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$arr6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=377)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$8load_attr.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=CALL_METHOD(arg=2, lineno=377)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$8load_attr.3', '$10load_deref.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=STORE_FAST(arg=1, lineno=377)
2023-02-02 09:41 DEBUG stack ['$12call_method.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_DEREF(arg=1, lineno=378)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=STORE_FAST(arg=2, lineno=378)
2023-02-02 09:41 DEBUG stack ['$16load_deref.6']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_GLOBAL(arg=3, lineno=379)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=379)
2023-02-02 09:41 DEBUG stack ['$20load_global.7']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_ATTR(arg=4, lineno=379)
2023-02-02 09:41 DEBUG stack ['$20load_global.7', '$arr22.8']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=379)
2023-02-02 09:41 DEBUG stack ['$20load_global.7', '$24load_attr.9']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=GET_ITER(arg=None, lineno=379)
2023-02-02 09:41 DEBUG stack ['$26call_function.10']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=30, stack=('$28get_iter.11',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=30 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi30.0']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=FOR_ITER(arg=24, lineno=379)
2023-02-02 09:41 DEBUG stack ['$phi30.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=382)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=382)
2023-02-02 09:41 DEBUG stack ['$out56.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi32.0', '$phi32.1']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=UNPACK_SEQUENCE(arg=2, lineno=379)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$phi32.1']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=STORE_FAST(arg=3, lineno=379)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$32unpack_sequence.3', '$32unpack_sequence.2']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=STORE_FAST(arg=4, lineno=379)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$32unpack_sequence.3']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=380)
2023-02-02 09:41 DEBUG stack ['$phi32.0']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=380)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$c38.5']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=INPLACE_ADD(arg=None, lineno=380)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$c38.5', '$v40.6']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=STORE_FAST(arg=2, lineno=380)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$42inplace_add.7']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=381)
2023-02-02 09:41 DEBUG stack ['$phi32.0']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=381)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$c46.8']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=381)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$c46.8', '$out48.9']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=STORE_SUBSCR(arg=None, lineno=381)
2023-02-02 09:41 DEBUG stack ['$phi32.0', '$c46.8', '$out48.9', '$idx50.10']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=JUMP_ABSOLUTE(arg=30, lineno=381)
2023-02-02 09:41 DEBUG stack ['$phi32.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=30 nstack_initial=1)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=56 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-02-02 09:41 DEBUG keep phismap: {'$phi30.0': {('$28get_iter.11', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.11'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$arr6.2'}), (8, {'item': '$arr6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'func': '$4load_method.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_deref.6'}), (18, {'value': '$16load_deref.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$arr22.8'}), (24, {'item': '$arr22.8', 'res': '$24load_attr.9'}), (26, {'func': '$20load_global.7', 'args': ['$24load_attr.9'], 'res': '$26call_function.10'}), (28, {'value': '$26call_function.10', 'res': '$28get_iter.11'})), outgoing_phis={'$phi30.0': '$28get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.11',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 32: ('$phi30.0', '$30for_iter.2')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'iterable': '$phi32.1', 'stores': ['$32unpack_sequence.2', '$32unpack_sequence.3'], 'tupleobj': '$32unpack_sequence.4'}), (34, {'value': '$32unpack_sequence.2'}), (36, {'value': '$32unpack_sequence.3'}), (38, {'res': '$c38.5'}), (40, {'res': '$v40.6'}), (42, {'lhs': '$c38.5', 'rhs': '$v40.6', 'res': '$42inplace_add.7'}), (44, {'value': '$42inplace_add.7'}), (46, {'res': '$c46.8'}), (48, {'res': '$out48.9'}), (50, {'res': '$idx50.10'}), (52, {'target': '$out48.9', 'index': '$idx50.10', 'value': '$c46.8'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$out56.0'}), (58, {'retval': '$out56.0', 'castval': '$58return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=arr, attr=size) ['$8load_attr.3', 'arr']
    $10load_deref.4 = freevar(dtype: float64) ['$10load_deref.4']
    out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_method.1', '$8load_attr.3', 'out']
    c = freevar(zero: 0.0)                   ['c']
    $20load_global.7 = global(enumerate: <class 'enumerate'>) ['$20load_global.7']
    $24load_attr.9 = getattr(value=arr, attr=flat) ['$24load_attr.9', 'arr']
    $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', '$24load_attr.9', '$26call_function.10']
    $28get_iter.11 = getiter(value=$26call_function.10) ['$26call_function.10', '$28get_iter.11']
    $phi30.0 = $28get_iter.11                ['$28get_iter.11', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 56             ['$30for_iter.3']
label 32:
    $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2) ['$32unpack_sequence.4', '$phi32.1']
    $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.2', '$32unpack_sequence.4']
    $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.3', '$32unpack_sequence.4']
    idx = $32unpack_sequence.2               ['$32unpack_sequence.2', 'idx']
    v = $32unpack_sequence.3                 ['$32unpack_sequence.3', 'v']
    $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined) ['$42inplace_add.7', 'c', 'v']
    c = $42inplace_add.7                     ['$42inplace_add.7', 'c']
    out[idx] = c                             ['c', 'idx', 'out']
    jump 30                                  []
label 56:
    $58return_value.1 = cast(value=out)      ['$58return_value.1', 'out']
    return $58return_value.1                 ['$58return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C9CFCD0>
2023-02-02 09:41 DEBUG on stmt: arr = arg(0, name=arr)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-02-02 09:41 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-02-02 09:41 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: c = freevar(zero: 0.0)
2023-02-02 09:41 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-02-02 09:41 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-02-02 09:41 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-02-02 09:41 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C9CFCD0>
2023-02-02 09:41 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-02-02 09:41 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C9CFCD0>
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $32unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: v = $32unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: c = $42inplace_add.7
2023-02-02 09:41 DEBUG on stmt: out[idx] = c
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 56
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C9CFCD0>
2023-02-02 09:41 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-02-02 09:41 DEBUG on stmt: return $58return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x000001A51C899580>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x000001A51C8E96D0>],
             '$24load_attr.9': [<numba.core.ir.Assign object at 0x000001A51C8A73D0>],
             '$26call_function.10': [<numba.core.ir.Assign object at 0x000001A51C8A72B0>],
             '$28get_iter.11': [<numba.core.ir.Assign object at 0x000001A51C89EFD0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C957820>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x000001A51C89E040>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x000001A51C89E9A0>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x000001A51C89EEB0>],
             '$32unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001A51C89C160>],
             '$32unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001A51C89C5E0>],
             '$32unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001A51C89C400>],
             '$42inplace_add.7': [<numba.core.ir.Assign object at 0x000001A51C83AD30>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51C8994F0>],
             '$58return_value.1': [<numba.core.ir.Assign object at 0x000001A51C89F670>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001A51C8996A0>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x000001A51C8E51F0>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x000001A51C89E7C0>],
             'arr': [<numba.core.ir.Assign object at 0x000001A51C957460>],
             'c': [<numba.core.ir.Assign object at 0x000001A51C8E9700>,
                   <numba.core.ir.Assign object at 0x000001A51C83AF40>],
             'idx': [<numba.core.ir.Assign object at 0x000001A51C89C970>],
             'out': [<numba.core.ir.Assign object at 0x000001A51C8E5610>],
             'v': [<numba.core.ir.Assign object at 0x000001A51C89C730>]})
2023-02-02 09:41 DEBUG SSA violators {'c'}
2023-02-02 09:41 DEBUG Fix SSA violator on var c
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C9CF2B0>
2023-02-02 09:41 DEBUG on stmt: arr = arg(0, name=arr)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-02-02 09:41 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-02-02 09:41 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: c = freevar(zero: 0.0)
2023-02-02 09:41 DEBUG first assign: c
2023-02-02 09:41 DEBUG replaced with: c = freevar(zero: 0.0)
2023-02-02 09:41 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-02-02 09:41 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-02-02 09:41 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-02-02 09:41 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C9CF2B0>
2023-02-02 09:41 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-02-02 09:41 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C9CF2B0>
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $32unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: v = $32unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: c = $42inplace_add.7
2023-02-02 09:41 DEBUG replaced with: c.1 = $42inplace_add.7
2023-02-02 09:41 DEBUG on stmt: out[idx] = c
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 56
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C9CF2B0>
2023-02-02 09:41 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-02-02 09:41 DEBUG on stmt: return $58return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C9CF8B0>],
             32: [<numba.core.ir.Assign object at 0x000001A51C9CFB50>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C9CF7C0>
2023-02-02 09:41 DEBUG on stmt: arr = arg(0, name=arr)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-02-02 09:41 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-02-02 09:41 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: c = freevar(zero: 0.0)
2023-02-02 09:41 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-02-02 09:41 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-02-02 09:41 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-02-02 09:41 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C9CF7C0>
2023-02-02 09:41 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-02-02 09:41 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C9CF7C0>
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $32unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: v = $32unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG find_def var='c' stmt=$42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG find_def_from_top label 32
2023-02-02 09:41 DEBUG idom 30 from label 32
2023-02-02 09:41 DEBUG find_def_from_bottom label 30
2023-02-02 09:41 DEBUG find_def_from_top label 30
2023-02-02 09:41 DEBUG insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def c = freevar(zero: 0.0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 32
2023-02-02 09:41 DEBUG incoming_def c.1 = $42inplace_add.7
2023-02-02 09:41 DEBUG replaced with: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-02-02 09:41 DEBUG on stmt: c.1 = $42inplace_add.7
2023-02-02 09:41 DEBUG on stmt: out[idx] = c
2023-02-02 09:41 DEBUG find_def var='c' stmt=out[idx] = c
2023-02-02 09:41 DEBUG replaced with: out[idx] = c.1
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 56
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C9CF7C0>
2023-02-02 09:41 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-02-02 09:41 DEBUG on stmt: return $58return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$10call_function.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C9EB0A0>
2023-02-02 09:41 DEBUG on stmt: shape = arg(0, name=shape)
2023-02-02 09:41 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-02-02 09:41 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-02-02 09:41 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001A51C9F0130>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51C9F0280>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C9EB7C0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001A51C9EBF40>],
             'dtype': [<numba.core.ir.Assign object at 0x000001A51C9EB190>],
             'shape': [<numba.core.ir.Assign object at 0x000001A51C9EB520>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=60)
           2	LOAD_FAST(arg=0, lineno=60)
           4	LOAD_FAST(arg=1, lineno=60)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=60)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=60)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=60)
2023-02-02 09:41 DEBUG stack ['$closure__locals__moving_average_v6__v20binary_subscr_9_12.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$closure__locals__moving_average_v6__v20binary_subscr_9_12.0', '$closure__locals__moving_average_v6__v32binary_subscr_16_14.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$6binary_subtract.2']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$closure__locals__moving_average_v6__v20binary_subscr_9_12.0'}), (4, {'res': '$closure__locals__moving_average_v6__v32binary_subscr_16_14.1'}), (6, {'lhs': '$closure__locals__moving_average_v6__v20binary_subscr_9_12.0', 'rhs': '$closure__locals__moving_average_v6__v32binary_subscr_16_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    closure__locals__moving_average_v6__v20binary_subscr_9_1 = arg(0, name=closure__locals__moving_average_v6__v20binary_subscr_9_1) ['closure__locals__moving_average_v6__v20binary_subscr_9_1']
    closure__locals__moving_average_v6__v32binary_subscr_16_1 = arg(1, name=closure__locals__moving_average_v6__v32binary_subscr_16_1) ['closure__locals__moving_average_v6__v32binary_subscr_16_1']
    $6binary_subtract.2 = closure__locals__moving_average_v6__v20binary_subscr_9_1 - closure__locals__moving_average_v6__v32binary_subscr_16_1 ['$6binary_subtract.2', 'closure__locals__moving_average_v6__v20binary_subscr_9_1', 'closure__locals__moving_average_v6__v32binary_subscr_16_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v20binary_subscr_9_1 = arg(0, name=closure__locals__moving_average_v6__v20binary_subscr_9_1)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6__v32binary_subscr_16_1 = arg(1, name=closure__locals__moving_average_v6__v32binary_subscr_16_1)
2023-02-02 09:41 DEBUG on stmt: $6binary_subtract.2 = closure__locals__moving_average_v6__v20binary_subscr_9_1 - closure__locals__moving_average_v6__v32binary_subscr_16_1
2023-02-02 09:41 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
2023-02-02 09:41 DEBUG on stmt: return $8return_value.3
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001A51CAB52E0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001A51CAB5460>],
             'closure__locals__moving_average_v6__v20binary_subscr_9_1': [<numba.core.ir.Assign object at 0x000001A51CAAF820>],
             'closure__locals__moving_average_v6__v32binary_subscr_16_1': [<numba.core.ir.Assign object at 0x000001A51CAAFEE0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=59)
           2	LOAD_FAST(arg=1, lineno=59)
           4	LOAD_FAST(arg=0, lineno=59)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=59)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=59)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=59)
2023-02-02 09:41 DEBUG stack ['$closure__locals__moving_average_v6_ret_12.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$closure__locals__moving_average_v6_ret_12.0', '$closure__locals__moving_average_v6_n_14.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$6binary_true_divide.2']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$closure__locals__moving_average_v6_ret_12.0'}), (4, {'res': '$closure__locals__moving_average_v6_n_14.1'}), (6, {'lhs': '$closure__locals__moving_average_v6_ret_12.0', 'rhs': '$closure__locals__moving_average_v6_n_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    closure__locals__moving_average_v6_n_1 = arg(0, name=closure__locals__moving_average_v6_n_1) ['closure__locals__moving_average_v6_n_1']
    closure__locals__moving_average_v6_ret_1 = arg(1, name=closure__locals__moving_average_v6_ret_1) ['closure__locals__moving_average_v6_ret_1']
    $6binary_true_divide.2 = closure__locals__moving_average_v6_ret_1 / closure__locals__moving_average_v6_n_1 ['$6binary_true_divide.2', 'closure__locals__moving_average_v6_n_1', 'closure__locals__moving_average_v6_ret_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CB77550>
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6_n_1 = arg(0, name=closure__locals__moving_average_v6_n_1)
2023-02-02 09:41 DEBUG on stmt: closure__locals__moving_average_v6_ret_1 = arg(1, name=closure__locals__moving_average_v6_ret_1)
2023-02-02 09:41 DEBUG on stmt: $6binary_true_divide.2 = closure__locals__moving_average_v6_ret_1 / closure__locals__moving_average_v6_n_1
2023-02-02 09:41 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2023-02-02 09:41 DEBUG on stmt: return $8return_value.3
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x000001A51CB779D0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001A51CB77B50>],
             'closure__locals__moving_average_v6_n_1': [<numba.core.ir.Assign object at 0x000001A51CB77160>],
             'closure__locals__moving_average_v6_ret_1': [<numba.core.ir.Assign object at 0x000001A51CB77610>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=599)
           2	LOAD_GLOBAL(arg=0, lineno=599)
           4	LOAD_METHOD(arg=1, lineno=599)
           6	LOAD_FAST(arg=0, lineno=599)
           8	LOAD_FAST(arg=1, lineno=599)
          10	BINARY_SUBTRACT(arg=None, lineno=599)
          12	LOAD_CONST(arg=1, lineno=599)
          14	COMPARE_OP(arg=4, lineno=599)
          16	LOAD_FAST(arg=2, lineno=600)
          18	LOAD_FAST(arg=3, lineno=600)
          20	BINARY_SUBTRACT(arg=None, lineno=600)
          22	LOAD_CONST(arg=1, lineno=600)
          24	COMPARE_OP(arg=4, lineno=600)
          26	BINARY_AND(arg=None, lineno=599)
          28	LOAD_CONST(arg=2, lineno=600)
          30	LOAD_CONST(arg=1, lineno=600)
          32	CALL_METHOD(arg=3, lineno=599)
          34	STORE_FAST(arg=6, lineno=599)
          36	LOAD_GLOBAL(arg=0, lineno=601)
          38	LOAD_METHOD(arg=1, lineno=601)
          40	LOAD_FAST(arg=4, lineno=601)
          42	LOAD_FAST(arg=5, lineno=601)
          44	BINARY_SUBTRACT(arg=None, lineno=601)
          46	LOAD_CONST(arg=1, lineno=601)
          48	COMPARE_OP(arg=0, lineno=601)
          50	LOAD_CONST(arg=3, lineno=601)
          52	LOAD_FAST(arg=6, lineno=601)
          54	CALL_METHOD(arg=3, lineno=601)
          56	STORE_FAST(arg=7, lineno=601)
          58	LOAD_GLOBAL(arg=0, lineno=602)
          60	LOAD_METHOD(arg=2, lineno=602)
          62	LOAD_FAST(arg=7, lineno=602)
          64	LOAD_CONST(arg=2, lineno=602)
          66	CALL_METHOD(arg=2, lineno=602)
          68	STORE_FAST(arg=8, lineno=602)
          70	LOAD_CONST(arg=1, lineno=603)
          72	LOAD_FAST(arg=8, lineno=603)
          74	LOAD_CONST(arg=1, lineno=603)
          76	STORE_SUBSCR(arg=None, lineno=603)
          78	LOAD_FAST(arg=8, lineno=604)
          80	RETURN_VALUE(arg=None, lineno=604)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=599)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=599)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=599)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=599)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=599)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$high_array6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=599)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$high_array6.2', '$highestarr8.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=599)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$10binary_subtract.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=599)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$10binary_subtract.4', '$const12.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=600)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$14compare_op.6']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=600)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$14compare_op.6', '$ATR_short16.7']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=BINARY_SUBTRACT(arg=None, lineno=600)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$14compare_op.6', '$ATR_short16.7', '$ATR_long18.8']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=600)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$14compare_op.6', '$20binary_subtract.9']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=600)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$14compare_op.6', '$20binary_subtract.9', '$const22.10']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=BINARY_AND(arg=None, lineno=599)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$14compare_op.6', '$24compare_op.11']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=600)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$26binary_and.12']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=600)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$26binary_and.12', '$const28.13']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=CALL_METHOD(arg=3, lineno=599)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$26binary_and.12', '$const28.13', '$const30.14']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=STORE_FAST(arg=6, lineno=599)
2023-02-02 09:41 DEBUG stack ['$32call_method.15']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=0, lineno=601)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_METHOD(arg=1, lineno=601)
2023-02-02 09:41 DEBUG stack ['$36load_global.16']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=5, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17', '$low_array40.18']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=BINARY_SUBTRACT(arg=None, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17', '$low_array40.18', '$lowestarr42.19']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17', '$44binary_subtract.20']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=COMPARE_OP(arg=0, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17', '$44binary_subtract.20', '$const46.21']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_CONST(arg=3, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17', '$48compare_op.22']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=6, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17', '$48compare_op.22', '$const50.23']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=CALL_METHOD(arg=3, lineno=601)
2023-02-02 09:41 DEBUG stack ['$38load_method.17', '$48compare_op.22', '$const50.23', '$trends52.24']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=STORE_FAST(arg=7, lineno=601)
2023-02-02 09:41 DEBUG stack ['$54call_method.25']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=602)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=60, inst=LOAD_METHOD(arg=2, lineno=602)
2023-02-02 09:41 DEBUG stack ['$58load_global.26']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=602)
2023-02-02 09:41 DEBUG stack ['$60load_method.27']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=602)
2023-02-02 09:41 DEBUG stack ['$60load_method.27', '$orders62.28']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=CALL_METHOD(arg=2, lineno=602)
2023-02-02 09:41 DEBUG stack ['$60load_method.27', '$orders62.28', '$const64.29']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=STORE_FAST(arg=8, lineno=602)
2023-02-02 09:41 DEBUG stack ['$66call_method.30']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=LOAD_CONST(arg=1, lineno=603)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=603)
2023-02-02 09:41 DEBUG stack ['$const70.31']
2023-02-02 09:41 DEBUG dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=603)
2023-02-02 09:41 DEBUG stack ['$const70.31', '$shiftorder72.32']
2023-02-02 09:41 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=603)
2023-02-02 09:41 DEBUG stack ['$const70.31', '$shiftorder72.32', '$const74.33']
2023-02-02 09:41 DEBUG dispatch pc=78, inst=LOAD_FAST(arg=8, lineno=604)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=604)
2023-02-02 09:41 DEBUG stack ['$shiftorder78.34']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$high_array6.2'}), (8, {'res': '$highestarr8.3'}), (10, {'lhs': '$high_array6.2', 'rhs': '$highestarr8.3', 'res': '$10binary_subtract.4'}), (12, {'res': '$const12.5'}), (14, {'lhs': '$10binary_subtract.4', 'rhs': '$const12.5', 'res': '$14compare_op.6'}), (16, {'res': '$ATR_short16.7'}), (18, {'res': '$ATR_long18.8'}), (20, {'lhs': '$ATR_short16.7', 'rhs': '$ATR_long18.8', 'res': '$20binary_subtract.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$20binary_subtract.9', 'rhs': '$const22.10', 'res': '$24compare_op.11'}), (26, {'lhs': '$14compare_op.6', 'rhs': '$24compare_op.11', 'res': '$26binary_and.12'}), (28, {'res': '$const28.13'}), (30, {'res': '$const30.14'}), (32, {'func': '$4load_method.1', 'args': ['$26binary_and.12', '$const28.13', '$const30.14'], 'res': '$32call_method.15'}), (34, {'value': '$32call_method.15'}), (36, {'res': '$36load_global.16'}), (38, {'item': '$36load_global.16', 'res': '$38load_method.17'}), (40, {'res': '$low_array40.18'}), (42, {'res': '$lowestarr42.19'}), (44, {'lhs': '$low_array40.18', 'rhs': '$lowestarr42.19', 'res': '$44binary_subtract.20'}), (46, {'res': '$const46.21'}), (48, {'lhs': '$44binary_subtract.20', 'rhs': '$const46.21', 'res': '$48compare_op.22'}), (50, {'res': '$const50.23'}), (52, {'res': '$trends52.24'}), (54, {'func': '$38load_method.17', 'args': ['$48compare_op.22', '$const50.23', '$trends52.24'], 'res': '$54call_method.25'}), (56, {'value': '$54call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$orders62.28'}), (64, {'res': '$const64.29'}), (66, {'func': '$60load_method.27', 'args': ['$orders62.28', '$const64.29'], 'res': '$66call_method.30'}), (68, {'value': '$66call_method.30'}), (70, {'res': '$const70.31'}), (72, {'res': '$shiftorder72.32'}), (74, {'res': '$const74.33'}), (76, {'target': '$shiftorder72.32', 'index': '$const74.33', 'value': '$const70.31'}), (78, {'res': '$shiftorder78.34'}), (80, {'retval': '$shiftorder78.34', 'castval': '$80return_value.35'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    high_array = arg(0, name=high_array)     ['high_array']
    highestarr = arg(1, name=highestarr)     ['highestarr']
    ATR_short = arg(2, name=ATR_short)       ['ATR_short']
    ATR_long = arg(3, name=ATR_long)         ['ATR_long']
    low_array = arg(4, name=low_array)       ['low_array']
    lowestarr = arg(5, name=lowestarr)       ['lowestarr']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=where) ['$2load_global.0', '$4load_method.1']
    $10binary_subtract.4 = high_array - highestarr ['$10binary_subtract.4', 'high_array', 'highestarr']
    $const12.5 = const(int, 0)               ['$const12.5']
    $14compare_op.6 = $10binary_subtract.4 > $const12.5 ['$10binary_subtract.4', '$14compare_op.6', '$const12.5']
    $20binary_subtract.9 = ATR_short - ATR_long ['$20binary_subtract.9', 'ATR_long', 'ATR_short']
    $const22.10 = const(int, 0)              ['$const22.10']
    $24compare_op.11 = $20binary_subtract.9 > $const22.10 ['$20binary_subtract.9', '$24compare_op.11', '$const22.10']
    $26binary_and.12 = $14compare_op.6 & $24compare_op.11 ['$14compare_op.6', '$24compare_op.11', '$26binary_and.12']
    $const28.13 = const(int, 1)              ['$const28.13']
    $const30.14 = const(int, 0)              ['$const30.14']
    trends = call $4load_method.1($26binary_and.12, $const28.13, $const30.14, func=$4load_method.1, args=[Var($26binary_and.12, nb.py:599), Var($const28.13, nb.py:600), Var($const30.14, nb.py:600)], kws=(), vararg=None, varkwarg=None, target=None) ['$26binary_and.12', '$4load_method.1', '$const28.13', '$const30.14', 'trends']
    $36load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$36load_global.16']
    $38load_method.17 = getattr(value=$36load_global.16, attr=where) ['$36load_global.16', '$38load_method.17']
    $44binary_subtract.20 = low_array - lowestarr ['$44binary_subtract.20', 'low_array', 'lowestarr']
    $const46.21 = const(int, 0)              ['$const46.21']
    $48compare_op.22 = $44binary_subtract.20 < $const46.21 ['$44binary_subtract.20', '$48compare_op.22', '$const46.21']
    $const50.23 = const(int, -1)             ['$const50.23']
    orders = call $38load_method.17($48compare_op.22, $const50.23, trends, func=$38load_method.17, args=[Var($48compare_op.22, nb.py:601), Var($const50.23, nb.py:601), Var(trends, nb.py:599)], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.17', '$48compare_op.22', '$const50.23', 'orders', 'trends']
    $58load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=roll) ['$58load_global.26', '$60load_method.27']
    $const64.29 = const(int, 1)              ['$const64.29']
    shiftorder = call $60load_method.27(orders, $const64.29, func=$60load_method.27, args=[Var(orders, nb.py:601), Var($const64.29, nb.py:602)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$const64.29', 'orders', 'shiftorder']
    $const70.31 = const(int, 0)              ['$const70.31']
    $const74.33 = const(int, 0)              ['$const74.33']
    shiftorder[$const74.33] = $const70.31    ['$const70.31', '$const74.33', 'shiftorder']
    $80return_value.35 = cast(value=shiftorder) ['$80return_value.35', 'shiftorder']
    return $80return_value.35                ['$80return_value.35']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD5AFA0>
2023-02-02 09:41 DEBUG on stmt: high_array = arg(0, name=high_array)
2023-02-02 09:41 DEBUG on stmt: highestarr = arg(1, name=highestarr)
2023-02-02 09:41 DEBUG on stmt: ATR_short = arg(2, name=ATR_short)
2023-02-02 09:41 DEBUG on stmt: ATR_long = arg(3, name=ATR_long)
2023-02-02 09:41 DEBUG on stmt: low_array = arg(4, name=low_array)
2023-02-02 09:41 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=where)
2023-02-02 09:41 DEBUG on stmt: $10binary_subtract.4 = high_array - highestarr
2023-02-02 09:41 DEBUG on stmt: $const12.5 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.6 = $10binary_subtract.4 > $const12.5
2023-02-02 09:41 DEBUG on stmt: $20binary_subtract.9 = ATR_short - ATR_long
2023-02-02 09:41 DEBUG on stmt: $const22.10 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $24compare_op.11 = $20binary_subtract.9 > $const22.10
2023-02-02 09:41 DEBUG on stmt: $26binary_and.12 = $14compare_op.6 & $24compare_op.11
2023-02-02 09:41 DEBUG on stmt: $const28.13 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $const30.14 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: trends = call $4load_method.1($26binary_and.12, $const28.13, $const30.14, func=$4load_method.1, args=[Var($26binary_and.12, nb.py:599), Var($const28.13, nb.py:600), Var($const30.14, nb.py:600)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $36load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $38load_method.17 = getattr(value=$36load_global.16, attr=where)
2023-02-02 09:41 DEBUG on stmt: $44binary_subtract.20 = low_array - lowestarr
2023-02-02 09:41 DEBUG on stmt: $const46.21 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $48compare_op.22 = $44binary_subtract.20 < $const46.21
2023-02-02 09:41 DEBUG on stmt: $const50.23 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: orders = call $38load_method.17($48compare_op.22, $const50.23, trends, func=$38load_method.17, args=[Var($48compare_op.22, nb.py:601), Var($const50.23, nb.py:601), Var(trends, nb.py:599)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $58load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $60load_method.27 = getattr(value=$58load_global.26, attr=roll)
2023-02-02 09:41 DEBUG on stmt: $const64.29 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: shiftorder = call $60load_method.27(orders, $const64.29, func=$60load_method.27, args=[Var(orders, nb.py:601), Var($const64.29, nb.py:602)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $const70.31 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $const74.33 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: shiftorder[0] = $const70.31
2023-02-02 09:41 DEBUG on stmt: $80return_value.35 = cast(value=shiftorder)
2023-02-02 09:41 DEBUG on stmt: return $80return_value.35
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x000001A51C8D0A00>],
             '$14compare_op.6': [<numba.core.ir.Assign object at 0x000001A51C8B8C40>],
             '$20binary_subtract.9': [<numba.core.ir.Assign object at 0x000001A51C8B6EE0>],
             '$24compare_op.11': [<numba.core.ir.Assign object at 0x000001A51C8B6790>],
             '$26binary_and.12': [<numba.core.ir.Assign object at 0x000001A51C8B6070>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C777AC0>],
             '$36load_global.16': [<numba.core.ir.Assign object at 0x000001A51CD518B0>],
             '$38load_method.17': [<numba.core.ir.Assign object at 0x000001A51CD51A30>],
             '$44binary_subtract.20': [<numba.core.ir.Assign object at 0x000001A51CD51DF0>],
             '$48compare_op.22': [<numba.core.ir.Assign object at 0x000001A51CD5D130>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51C76E6A0>],
             '$58load_global.26': [<numba.core.ir.Assign object at 0x000001A51CD5D7F0>],
             '$60load_method.27': [<numba.core.ir.Assign object at 0x000001A51CD5D970>],
             '$80return_value.35': [<numba.core.ir.Assign object at 0x000001A51CD62670>],
             '$const12.5': [<numba.core.ir.Assign object at 0x000001A51C81AF40>],
             '$const22.10': [<numba.core.ir.Assign object at 0x000001A51C8B6610>],
             '$const28.13': [<numba.core.ir.Assign object at 0x000001A51CD450D0>],
             '$const30.14': [<numba.core.ir.Assign object at 0x000001A51CD51550>],
             '$const46.21': [<numba.core.ir.Assign object at 0x000001A51CD51F70>],
             '$const50.23': [<numba.core.ir.Assign object at 0x000001A51CD5D2B0>],
             '$const64.29': [<numba.core.ir.Assign object at 0x000001A51CD5DC10>],
             '$const70.31': [<numba.core.ir.Assign object at 0x000001A51CD62070>],
             '$const74.33': [<numba.core.ir.Assign object at 0x000001A51CD62310>],
             'ATR_long': [<numba.core.ir.Assign object at 0x000001A51C8BDEE0>],
             'ATR_short': [<numba.core.ir.Assign object at 0x000001A51C61FFD0>],
             'high_array': [<numba.core.ir.Assign object at 0x000001A51C8B68E0>],
             'highestarr': [<numba.core.ir.Assign object at 0x000001A51C755A60>],
             'low_array': [<numba.core.ir.Assign object at 0x000001A51C8F4610>],
             'lowestarr': [<numba.core.ir.Assign object at 0x000001A51C76B940>],
             'orders': [<numba.core.ir.Assign object at 0x000001A51CD5D580>],
             'shiftorder': [<numba.core.ir.Assign object at 0x000001A51CD5DDC0>],
             'trends': [<numba.core.ir.Assign object at 0x000001A51CD51640>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-02-02 09:41 DEBUG stack ['$10call_function.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD62BE0>
2023-02-02 09:41 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-02-02 09:41 DEBUG on stmt: tmp1 = arg(1, name=tmp1)
2023-02-02 09:41 DEBUG on stmt: tmp2 = arg(2, name=tmp2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-02-02 09:41 DEBUG on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001A51CD71370>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51CD714C0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CD6DE20>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001A51CD6D1C0>],
             'tmp1': [<numba.core.ir.Assign object at 0x000001A51CD6DB80>],
             'tmp2': [<numba.core.ir.Assign object at 0x000001A51CD6DCA0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_ATTR(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_ATTR(arg=2, lineno=3538)
          10	LOAD_DEREF(arg=1, lineno=3538)
          12	LOAD_CONST(arg=1, lineno=3538)
          14	CALL_FUNCTION_KW(arg=2, lineno=3538)
          16	STORE_FAST(arg=3, lineno=3538)
          18	LOAD_DEREF(arg=0, lineno=3539)
          20	LOAD_FAST(arg=0, lineno=3539)
          22	LOAD_FAST(arg=1, lineno=3539)
          24	LOAD_FAST(arg=2, lineno=3539)
          26	LOAD_FAST(arg=3, lineno=3539)
          28	CALL_FUNCTION(arg=4, lineno=3539)
          30	RETURN_VALUE(arg=None, lineno=3539)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$cond6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4', '$const12.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=STORE_FAST(arg=3, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$14call_function_kw.6']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=3539)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=4, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10', '$res26.11']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$28call_function.12']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$cond6.2'}), (8, {'item': '$cond6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'value': '$14call_function_kw.6'}), (18, {'res': '$18load_deref.7'}), (20, {'res': '$cond20.8'}), (22, {'res': '$x22.9'}), (24, {'res': '$y24.10'}), (26, {'res': '$res26.11'}), (28, {'func': '$18load_deref.7', 'args': ['$cond20.8', '$x22.9', '$y24.10', '$res26.11'], 'res': '$28call_function.12'}), (30, {'retval': '$28call_function.12', 'castval': '$30return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=cond, attr=shape) ['$8load_attr.3', 'cond']
    $10load_deref.4 = freevar(npty: int64)   ['$10load_deref.4']
    res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_attr.1', '$8load_attr.3', 'res']
    $18load_deref.7 = freevar(impl: <function _where_x_y_scalar at 0x000001A51C26ADC0>) ['$18load_deref.7']
    $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.7', '$28call_function.12', 'cond', 'res', 'x', 'y']
    $30return_value.13 = cast(value=$28call_function.12) ['$28call_function.12', '$30return_value.13']
    return $30return_value.13                ['$30return_value.13']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD87F70>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $8load_attr.3 = getattr(value=cond, attr=shape)
2023-02-02 09:41 DEBUG on stmt: $10load_deref.4 = freevar(npty: int64)
2023-02-02 09:41 DEBUG on stmt: res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $18load_deref.7 = freevar(impl: <function _where_x_y_scalar at 0x000001A51C26ADC0>)
2023-02-02 09:41 DEBUG on stmt: $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $30return_value.13 = cast(value=$28call_function.12)
2023-02-02 09:41 DEBUG on stmt: return $30return_value.13
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x000001A51CD80430>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x000001A51CD71760>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x000001A51CD87460>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CD87250>],
             '$30return_value.13': [<numba.core.ir.Assign object at 0x000001A51CD875B0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001A51CD80D90>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001A51CD80AF0>],
             'cond': [<numba.core.ir.Assign object at 0x000001A51CD807C0>],
             'res': [<numba.core.ir.Assign object at 0x000001A51CD78B20>],
             'x': [<numba.core.ir.Assign object at 0x000001A51CD80F70>],
             'y': [<numba.core.ir.Assign object at 0x000001A51CD870D0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$10call_function.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD96580>
2023-02-02 09:41 DEBUG on stmt: shape = arg(0, name=shape)
2023-02-02 09:41 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-02-02 09:41 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
2023-02-02 09:41 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001A51CD9F6D0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51CD9F820>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CD9F160>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001A51CD9F520>],
             'dtype': [<numba.core.ir.Assign object at 0x000001A51CD96FA0>],
             'shape': [<numba.core.ir.Assign object at 0x000001A51CD96670>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3506)
           2	LOAD_GLOBAL(arg=0, lineno=3506)
           4	LOAD_METHOD(arg=1, lineno=3506)
           6	LOAD_FAST(arg=0, lineno=3506)
           8	CALL_METHOD(arg=1, lineno=3506)
          10	GET_ITER(arg=None, lineno=3506)
>         12	FOR_ITER(arg=24, lineno=3506)
          14	UNPACK_SEQUENCE(arg=2, lineno=3506)
          16	STORE_FAST(arg=4, lineno=3506)
          18	STORE_FAST(arg=5, lineno=3506)
          20	LOAD_FAST(arg=5, lineno=3507)
          22	POP_JUMP_IF_FALSE(arg=28, lineno=3507)
          24	LOAD_FAST(arg=1, lineno=3507)
          26	JUMP_FORWARD(arg=2, lineno=3507)
>         28	LOAD_FAST(arg=2, lineno=3507)
>         30	LOAD_FAST(arg=3, lineno=3507)
          32	LOAD_FAST(arg=4, lineno=3507)
          34	STORE_SUBSCR(arg=None, lineno=3507)
          36	JUMP_ABSOLUTE(arg=12, lineno=3507)
>         38	LOAD_FAST(arg=3, lineno=3508)
          40	RETURN_VALUE(arg=None, lineno=3508)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3506)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3506)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$cond6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=GET_ITER(arg=None, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$8call_method.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi12.0']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=FOR_ITER(arg=24, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$phi12.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=3, lineno=3508)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=3508)
2023-02-02 09:41 DEBUG stack ['$res38.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=14 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi14.0', '$phi14.1']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$phi14.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$14unpack_sequence.3', '$14unpack_sequence.2']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=STORE_FAST(arg=5, lineno=3506)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$14unpack_sequence.3']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi14.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=28, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$c20.5']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=24, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=28, stack=('$phi14.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi24.0']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi24.0']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=2, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi24.0', '$x24.1']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=30, stack=('$phi24.0', '$x24.1'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=30 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi28.0']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi28.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=30, stack=('$phi28.0', '$y28.1'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=30 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi30.0', '$phi30.1']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi30.0', '$phi30.1']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi30.0', '$phi30.1', '$res30.2']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi30.0', '$phi30.1', '$res30.2', '$idx32.3']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=JUMP_ABSOLUTE(arg=12, lineno=3507)
2023-02-02 09:41 DEBUG stack ['$phi30.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=12, stack=('$phi30.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=12 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=24 nstack_initial=1): set(),
             State(pc_initial=28 nstack_initial=1): set(),
             State(pc_initial=30 nstack_initial=2): {'$phi30.1'},
             State(pc_initial=38 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1),
 '$phi30.1': State(pc_initial=24 nstack_initial=1)}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi28.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi30.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-02-02 09:41 DEBUG keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))},
 '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
              ('$y28.1', State(pc_initial=28 nstack_initial=1))}}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'},
             State(pc_initial=24 nstack_initial=1): {'$phi30.1': '$x24.1'},
             State(pc_initial=28 nstack_initial=1): {'$phi30.1': '$y28.1'}})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$cond6.2'}), (8, {'func': '$4load_method.1', 'args': ['$cond6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 14: ('$phi12.0', '$12for_iter.2')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'iterable': '$phi14.1', 'stores': ['$14unpack_sequence.2', '$14unpack_sequence.3'], 'tupleobj': '$14unpack_sequence.4'}), (16, {'value': '$14unpack_sequence.2'}), (18, {'value': '$14unpack_sequence.3'}), (20, {'res': '$c20.5'}), (22, {'pred': '$c20.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi14.0',), 28: ('$phi14.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$x24.1'}), (26, {})), outgoing_phis={'$phi30.1': '$x24.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi24.0', '$x24.1')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'res': '$y28.1'}),), outgoing_phis={'$phi30.1': '$y28.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi28.0', '$y28.1')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=30 nstack_initial=2):
AdaptBlockInfo(insts=((30, {'res': '$res30.2'}), (32, {'res': '$idx32.3'}), (34, {'target': '$res30.2', 'index': '$idx32.3', 'value': '$phi30.1'}), (36, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi30.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$res38.0'}), (40, {'retval': '$res38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    res = arg(3, name=res)                   ['res']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'cond']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 38             ['$12for_iter.3']
label 14:
    $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2) ['$14unpack_sequence.4', '$phi14.1']
    $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.2', '$14unpack_sequence.4']
    $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.3', '$14unpack_sequence.4']
    idx = $14unpack_sequence.2               ['$14unpack_sequence.2', 'idx']
    c = $14unpack_sequence.3                 ['$14unpack_sequence.3', 'c']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None) ['$22pred', 'bool22', 'c']
    branch $22pred, 24, 28                   ['$22pred']
label 24:
    $phi30.1 = x                             ['$phi30.1', 'x']
    jump 30                                  []
label 28:
    $phi30.1 = y                             ['$phi30.1', 'y']
    jump 30                                  []
label 30:
    res[idx] = $phi30.1                      ['$phi30.1', 'idx', 'res']
    jump 12                                  []
label 38:
    $40return_value.1 = cast(value=res)      ['$40return_value.1', 'res']
    return $40return_value.1                 ['$40return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD3E8B0>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: res = arg(3, name=res)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-02-02 09:41 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-02-02 09:41 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 12
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD3E8B0>
2023-02-02 09:41 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD3E8B0>
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $14unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: c = $14unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $22pred, 24, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 24
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD3E8B0>
2023-02-02 09:41 DEBUG on stmt: $phi30.1 = x
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD3E8B0>
2023-02-02 09:41 DEBUG on stmt: $phi30.1 = y
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD3E8B0>
2023-02-02 09:41 DEBUG on stmt: res[idx] = $phi30.1
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 38
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD3E8B0>
2023-02-02 09:41 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-02-02 09:41 DEBUG on stmt: return $40return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x000001A51CD3BD00>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x000001A51CDCA0A0>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x000001A51CDCA1C0>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x000001A51CDCA2E0>],
             '$14unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001A51CDCA730>],
             '$14unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001A51CDCA850>],
             '$14unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001A51CDCA5E0>],
             '$22pred': [<numba.core.ir.Assign object at 0x000001A51CDCAE20>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CD3B760>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x000001A51CDCCAC0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51CD3B8E0>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x000001A51CD3BBB0>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x000001A51CD3B0D0>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x000001A51CD3BF70>],
             '$phi30.1': [<numba.core.ir.Assign object at 0x000001A51CDCC070>,
                          <numba.core.ir.Assign object at 0x000001A51CDCAF10>],
             'bool22': [<numba.core.ir.Assign object at 0x000001A51CDCAD00>],
             'c': [<numba.core.ir.Assign object at 0x000001A51CDCAA60>],
             'cond': [<numba.core.ir.Assign object at 0x000001A51CD3B280>],
             'idx': [<numba.core.ir.Assign object at 0x000001A51CDCA940>],
             'res': [<numba.core.ir.Assign object at 0x000001A51CD3B5E0>],
             'x': [<numba.core.ir.Assign object at 0x000001A51CD3B3A0>],
             'y': [<numba.core.ir.Assign object at 0x000001A51CD3B4C0>]})
2023-02-02 09:41 DEBUG SSA violators {'$phi30.1'}
2023-02-02 09:41 DEBUG Fix SSA violator on var $phi30.1
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: res = arg(3, name=res)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-02-02 09:41 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-02-02 09:41 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 12
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $14unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: c = $14unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $22pred, 24, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 24
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $phi30.1 = x
2023-02-02 09:41 DEBUG first assign: $phi30.1
2023-02-02 09:41 DEBUG replaced with: $phi30.1 = x
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $phi30.1 = y
2023-02-02 09:41 DEBUG replaced with: $phi30.1.1 = y
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: res[idx] = $phi30.1
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 38
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-02-02 09:41 DEBUG on stmt: return $40return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {24: [<numba.core.ir.Assign object at 0x000001A51CDCC490>],
             28: [<numba.core.ir.Assign object at 0x000001A51CDCC250>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: res = arg(3, name=res)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-02-02 09:41 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-02-02 09:41 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 12
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $14unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: c = $14unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $22pred, 24, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 24
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $phi30.1 = x
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $phi30.1.1 = y
2023-02-02 09:41 DEBUG on stmt: jump 30
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: res[idx] = $phi30.1
2023-02-02 09:41 DEBUG find_def var='$phi30.1' stmt=res[idx] = $phi30.1
2023-02-02 09:41 DEBUG find_def_from_top label 30
2023-02-02 09:41 DEBUG insert phi node $phi30.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
2023-02-02 09:41 DEBUG find_def_from_bottom label 24
2023-02-02 09:41 DEBUG incoming_def $phi30.1 = x
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG incoming_def $phi30.1.1 = y
2023-02-02 09:41 DEBUG replaced with: res[idx] = $phi30.1.2
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 38
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD3EAC0>
2023-02-02 09:41 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-02-02 09:41 DEBUG on stmt: return $40return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-02-02 09:41 DEBUG stack ['$10call_function.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDEFF40>
2023-02-02 09:41 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-02-02 09:41 DEBUG on stmt: tmp1 = arg(1, name=tmp1)
2023-02-02 09:41 DEBUG on stmt: tmp2 = arg(2, name=tmp2)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-02-02 09:41 DEBUG on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001A51CDEF340>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51CDEF8B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CE09A00>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001A51CE09190>],
             'tmp1': [<numba.core.ir.Assign object at 0x000001A51CE09760>],
             'tmp2': [<numba.core.ir.Assign object at 0x000001A51CE098B0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_ATTR(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_ATTR(arg=2, lineno=3538)
          10	LOAD_DEREF(arg=1, lineno=3538)
          12	LOAD_CONST(arg=1, lineno=3538)
          14	CALL_FUNCTION_KW(arg=2, lineno=3538)
          16	STORE_FAST(arg=3, lineno=3538)
          18	LOAD_DEREF(arg=0, lineno=3539)
          20	LOAD_FAST(arg=0, lineno=3539)
          22	LOAD_FAST(arg=1, lineno=3539)
          24	LOAD_FAST(arg=2, lineno=3539)
          26	LOAD_FAST(arg=3, lineno=3539)
          28	CALL_FUNCTION(arg=4, lineno=3539)
          30	RETURN_VALUE(arg=None, lineno=3539)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$cond6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4', '$const12.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=STORE_FAST(arg=3, lineno=3538)
2023-02-02 09:41 DEBUG stack ['$14call_function_kw.6']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=3539)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=4, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10', '$res26.11']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=3539)
2023-02-02 09:41 DEBUG stack ['$28call_function.12']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$cond6.2'}), (8, {'item': '$cond6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'value': '$14call_function_kw.6'}), (18, {'res': '$18load_deref.7'}), (20, {'res': '$cond20.8'}), (22, {'res': '$x22.9'}), (24, {'res': '$y24.10'}), (26, {'res': '$res26.11'}), (28, {'func': '$18load_deref.7', 'args': ['$cond20.8', '$x22.9', '$y24.10', '$res26.11'], 'res': '$28call_function.12'}), (30, {'retval': '$28call_function.12', 'castval': '$30return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=cond, attr=shape) ['$8load_attr.3', 'cond']
    $10load_deref.4 = freevar(npty: int64)   ['$10load_deref.4']
    res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_attr.1', '$8load_attr.3', 'res']
    $18load_deref.7 = freevar(impl: <function _where_x_scalar at 0x000001A51C26AF70>) ['$18load_deref.7']
    $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.7', '$28call_function.12', 'cond', 'res', 'x', 'y']
    $30return_value.13 = cast(value=$28call_function.12) ['$28call_function.12', '$30return_value.13']
    return $30return_value.13                ['$30return_value.13']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDD1CD0>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $8load_attr.3 = getattr(value=cond, attr=shape)
2023-02-02 09:41 DEBUG on stmt: $10load_deref.4 = freevar(npty: int64)
2023-02-02 09:41 DEBUG on stmt: res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $18load_deref.7 = freevar(impl: <function _where_x_scalar at 0x000001A51C26AF70>)
2023-02-02 09:41 DEBUG on stmt: $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $30return_value.13 = cast(value=$28call_function.12)
2023-02-02 09:41 DEBUG on stmt: return $30return_value.13
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x000001A51CDD23A0>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x000001A51CDD29A0>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x000001A51CDD2FD0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CDEDDC0>],
             '$30return_value.13': [<numba.core.ir.Assign object at 0x000001A51CDD1160>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001A51CDEDF40>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001A51CDD2220>],
             'cond': [<numba.core.ir.Assign object at 0x000001A51CDED3D0>],
             'res': [<numba.core.ir.Assign object at 0x000001A51CDD2850>],
             'x': [<numba.core.ir.Assign object at 0x000001A51CDEDB20>],
             'y': [<numba.core.ir.Assign object at 0x000001A51CDEDC40>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3513)
           2	LOAD_GLOBAL(arg=0, lineno=3513)
           4	LOAD_METHOD(arg=1, lineno=3513)
           6	LOAD_FAST(arg=0, lineno=3513)
           8	CALL_METHOD(arg=1, lineno=3513)
          10	GET_ITER(arg=None, lineno=3513)
>         12	FOR_ITER(arg=28, lineno=3513)
          14	UNPACK_SEQUENCE(arg=2, lineno=3513)
          16	STORE_FAST(arg=4, lineno=3513)
          18	STORE_FAST(arg=5, lineno=3513)
          20	LOAD_FAST(arg=5, lineno=3514)
          22	POP_JUMP_IF_FALSE(arg=28, lineno=3514)
          24	LOAD_FAST(arg=1, lineno=3514)
          26	JUMP_FORWARD(arg=6, lineno=3514)
>         28	LOAD_FAST(arg=2, lineno=3514)
          30	LOAD_FAST(arg=4, lineno=3514)
          32	BINARY_SUBSCR(arg=None, lineno=3514)
>         34	LOAD_FAST(arg=3, lineno=3514)
          36	LOAD_FAST(arg=4, lineno=3514)
          38	STORE_SUBSCR(arg=None, lineno=3514)
          40	JUMP_ABSOLUTE(arg=12, lineno=3514)
>         42	LOAD_FAST(arg=3, lineno=3515)
          44	RETURN_VALUE(arg=None, lineno=3515)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3513)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3513)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$cond6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=GET_ITER(arg=None, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$8call_method.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi12.0']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=FOR_ITER(arg=28, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$phi12.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=3515)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=3515)
2023-02-02 09:41 DEBUG stack ['$res42.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=14 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi14.0', '$phi14.1']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$phi14.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$14unpack_sequence.3', '$14unpack_sequence.2']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=STORE_FAST(arg=5, lineno=3513)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$14unpack_sequence.3']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi14.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=28, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi14.0', '$c20.5']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=24, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=28, stack=('$phi14.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi24.0']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi24.0']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=6, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi24.0', '$x24.1']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=34, stack=('$phi24.0', '$x24.1'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=34 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi28.0']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi28.0']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=4, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi28.0', '$y28.1']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi28.0', '$y28.1', '$idx30.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=34, stack=('$phi28.0', '$32binary_subscr.3'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=34 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi34.0', '$phi34.1']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi34.0', '$phi34.1']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2', '$idx36.3']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=12, lineno=3514)
2023-02-02 09:41 DEBUG stack ['$phi34.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=12, stack=('$phi34.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=12 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=24 nstack_initial=1): set(),
             State(pc_initial=28 nstack_initial=1): set(),
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1),
 '$phi34.1': State(pc_initial=24 nstack_initial=1)}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi28.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi34.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-02-02 09:41 DEBUG keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))},
 '$phi34.1': {('$32binary_subscr.3', State(pc_initial=28 nstack_initial=1)),
              ('$x24.1', State(pc_initial=24 nstack_initial=1))}}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'},
             State(pc_initial=24 nstack_initial=1): {'$phi34.1': '$x24.1'},
             State(pc_initial=28 nstack_initial=1): {'$phi34.1': '$32binary_subscr.3'}})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$cond6.2'}), (8, {'func': '$4load_method.1', 'args': ['$cond6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 14: ('$phi12.0', '$12for_iter.2')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'iterable': '$phi14.1', 'stores': ['$14unpack_sequence.2', '$14unpack_sequence.3'], 'tupleobj': '$14unpack_sequence.4'}), (16, {'value': '$14unpack_sequence.2'}), (18, {'value': '$14unpack_sequence.3'}), (20, {'res': '$c20.5'}), (22, {'pred': '$c20.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi14.0',), 28: ('$phi14.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$x24.1'}), (26, {})), outgoing_phis={'$phi34.1': '$x24.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi24.0', '$x24.1')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'res': '$y28.1'}), (30, {'res': '$idx30.2'}), (32, {'index': '$idx30.2', 'target': '$y28.1', 'res': '$32binary_subscr.3'})), outgoing_phis={'$phi34.1': '$32binary_subscr.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi28.0', '$32binary_subscr.3')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'res': '$res34.2'}), (36, {'res': '$idx36.3'}), (38, {'target': '$res34.2', 'index': '$idx36.3', 'value': '$phi34.1'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi34.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$res42.0'}), (44, {'retval': '$res42.0', 'castval': '$44return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    res = arg(3, name=res)                   ['res']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'cond']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 42             ['$12for_iter.3']
label 14:
    $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2) ['$14unpack_sequence.4', '$phi14.1']
    $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.2', '$14unpack_sequence.4']
    $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.3', '$14unpack_sequence.4']
    idx = $14unpack_sequence.2               ['$14unpack_sequence.2', 'idx']
    c = $14unpack_sequence.3                 ['$14unpack_sequence.3', 'c']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None) ['$22pred', 'bool22', 'c']
    branch $22pred, 24, 28                   ['$22pred']
label 24:
    $phi34.1 = x                             ['$phi34.1', 'x']
    jump 34                                  []
label 28:
    $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>) ['$32binary_subscr.3', 'idx', 'y']
    $phi34.1 = $32binary_subscr.3            ['$32binary_subscr.3', '$phi34.1']
    jump 34                                  []
label 34:
    res[idx] = $phi34.1                      ['$phi34.1', 'idx', 'res']
    jump 12                                  []
label 42:
    $44return_value.1 = cast(value=res)      ['$44return_value.1', 'res']
    return $44return_value.1                 ['$44return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE252B0>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: res = arg(3, name=res)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-02-02 09:41 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-02-02 09:41 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 12
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE252B0>
2023-02-02 09:41 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE252B0>
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $14unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: c = $14unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $22pred, 24, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 24
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE252B0>
2023-02-02 09:41 DEBUG on stmt: $phi34.1 = x
2023-02-02 09:41 DEBUG on stmt: jump 34
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE252B0>
2023-02-02 09:41 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $phi34.1 = $32binary_subscr.3
2023-02-02 09:41 DEBUG on stmt: jump 34
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE252B0>
2023-02-02 09:41 DEBUG on stmt: res[idx] = $phi34.1
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE252B0>
2023-02-02 09:41 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-02-02 09:41 DEBUG on stmt: return $44return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x000001A51CE24D60>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x000001A51CE04100>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x000001A51CE04220>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x000001A51CE04340>],
             '$14unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001A51CE04790>],
             '$14unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001A51CE048B0>],
             '$14unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001A51CE04640>],
             '$22pred': [<numba.core.ir.Assign object at 0x000001A51CE04E80>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CE247C0>],
             '$32binary_subscr.3': [<numba.core.ir.Assign object at 0x000001A51CDFA640>],
             '$44return_value.1': [<numba.core.ir.Assign object at 0x000001A51CDFAD60>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51CE24940>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x000001A51CE24C10>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x000001A51CE24190>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x000001A51CE24FD0>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x000001A51CDFA0D0>,
                          <numba.core.ir.Assign object at 0x000001A51CE04F70>],
             'bool22': [<numba.core.ir.Assign object at 0x000001A51CE04D60>],
             'c': [<numba.core.ir.Assign object at 0x000001A51CE04AC0>],
             'cond': [<numba.core.ir.Assign object at 0x000001A51CE242E0>],
             'idx': [<numba.core.ir.Assign object at 0x000001A51CE049A0>],
             'res': [<numba.core.ir.Assign object at 0x000001A51CE24640>],
             'x': [<numba.core.ir.Assign object at 0x000001A51CE24400>],
             'y': [<numba.core.ir.Assign object at 0x000001A51CE24520>]})
2023-02-02 09:41 DEBUG SSA violators {'$phi34.1'}
2023-02-02 09:41 DEBUG Fix SSA violator on var $phi34.1
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: res = arg(3, name=res)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-02-02 09:41 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-02-02 09:41 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 12
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $14unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: c = $14unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $22pred, 24, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 24
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $phi34.1 = x
2023-02-02 09:41 DEBUG first assign: $phi34.1
2023-02-02 09:41 DEBUG replaced with: $phi34.1 = x
2023-02-02 09:41 DEBUG on stmt: jump 34
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $phi34.1 = $32binary_subscr.3
2023-02-02 09:41 DEBUG replaced with: $phi34.1.1 = $32binary_subscr.3
2023-02-02 09:41 DEBUG on stmt: jump 34
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: res[idx] = $phi34.1
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-02-02 09:41 DEBUG on stmt: return $44return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {24: [<numba.core.ir.Assign object at 0x000001A51CE25A00>],
             28: [<numba.core.ir.Assign object at 0x000001A51CE25520>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: cond = arg(0, name=cond)
2023-02-02 09:41 DEBUG on stmt: x = arg(1, name=x)
2023-02-02 09:41 DEBUG on stmt: y = arg(2, name=y)
2023-02-02 09:41 DEBUG on stmt: res = arg(3, name=res)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-02-02 09:41 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-02-02 09:41 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 12
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 14
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: idx = $14unpack_sequence.2
2023-02-02 09:41 DEBUG on stmt: c = $14unpack_sequence.3
2023-02-02 09:41 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $22pred, 24, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 24
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $phi34.1 = x
2023-02-02 09:41 DEBUG on stmt: jump 34
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $phi34.1.1 = $32binary_subscr.3
2023-02-02 09:41 DEBUG on stmt: jump 34
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: res[idx] = $phi34.1
2023-02-02 09:41 DEBUG find_def var='$phi34.1' stmt=res[idx] = $phi34.1
2023-02-02 09:41 DEBUG find_def_from_top label 34
2023-02-02 09:41 DEBUG insert phi node $phi34.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 34
2023-02-02 09:41 DEBUG find_def_from_bottom label 24
2023-02-02 09:41 DEBUG incoming_def $phi34.1 = x
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG incoming_def $phi34.1.1 = $32binary_subscr.3
2023-02-02 09:41 DEBUG replaced with: res[idx] = $phi34.1.2
2023-02-02 09:41 DEBUG on stmt: jump 12
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CE25790>
2023-02-02 09:41 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-02-02 09:41 DEBUG on stmt: return $44return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2226)
           2	LOAD_GLOBAL(arg=0, lineno=2226)
           4	LOAD_METHOD(arg=1, lineno=2226)
           6	LOAD_FAST(arg=0, lineno=2226)
           8	CALL_METHOD(arg=1, lineno=2226)
          10	STORE_FAST(arg=2, lineno=2226)
          12	LOAD_GLOBAL(arg=0, lineno=2227)
          14	LOAD_ATTR(arg=2, lineno=2227)
          16	LOAD_FAST(arg=2, lineno=2227)
          18	LOAD_ATTR(arg=3, lineno=2227)
          20	LOAD_FAST(arg=2, lineno=2227)
          22	LOAD_ATTR(arg=4, lineno=2227)
          24	LOAD_CONST(arg=1, lineno=2227)
          26	CALL_FUNCTION_KW(arg=2, lineno=2227)
          28	STORE_FAST(arg=3, lineno=2227)
          30	LOAD_FAST(arg=2, lineno=2230)
          32	LOAD_ATTR(arg=5, lineno=2230)
          34	STORE_FAST(arg=4, lineno=2230)
          36	LOAD_GLOBAL(arg=6, lineno=2231)
          38	LOAD_FAST(arg=2, lineno=2231)
          40	LOAD_ATTR(arg=7, lineno=2231)
          42	CALL_FUNCTION(arg=1, lineno=2231)
          44	GET_ITER(arg=None, lineno=2231)
>         46	FOR_ITER(arg=32, lineno=2231)
          48	STORE_FAST(arg=5, lineno=2231)
          50	LOAD_FAST(arg=5, lineno=2232)
          52	LOAD_FAST(arg=1, lineno=2232)
          54	BINARY_ADD(arg=None, lineno=2232)
          56	LOAD_FAST(arg=2, lineno=2232)
          58	LOAD_ATTR(arg=7, lineno=2232)
          60	BINARY_MODULO(arg=None, lineno=2232)
          62	STORE_FAST(arg=6, lineno=2232)
          64	LOAD_FAST(arg=4, lineno=2233)
          66	LOAD_FAST(arg=5, lineno=2233)
          68	BINARY_SUBSCR(arg=None, lineno=2233)
          70	LOAD_FAST(arg=3, lineno=2233)
          72	LOAD_ATTR(arg=5, lineno=2233)
          74	LOAD_FAST(arg=6, lineno=2233)
          76	STORE_SUBSCR(arg=None, lineno=2233)
          78	JUMP_ABSOLUTE(arg=46, lineno=2233)
>         80	LOAD_FAST(arg=3, lineno=2235)
          82	RETURN_VALUE(arg=None, lineno=2235)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2226)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2226)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$4load_method.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$4load_method.1', '$a6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=2226)
2023-02-02 09:41 DEBUG stack ['$8call_method.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2227)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$12load_global.4']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=3, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$arr16.6']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$arr20.8']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=CALL_FUNCTION_KW(arg=2, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', '$const24.10']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=2227)
2023-02-02 09:41 DEBUG stack ['$26call_function_kw.11']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2230)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=5, lineno=2230)
2023-02-02 09:41 DEBUG stack ['$arr30.12']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2230)
2023-02-02 09:41 DEBUG stack ['$32load_attr.13']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=6, lineno=2231)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$36load_global.14']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=7, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$36load_global.14', '$arr38.15']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=1, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$36load_global.14', '$40load_attr.16']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$42call_function.17']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.18',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi46.0']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=FOR_ITER(arg=32, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$phi46.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2235)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=2235)
2023-02-02 09:41 DEBUG stack ['$out80.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=48 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi48.0', '$phi48.1']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=STORE_FAST(arg=5, lineno=2231)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$phi48.1']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$i50.2']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$i50.2', '$shift52.3']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$54binary_add.4']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=LOAD_ATTR(arg=7, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$54binary_add.4', '$arr56.5']
2023-02-02 09:41 DEBUG dispatch pc=60, inst=BINARY_MODULO(arg=None, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$54binary_add.4', '$58load_attr.6']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=STORE_FAST(arg=6, lineno=2232)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$60binary_modulo.7']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$arr_flat64.8']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$arr_flat64.8', '$i66.9']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10']
2023-02-02 09:41 DEBUG dispatch pc=72, inst=LOAD_ATTR(arg=5, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$out70.11']
2023-02-02 09:41 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=6, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12']
2023-02-02 09:41 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12', '$idx74.13']
2023-02-02 09:41 DEBUG dispatch pc=78, inst=JUMP_ABSOLUTE(arg=46, lineno=2233)
2023-02-02 09:41 DEBUG stack ['$phi48.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=80 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-02-02 09:41 DEBUG keep phismap: {'$phi46.0': {('$44get_iter.18', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.18'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_attr.7'}), (20, {'res': '$arr20.8'}), (22, {'item': '$arr20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'func': '$14load_attr.5', 'args': ['$18load_attr.7', '$22load_attr.9'], 'names': '$const24.10', 'res': '$26call_function_kw.11'}), (28, {'value': '$26call_function_kw.11'}), (30, {'res': '$arr30.12'}), (32, {'item': '$arr30.12', 'res': '$32load_attr.13'}), (34, {'value': '$32load_attr.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$arr38.15'}), (40, {'item': '$arr38.15', 'res': '$40load_attr.16'}), (42, {'func': '$36load_global.14', 'args': ['$40load_attr.16'], 'res': '$42call_function.17'}), (44, {'value': '$42call_function.17', 'res': '$44get_iter.18'})), outgoing_phis={'$phi46.0': '$44get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.18',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 48: ('$phi46.0', '$46for_iter.2')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$i50.2'}), (52, {'res': '$shift52.3'}), (54, {'lhs': '$i50.2', 'rhs': '$shift52.3', 'res': '$54binary_add.4'}), (56, {'res': '$arr56.5'}), (58, {'item': '$arr56.5', 'res': '$58load_attr.6'}), (60, {'lhs': '$54binary_add.4', 'rhs': '$58load_attr.6', 'res': '$60binary_modulo.7'}), (62, {'value': '$60binary_modulo.7'}), (64, {'res': '$arr_flat64.8'}), (66, {'res': '$i66.9'}), (68, {'index': '$i66.9', 'target': '$arr_flat64.8', 'res': '$68binary_subscr.10'}), (70, {'res': '$out70.11'}), (72, {'item': '$out70.11', 'res': '$72load_attr.12'}), (74, {'res': '$idx74.13'}), (76, {'target': '$72load_attr.12', 'index': '$idx74.13', 'value': '$68binary_subscr.10'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$out80.0'}), (82, {'retval': '$out80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    shift = arg(1, name=shift)               ['shift']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'arr']
    $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.4']
    $14load_attr.5 = getattr(value=$12load_global.4, attr=empty) ['$12load_global.4', '$14load_attr.5']
    $18load_attr.7 = getattr(value=arr, attr=shape) ['$18load_attr.7', 'arr']
    $22load_attr.9 = getattr(value=arr, attr=dtype) ['$22load_attr.9', 'arr']
    out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', 'out']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $36load_global.14 = global(range: <class 'range'>) ['$36load_global.14']
    $40load_attr.16 = getattr(value=arr, attr=size) ['$40load_attr.16', 'arr']
    $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.14', '$40load_attr.16', '$42call_function.17']
    $44get_iter.18 = getiter(value=$42call_function.17) ['$42call_function.17', '$44get_iter.18']
    $phi46.0 = $44get_iter.18                ['$44get_iter.18', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 80             ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    $54binary_add.4 = i + shift              ['$54binary_add.4', 'i', 'shift']
    $58load_attr.6 = getattr(value=arr, attr=size) ['$58load_attr.6', 'arr']
    idx = $54binary_add.4 % $58load_attr.6   ['$54binary_add.4', '$58load_attr.6', 'idx']
    $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>) ['$68binary_subscr.10', 'arr_flat', 'i']
    $72load_attr.12 = getattr(value=out, attr=flat) ['$72load_attr.12', 'out']
    $72load_attr.12[idx] = $68binary_subscr.10 ['$68binary_subscr.10', '$72load_attr.12', 'idx']
    jump 46                                  []
label 80:
    $82return_value.1 = cast(value=out)      ['$82return_value.1', 'out']
    return $82return_value.1                 ['$82return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF1AE50>
2023-02-02 09:41 DEBUG on stmt: a = arg(0, name=a)
2023-02-02 09:41 DEBUG on stmt: shift = arg(1, name=shift)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
2023-02-02 09:41 DEBUG on stmt: arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $18load_attr.7 = getattr(value=arr, attr=shape)
2023-02-02 09:41 DEBUG on stmt: $22load_attr.9 = getattr(value=arr, attr=dtype)
2023-02-02 09:41 DEBUG on stmt: out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-02-02 09:41 DEBUG on stmt: $36load_global.14 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $40load_attr.16 = getattr(value=arr, attr=size)
2023-02-02 09:41 DEBUG on stmt: $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $44get_iter.18 = getiter(value=$42call_function.17)
2023-02-02 09:41 DEBUG on stmt: $phi46.0 = $44get_iter.18
2023-02-02 09:41 DEBUG on stmt: jump 46
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 46
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF1AE50>
2023-02-02 09:41 DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
2023-02-02 09:41 DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi48.1 = $46for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $46for_iter.3, 48, 80
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 48
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF1AE50>
2023-02-02 09:41 DEBUG on stmt: i = $phi48.1
2023-02-02 09:41 DEBUG on stmt: $54binary_add.4 = i + shift
2023-02-02 09:41 DEBUG on stmt: $58load_attr.6 = getattr(value=arr, attr=size)
2023-02-02 09:41 DEBUG on stmt: idx = $54binary_add.4 % $58load_attr.6
2023-02-02 09:41 DEBUG on stmt: $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $72load_attr.12 = getattr(value=out, attr=flat)
2023-02-02 09:41 DEBUG on stmt: $72load_attr.12[idx] = $68binary_subscr.10
2023-02-02 09:41 DEBUG on stmt: jump 46
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 80
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF1AE50>
2023-02-02 09:41 DEBUG on stmt: $82return_value.1 = cast(value=out)
2023-02-02 09:41 DEBUG on stmt: return $82return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x000001A51CF0E910>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x000001A51CF0EA90>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x000001A51CF0ED30>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x000001A51CF0EFD0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CF0E250>],
             '$36load_global.14': [<numba.core.ir.Assign object at 0x000001A51CF109D0>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x000001A51CF10C70>],
             '$42call_function.17': [<numba.core.ir.Assign object at 0x000001A51CF10E20>],
             '$44get_iter.18': [<numba.core.ir.Assign object at 0x000001A51CF10F70>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x000001A51CF13070>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x000001A51CF13190>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x000001A51CF132B0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001A51CF0E3D0>],
             '$54binary_add.4': [<numba.core.ir.Assign object at 0x000001A51CF13910>],
             '$58load_attr.6': [<numba.core.ir.Assign object at 0x000001A51CF13BB0>],
             '$68binary_subscr.10': [<numba.core.ir.Assign object at 0x000001A51CF14250>],
             '$72load_attr.12': [<numba.core.ir.Assign object at 0x000001A51CF144F0>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x000001A51CF147F0>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x000001A51CF0E790>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x000001A51CF10880>],
             'a': [<numba.core.ir.Assign object at 0x000001A51CEFEF70>],
             'arr': [<numba.core.ir.Assign object at 0x000001A51CF0E6A0>],
             'arr_flat': [<numba.core.ir.Assign object at 0x000001A51CF10730>],
             'i': [<numba.core.ir.Assign object at 0x000001A51CF13550>],
             'idx': [<numba.core.ir.Assign object at 0x000001A51CF13D30>],
             'out': [<numba.core.ir.Assign object at 0x000001A51CF104C0>],
             'shift': [<numba.core.ir.Assign object at 0x000001A51CF0E0D0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4428)
           2	LOAD_FAST(arg=0, lineno=4428)
           4	RETURN_VALUE(arg=None, lineno=4428)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4428)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4428)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4428)
2023-02-02 09:41 DEBUG stack ['$a2.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDAAD60>
2023-02-02 09:41 DEBUG on stmt: a = arg(0, name=a)
2023-02-02 09:41 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-02-02 09:41 DEBUG on stmt: $4return_value.1 = cast(value=a)
2023-02-02 09:41 DEBUG on stmt: return $4return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x000001A51CF1AF40>],
             'a': [<numba.core.ir.Assign object at 0x000001A51CF1F640>],
             'dtype': [<numba.core.ir.Assign object at 0x000001A51CF1F190>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-02-02 09:41 DEBUG stack ['$10call_function.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF2A1F0>
2023-02-02 09:41 DEBUG on stmt: shape = arg(0, name=shape)
2023-02-02 09:41 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-02-02 09:41 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
2023-02-02 09:41 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001A51CF37D60>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51CF37EB0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51CF377F0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001A51CF37BB0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001A51CF37670>],
             'shape': [<numba.core.ir.Assign object at 0x000001A51CF370A0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=599)
           2	LOAD_FAST(arg=2, lineno=599)
           4	LOAD_FAST(arg=3, lineno=599)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=4, lineno=1)
          12	LOAD_FAST(arg=1, lineno=599)
          14	LOAD_FAST(arg=0, lineno=599)
          16	BINARY_SUBTRACT(arg=None, lineno=1)
          18	LOAD_CONST(arg=1, lineno=1)
          20	COMPARE_OP(arg=4, lineno=1)
          22	BINARY_AND(arg=None, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=599)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=599)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=3, lineno=599)
2023-02-02 09:41 DEBUG stack ['$high_array_12.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$high_array_12.0', '$highestarr_14.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-02-02 09:41 DEBUG stack ['$6binary_subtract.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=1)
2023-02-02 09:41 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=599)
2023-02-02 09:41 DEBUG stack ['$10compare_op.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=599)
2023-02-02 09:41 DEBUG stack ['$10compare_op.4', '$ATR_short_112.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$10compare_op.4', '$ATR_short_112.5', '$ATR_long_114.6']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1)
2023-02-02 09:41 DEBUG stack ['$10compare_op.4', '$16binary_subtract.7']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=COMPARE_OP(arg=4, lineno=1)
2023-02-02 09:41 DEBUG stack ['$10compare_op.4', '$16binary_subtract.7', '$const18.8']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_AND(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$10compare_op.4', '$20compare_op.9']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$22binary_and.10']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$high_array_12.0'}), (4, {'res': '$highestarr_14.1'}), (6, {'lhs': '$high_array_12.0', 'rhs': '$highestarr_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'res': '$ATR_short_112.5'}), (14, {'res': '$ATR_long_114.6'}), (16, {'lhs': '$ATR_short_112.5', 'rhs': '$ATR_long_114.6', 'res': '$16binary_subtract.7'}), (18, {'res': '$const18.8'}), (20, {'lhs': '$16binary_subtract.7', 'rhs': '$const18.8', 'res': '$20compare_op.9'}), (22, {'lhs': '$10compare_op.4', 'rhs': '$20compare_op.9', 'res': '$22binary_and.10'}), (24, {'retval': '$22binary_and.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    ATR_long_1 = arg(0, name=ATR_long_1)     ['ATR_long_1']
    ATR_short_1 = arg(1, name=ATR_short_1)   ['ATR_short_1']
    high_array_1 = arg(2, name=high_array_1) ['high_array_1']
    highestarr_1 = arg(3, name=highestarr_1) ['highestarr_1']
    $6binary_subtract.2 = high_array_1 - highestarr_1 ['$6binary_subtract.2', 'high_array_1', 'highestarr_1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 > $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $16binary_subtract.7 = ATR_short_1 - ATR_long_1 ['$16binary_subtract.7', 'ATR_long_1', 'ATR_short_1']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20compare_op.9 = $16binary_subtract.7 > $const18.8 ['$16binary_subtract.7', '$20compare_op.9', '$const18.8']
    $22binary_and.10 = $10compare_op.4 & $20compare_op.9 ['$10compare_op.4', '$20compare_op.9', '$22binary_and.10']
    $24return_value.11 = cast(value=$22binary_and.10) ['$22binary_and.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51D141AC0>
2023-02-02 09:41 DEBUG on stmt: ATR_long_1 = arg(0, name=ATR_long_1)
2023-02-02 09:41 DEBUG on stmt: ATR_short_1 = arg(1, name=ATR_short_1)
2023-02-02 09:41 DEBUG on stmt: high_array_1 = arg(2, name=high_array_1)
2023-02-02 09:41 DEBUG on stmt: highestarr_1 = arg(3, name=highestarr_1)
2023-02-02 09:41 DEBUG on stmt: $6binary_subtract.2 = high_array_1 - highestarr_1
2023-02-02 09:41 DEBUG on stmt: $const8.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 > $const8.3
2023-02-02 09:41 DEBUG on stmt: $16binary_subtract.7 = ATR_short_1 - ATR_long_1
2023-02-02 09:41 DEBUG on stmt: $const18.8 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $20compare_op.9 = $16binary_subtract.7 > $const18.8
2023-02-02 09:41 DEBUG on stmt: $22binary_and.10 = $10compare_op.4 & $20compare_op.9
2023-02-02 09:41 DEBUG on stmt: $24return_value.11 = cast(value=$22binary_and.10)
2023-02-02 09:41 DEBUG on stmt: return $24return_value.11
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001A51D147D60>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x000001A51D143160>],
             '$20compare_op.9': [<numba.core.ir.Assign object at 0x000001A51D143460>],
             '$22binary_and.10': [<numba.core.ir.Assign object at 0x000001A51D1435E0>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x000001A51D143760>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001A51D147A60>],
             '$const18.8': [<numba.core.ir.Assign object at 0x000001A51D1432E0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001A51D147BE0>],
             'ATR_long_1': [<numba.core.ir.Assign object at 0x000001A51D141BB0>],
             'ATR_short_1': [<numba.core.ir.Assign object at 0x000001A51D147460>],
             'high_array_1': [<numba.core.ir.Assign object at 0x000001A51D147580>],
             'highestarr_1': [<numba.core.ir.Assign object at 0x000001A51D1476A0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=599)
           2	LOAD_FAST(arg=0, lineno=599)
           4	LOAD_FAST(arg=1, lineno=599)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=0, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=599)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=599)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=599)
2023-02-02 09:41 DEBUG stack ['$low_array_12.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$low_array_12.0', '$lowestarr_14.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-02-02 09:41 DEBUG stack ['$6binary_subtract.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=0, lineno=1)
2023-02-02 09:41 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-02-02 09:41 DEBUG stack ['$10compare_op.4']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$low_array_12.0'}), (4, {'res': '$lowestarr_14.1'}), (6, {'lhs': '$low_array_12.0', 'rhs': '$lowestarr_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'retval': '$10compare_op.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    low_array_1 = arg(0, name=low_array_1)   ['low_array_1']
    lowestarr_1 = arg(1, name=lowestarr_1)   ['lowestarr_1']
    $6binary_subtract.2 = low_array_1 - lowestarr_1 ['$6binary_subtract.2', 'low_array_1', 'lowestarr_1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 < $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10compare_op.4) ['$10compare_op.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF2DC10>
2023-02-02 09:41 DEBUG on stmt: low_array_1 = arg(0, name=low_array_1)
2023-02-02 09:41 DEBUG on stmt: lowestarr_1 = arg(1, name=lowestarr_1)
2023-02-02 09:41 DEBUG on stmt: $6binary_subtract.2 = low_array_1 - lowestarr_1
2023-02-02 09:41 DEBUG on stmt: $const8.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 < $const8.3
2023-02-02 09:41 DEBUG on stmt: $12return_value.5 = cast(value=$10compare_op.4)
2023-02-02 09:41 DEBUG on stmt: return $12return_value.5
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001A51CEC0220>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001A51CEC0BE0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001A51CEC0C10>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001A51CEC0C40>],
             'low_array_1': [<numba.core.ir.Assign object at 0x000001A51CF2D670>],
             'lowestarr_1': [<numba.core.ir.Assign object at 0x000001A51CEC07C0>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=116)
           2	LOAD_FAST(arg=2, lineno=116)
           4	LOAD_CONST(arg=1, lineno=116)
           6	COMPARE_OP(arg=2, lineno=116)
           8	POP_JUMP_IF_FALSE(arg=42, lineno=116)
          10	LOAD_FAST(arg=3, lineno=116)
          12	LOAD_CONST(arg=2, lineno=116)
          14	COMPARE_OP(arg=2, lineno=116)
          16	POP_JUMP_IF_FALSE(arg=42, lineno=116)
          18	LOAD_FAST(arg=4, lineno=117)
          20	POP_JUMP_IF_FALSE(arg=36, lineno=117)
          22	LOAD_FAST(arg=1, lineno=118)
          24	LOAD_CONST(arg=1, lineno=118)
          26	LOAD_FAST(arg=4, lineno=118)
          28	BINARY_ADD(arg=None, lineno=118)
          30	BINARY_MULTIPLY(arg=None, lineno=118)
          32	STORE_FAST(arg=0, lineno=118)
          34	JUMP_ABSOLUTE(arg=54, lineno=118)
>         36	LOAD_FAST(arg=1, lineno=120)
          38	STORE_FAST(arg=0, lineno=120)
          40	JUMP_FORWARD(arg=12, lineno=120)
>         42	LOAD_FAST(arg=2, lineno=121)
          44	LOAD_CONST(arg=2, lineno=121)
          46	COMPARE_OP(arg=2, lineno=121)
          48	POP_JUMP_IF_FALSE(arg=54, lineno=121)
          50	LOAD_CONST(arg=2, lineno=122)
          52	STORE_FAST(arg=0, lineno=122)
>         54	LOAD_FAST(arg=0, lineno=123)
          56	RETURN_VALUE(arg=None, lineno=123)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=116)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=116)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=42, lineno=116)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=116)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=42, lineno=116)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=121)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=121)
2023-02-02 09:41 DEBUG stack ['$marketpostion42.0']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=COMPARE_OP(arg=2, lineno=121)
2023-02-02 09:41 DEBUG stack ['$marketpostion42.0', '$const44.1']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=54, lineno=121)
2023-02-02 09:41 DEBUG stack ['$46compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=4, lineno=117)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=36, lineno=117)
2023-02-02 09:41 DEBUG stack ['$slippage18.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=122)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=52, inst=STORE_FAST(arg=0, lineno=122)
2023-02-02 09:41 DEBUG stack ['$const50.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=123)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=123)
2023-02-02 09:41 DEBUG stack ['$entryprice54.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=118)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0', '$const24.1']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=BINARY_ADD(arg=None, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0', '$const24.1', '$slippage26.2']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=BINARY_MULTIPLY(arg=None, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0', '$28binary_add.3']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=118)
2023-02-02 09:41 DEBUG stack ['$30binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=JUMP_ABSOLUTE(arg=54, lineno=118)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=120)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=120)
2023-02-02 09:41 DEBUG stack ['$target_price36.0']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=JUMP_FORWARD(arg=12, lineno=120)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 42: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 42: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$slippage18.0'}), (20, {'pred': '$slippage18.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 36: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$target_price22.0'}), (24, {'res': '$const24.1'}), (26, {'res': '$slippage26.2'}), (28, {'lhs': '$const24.1', 'rhs': '$slippage26.2', 'res': '$28binary_add.3'}), (30, {'lhs': '$target_price22.0', 'rhs': '$28binary_add.3', 'res': '$30binary_multiply.4'}), (32, {'value': '$30binary_multiply.4'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$target_price36.0'}), (38, {'value': '$target_price36.0'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$marketpostion42.0'}), (44, {'res': '$const44.1'}), (46, {'lhs': '$marketpostion42.0', 'rhs': '$const44.1', 'res': '$46compare_op.2'}), (48, {'pred': '$46compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'value': '$const50.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$entryprice54.0'}), (56, {'retval': '$entryprice54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    entryprice = arg(0, name=entryprice)     ['entryprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 42                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 42                   ['$16pred']
label 18:
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None) ['$20pred', 'bool20', 'slippage']
    branch $20pred, 22, 36                   ['$20pred']
label 22:
    $const24.1 = const(int, 1)               ['$const24.1']
    $28binary_add.3 = $const24.1 + slippage  ['$28binary_add.3', '$const24.1', 'slippage']
    entryprice = target_price * $28binary_add.3 ['$28binary_add.3', 'entryprice', 'target_price']
    jump 54                                  []
label 36:
    entryprice = target_price                ['entryprice', 'target_price']
    jump 54                                  []
label 42:
    $const44.1 = const(int, 0)               ['$const44.1']
    $46compare_op.2 = marketpostion == $const44.1 ['$46compare_op.2', '$const44.1', 'marketpostion']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.2', '$48pred', 'bool48']
    branch $48pred, 50, 54                   ['$48pred']
label 50:
    entryprice = const(int, 0)               ['entryprice']
    jump 54                                  []
label 54:
    $56return_value.1 = cast(value=entryprice) ['$56return_value.1', 'entryprice']
    return $56return_value.1                 ['$56return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 42
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 42
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $20pred, 22, 36
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 22
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: $const24.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: $const44.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-02-02 09:41 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $48pred, 50, 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 54
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFDF40>
2023-02-02 09:41 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG on stmt: return $56return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CD85AF0>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CD85EE0>],
             '$20pred': [<numba.core.ir.Assign object at 0x000001A51CDFD7F0>],
             '$28binary_add.3': [<numba.core.ir.Assign object at 0x000001A51CE77A90>],
             '$46compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CE77070>],
             '$48pred': [<numba.core.ir.Assign object at 0x000001A51CDCA430>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x000001A51CD71B50>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CEC9190>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CEC9E80>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CE77D30>],
             '$const24.1': [<numba.core.ir.Assign object at 0x000001A51D130280>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CEC9580>],
             '$const44.1': [<numba.core.ir.Assign object at 0x000001A51CE77370>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51CD85790>],
             'bool20': [<numba.core.ir.Assign object at 0x000001A51CDFDF10>],
             'bool48': [<numba.core.ir.Assign object at 0x000001A51CE771C0>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CEC91F0>],
             'direction': [<numba.core.ir.Assign object at 0x000001A51CEC9BB0>],
             'entryprice': [<numba.core.ir.Assign object at 0x000001A51CD85070>,
                            <numba.core.ir.Assign object at 0x000001A51CE779D0>,
                            <numba.core.ir.Assign object at 0x000001A51CE77700>,
                            <numba.core.ir.Assign object at 0x000001A51CDCEFA0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CEC99D0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CEC9730>],
             'slippage': [<numba.core.ir.Assign object at 0x000001A51CEC9A30>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51CEC9940>]})
2023-02-02 09:41 DEBUG SSA violators {'entryprice'}
2023-02-02 09:41 DEBUG Fix SSA violator on var entryprice
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG first assign: entryprice
2023-02-02 09:41 DEBUG replaced with: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $20pred, 22, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 22
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $const24.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG replaced with: entryprice.1 = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price
2023-02-02 09:41 DEBUG replaced with: entryprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $const44.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-02-02 09:41 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $48pred, 50, 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: entryprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 54
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG on stmt: return $56return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CD719A0>],
             22: [<numba.core.ir.Assign object at 0x000001A51CEDA4C0>],
             36: [<numba.core.ir.Assign object at 0x000001A51CEDA6A0>],
             50: [<numba.core.ir.Assign object at 0x000001A51CEDA2E0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $20pred, 22, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 22
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $const24.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $const44.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-02-02 09:41 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $48pred, 50, 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: entryprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 54
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CDFD940>
2023-02-02 09:41 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG find_def var='entryprice' stmt=$56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG find_def_from_top label 54
2023-02-02 09:41 DEBUG insert phi node entryprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 54
2023-02-02 09:41 DEBUG find_def_from_bottom label 42
2023-02-02 09:41 DEBUG find_def_from_top label 42
2023-02-02 09:41 DEBUG idom 0 from label 42
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG incoming_def entryprice.2 = target_price
2023-02-02 09:41 DEBUG find_def_from_bottom label 50
2023-02-02 09:41 DEBUG incoming_def entryprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 22
2023-02-02 09:41 DEBUG incoming_def entryprice.1 = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG replaced with: $56return_value.1 = cast(value=entryprice.4)
2023-02-02 09:41 DEBUG on stmt: return $56return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=146)
           2	LOAD_FAST(arg=5, lineno=146)
           4	LOAD_CONST(arg=1, lineno=146)
           6	COMPARE_OP(arg=2, lineno=146)
           8	POP_JUMP_IF_FALSE(arg=62, lineno=146)
          10	LOAD_FAST(arg=2, lineno=147)
          12	LOAD_CONST(arg=2, lineno=147)
          14	COMPARE_OP(arg=2, lineno=147)
          16	POP_JUMP_IF_FALSE(arg=50, lineno=147)
          18	LOAD_FAST(arg=3, lineno=147)
          20	LOAD_CONST(arg=3, lineno=147)
          22	COMPARE_OP(arg=2, lineno=147)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=147)
          26	LOAD_FAST(arg=4, lineno=148)
          28	POP_JUMP_IF_FALSE(arg=44, lineno=148)
          30	LOAD_FAST(arg=1, lineno=149)
          32	LOAD_CONST(arg=3, lineno=149)
          34	LOAD_FAST(arg=4, lineno=149)
          36	BINARY_SUBTRACT(arg=None, lineno=149)
          38	BINARY_MULTIPLY(arg=None, lineno=149)
          40	STORE_FAST(arg=0, lineno=149)
          42	JUMP_ABSOLUTE(arg=62, lineno=149)
>         44	LOAD_FAST(arg=1, lineno=151)
          46	STORE_FAST(arg=0, lineno=151)
          48	JUMP_FORWARD(arg=12, lineno=151)
>         50	LOAD_FAST(arg=2, lineno=152)
          52	LOAD_CONST(arg=3, lineno=152)
          54	COMPARE_OP(arg=2, lineno=152)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=152)
          58	LOAD_CONST(arg=2, lineno=153)
          60	STORE_FAST(arg=0, lineno=153)
>         62	LOAD_FAST(arg=0, lineno=154)
          64	RETURN_VALUE(arg=None, lineno=154)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=146)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=5, lineno=146)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=146)
2023-02-02 09:41 DEBUG stack ['$direction2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=146)
2023-02-02 09:41 DEBUG stack ['$direction2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=62, lineno=146)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack ['$marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack ['$marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=50, lineno=147)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=154)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=154)
2023-02-02 09:41 DEBUG stack ['$exitsprice62.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=147)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=3, lineno=147)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=COMPARE_OP(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion18.0', '$const20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=147)
2023-02-02 09:41 DEBUG stack ['$22compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=152)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=152)
2023-02-02 09:41 DEBUG stack ['$marketpostion50.0']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=COMPARE_OP(arg=2, lineno=152)
2023-02-02 09:41 DEBUG stack ['$marketpostion50.0', '$const52.1']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=152)
2023-02-02 09:41 DEBUG stack ['$54compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=148)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=44, lineno=148)
2023-02-02 09:41 DEBUG stack ['$slippage26.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=153)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=60, inst=STORE_FAST(arg=0, lineno=153)
2023-02-02 09:41 DEBUG stack ['$const58.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=149)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0', '$const32.1']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0', '$const32.1', '$slippage34.2']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=BINARY_MULTIPLY(arg=None, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0', '$36binary_subtract.3']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=STORE_FAST(arg=0, lineno=149)
2023-02-02 09:41 DEBUG stack ['$38binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=JUMP_ABSOLUTE(arg=62, lineno=149)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=151)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=STORE_FAST(arg=0, lineno=151)
2023-02-02 09:41 DEBUG stack ['$target_price44.0']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=JUMP_FORWARD(arg=12, lineno=151)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$direction2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$direction2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 50: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$last_marketpostion18.0'}), (20, {'res': '$const20.1'}), (22, {'lhs': '$last_marketpostion18.0', 'rhs': '$const20.1', 'res': '$22compare_op.2'}), (24, {'pred': '$22compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 50: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$slippage26.0'}), (28, {'pred': '$slippage26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$target_price30.0'}), (32, {'res': '$const32.1'}), (34, {'res': '$slippage34.2'}), (36, {'lhs': '$const32.1', 'rhs': '$slippage34.2', 'res': '$36binary_subtract.3'}), (38, {'lhs': '$target_price30.0', 'rhs': '$36binary_subtract.3', 'res': '$38binary_multiply.4'}), (40, {'value': '$38binary_multiply.4'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$target_price44.0'}), (46, {'value': '$target_price44.0'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$marketpostion50.0'}), (52, {'res': '$const52.1'}), (54, {'lhs': '$marketpostion50.0', 'rhs': '$const52.1', 'res': '$54compare_op.2'}), (56, {'pred': '$54compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'value': '$const58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$exitsprice62.0'}), (64, {'retval': '$exitsprice62.0', 'castval': '$64return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    exitsprice = arg(0, name=exitsprice)     ['exitsprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(str, buyonly)          ['$const4.1']
    $6compare_op.2 = direction == $const4.1  ['$6compare_op.2', '$const4.1', 'direction']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 62                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 50                   ['$16pred']
label 18:
    $const20.1 = const(int, 1)               ['$const20.1']
    $22compare_op.2 = last_marketpostion == $const20.1 ['$22compare_op.2', '$const20.1', 'last_marketpostion']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.2', '$24pred', 'bool24']
    branch $24pred, 26, 50                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$28pred', 'bool28', 'slippage']
    branch $28pred, 30, 44                   ['$28pred']
label 30:
    $const32.1 = const(int, 1)               ['$const32.1']
    $36binary_subtract.3 = $const32.1 - slippage ['$36binary_subtract.3', '$const32.1', 'slippage']
    exitsprice = target_price * $36binary_subtract.3 ['$36binary_subtract.3', 'exitsprice', 'target_price']
    jump 62                                  []
label 44:
    exitsprice = target_price                ['exitsprice', 'target_price']
    jump 62                                  []
label 50:
    $const52.1 = const(int, 1)               ['$const52.1']
    $54compare_op.2 = marketpostion == $const52.1 ['$54compare_op.2', '$const52.1', 'marketpostion']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.2', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    exitsprice = const(int, 0)               ['exitsprice']
    jump 62                                  []
label 62:
    $64return_value.1 = cast(value=exitsprice) ['$64return_value.1', 'exitsprice']
    return $64return_value.1                 ['$64return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 50
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: $const20.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-02-02 09:41 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $24pred, 26, 50
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $28pred, 30, 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: $const32.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: $const52.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 62
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CDFD190>
2023-02-02 09:41 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG on stmt: return $64return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CCBD6D0>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CCBD4C0>],
             '$22compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CC921C0>],
             '$24pred': [<numba.core.ir.Assign object at 0x000001A51CC92910>],
             '$28pred': [<numba.core.ir.Assign object at 0x000001A51CC927C0>],
             '$36binary_subtract.3': [<numba.core.ir.Assign object at 0x000001A51CC7E850>],
             '$54compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CC7E310>],
             '$56pred': [<numba.core.ir.Assign object at 0x000001A51CC7E070>],
             '$64return_value.1': [<numba.core.ir.Assign object at 0x000001A51CB6C7F0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CCBDFD0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CCBDF70>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CCBD910>],
             '$const20.1': [<numba.core.ir.Assign object at 0x000001A51CCBD2B0>],
             '$const32.1': [<numba.core.ir.Assign object at 0x000001A51CC7E430>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CCBAFA0>],
             '$const52.1': [<numba.core.ir.Assign object at 0x000001A51CC7E610>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51CCBD3A0>],
             'bool24': [<numba.core.ir.Assign object at 0x000001A51CC92940>],
             'bool28': [<numba.core.ir.Assign object at 0x000001A51CC92280>],
             'bool56': [<numba.core.ir.Assign object at 0x000001A51CC7E160>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CCBDE50>],
             'direction': [<numba.core.ir.Assign object at 0x000001A51CCBA5B0>],
             'exitsprice': [<numba.core.ir.Assign object at 0x000001A51CD801C0>,
                            <numba.core.ir.Assign object at 0x000001A51CC7E9D0>,
                            <numba.core.ir.Assign object at 0x000001A51CC7EC70>,
                            <numba.core.ir.Assign object at 0x000001A51CB6CD60>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CDE7B80>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CD45730>],
             'slippage': [<numba.core.ir.Assign object at 0x000001A51CDC7400>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51D131970>]})
2023-02-02 09:41 DEBUG SSA violators {'exitsprice'}
2023-02-02 09:41 DEBUG Fix SSA violator on var exitsprice
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG first assign: exitsprice
2023-02-02 09:41 DEBUG replaced with: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const20.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-02-02 09:41 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $24pred, 26, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $28pred, 30, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const32.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG replaced with: exitsprice.1 = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price
2023-02-02 09:41 DEBUG replaced with: exitsprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const52.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: exitsprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 62
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG on stmt: return $64return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CE77E50>],
             30: [<numba.core.ir.Assign object at 0x000001A51CB6C070>],
             44: [<numba.core.ir.Assign object at 0x000001A51CB6C3D0>],
             58: [<numba.core.ir.Assign object at 0x000001A51CB6C8B0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const20.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-02-02 09:41 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $24pred, 26, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $28pred, 30, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const32.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $const52.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: exitsprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 62
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD85400>
2023-02-02 09:41 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG find_def var='exitsprice' stmt=$64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG find_def_from_top label 62
2023-02-02 09:41 DEBUG insert phi node exitsprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 62
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG find_def_from_bottom label 44
2023-02-02 09:41 DEBUG incoming_def exitsprice.2 = target_price
2023-02-02 09:41 DEBUG find_def_from_bottom label 50
2023-02-02 09:41 DEBUG find_def_from_top label 50
2023-02-02 09:41 DEBUG idom 10 from label 50
2023-02-02 09:41 DEBUG find_def_from_bottom label 10
2023-02-02 09:41 DEBUG find_def_from_top label 10
2023-02-02 09:41 DEBUG idom 0 from label 10
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG find_def_from_bottom label 58
2023-02-02 09:41 DEBUG incoming_def exitsprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 30
2023-02-02 09:41 DEBUG incoming_def exitsprice.1 = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG replaced with: $64return_value.1 = cast(value=exitsprice.4)
2023-02-02 09:41 DEBUG on stmt: return $64return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=172)
           2	LOAD_FAST(arg=4, lineno=172)
           4	LOAD_CONST(arg=1, lineno=172)
           6	COMPARE_OP(arg=2, lineno=172)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=172)
          10	LOAD_FAST(arg=5, lineno=172)
          12	LOAD_CONST(arg=2, lineno=172)
          14	COMPARE_OP(arg=2, lineno=172)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=172)
          18	LOAD_FAST(arg=3, lineno=173)
          20	LOAD_FAST(arg=1, lineno=173)
          22	BINARY_MULTIPLY(arg=None, lineno=173)
          24	LOAD_FAST(arg=2, lineno=173)
          26	BINARY_MULTIPLY(arg=None, lineno=173)
          28	STORE_FAST(arg=0, lineno=173)
          30	JUMP_FORWARD(arg=12, lineno=173)
>         32	LOAD_FAST(arg=4, lineno=174)
          34	LOAD_CONST(arg=2, lineno=174)
          36	COMPARE_OP(arg=2, lineno=174)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=174)
          40	LOAD_CONST(arg=2, lineno=175)
          42	STORE_FAST(arg=0, lineno=175)
>         44	LOAD_FAST(arg=0, lineno=176)
          46	RETURN_VALUE(arg=None, lineno=176)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=172)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=172)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=172)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=172)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=172)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=172)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=172)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=172)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=172)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=174)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=174)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=174)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=174)
2023-02-02 09:41 DEBUG stack ['$36compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=173)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=173)
2023-02-02 09:41 DEBUG stack ['$target_price18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=173)
2023-02-02 09:41 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=173)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=173)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=173)
2023-02-02 09:41 DEBUG stack ['$26binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=173)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=175)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=175)
2023-02-02 09:41 DEBUG stack ['$const40.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=176)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=176)
2023-02-02 09:41 DEBUG stack ['$buy_Fee44.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$buy_Fee44.0'}), (46, {'retval': '$buy_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    buy_Fee = arg(0, name=buy_Fee)           ['buy_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    buy_Fee = $22binary_multiply.2 * size    ['$22binary_multiply.2', 'buy_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    buy_Fee = const(int, 0)                  ['buy_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=buy_Fee)  ['$46return_value.1', 'buy_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C8CC520>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51C8BDEB0>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51C8BD6A0>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C8D4940>],
             '$38pred': [<numba.core.ir.Assign object at 0x000001A51C8D44C0>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x000001A51C8E2280>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C8CC7C0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51C8CCBB0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51C8CCF40>],
             '$const34.1': [<numba.core.ir.Assign object at 0x000001A51C8BD070>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51C8CC640>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51C8BD340>],
             'bool38': [<numba.core.ir.Assign object at 0x000001A51C8D4D90>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51C8CCA90>],
             'buy_Fee': [<numba.core.ir.Assign object at 0x000001A51C8F7040>,
                         <numba.core.ir.Assign object at 0x000001A51C8BD3D0>,
                         <numba.core.ir.Assign object at 0x000001A51C8D43A0>],
             'fee': [<numba.core.ir.Assign object at 0x000001A51C8F71C0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51C8CC940>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51C8CC3D0>],
             'size': [<numba.core.ir.Assign object at 0x000001A51C8F7910>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51C8F7850>]})
2023-02-02 09:41 DEBUG SSA violators {'buy_Fee'}
2023-02-02 09:41 DEBUG Fix SSA violator on var buy_Fee
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG first assign: buy_Fee
2023-02-02 09:41 DEBUG replaced with: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG replaced with: buy_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: buy_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C8D4C70>],
             18: [<numba.core.ir.Assign object at 0x000001A51CA18820>],
             40: [<numba.core.ir.Assign object at 0x000001A51C8F7A90>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: buy_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C7838E0>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG find_def var='buy_Fee' stmt=$46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG find_def_from_top label 44
2023-02-02 09:41 DEBUG insert phi node buy_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-02-02 09:41 DEBUG find_def_from_bottom label 32
2023-02-02 09:41 DEBUG find_def_from_top label 32
2023-02-02 09:41 DEBUG idom 0 from label 32
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def buy_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG find_def_from_bottom label 40
2023-02-02 09:41 DEBUG incoming_def buy_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $46return_value.1 = cast(value=buy_Fee.3)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=193)
           2	LOAD_FAST(arg=4, lineno=193)
           4	LOAD_CONST(arg=1, lineno=193)
           6	COMPARE_OP(arg=2, lineno=193)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=193)
          10	LOAD_FAST(arg=5, lineno=193)
          12	LOAD_CONST(arg=2, lineno=193)
          14	COMPARE_OP(arg=2, lineno=193)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=193)
          18	LOAD_FAST(arg=3, lineno=194)
          20	LOAD_FAST(arg=1, lineno=194)
          22	BINARY_MULTIPLY(arg=None, lineno=194)
          24	LOAD_FAST(arg=2, lineno=194)
          26	BINARY_MULTIPLY(arg=None, lineno=194)
          28	STORE_FAST(arg=0, lineno=194)
          30	JUMP_FORWARD(arg=12, lineno=194)
>         32	LOAD_FAST(arg=4, lineno=195)
          34	LOAD_CONST(arg=1, lineno=195)
          36	COMPARE_OP(arg=2, lineno=195)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=195)
          40	LOAD_CONST(arg=1, lineno=196)
          42	STORE_FAST(arg=0, lineno=196)
>         44	LOAD_FAST(arg=0, lineno=197)
          46	RETURN_VALUE(arg=None, lineno=197)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=193)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=193)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=193)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=193)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=193)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=193)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=193)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=193)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=193)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=195)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=195)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=195)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=195)
2023-02-02 09:41 DEBUG stack ['$36compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=194)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=194)
2023-02-02 09:41 DEBUG stack ['$target_price18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=194)
2023-02-02 09:41 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=194)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=194)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=194)
2023-02-02 09:41 DEBUG stack ['$26binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=194)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=196)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=196)
2023-02-02 09:41 DEBUG stack ['$const40.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=197)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=197)
2023-02-02 09:41 DEBUG stack ['$sell_Fee44.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$sell_Fee44.0'}), (46, {'retval': '$sell_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    sell_Fee = arg(0, name=sell_Fee)         ['sell_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    sell_Fee = $22binary_multiply.2 * size   ['$22binary_multiply.2', 'sell_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    sell_Fee = const(int, 0)                 ['sell_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=sell_Fee) ['$46return_value.1', 'sell_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8E2280>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8E2280>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8E2280>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8E2280>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8E2280>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C8E2280>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CA606D0>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CA603D0>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51CB6CA00>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CA86AC0>],
             '$38pred': [<numba.core.ir.Assign object at 0x000001A51CA86C10>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x000001A51CA86B20>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CA60580>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CA60820>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CA60CD0>],
             '$const34.1': [<numba.core.ir.Assign object at 0x000001A51CA86CD0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CA604F0>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51CA60220>],
             'bool38': [<numba.core.ir.Assign object at 0x000001A51CA86730>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CA60610>],
             'fee': [<numba.core.ir.Assign object at 0x000001A51C9D49A0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51C964490>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51C964C40>],
             'sell_Fee': [<numba.core.ir.Assign object at 0x000001A51CAAF220>,
                          <numba.core.ir.Assign object at 0x000001A51CDA5C70>,
                          <numba.core.ir.Assign object at 0x000001A51CA86670>],
             'size': [<numba.core.ir.Assign object at 0x000001A51C970250>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51C970BB0>]})
2023-02-02 09:41 DEBUG SSA violators {'sell_Fee'}
2023-02-02 09:41 DEBUG Fix SSA violator on var sell_Fee
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG first assign: sell_Fee
2023-02-02 09:41 DEBUG replaced with: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG replaced with: sell_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: sell_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CAAF610>],
             18: [<numba.core.ir.Assign object at 0x000001A51CA186A0>],
             40: [<numba.core.ir.Assign object at 0x000001A51CA18F70>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: sell_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: sell_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA86C70>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG find_def var='sell_Fee' stmt=$46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG find_def_from_top label 44
2023-02-02 09:41 DEBUG insert phi node sell_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-02-02 09:41 DEBUG find_def_from_bottom label 32
2023-02-02 09:41 DEBUG find_def_from_top label 32
2023-02-02 09:41 DEBUG idom 0 from label 32
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def sell_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG find_def_from_bottom label 40
2023-02-02 09:41 DEBUG incoming_def sell_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $46return_value.1 = cast(value=sell_Fee.3)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=202)
           2	LOAD_FAST(arg=1, lineno=202)
           4	LOAD_CONST(arg=1, lineno=202)
           6	COMPARE_OP(arg=2, lineno=202)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=202)
          10	LOAD_FAST(arg=4, lineno=203)
          12	LOAD_FAST(arg=5, lineno=203)
          14	BINARY_MULTIPLY(arg=None, lineno=203)
          16	LOAD_FAST(arg=6, lineno=203)
          18	LOAD_FAST(arg=5, lineno=203)
          20	BINARY_MULTIPLY(arg=None, lineno=203)
          22	BINARY_SUBTRACT(arg=None, lineno=203)
          24	STORE_FAST(arg=0, lineno=203)
          26	JUMP_FORWARD(arg=4, lineno=203)
>         28	LOAD_CONST(arg=2, lineno=205)
          30	STORE_FAST(arg=0, lineno=205)
>         32	LOAD_FAST(arg=0, lineno=206)
          34	RETURN_VALUE(arg=None, lineno=206)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=202)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=202)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=202)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=202)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=202)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=4, lineno=203)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=5, lineno=203)
2023-02-02 09:41 DEBUG stack ['$Close10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=203)
2023-02-02 09:41 DEBUG stack ['$Close10.0', '$buy_sizes12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=5, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3', '$buy_sizes18.4']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2', '$20binary_multiply.5']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=203)
2023-02-02 09:41 DEBUG stack ['$22binary_subtract.6']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=4, lineno=203)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=205)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=30, inst=STORE_FAST(arg=0, lineno=205)
2023-02-02 09:41 DEBUG stack ['$const28.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=206)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=206)
2023-02-02 09:41 DEBUG stack ['$OpenPostionprofit32.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$Close10.0'}), (12, {'res': '$buy_sizes12.1'}), (14, {'lhs': '$Close10.0', 'rhs': '$buy_sizes12.1', 'res': '$14binary_multiply.2'}), (16, {'res': '$entryprice16.3'}), (18, {'res': '$buy_sizes18.4'}), (20, {'lhs': '$entryprice16.3', 'rhs': '$buy_sizes18.4', 'res': '$20binary_multiply.5'}), (22, {'lhs': '$14binary_multiply.2', 'rhs': '$20binary_multiply.5', 'res': '$22binary_subtract.6'}), (24, {'value': '$22binary_subtract.6'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$const28.0'}), (30, {'value': '$const28.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$OpenPostionprofit32.0'}), (34, {'retval': '$OpenPostionprofit32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    OpenPostionprofit = arg(0, name=OpenPostionprofit) ['OpenPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    Close = arg(4, name=Close)               ['Close']
    buy_sizes = arg(5, name=buy_sizes)       ['buy_sizes']
    entryprice = arg(6, name=entryprice)     ['entryprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $14binary_multiply.2 = Close * buy_sizes ['$14binary_multiply.2', 'Close', 'buy_sizes']
    $20binary_multiply.5 = entryprice * buy_sizes ['$20binary_multiply.5', 'buy_sizes', 'entryprice']
    OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5 ['$14binary_multiply.2', '$20binary_multiply.5', 'OpenPostionprofit']
    jump 32                                  []
label 28:
    OpenPostionprofit = const(int, 0)        ['OpenPostionprofit']
    jump 32                                  []
label 32:
    $34return_value.1 = cast(value=OpenPostionprofit) ['$34return_value.1', 'OpenPostionprofit']
    return $34return_value.1                 ['$34return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE09F70>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: Close = arg(4, name=Close)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE09F70>
2023-02-02 09:41 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-02-02 09:41 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE09F70>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CE09F70>
2023-02-02 09:41 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $34return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51CB9AA30>],
             '$20binary_multiply.5': [<numba.core.ir.Assign object at 0x000001A51CB9AB80>],
             '$34return_value.1': [<numba.core.ir.Assign object at 0x000001A51CB9AB20>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CB83BB0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CB83F10>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CB83A00>],
             'Close': [<numba.core.ir.Assign object at 0x000001A51CB86A00>],
             'OpenPostionprofit': [<numba.core.ir.Assign object at 0x000001A51CB86820>,
                                   <numba.core.ir.Assign object at 0x000001A51CB9A940>,
                                   <numba.core.ir.Assign object at 0x000001A51CB9A640>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CB83550>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x000001A51CB86E80>],
             'buy_sizes': [<numba.core.ir.Assign object at 0x000001A51CB86DC0>],
             'entryprice': [<numba.core.ir.Assign object at 0x000001A51CB831C0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CB86C40>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CB86250>]})
2023-02-02 09:41 DEBUG SSA violators {'OpenPostionprofit'}
2023-02-02 09:41 DEBUG Fix SSA violator on var OpenPostionprofit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE09490>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG first assign: OpenPostionprofit
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: Close = arg(4, name=Close)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE09490>
2023-02-02 09:41 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-02-02 09:41 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE09490>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CE09490>
2023-02-02 09:41 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $34return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CB86310>],
             10: [<numba.core.ir.Assign object at 0x000001A51CB86C10>],
             28: [<numba.core.ir.Assign object at 0x000001A51CB237C0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C970C10>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: Close = arg(4, name=Close)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C970C10>
2023-02-02 09:41 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-02-02 09:41 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C970C10>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C970C10>
2023-02-02 09:41 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG find_def var='OpenPostionprofit' stmt=$34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_top label 32
2023-02-02 09:41 DEBUG insert phi node OpenPostionprofit.3 = phi(incoming_values=[], incoming_blocks=[]) at 32
2023-02-02 09:41 DEBUG find_def_from_bottom label 10
2023-02-02 09:41 DEBUG incoming_def OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG incoming_def OpenPostionprofit.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $34return_value.1 = cast(value=OpenPostionprofit.3)
2023-02-02 09:41 DEBUG on stmt: return $34return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=212)
           2	LOAD_FAST(arg=1, lineno=212)
           4	LOAD_CONST(arg=1, lineno=212)
           6	COMPARE_OP(arg=2, lineno=212)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=212)
          10	LOAD_FAST(arg=2, lineno=212)
          12	LOAD_CONST(arg=2, lineno=212)
          14	COMPARE_OP(arg=2, lineno=212)
          16	POP_JUMP_IF_FALSE(arg=28, lineno=212)
          18	LOAD_FAST(arg=0, lineno=213)
          20	LOAD_FAST(arg=3, lineno=213)
          22	BINARY_SUBTRACT(arg=None, lineno=213)
          24	STORE_FAST(arg=0, lineno=213)
          26	JUMP_FORWARD(arg=44, lineno=213)
>         28	LOAD_FAST(arg=1, lineno=214)
          30	LOAD_CONST(arg=2, lineno=214)
          32	COMPARE_OP(arg=2, lineno=214)
          34	POP_JUMP_IF_FALSE(arg=72, lineno=214)
          36	LOAD_FAST(arg=2, lineno=214)
          38	LOAD_CONST(arg=1, lineno=214)
          40	COMPARE_OP(arg=2, lineno=214)
          42	POP_JUMP_IF_FALSE(arg=72, lineno=214)
          44	LOAD_FAST(arg=0, lineno=215)
          46	LOAD_FAST(arg=4, lineno=215)
          48	BINARY_SUBTRACT(arg=None, lineno=215)
          50	STORE_FAST(arg=0, lineno=215)
          52	LOAD_FAST(arg=0, lineno=221)
          54	LOAD_FAST(arg=7, lineno=222)
          56	LOAD_FAST(arg=5, lineno=222)
          58	BINARY_MULTIPLY(arg=None, lineno=222)
          60	LOAD_FAST(arg=6, lineno=222)
          62	LOAD_FAST(arg=5, lineno=222)
          64	BINARY_MULTIPLY(arg=None, lineno=222)
          66	BINARY_SUBTRACT(arg=None, lineno=222)
          68	BINARY_ADD(arg=None, lineno=221)
          70	STORE_FAST(arg=0, lineno=221)
>         72	LOAD_FAST(arg=0, lineno=224)
          74	RETURN_VALUE(arg=None, lineno=224)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=212)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=212)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=212)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=212)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=28, lineno=212)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=214)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack ['$marketpostion28.0']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=COMPARE_OP(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack ['$marketpostion28.0', '$const30.1']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=72, lineno=214)
2023-02-02 09:41 DEBUG stack ['$32compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=213)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=213)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=213)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit18.0', '$buy_Fees20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=213)
2023-02-02 09:41 DEBUG stack ['$22binary_subtract.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=44, lineno=213)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=214)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion36.0']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=COMPARE_OP(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion36.0', '$const38.1']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=72, lineno=214)
2023-02-02 09:41 DEBUG stack ['$40compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=224)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=224)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit72.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=215)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=215)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit44.0']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=BINARY_SUBTRACT(arg=None, lineno=215)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit44.0', '$sell_Fees46.1']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=STORE_FAST(arg=0, lineno=215)
2023-02-02 09:41 DEBUG stack ['$48binary_subtract.2']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=221)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=7, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=5, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4', '$sizes56.5']
2023-02-02 09:41 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=BINARY_MULTIPLY(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7', '$sizes62.8']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=BINARY_SUBTRACT(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$64binary_multiply.9']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=221)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$66binary_subtract.10']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=STORE_FAST(arg=0, lineno=221)
2023-02-02 09:41 DEBUG stack ['$68binary_add.11']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 28: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$ClosedPostionprofit18.0'}), (20, {'res': '$buy_Fees20.1'}), (22, {'lhs': '$ClosedPostionprofit18.0', 'rhs': '$buy_Fees20.1', 'res': '$22binary_subtract.2'}), (24, {'value': '$22binary_subtract.2'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$marketpostion28.0'}), (30, {'res': '$const30.1'}), (32, {'lhs': '$marketpostion28.0', 'rhs': '$const30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$last_marketpostion36.0'}), (38, {'res': '$const38.1'}), (40, {'lhs': '$last_marketpostion36.0', 'rhs': '$const38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$ClosedPostionprofit44.0'}), (46, {'res': '$sell_Fees46.1'}), (48, {'lhs': '$ClosedPostionprofit44.0', 'rhs': '$sell_Fees46.1', 'res': '$48binary_subtract.2'}), (50, {'value': '$48binary_subtract.2'}), (52, {'res': '$ClosedPostionprofit52.3'}), (54, {'res': '$exitsprice54.4'}), (56, {'res': '$sizes56.5'}), (58, {'lhs': '$exitsprice54.4', 'rhs': '$sizes56.5', 'res': '$58binary_multiply.6'}), (60, {'res': '$last_entryprice60.7'}), (62, {'res': '$sizes62.8'}), (64, {'lhs': '$last_entryprice60.7', 'rhs': '$sizes62.8', 'res': '$64binary_multiply.9'}), (66, {'lhs': '$58binary_multiply.6', 'rhs': '$64binary_multiply.9', 'res': '$66binary_subtract.10'}), (68, {'lhs': '$ClosedPostionprofit52.3', 'rhs': '$66binary_subtract.10', 'res': '$68binary_add.11'}), (70, {'value': '$68binary_add.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$ClosedPostionprofit72.0'}), (74, {'retval': '$ClosedPostionprofit72.0', 'castval': '$74return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    ClosedPostionprofit = arg(0, name=ClosedPostionprofit) ['ClosedPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    sell_Fees = arg(4, name=sell_Fees)       ['sell_Fees']
    sizes = arg(5, name=sizes)               ['sizes']
    last_entryprice = arg(6, name=last_entryprice) ['last_entryprice']
    exitsprice = arg(7, name=exitsprice)     ['exitsprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 28                   ['$16pred']
label 18:
    $22binary_subtract.2 = ClosedPostionprofit - buy_Fees ['$22binary_subtract.2', 'ClosedPostionprofit', 'buy_Fees']
    ClosedPostionprofit = $22binary_subtract.2 ['$22binary_subtract.2', 'ClosedPostionprofit']
    jump 72                                  []
label 28:
    $const30.1 = const(int, 0)               ['$const30.1']
    $32compare_op.2 = marketpostion == $const30.1 ['$32compare_op.2', '$const30.1', 'marketpostion']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 72                   ['$34pred']
label 36:
    $const38.1 = const(int, 1)               ['$const38.1']
    $40compare_op.2 = last_marketpostion == $const38.1 ['$40compare_op.2', '$const38.1', 'last_marketpostion']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.2', '$42pred', 'bool42']
    branch $42pred, 44, 72                   ['$42pred']
label 44:
    $48binary_subtract.2 = ClosedPostionprofit - sell_Fees ['$48binary_subtract.2', 'ClosedPostionprofit', 'sell_Fees']
    ClosedPostionprofit = $48binary_subtract.2 ['$48binary_subtract.2', 'ClosedPostionprofit']
    $58binary_multiply.6 = exitsprice * sizes ['$58binary_multiply.6', 'exitsprice', 'sizes']
    $64binary_multiply.9 = last_entryprice * sizes ['$64binary_multiply.9', 'last_entryprice', 'sizes']
    $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9 ['$58binary_multiply.6', '$64binary_multiply.9', '$66binary_subtract.10']
    $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10 ['$66binary_subtract.10', '$68binary_add.11', 'ClosedPostionprofit']
    ClosedPostionprofit = $68binary_add.11   ['$68binary_add.11', 'ClosedPostionprofit']
    jump 72                                  []
label 72:
    $74return_value.1 = cast(value=ClosedPostionprofit) ['$74return_value.1', 'ClosedPostionprofit']
    return $74return_value.1                 ['$74return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-02-02 09:41 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: $const30.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-02-02 09:41 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $34pred, 36, 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: $const38.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-02-02 09:41 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $42pred, 44, 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-02-02 09:41 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-02-02 09:41 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-02-02 09:41 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 72
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CAAF8E0>
2023-02-02 09:41 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $74return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CE25070>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CE09F70>],
             '$22binary_subtract.2': [<numba.core.ir.Assign object at 0x000001A51CE09CD0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CDED100>],
             '$34pred': [<numba.core.ir.Assign object at 0x000001A51CDE7D60>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CCBACA0>],
             '$42pred': [<numba.core.ir.Assign object at 0x000001A51CCBA820>],
             '$48binary_subtract.2': [<numba.core.ir.Assign object at 0x000001A51CCC1310>],
             '$58binary_multiply.6': [<numba.core.ir.Assign object at 0x000001A51C96CDF0>],
             '$64binary_multiply.9': [<numba.core.ir.Assign object at 0x000001A51CCBAC70>],
             '$66binary_subtract.10': [<numba.core.ir.Assign object at 0x000001A51CCBAA00>],
             '$68binary_add.11': [<numba.core.ir.Assign object at 0x000001A51C90D340>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CE503A0>],
             '$74return_value.1': [<numba.core.ir.Assign object at 0x000001A51C90A7F0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CE250D0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CE25D90>],
             '$const30.1': [<numba.core.ir.Assign object at 0x000001A51CDED6A0>],
             '$const38.1': [<numba.core.ir.Assign object at 0x000001A51CDE79A0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CE50C40>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x000001A51D143D30>,
                                     <numba.core.ir.Assign object at 0x000001A51CDED7C0>,
                                     <numba.core.ir.Assign object at 0x000001A51CAAABB0>,
                                     <numba.core.ir.Assign object at 0x000001A51C90D760>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51CE25790>],
             'bool34': [<numba.core.ir.Assign object at 0x000001A51CDE73D0>],
             'bool42': [<numba.core.ir.Assign object at 0x000001A51CCBA520>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CE25DC0>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x000001A51CE500D0>],
             'exitsprice': [<numba.core.ir.Assign object at 0x000001A51CE50E80>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x000001A51CE50C70>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CF23EE0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51D1BA3A0>],
             'sell_Fees': [<numba.core.ir.Assign object at 0x000001A51CE50F40>],
             'sizes': [<numba.core.ir.Assign object at 0x000001A51CE505B0>]})
2023-02-02 09:41 DEBUG SSA violators {'ClosedPostionprofit'}
2023-02-02 09:41 DEBUG Fix SSA violator on var ClosedPostionprofit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG first assign: ClosedPostionprofit
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-02-02 09:41 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.1 = $22binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $const30.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-02-02 09:41 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $34pred, 36, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $const38.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-02-02 09:41 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $42pred, 44, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.2 = $48binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-02-02 09:41 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-02-02 09:41 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-02-02 09:41 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.3 = $68binary_add.11
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 72
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $74return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CA46A30>],
             18: [<numba.core.ir.Assign object at 0x000001A51CA46A90>],
             44: [<numba.core.ir.Assign object at 0x000001A51CA46760>,
                  <numba.core.ir.Assign object at 0x000001A51CA46A60>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-02-02 09:41 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 18
2023-02-02 09:41 DEBUG idom 10 from label 18
2023-02-02 09:41 DEBUG find_def_from_bottom label 10
2023-02-02 09:41 DEBUG find_def_from_top label 10
2023-02-02 09:41 DEBUG idom 0 from label 10
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = $22binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $const30.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-02-02 09:41 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $34pred, 36, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $const38.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-02-02 09:41 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $42pred, 44, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 44
2023-02-02 09:41 DEBUG idom 36 from label 44
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG find_def_from_top label 36
2023-02-02 09:41 DEBUG idom 28 from label 36
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG find_def_from_top label 28
2023-02-02 09:41 DEBUG idom 0 from label 28
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = $48binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-02-02 09:41 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-02-02 09:41 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-02-02 09:41 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG replaced with: $68binary_add.11 = ClosedPostionprofit.2 + $66binary_subtract.10
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.3 = $68binary_add.11
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 72
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CAAF130>
2023-02-02 09:41 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_top label 72
2023-02-02 09:41 DEBUG insert phi node ClosedPostionprofit.4 = phi(incoming_values=[], incoming_blocks=[]) at 72
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit.1 = $22binary_subtract.2
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG find_def_from_top label 28
2023-02-02 09:41 DEBUG idom 0 from label 28
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG find_def_from_top label 36
2023-02-02 09:41 DEBUG idom 28 from label 36
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG find_def_from_top label 28
2023-02-02 09:41 DEBUG idom 0 from label 28
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_bottom label 44
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit.3 = $68binary_add.11
2023-02-02 09:41 DEBUG replaced with: $74return_value.1 = cast(value=ClosedPostionprofit.4)
2023-02-02 09:41 DEBUG on stmt: return $74return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=242)
           2	LOAD_FAST(arg=1, lineno=242)
           4	LOAD_CONST(arg=1, lineno=242)
           6	COMPARE_OP(arg=2, lineno=242)
           8	POP_JUMP_IF_FALSE(arg=36, lineno=242)
          10	LOAD_FAST(arg=2, lineno=242)
          12	LOAD_CONST(arg=2, lineno=242)
          14	COMPARE_OP(arg=2, lineno=242)
          16	POP_JUMP_IF_FALSE(arg=36, lineno=242)
          18	LOAD_FAST(arg=3, lineno=243)
          20	LOAD_FAST(arg=4, lineno=243)
          22	BINARY_MULTIPLY(arg=None, lineno=243)
          24	LOAD_FAST(arg=5, lineno=243)
          26	LOAD_FAST(arg=4, lineno=243)
          28	BINARY_MULTIPLY(arg=None, lineno=243)
          30	BINARY_SUBTRACT(arg=None, lineno=243)
          32	STORE_FAST(arg=0, lineno=243)
          34	JUMP_FORWARD(arg=4, lineno=243)
>         36	LOAD_CONST(arg=1, lineno=245)
          38	STORE_FAST(arg=0, lineno=245)
>         40	LOAD_FAST(arg=0, lineno=246)
          42	RETURN_VALUE(arg=None, lineno=246)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=242)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=242)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=242)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=36, lineno=242)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=36, lineno=242)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=245)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=245)
2023-02-02 09:41 DEBUG stack ['$const36.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=243)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=243)
2023-02-02 09:41 DEBUG stack ['$target_price18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=243)
2023-02-02 09:41 DEBUG stack ['$target_price18.0', '$sell_sizes20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=5, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3', '$sell_sizes26.4']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=BINARY_SUBTRACT(arg=None, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$28binary_multiply.5']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=243)
2023-02-02 09:41 DEBUG stack ['$30binary_subtract.6']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=JUMP_FORWARD(arg=4, lineno=243)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=246)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=246)
2023-02-02 09:41 DEBUG stack ['$profit40.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 36: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 36: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$sell_sizes20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$sell_sizes20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$last_entryprice24.3'}), (26, {'res': '$sell_sizes26.4'}), (28, {'lhs': '$last_entryprice24.3', 'rhs': '$sell_sizes26.4', 'res': '$28binary_multiply.5'}), (30, {'lhs': '$22binary_multiply.2', 'rhs': '$28binary_multiply.5', 'res': '$30binary_subtract.6'}), (32, {'value': '$30binary_subtract.6'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$profit40.0'}), (42, {'retval': '$profit40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    profit = arg(0, name=profit)             ['profit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    target_price = arg(3, name=target_price) ['target_price']
    sell_sizes = arg(4, name=sell_sizes)     ['sell_sizes']
    last_entryprice = arg(5, name=last_entryprice) ['last_entryprice']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 36                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 36                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * sell_sizes ['$22binary_multiply.2', 'sell_sizes', 'target_price']
    $28binary_multiply.5 = last_entryprice * sell_sizes ['$28binary_multiply.5', 'last_entryprice', 'sell_sizes']
    profit = $22binary_multiply.2 - $28binary_multiply.5 ['$22binary_multiply.2', '$28binary_multiply.5', 'profit']
    jump 40                                  []
label 36:
    profit = const(int, 0)                   ['profit']
    jump 40                                  []
label 40:
    $42return_value.1 = cast(value=profit)   ['$42return_value.1', 'profit']
    return $42return_value.1                 ['$42return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7739A0>
2023-02-02 09:41 DEBUG on stmt: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 36
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7739A0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 36
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7739A0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-02-02 09:41 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-02-02 09:41 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7739A0>
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C7739A0>
2023-02-02 09:41 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG on stmt: return $42return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C8F7FD0>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51C77E6D0>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51C77E580>],
             '$28binary_multiply.5': [<numba.core.ir.Assign object at 0x000001A51C8E5BB0>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x000001A51C8D0100>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C9890D0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51C989940>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51C8F7A30>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51C783910>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51C77E1C0>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51C9896D0>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x000001A51C76CA90>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51C777FD0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51C777DF0>],
             'profit': [<numba.core.ir.Assign object at 0x000001A51C899BB0>,
                        <numba.core.ir.Assign object at 0x000001A51C8E5100>,
                        <numba.core.ir.Assign object at 0x000001A51C8D0070>],
             'sell_sizes': [<numba.core.ir.Assign object at 0x000001A51C76CEB0>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51C777D00>]})
2023-02-02 09:41 DEBUG SSA violators {'profit'}
2023-02-02 09:41 DEBUG Fix SSA violator on var profit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG first assign: profit
2023-02-02 09:41 DEBUG replaced with: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-02-02 09:41 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-02-02 09:41 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG replaced with: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: profit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG on stmt: return $42return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C899A60>],
             18: [<numba.core.ir.Assign object at 0x000001A51C8998B0>],
             36: [<numba.core.ir.Assign object at 0x000001A51C899820>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-02-02 09:41 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-02-02 09:41 DEBUG on stmt: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: profit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8998E0>
2023-02-02 09:41 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG find_def var='profit' stmt=$42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG find_def_from_top label 40
2023-02-02 09:41 DEBUG insert phi node profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 40
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG incoming_def profit.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $42return_value.1 = cast(value=profit.3)
2023-02-02 09:41 DEBUG on stmt: return $42return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=295)
           2	LOAD_GLOBAL(arg=0, lineno=295)
           4	LOAD_ATTR(arg=1, lineno=295)
           6	LOAD_FAST(arg=0, lineno=295)
           8	LOAD_ATTR(arg=2, lineno=295)
          10	LOAD_CONST(arg=1, lineno=295)
          12	BINARY_SUBSCR(arg=None, lineno=295)
          14	LOAD_CONST(arg=2, lineno=295)
          16	CALL_FUNCTION_KW(arg=1, lineno=295)
          18	STORE_FAST(arg=1, lineno=295)
          20	LOAD_GLOBAL(arg=3, lineno=296)
          22	LOAD_GLOBAL(arg=4, lineno=296)
          24	LOAD_FAST(arg=0, lineno=296)
          26	CALL_FUNCTION(arg=1, lineno=296)
          28	CALL_FUNCTION(arg=1, lineno=296)
          30	GET_ITER(arg=None, lineno=296)
>         32	FOR_ITER(arg=104, lineno=296)
          34	STORE_FAST(arg=2, lineno=296)
          36	LOAD_FAST(arg=2, lineno=297)
          38	LOAD_CONST(arg=1, lineno=297)
          40	COMPARE_OP(arg=4, lineno=297)
          42	POP_JUMP_IF_FALSE(arg=124, lineno=297)
          44	LOAD_FAST(arg=0, lineno=300)
          46	LOAD_FAST(arg=2, lineno=300)
          48	BINARY_SUBSCR(arg=None, lineno=300)
          50	LOAD_FAST(arg=0, lineno=300)
          52	LOAD_FAST(arg=2, lineno=300)
          54	LOAD_CONST(arg=3, lineno=300)
          56	BINARY_SUBTRACT(arg=None, lineno=300)
          58	BINARY_SUBSCR(arg=None, lineno=300)
          60	COMPARE_OP(arg=2, lineno=300)
          62	POP_JUMP_IF_FALSE(arg=72, lineno=300)
          64	LOAD_CONST(arg=1, lineno=301)
          66	LOAD_FAST(arg=1, lineno=301)
          68	LOAD_FAST(arg=2, lineno=301)
          70	STORE_SUBSCR(arg=None, lineno=301)
>         72	LOAD_FAST(arg=0, lineno=304)
          74	LOAD_FAST(arg=2, lineno=304)
          76	BINARY_SUBSCR(arg=None, lineno=304)
          78	LOAD_FAST(arg=0, lineno=304)
          80	LOAD_FAST(arg=2, lineno=304)
          82	LOAD_CONST(arg=3, lineno=304)
          84	BINARY_SUBTRACT(arg=None, lineno=304)
          86	BINARY_SUBSCR(arg=None, lineno=304)
          88	COMPARE_OP(arg=3, lineno=304)
          90	POP_JUMP_IF_FALSE(arg=136, lineno=304)
          92	LOAD_FAST(arg=0, lineno=305)
          94	LOAD_FAST(arg=2, lineno=305)
          96	BINARY_SUBSCR(arg=None, lineno=305)
          98	LOAD_CONST(arg=3, lineno=305)
         100	COMPARE_OP(arg=2, lineno=305)
         102	POP_JUMP_IF_FALSE(arg=114, lineno=305)
         104	LOAD_CONST(arg=3, lineno=306)
         106	LOAD_FAST(arg=1, lineno=306)
         108	LOAD_FAST(arg=2, lineno=306)
         110	STORE_SUBSCR(arg=None, lineno=306)
         112	JUMP_ABSOLUTE(arg=136, lineno=306)
>        114	LOAD_CONST(arg=4, lineno=308)
         116	LOAD_FAST(arg=1, lineno=308)
         118	LOAD_FAST(arg=2, lineno=308)
         120	STORE_SUBSCR(arg=None, lineno=308)
         122	JUMP_ABSOLUTE(arg=32, lineno=308)
>        124	LOAD_FAST(arg=0, lineno=310)
         126	LOAD_FAST(arg=2, lineno=310)
         128	BINARY_SUBSCR(arg=None, lineno=310)
         130	LOAD_FAST(arg=1, lineno=310)
         132	LOAD_FAST(arg=2, lineno=310)
         134	STORE_SUBSCR(arg=None, lineno=310)
>        136	JUMP_ABSOLUTE(arg=32, lineno=310)
>        138	LOAD_FAST(arg=1, lineno=311)
         140	RETURN_VALUE(arg=None, lineno=311)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=295)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=295)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=295)
2023-02-02 09:41 DEBUG stack ['$2load_global.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=295)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=295)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$marketpostion6.2']
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=295)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-02-02 09:41 DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=295)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=295)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=CALL_FUNCTION_KW(arg=1, lineno=295)
2023-02-02 09:41 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5', '$const14.6']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=STORE_FAST(arg=1, lineno=295)
2023-02-02 09:41 DEBUG stack ['$16call_function_kw.7']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_GLOBAL(arg=3, lineno=296)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_GLOBAL(arg=4, lineno=296)
2023-02-02 09:41 DEBUG stack ['$20load_global.8']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=296)
2023-02-02 09:41 DEBUG stack ['$20load_global.8', '$22load_global.9']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=296)
2023-02-02 09:41 DEBUG stack ['$20load_global.8', '$22load_global.9', '$marketpostion24.10']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=296)
2023-02-02 09:41 DEBUG stack ['$20load_global.8', '$26call_function.11']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=296)
2023-02-02 09:41 DEBUG stack ['$28call_function.12']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.13',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi32.0']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=FOR_ITER(arg=104, lineno=296)
2023-02-02 09:41 DEBUG stack ['$phi32.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=138, inst=LOAD_FAST(arg=1, lineno=311)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=140, inst=RETURN_VALUE(arg=None, lineno=311)
2023-02-02 09:41 DEBUG stack ['$order_array138.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2)])
2023-02-02 09:41 DEBUG stack: ['$phi34.0', '$phi34.1']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=STORE_FAST(arg=2, lineno=296)
2023-02-02 09:41 DEBUG stack ['$phi34.0', '$phi34.1']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=297)
2023-02-02 09:41 DEBUG stack ['$phi34.0']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=297)
2023-02-02 09:41 DEBUG stack ['$phi34.0', '$i36.2']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=COMPARE_OP(arg=4, lineno=297)
2023-02-02 09:41 DEBUG stack ['$phi34.0', '$i36.2', '$const38.3']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=124, lineno=297)
2023-02-02 09:41 DEBUG stack ['$phi34.0', '$40compare_op.4']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=('$phi34.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi34.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi44.0']
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$marketpostion44.1']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$marketpostion44.1', '$i46.2']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$48binary_subscr.3']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4', '$i52.5']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=BINARY_SUBTRACT(arg=None, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4', '$i52.5', '$const54.6']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4', '$56binary_subtract.7']
2023-02-02 09:41 DEBUG dispatch pc=60, inst=COMPARE_OP(arg=2, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$58binary_subscr.8']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=72, lineno=300)
2023-02-02 09:41 DEBUG stack ['$phi44.0', '$60compare_op.9']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=64, stack=('$phi44.0',), blockstack=(), npush=0), Edge(pc=72, stack=('$phi44.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=64 nstack_initial=1), State(pc_initial=72 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi124.0']
2023-02-02 09:41 DEBUG dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=310)
2023-02-02 09:41 DEBUG stack ['$phi124.0']
2023-02-02 09:41 DEBUG dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=310)
2023-02-02 09:41 DEBUG stack ['$phi124.0', '$marketpostion124.1']
2023-02-02 09:41 DEBUG dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=310)
2023-02-02 09:41 DEBUG stack ['$phi124.0', '$marketpostion124.1', '$i126.2']
2023-02-02 09:41 DEBUG dispatch pc=130, inst=LOAD_FAST(arg=1, lineno=310)
2023-02-02 09:41 DEBUG stack ['$phi124.0', '$128binary_subscr.3']
2023-02-02 09:41 DEBUG dispatch pc=132, inst=LOAD_FAST(arg=2, lineno=310)
2023-02-02 09:41 DEBUG stack ['$phi124.0', '$128binary_subscr.3', '$order_array130.4']
2023-02-02 09:41 DEBUG dispatch pc=134, inst=STORE_SUBSCR(arg=None, lineno=310)
2023-02-02 09:41 DEBUG stack ['$phi124.0', '$128binary_subscr.3', '$order_array130.4', '$i132.5']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=136, stack=('$phi124.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=72 nstack_initial=1), State(pc_initial=136 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi64.0']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=301)
2023-02-02 09:41 DEBUG stack ['$phi64.0']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=301)
2023-02-02 09:41 DEBUG stack ['$phi64.0', '$const64.1']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=LOAD_FAST(arg=2, lineno=301)
2023-02-02 09:41 DEBUG stack ['$phi64.0', '$const64.1', '$order_array66.2']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=301)
2023-02-02 09:41 DEBUG stack ['$phi64.0', '$const64.1', '$order_array66.2', '$i68.3']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=72, stack=('$phi64.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=136 nstack_initial=1), State(pc_initial=72 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi72.0']
2023-02-02 09:41 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0']
2023-02-02 09:41 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$marketpostion72.1']
2023-02-02 09:41 DEBUG dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$marketpostion72.1', '$i74.2']
2023-02-02 09:41 DEBUG dispatch pc=78, inst=LOAD_FAST(arg=0, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$76binary_subscr.3']
2023-02-02 09:41 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=2, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4']
2023-02-02 09:41 DEBUG dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4', '$i80.5']
2023-02-02 09:41 DEBUG dispatch pc=84, inst=BINARY_SUBTRACT(arg=None, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4', '$i80.5', '$const82.6']
2023-02-02 09:41 DEBUG dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4', '$84binary_subtract.7']
2023-02-02 09:41 DEBUG dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$86binary_subscr.8']
2023-02-02 09:41 DEBUG dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=136, lineno=304)
2023-02-02 09:41 DEBUG stack ['$phi72.0', '$88compare_op.9']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=92, stack=('$phi72.0',), blockstack=(), npush=0), Edge(pc=136, stack=('$phi72.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=72 nstack_initial=1), State(pc_initial=92 nstack_initial=1), State(pc_initial=136 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi136.0']
2023-02-02 09:41 DEBUG dispatch pc=136, inst=JUMP_ABSOLUTE(arg=32, lineno=310)
2023-02-02 09:41 DEBUG stack ['$phi136.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=32, stack=('$phi136.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=92 nstack_initial=1), State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=92 nstack_initial=1), State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi92.0']
2023-02-02 09:41 DEBUG dispatch pc=92, inst=LOAD_FAST(arg=0, lineno=305)
2023-02-02 09:41 DEBUG stack ['$phi92.0']
2023-02-02 09:41 DEBUG dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=305)
2023-02-02 09:41 DEBUG stack ['$phi92.0', '$marketpostion92.1']
2023-02-02 09:41 DEBUG dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=305)
2023-02-02 09:41 DEBUG stack ['$phi92.0', '$marketpostion92.1', '$i94.2']
2023-02-02 09:41 DEBUG dispatch pc=98, inst=LOAD_CONST(arg=3, lineno=305)
2023-02-02 09:41 DEBUG stack ['$phi92.0', '$96binary_subscr.3']
2023-02-02 09:41 DEBUG dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=305)
2023-02-02 09:41 DEBUG stack ['$phi92.0', '$96binary_subscr.3', '$const98.4']
2023-02-02 09:41 DEBUG dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=114, lineno=305)
2023-02-02 09:41 DEBUG stack ['$phi92.0', '$100compare_op.5']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=104, stack=('$phi92.0',), blockstack=(), npush=0), Edge(pc=114, stack=('$phi92.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1), State(pc_initial=104 nstack_initial=1), State(pc_initial=114 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=104 nstack_initial=1), State(pc_initial=114 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=104 nstack_initial=1), State(pc_initial=114 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi104.0']
2023-02-02 09:41 DEBUG dispatch pc=104, inst=LOAD_CONST(arg=3, lineno=306)
2023-02-02 09:41 DEBUG stack ['$phi104.0']
2023-02-02 09:41 DEBUG dispatch pc=106, inst=LOAD_FAST(arg=1, lineno=306)
2023-02-02 09:41 DEBUG stack ['$phi104.0', '$const104.1']
2023-02-02 09:41 DEBUG dispatch pc=108, inst=LOAD_FAST(arg=2, lineno=306)
2023-02-02 09:41 DEBUG stack ['$phi104.0', '$const104.1', '$order_array106.2']
2023-02-02 09:41 DEBUG dispatch pc=110, inst=STORE_SUBSCR(arg=None, lineno=306)
2023-02-02 09:41 DEBUG stack ['$phi104.0', '$const104.1', '$order_array106.2', '$i108.3']
2023-02-02 09:41 DEBUG dispatch pc=112, inst=JUMP_ABSOLUTE(arg=136, lineno=306)
2023-02-02 09:41 DEBUG stack ['$phi104.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=136, stack=('$phi104.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=114 nstack_initial=1), State(pc_initial=136 nstack_initial=1)])
2023-02-02 09:41 DEBUG stack: ['$phi114.0']
2023-02-02 09:41 DEBUG dispatch pc=114, inst=LOAD_CONST(arg=4, lineno=308)
2023-02-02 09:41 DEBUG stack ['$phi114.0']
2023-02-02 09:41 DEBUG dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=308)
2023-02-02 09:41 DEBUG stack ['$phi114.0', '$const114.1']
2023-02-02 09:41 DEBUG dispatch pc=118, inst=LOAD_FAST(arg=2, lineno=308)
2023-02-02 09:41 DEBUG stack ['$phi114.0', '$const114.1', '$order_array116.2']
2023-02-02 09:41 DEBUG dispatch pc=120, inst=STORE_SUBSCR(arg=None, lineno=308)
2023-02-02 09:41 DEBUG stack ['$phi114.0', '$const114.1', '$order_array116.2', '$i118.3']
2023-02-02 09:41 DEBUG dispatch pc=122, inst=JUMP_ABSOLUTE(arg=32, lineno=308)
2023-02-02 09:41 DEBUG stack ['$phi114.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=32, stack=('$phi114.0',), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=44 nstack_initial=1): set(),
             State(pc_initial=64 nstack_initial=1): set(),
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=92 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=1): set(),
             State(pc_initial=114 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=136 nstack_initial=1): set(),
             State(pc_initial=138 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {'$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi92.0', State(pc_initial=92 nstack_initial=1))},
             '$phi114.0': {('$phi92.0', State(pc_initial=92 nstack_initial=1))},
             '$phi124.0': {('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi136.0': {('$phi104.0',
                            State(pc_initial=104 nstack_initial=1)),
                           ('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi114.0', State(pc_initial=114 nstack_initial=1)),
                          ('$phi136.0',
                           State(pc_initial=136 nstack_initial=1))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi64.0': {('$phi44.0', State(pc_initial=44 nstack_initial=1))},
             '$phi72.0': {('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi92.0': {('$phi72.0', State(pc_initial=72 nstack_initial=1))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi114.0': {('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi124.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi136.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1)),
                           ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                           ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi114.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi124.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                           ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi136.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi114.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi124.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi136.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi114.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi124.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi136.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-02-02 09:41 DEBUG keep phismap: {'$phi32.0': {('$30get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi32.0': '$30get_iter.13'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$marketpostion6.2'}), (8, {'item': '$marketpostion6.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$8load_attr.3', 'res': '$12binary_subscr.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$4load_attr.1', 'args': ['$12binary_subscr.5'], 'names': '$const14.6', 'res': '$16call_function_kw.7'}), (18, {'value': '$16call_function_kw.7'}), (20, {'res': '$20load_global.8'}), (22, {'res': '$22load_global.9'}), (24, {'res': '$marketpostion24.10'}), (26, {'func': '$22load_global.9', 'args': ['$marketpostion24.10'], 'res': '$26call_function.11'}), (28, {'func': '$20load_global.8', 'args': ['$26call_function.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12', 'res': '$30get_iter.13'})), outgoing_phis={'$phi32.0': '$30get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.13',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 34: ('$phi32.0', '$32for_iter.2')})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$i36.2'}), (38, {'res': '$const38.3'}), (40, {'lhs': '$i36.2', 'rhs': '$const38.3', 'res': '$40compare_op.4'}), (42, {'pred': '$40compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ('$phi34.0',), 124: ('$phi34.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=1):
AdaptBlockInfo(insts=((44, {'res': '$marketpostion44.1'}), (46, {'res': '$i46.2'}), (48, {'index': '$i46.2', 'target': '$marketpostion44.1', 'res': '$48binary_subscr.3'}), (50, {'res': '$marketpostion50.4'}), (52, {'res': '$i52.5'}), (54, {'res': '$const54.6'}), (56, {'lhs': '$i52.5', 'rhs': '$const54.6', 'res': '$56binary_subtract.7'}), (58, {'index': '$56binary_subtract.7', 'target': '$marketpostion50.4', 'res': '$58binary_subscr.8'}), (60, {'lhs': '$48binary_subscr.3', 'rhs': '$58binary_subscr.8', 'res': '$60compare_op.9'}), (62, {'pred': '$60compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi44.0',), 72: ('$phi44.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'res': '$const64.1'}), (66, {'res': '$order_array66.2'}), (68, {'res': '$i68.3'}), (70, {'target': '$order_array66.2', 'index': '$i68.3', 'value': '$const64.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi64.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$marketpostion72.1'}), (74, {'res': '$i74.2'}), (76, {'index': '$i74.2', 'target': '$marketpostion72.1', 'res': '$76binary_subscr.3'}), (78, {'res': '$marketpostion78.4'}), (80, {'res': '$i80.5'}), (82, {'res': '$const82.6'}), (84, {'lhs': '$i80.5', 'rhs': '$const82.6', 'res': '$84binary_subtract.7'}), (86, {'index': '$84binary_subtract.7', 'target': '$marketpostion78.4', 'res': '$86binary_subscr.8'}), (88, {'lhs': '$76binary_subscr.3', 'rhs': '$86binary_subscr.8', 'res': '$88compare_op.9'}), (90, {'pred': '$88compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: ('$phi72.0',), 136: ('$phi72.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=92 nstack_initial=1):
AdaptBlockInfo(insts=((92, {'res': '$marketpostion92.1'}), (94, {'res': '$i94.2'}), (96, {'index': '$i94.2', 'target': '$marketpostion92.1', 'res': '$96binary_subscr.3'}), (98, {'res': '$const98.4'}), (100, {'lhs': '$96binary_subscr.3', 'rhs': '$const98.4', 'res': '$100compare_op.5'}), (102, {'pred': '$100compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: ('$phi92.0',), 114: ('$phi92.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=104 nstack_initial=1):
AdaptBlockInfo(insts=((104, {'res': '$const104.1'}), (106, {'res': '$order_array106.2'}), (108, {'res': '$i108.3'}), (110, {'target': '$order_array106.2', 'index': '$i108.3', 'value': '$const104.1'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ('$phi104.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'res': '$const114.1'}), (116, {'res': '$order_array116.2'}), (118, {'res': '$i118.3'}), (120, {'target': '$order_array116.2', 'index': '$i118.3', 'value': '$const114.1'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi114.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$marketpostion124.1'}), (126, {'res': '$i126.2'}), (128, {'index': '$i126.2', 'target': '$marketpostion124.1', 'res': '$128binary_subscr.3'}), (130, {'res': '$order_array130.4'}), (132, {'res': '$i132.5'}), (134, {'target': '$order_array130.4', 'index': '$i132.5', 'value': '$128binary_subscr.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ('$phi124.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=136 nstack_initial=1):
AdaptBlockInfo(insts=((136, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi136.0',)})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$order_array138.0'}), (140, {'retval': '$order_array138.0', 'castval': '$140return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    marketpostion = arg(0, name=marketpostion) ['marketpostion']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=marketpostion, attr=shape) ['$8load_attr.3', 'marketpostion']
    $const10.4 = const(int, 0)               ['$const10.4']
    $12binary_subscr.5 = getitem(value=$8load_attr.3, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$8load_attr.3', '$const10.4']
    order_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:295))], vararg=None, varkwarg=None, target=None) ['$12binary_subscr.5', '$4load_attr.1', 'order_array']
    $20load_global.8 = global(range: <class 'range'>) ['$20load_global.8']
    $22load_global.9 = global(len: <built-in function len>) ['$22load_global.9']
    $26call_function.11 = call $22load_global.9(marketpostion, func=$22load_global.9, args=[Var(marketpostion, nb.py:295)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_global.9', '$26call_function.11', 'marketpostion']
    $28call_function.12 = call $20load_global.8($26call_function.11, func=$20load_global.8, args=[Var($26call_function.11, nb.py:296)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.8', '$26call_function.11', '$28call_function.12']
    $30get_iter.13 = getiter(value=$28call_function.12) ['$28call_function.12', '$30get_iter.13']
    $phi32.0 = $30get_iter.13                ['$30get_iter.13', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 138            ['$32for_iter.3']
label 34:
    i = $phi34.1                             ['$phi34.1', 'i']
    $const38.3 = const(int, 0)               ['$const38.3']
    $40compare_op.4 = i > $const38.3         ['$40compare_op.4', '$const38.3', 'i']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.4, func=bool42, args=(Var($40compare_op.4, nb.py:297),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.4', '$42pred', 'bool42']
    branch $42pred, 44, 124                  ['$42pred']
label 44:
    $48binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$48binary_subscr.3', 'i', 'marketpostion']
    $const54.6 = const(int, 1)               ['$const54.6']
    $56binary_subtract.7 = i - $const54.6    ['$56binary_subtract.7', '$const54.6', 'i']
    $58binary_subscr.8 = getitem(value=marketpostion, index=$56binary_subtract.7, fn=<built-in function getitem>) ['$56binary_subtract.7', '$58binary_subscr.8', 'marketpostion']
    $60compare_op.9 = $48binary_subscr.3 == $58binary_subscr.8 ['$48binary_subscr.3', '$58binary_subscr.8', '$60compare_op.9']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60compare_op.9, func=bool62, args=(Var($60compare_op.9, nb.py:300),), kws=(), vararg=None, varkwarg=None, target=None) ['$60compare_op.9', '$62pred', 'bool62']
    branch $62pred, 64, 72                   ['$62pred']
label 64:
    $const64.1 = const(int, 0)               ['$const64.1']
    order_array[i] = $const64.1              ['$const64.1', 'i', 'order_array']
    jump 72                                  []
label 72:
    $76binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$76binary_subscr.3', 'i', 'marketpostion']
    $const82.6 = const(int, 1)               ['$const82.6']
    $84binary_subtract.7 = i - $const82.6    ['$84binary_subtract.7', '$const82.6', 'i']
    $86binary_subscr.8 = getitem(value=marketpostion, index=$84binary_subtract.7, fn=<built-in function getitem>) ['$84binary_subtract.7', '$86binary_subscr.8', 'marketpostion']
    $88compare_op.9 = $76binary_subscr.3 != $86binary_subscr.8 ['$76binary_subscr.3', '$86binary_subscr.8', '$88compare_op.9']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.9, func=bool90, args=(Var($88compare_op.9, nb.py:304),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.9', '$90pred', 'bool90']
    branch $90pred, 92, 136                  ['$90pred']
label 92:
    $96binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$96binary_subscr.3', 'i', 'marketpostion']
    $const98.4 = const(int, 1)               ['$const98.4']
    $100compare_op.5 = $96binary_subscr.3 == $const98.4 ['$100compare_op.5', '$96binary_subscr.3', '$const98.4']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.5, func=bool102, args=(Var($100compare_op.5, nb.py:305),), kws=(), vararg=None, varkwarg=None, target=None) ['$100compare_op.5', '$102pred', 'bool102']
    branch $102pred, 104, 114                ['$102pred']
label 104:
    $const104.1 = const(int, 1)              ['$const104.1']
    order_array[i] = $const104.1             ['$const104.1', 'i', 'order_array']
    jump 136                                 []
label 114:
    $const114.1 = const(int, -1)             ['$const114.1']
    order_array[i] = $const114.1             ['$const114.1', 'i', 'order_array']
    jump 32                                  []
label 124:
    $128binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$128binary_subscr.3', 'i', 'marketpostion']
    order_array[i] = $128binary_subscr.3     ['$128binary_subscr.3', 'i', 'order_array']
    jump 136                                 []
label 136:
    jump 32                                  []
label 138:
    $140return_value.1 = cast(value=order_array) ['$140return_value.1', 'order_array']
    return $140return_value.1                ['$140return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(0, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-02-02 09:41 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-02-02 09:41 DEBUG on stmt: $8load_attr.3 = getattr(value=marketpostion, attr=shape)
2023-02-02 09:41 DEBUG on stmt: $const10.4 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: order_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:295))], vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $20load_global.8 = global(range: <class 'range'>)
2023-02-02 09:41 DEBUG on stmt: $22load_global.9 = global(len: <built-in function len>)
2023-02-02 09:41 DEBUG on stmt: $26call_function.11 = call $22load_global.9(marketpostion, func=$22load_global.9, args=[Var(marketpostion, nb.py:295)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $28call_function.12 = call $20load_global.8($26call_function.11, func=$20load_global.8, args=[Var($26call_function.11, nb.py:296)], kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: $30get_iter.13 = getiter(value=$28call_function.12)
2023-02-02 09:41 DEBUG on stmt: $phi32.0 = $30get_iter.13
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $32for_iter.1 = iternext(value=$phi32.0)
2023-02-02 09:41 DEBUG on stmt: $32for_iter.2 = pair_first(value=$32for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $32for_iter.3 = pair_second(value=$32for_iter.1)
2023-02-02 09:41 DEBUG on stmt: $phi34.1 = $32for_iter.2
2023-02-02 09:41 DEBUG on stmt: branch $32for_iter.3, 34, 138
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 34
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: i = $phi34.1
2023-02-02 09:41 DEBUG on stmt: $const38.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $40compare_op.4 = i > $const38.3
2023-02-02 09:41 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $42pred = call bool42($40compare_op.4, func=bool42, args=(Var($40compare_op.4, nb.py:297),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $42pred, 44, 124
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $48binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const54.6 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $56binary_subtract.7 = i - $const54.6
2023-02-02 09:41 DEBUG on stmt: $58binary_subscr.8 = getitem(value=marketpostion, index=$56binary_subtract.7, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $60compare_op.9 = $48binary_subscr.3 == $58binary_subscr.8
2023-02-02 09:41 DEBUG on stmt: bool62 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $62pred = call bool62($60compare_op.9, func=bool62, args=(Var($60compare_op.9, nb.py:300),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $62pred, 64, 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 64
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $const64.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: order_array[i] = $const64.1
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 72
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $76binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const82.6 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $84binary_subtract.7 = i - $const82.6
2023-02-02 09:41 DEBUG on stmt: $86binary_subscr.8 = getitem(value=marketpostion, index=$84binary_subtract.7, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $88compare_op.9 = $76binary_subscr.3 != $86binary_subscr.8
2023-02-02 09:41 DEBUG on stmt: bool90 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $90pred = call bool90($88compare_op.9, func=bool90, args=(Var($88compare_op.9, nb.py:304),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $90pred, 92, 136
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 92
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $96binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: $const98.4 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $100compare_op.5 = $96binary_subscr.3 == $const98.4
2023-02-02 09:41 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $102pred = call bool102($100compare_op.5, func=bool102, args=(Var($100compare_op.5, nb.py:305),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $102pred, 104, 114
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 104
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $const104.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: order_array[i] = $const104.1
2023-02-02 09:41 DEBUG on stmt: jump 136
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 114
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $const114.1 = const(int, -1)
2023-02-02 09:41 DEBUG on stmt: order_array[i] = $const114.1
2023-02-02 09:41 DEBUG on stmt: jump 139
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 124
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $128binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-02-02 09:41 DEBUG on stmt: order_array[i] = $128binary_subscr.3
2023-02-02 09:41 DEBUG on stmt: jump 136
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 136
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: jump 139
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 138
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: $140return_value.1 = cast(value=order_array)
2023-02-02 09:41 DEBUG on stmt: return $140return_value.1
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 139
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C710A60>
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$100compare_op.5': [<numba.core.ir.Assign object at 0x000001A51C877E80>],
             '$102pred': [<numba.core.ir.Assign object at 0x000001A51C877A30>],
             '$128binary_subscr.3': [<numba.core.ir.Assign object at 0x000001A51C8676D0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x000001A51C82C880>],
             '$140return_value.1': [<numba.core.ir.Assign object at 0x000001A51C881670>],
             '$20load_global.8': [<numba.core.ir.Assign object at 0x000001A51C899100>],
             '$22load_global.9': [<numba.core.ir.Assign object at 0x000001A51CB83E20>],
             '$26call_function.11': [<numba.core.ir.Assign object at 0x000001A51CB8C340>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x000001A51CB8C280>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A51C9CF0A0>],
             '$30get_iter.13': [<numba.core.ir.Assign object at 0x000001A51CB8C1C0>],
             '$32for_iter.1': [<numba.core.ir.Assign object at 0x000001A51CB8C910>],
             '$32for_iter.2': [<numba.core.ir.Assign object at 0x000001A51CB8C070>],
             '$32for_iter.3': [<numba.core.ir.Assign object at 0x000001A51CB51AC0>],
             '$40compare_op.4': [<numba.core.ir.Assign object at 0x000001A51CB51310>],
             '$42pred': [<numba.core.ir.Assign object at 0x000001A51CB51D60>],
             '$48binary_subscr.3': [<numba.core.ir.Assign object at 0x000001A51CB51070>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001A51C8F4700>],
             '$56binary_subtract.7': [<numba.core.ir.Assign object at 0x000001A51CB23160>],
             '$58binary_subscr.8': [<numba.core.ir.Assign object at 0x000001A51CB23580>],
             '$60compare_op.9': [<numba.core.ir.Assign object at 0x000001A51CB23640>],
             '$62pred': [<numba.core.ir.Assign object at 0x000001A51CB23BE0>],
             '$76binary_subscr.3': [<numba.core.ir.Assign object at 0x000001A51CB72310>],
             '$84binary_subtract.7': [<numba.core.ir.Assign object at 0x000001A51C85D850>],
             '$86binary_subscr.8': [<numba.core.ir.Assign object at 0x000001A51C85DE80>],
             '$88compare_op.9': [<numba.core.ir.Assign object at 0x000001A51C85D9D0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001A51CA27A00>],
             '$90pred': [<numba.core.ir.Assign object at 0x000001A51C877190>],
             '$96binary_subscr.3': [<numba.core.ir.Assign object at 0x000001A51C8773A0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x000001A51CA270A0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x000001A51C8772E0>],
             '$const114.1': [<numba.core.ir.Assign object at 0x000001A51C867D30>],
             '$const38.3': [<numba.core.ir.Assign object at 0x000001A51CB51790>],
             '$const54.6': [<numba.core.ir.Assign object at 0x000001A51CB230D0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x000001A51CB23550>],
             '$const82.6': [<numba.core.ir.Assign object at 0x000001A51C85D460>],
             '$const98.4': [<numba.core.ir.Assign object at 0x000001A51C877C40>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x000001A51C8D0C40>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x000001A51CB8CFA0>],
             'bool102': [<numba.core.ir.Assign object at 0x000001A51C877B50>],
             'bool42': [<numba.core.ir.Assign object at 0x000001A51CB515E0>],
             'bool62': [<numba.core.ir.Assign object at 0x000001A51CB23CD0>],
             'bool90': [<numba.core.ir.Assign object at 0x000001A51C8778E0>],
             'i': [<numba.core.ir.Assign object at 0x000001A51CB51910>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51C9CF3A0>],
             'order_array': [<numba.core.ir.Assign object at 0x000001A51C899B80>]})
2023-02-02 09:41 DEBUG SSA violators set()
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=116)
           2	LOAD_FAST(arg=2, lineno=116)
           4	LOAD_CONST(arg=1, lineno=116)
           6	COMPARE_OP(arg=2, lineno=116)
           8	POP_JUMP_IF_FALSE(arg=42, lineno=116)
          10	LOAD_FAST(arg=3, lineno=116)
          12	LOAD_CONST(arg=2, lineno=116)
          14	COMPARE_OP(arg=2, lineno=116)
          16	POP_JUMP_IF_FALSE(arg=42, lineno=116)
          18	LOAD_FAST(arg=4, lineno=117)
          20	POP_JUMP_IF_FALSE(arg=36, lineno=117)
          22	LOAD_FAST(arg=1, lineno=118)
          24	LOAD_CONST(arg=1, lineno=118)
          26	LOAD_FAST(arg=4, lineno=118)
          28	BINARY_ADD(arg=None, lineno=118)
          30	BINARY_MULTIPLY(arg=None, lineno=118)
          32	STORE_FAST(arg=0, lineno=118)
          34	JUMP_ABSOLUTE(arg=54, lineno=118)
>         36	LOAD_FAST(arg=1, lineno=120)
          38	STORE_FAST(arg=0, lineno=120)
          40	JUMP_FORWARD(arg=12, lineno=120)
>         42	LOAD_FAST(arg=2, lineno=121)
          44	LOAD_CONST(arg=2, lineno=121)
          46	COMPARE_OP(arg=2, lineno=121)
          48	POP_JUMP_IF_FALSE(arg=54, lineno=121)
          50	LOAD_CONST(arg=2, lineno=122)
          52	STORE_FAST(arg=0, lineno=122)
>         54	LOAD_FAST(arg=0, lineno=123)
          56	RETURN_VALUE(arg=None, lineno=123)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=116)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=116)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=42, lineno=116)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=116)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=116)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=42, lineno=116)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=121)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=121)
2023-02-02 09:41 DEBUG stack ['$marketpostion42.0']
2023-02-02 09:41 DEBUG dispatch pc=46, inst=COMPARE_OP(arg=2, lineno=121)
2023-02-02 09:41 DEBUG stack ['$marketpostion42.0', '$const44.1']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=54, lineno=121)
2023-02-02 09:41 DEBUG stack ['$46compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=4, lineno=117)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=36, lineno=117)
2023-02-02 09:41 DEBUG stack ['$slippage18.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=122)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=52, inst=STORE_FAST(arg=0, lineno=122)
2023-02-02 09:41 DEBUG stack ['$const50.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=123)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=123)
2023-02-02 09:41 DEBUG stack ['$entryprice54.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=118)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0', '$const24.1']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=BINARY_ADD(arg=None, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0', '$const24.1', '$slippage26.2']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=BINARY_MULTIPLY(arg=None, lineno=118)
2023-02-02 09:41 DEBUG stack ['$target_price22.0', '$28binary_add.3']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=118)
2023-02-02 09:41 DEBUG stack ['$30binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=JUMP_ABSOLUTE(arg=54, lineno=118)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=120)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=120)
2023-02-02 09:41 DEBUG stack ['$target_price36.0']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=JUMP_FORWARD(arg=12, lineno=120)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 42: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 42: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$slippage18.0'}), (20, {'pred': '$slippage18.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 36: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$target_price22.0'}), (24, {'res': '$const24.1'}), (26, {'res': '$slippage26.2'}), (28, {'lhs': '$const24.1', 'rhs': '$slippage26.2', 'res': '$28binary_add.3'}), (30, {'lhs': '$target_price22.0', 'rhs': '$28binary_add.3', 'res': '$30binary_multiply.4'}), (32, {'value': '$30binary_multiply.4'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$target_price36.0'}), (38, {'value': '$target_price36.0'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$marketpostion42.0'}), (44, {'res': '$const44.1'}), (46, {'lhs': '$marketpostion42.0', 'rhs': '$const44.1', 'res': '$46compare_op.2'}), (48, {'pred': '$46compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'value': '$const50.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$entryprice54.0'}), (56, {'retval': '$entryprice54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    entryprice = arg(0, name=entryprice)     ['entryprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 42                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 42                   ['$16pred']
label 18:
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None) ['$20pred', 'bool20', 'slippage']
    branch $20pred, 22, 36                   ['$20pred']
label 22:
    $const24.1 = const(int, 1)               ['$const24.1']
    $28binary_add.3 = $const24.1 + slippage  ['$28binary_add.3', '$const24.1', 'slippage']
    entryprice = target_price * $28binary_add.3 ['$28binary_add.3', 'entryprice', 'target_price']
    jump 54                                  []
label 36:
    entryprice = target_price                ['entryprice', 'target_price']
    jump 54                                  []
label 42:
    $const44.1 = const(int, 0)               ['$const44.1']
    $46compare_op.2 = marketpostion == $const44.1 ['$46compare_op.2', '$const44.1', 'marketpostion']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.2', '$48pred', 'bool48']
    branch $48pred, 50, 54                   ['$48pred']
label 50:
    entryprice = const(int, 0)               ['entryprice']
    jump 54                                  []
label 54:
    $56return_value.1 = cast(value=entryprice) ['$56return_value.1', 'entryprice']
    return $56return_value.1                 ['$56return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 42
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 42
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $20pred, 22, 36
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 22
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: $const24.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: $const44.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-02-02 09:41 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $48pred, 50, 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 54
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD37BE0>
2023-02-02 09:41 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG on stmt: return $56return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C9F59A0>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CA46E20>],
             '$20pred': [<numba.core.ir.Assign object at 0x000001A51CAB5E50>],
             '$28binary_add.3': [<numba.core.ir.Assign object at 0x000001A51CE09610>],
             '$46compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CDAED30>],
             '$48pred': [<numba.core.ir.Assign object at 0x000001A51CDAEFD0>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x000001A51CD37610>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C701D30>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51C701130>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CD33310>],
             '$const24.1': [<numba.core.ir.Assign object at 0x000001A51CB8C940>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51C701EB0>],
             '$const44.1': [<numba.core.ir.Assign object at 0x000001A51CDAEBB0>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51C9F5910>],
             'bool20': [<numba.core.ir.Assign object at 0x000001A51C82C790>],
             'bool48': [<numba.core.ir.Assign object at 0x000001A51CDAEEB0>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51C701BB0>],
             'direction': [<numba.core.ir.Assign object at 0x000001A51CDAE6A0>],
             'entryprice': [<numba.core.ir.Assign object at 0x000001A51CDAE100>,
                            <numba.core.ir.Assign object at 0x000001A51CB51B80>,
                            <numba.core.ir.Assign object at 0x000001A51C7F0D60>,
                            <numba.core.ir.Assign object at 0x000001A51CD37250>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CDAE460>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CDAE340>],
             'slippage': [<numba.core.ir.Assign object at 0x000001A51CDAE580>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51CDAE220>]})
2023-02-02 09:41 DEBUG SSA violators {'entryprice'}
2023-02-02 09:41 DEBUG Fix SSA violator on var entryprice
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG first assign: entryprice
2023-02-02 09:41 DEBUG replaced with: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $20pred, 22, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 22
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $const24.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG replaced with: entryprice.1 = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: entryprice = target_price
2023-02-02 09:41 DEBUG replaced with: entryprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $const44.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-02-02 09:41 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $48pred, 50, 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: entryprice = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: entryprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 54
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG on stmt: return $56return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CD37F40>],
             22: [<numba.core.ir.Assign object at 0x000001A51CD37EB0>],
             36: [<numba.core.ir.Assign object at 0x000001A51CD37D60>],
             50: [<numba.core.ir.Assign object at 0x000001A51CD37CA0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 42
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $20pred, 22, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 22
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $const24.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-02-02 09:41 DEBUG on stmt: entryprice.1 = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: entryprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 42
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $const44.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-02-02 09:41 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:121),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $48pred, 50, 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: entryprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 54
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 54
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CD37D00>
2023-02-02 09:41 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG find_def var='entryprice' stmt=$56return_value.1 = cast(value=entryprice)
2023-02-02 09:41 DEBUG find_def_from_top label 54
2023-02-02 09:41 DEBUG insert phi node entryprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 54
2023-02-02 09:41 DEBUG find_def_from_bottom label 42
2023-02-02 09:41 DEBUG find_def_from_top label 42
2023-02-02 09:41 DEBUG idom 0 from label 42
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def entryprice = arg(0, name=entryprice)
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG incoming_def entryprice.2 = target_price
2023-02-02 09:41 DEBUG find_def_from_bottom label 50
2023-02-02 09:41 DEBUG incoming_def entryprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 22
2023-02-02 09:41 DEBUG incoming_def entryprice.1 = target_price * $28binary_add.3
2023-02-02 09:41 DEBUG replaced with: $56return_value.1 = cast(value=entryprice.4)
2023-02-02 09:41 DEBUG on stmt: return $56return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=146)
           2	LOAD_FAST(arg=5, lineno=146)
           4	LOAD_CONST(arg=1, lineno=146)
           6	COMPARE_OP(arg=2, lineno=146)
           8	POP_JUMP_IF_FALSE(arg=62, lineno=146)
          10	LOAD_FAST(arg=2, lineno=147)
          12	LOAD_CONST(arg=2, lineno=147)
          14	COMPARE_OP(arg=2, lineno=147)
          16	POP_JUMP_IF_FALSE(arg=50, lineno=147)
          18	LOAD_FAST(arg=3, lineno=147)
          20	LOAD_CONST(arg=3, lineno=147)
          22	COMPARE_OP(arg=2, lineno=147)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=147)
          26	LOAD_FAST(arg=4, lineno=148)
          28	POP_JUMP_IF_FALSE(arg=44, lineno=148)
          30	LOAD_FAST(arg=1, lineno=149)
          32	LOAD_CONST(arg=3, lineno=149)
          34	LOAD_FAST(arg=4, lineno=149)
          36	BINARY_SUBTRACT(arg=None, lineno=149)
          38	BINARY_MULTIPLY(arg=None, lineno=149)
          40	STORE_FAST(arg=0, lineno=149)
          42	JUMP_ABSOLUTE(arg=62, lineno=149)
>         44	LOAD_FAST(arg=1, lineno=151)
          46	STORE_FAST(arg=0, lineno=151)
          48	JUMP_FORWARD(arg=12, lineno=151)
>         50	LOAD_FAST(arg=2, lineno=152)
          52	LOAD_CONST(arg=3, lineno=152)
          54	COMPARE_OP(arg=2, lineno=152)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=152)
          58	LOAD_CONST(arg=2, lineno=153)
          60	STORE_FAST(arg=0, lineno=153)
>         62	LOAD_FAST(arg=0, lineno=154)
          64	RETURN_VALUE(arg=None, lineno=154)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=146)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=5, lineno=146)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=146)
2023-02-02 09:41 DEBUG stack ['$direction2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=146)
2023-02-02 09:41 DEBUG stack ['$direction2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=62, lineno=146)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack ['$marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack ['$marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=50, lineno=147)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=154)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=154)
2023-02-02 09:41 DEBUG stack ['$exitsprice62.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=147)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=3, lineno=147)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=COMPARE_OP(arg=2, lineno=147)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion18.0', '$const20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=147)
2023-02-02 09:41 DEBUG stack ['$22compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=152)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=152)
2023-02-02 09:41 DEBUG stack ['$marketpostion50.0']
2023-02-02 09:41 DEBUG dispatch pc=54, inst=COMPARE_OP(arg=2, lineno=152)
2023-02-02 09:41 DEBUG stack ['$marketpostion50.0', '$const52.1']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=152)
2023-02-02 09:41 DEBUG stack ['$54compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=148)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=44, lineno=148)
2023-02-02 09:41 DEBUG stack ['$slippage26.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=153)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=60, inst=STORE_FAST(arg=0, lineno=153)
2023-02-02 09:41 DEBUG stack ['$const58.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=149)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0', '$const32.1']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0', '$const32.1', '$slippage34.2']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=BINARY_MULTIPLY(arg=None, lineno=149)
2023-02-02 09:41 DEBUG stack ['$target_price30.0', '$36binary_subtract.3']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=STORE_FAST(arg=0, lineno=149)
2023-02-02 09:41 DEBUG stack ['$38binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=JUMP_ABSOLUTE(arg=62, lineno=149)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=151)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=STORE_FAST(arg=0, lineno=151)
2023-02-02 09:41 DEBUG stack ['$target_price44.0']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=JUMP_FORWARD(arg=12, lineno=151)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$direction2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$direction2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 50: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$last_marketpostion18.0'}), (20, {'res': '$const20.1'}), (22, {'lhs': '$last_marketpostion18.0', 'rhs': '$const20.1', 'res': '$22compare_op.2'}), (24, {'pred': '$22compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 50: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$slippage26.0'}), (28, {'pred': '$slippage26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$target_price30.0'}), (32, {'res': '$const32.1'}), (34, {'res': '$slippage34.2'}), (36, {'lhs': '$const32.1', 'rhs': '$slippage34.2', 'res': '$36binary_subtract.3'}), (38, {'lhs': '$target_price30.0', 'rhs': '$36binary_subtract.3', 'res': '$38binary_multiply.4'}), (40, {'value': '$38binary_multiply.4'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$target_price44.0'}), (46, {'value': '$target_price44.0'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$marketpostion50.0'}), (52, {'res': '$const52.1'}), (54, {'lhs': '$marketpostion50.0', 'rhs': '$const52.1', 'res': '$54compare_op.2'}), (56, {'pred': '$54compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'value': '$const58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$exitsprice62.0'}), (64, {'retval': '$exitsprice62.0', 'castval': '$64return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    exitsprice = arg(0, name=exitsprice)     ['exitsprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(str, buyonly)          ['$const4.1']
    $6compare_op.2 = direction == $const4.1  ['$6compare_op.2', '$const4.1', 'direction']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 62                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 50                   ['$16pred']
label 18:
    $const20.1 = const(int, 1)               ['$const20.1']
    $22compare_op.2 = last_marketpostion == $const20.1 ['$22compare_op.2', '$const20.1', 'last_marketpostion']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.2', '$24pred', 'bool24']
    branch $24pred, 26, 50                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$28pred', 'bool28', 'slippage']
    branch $28pred, 30, 44                   ['$28pred']
label 30:
    $const32.1 = const(int, 1)               ['$const32.1']
    $36binary_subtract.3 = $const32.1 - slippage ['$36binary_subtract.3', '$const32.1', 'slippage']
    exitsprice = target_price * $36binary_subtract.3 ['$36binary_subtract.3', 'exitsprice', 'target_price']
    jump 62                                  []
label 44:
    exitsprice = target_price                ['exitsprice', 'target_price']
    jump 62                                  []
label 50:
    $const52.1 = const(int, 1)               ['$const52.1']
    $54compare_op.2 = marketpostion == $const52.1 ['$54compare_op.2', '$const52.1', 'marketpostion']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.2', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    exitsprice = const(int, 0)               ['exitsprice']
    jump 62                                  []
label 62:
    $64return_value.1 = cast(value=exitsprice) ['$64return_value.1', 'exitsprice']
    return $64return_value.1                 ['$64return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 50
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: $const20.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-02-02 09:41 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $24pred, 26, 50
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $28pred, 30, 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: $const32.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: $const52.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 62
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C701760>
2023-02-02 09:41 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG on stmt: return $64return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CDB7E50>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CDB7970>],
             '$22compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CDB74F0>],
             '$24pred': [<numba.core.ir.Assign object at 0x000001A51CDB77C0>],
             '$28pred': [<numba.core.ir.Assign object at 0x000001A51CDB3040>],
             '$36binary_subtract.3': [<numba.core.ir.Assign object at 0x000001A51CDB3640>],
             '$54compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CDB3FA0>],
             '$56pred': [<numba.core.ir.Assign object at 0x000001A51C603280>],
             '$64return_value.1': [<numba.core.ir.Assign object at 0x000001A51C810FA0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CDBB9A0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CDBBC40>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CDBBFA0>],
             '$const20.1': [<numba.core.ir.Assign object at 0x000001A51CDB7370>],
             '$const32.1': [<numba.core.ir.Assign object at 0x000001A51CDB33A0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CDBB820>],
             '$const52.1': [<numba.core.ir.Assign object at 0x000001A51CDB3E20>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51CDB7AC0>],
             'bool24': [<numba.core.ir.Assign object at 0x000001A51CDB75E0>],
             'bool28': [<numba.core.ir.Assign object at 0x000001A51CDB7D30>],
             'bool56': [<numba.core.ir.Assign object at 0x000001A51CDC0160>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CDBBB20>],
             'direction': [<numba.core.ir.Assign object at 0x000001A51CDBB580>],
             'exitsprice': [<numba.core.ir.Assign object at 0x000001A51C8C6AC0>,
                            <numba.core.ir.Assign object at 0x000001A51CDB37C0>,
                            <numba.core.ir.Assign object at 0x000001A51CDB3A60>,
                            <numba.core.ir.Assign object at 0x000001A51CD37AC0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CDBB340>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CDBB220>],
             'slippage': [<numba.core.ir.Assign object at 0x000001A51CDBB460>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51CDBB100>]})
2023-02-02 09:41 DEBUG SSA violators {'exitsprice'}
2023-02-02 09:41 DEBUG Fix SSA violator on var exitsprice
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG first assign: exitsprice
2023-02-02 09:41 DEBUG replaced with: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const20.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-02-02 09:41 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $24pred, 26, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $28pred, 30, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const32.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG replaced with: exitsprice.1 = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: exitsprice = target_price
2023-02-02 09:41 DEBUG replaced with: exitsprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const52.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: exitsprice = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: exitsprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 62
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG on stmt: return $64return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CD37A90>],
             30: [<numba.core.ir.Assign object at 0x000001A51CD33D30>],
             44: [<numba.core.ir.Assign object at 0x000001A51CDC0A30>],
             58: [<numba.core.ir.Assign object at 0x000001A51CDC0790>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-02-02 09:41 DEBUG on stmt: direction = arg(5, name=direction)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const20.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-02-02 09:41 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:147),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $24pred, 26, 50
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 26
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $28pred, 30, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 30
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const32.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-02-02 09:41 DEBUG on stmt: exitsprice.1 = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: exitsprice.2 = target_price
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 50
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $const52.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-02-02 09:41 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:152),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $56pred, 58, 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 58
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: exitsprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 62
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 62
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C701A90>
2023-02-02 09:41 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG find_def var='exitsprice' stmt=$64return_value.1 = cast(value=exitsprice)
2023-02-02 09:41 DEBUG find_def_from_top label 62
2023-02-02 09:41 DEBUG insert phi node exitsprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 62
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG find_def_from_bottom label 44
2023-02-02 09:41 DEBUG incoming_def exitsprice.2 = target_price
2023-02-02 09:41 DEBUG find_def_from_bottom label 50
2023-02-02 09:41 DEBUG find_def_from_top label 50
2023-02-02 09:41 DEBUG idom 10 from label 50
2023-02-02 09:41 DEBUG find_def_from_bottom label 10
2023-02-02 09:41 DEBUG find_def_from_top label 10
2023-02-02 09:41 DEBUG idom 0 from label 10
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-02-02 09:41 DEBUG find_def_from_bottom label 58
2023-02-02 09:41 DEBUG incoming_def exitsprice.3 = const(int, 0)
2023-02-02 09:41 DEBUG find_def_from_bottom label 30
2023-02-02 09:41 DEBUG incoming_def exitsprice.1 = target_price * $36binary_subtract.3
2023-02-02 09:41 DEBUG replaced with: $64return_value.1 = cast(value=exitsprice.4)
2023-02-02 09:41 DEBUG on stmt: return $64return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=172)
           2	LOAD_FAST(arg=4, lineno=172)
           4	LOAD_CONST(arg=1, lineno=172)
           6	COMPARE_OP(arg=2, lineno=172)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=172)
          10	LOAD_FAST(arg=5, lineno=172)
          12	LOAD_CONST(arg=2, lineno=172)
          14	COMPARE_OP(arg=2, lineno=172)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=172)
          18	LOAD_FAST(arg=3, lineno=173)
          20	LOAD_FAST(arg=1, lineno=173)
          22	BINARY_MULTIPLY(arg=None, lineno=173)
          24	LOAD_FAST(arg=2, lineno=173)
          26	BINARY_MULTIPLY(arg=None, lineno=173)
          28	STORE_FAST(arg=0, lineno=173)
          30	JUMP_FORWARD(arg=12, lineno=173)
>         32	LOAD_FAST(arg=4, lineno=174)
          34	LOAD_CONST(arg=2, lineno=174)
          36	COMPARE_OP(arg=2, lineno=174)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=174)
          40	LOAD_CONST(arg=2, lineno=175)
          42	STORE_FAST(arg=0, lineno=175)
>         44	LOAD_FAST(arg=0, lineno=176)
          46	RETURN_VALUE(arg=None, lineno=176)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=172)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=172)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=172)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=172)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=172)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=172)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=172)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=172)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=172)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=174)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=174)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=174)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=174)
2023-02-02 09:41 DEBUG stack ['$36compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=173)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=173)
2023-02-02 09:41 DEBUG stack ['$target_price18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=173)
2023-02-02 09:41 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=173)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=173)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=173)
2023-02-02 09:41 DEBUG stack ['$26binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=173)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=175)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=175)
2023-02-02 09:41 DEBUG stack ['$const40.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=176)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=176)
2023-02-02 09:41 DEBUG stack ['$buy_Fee44.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$buy_Fee44.0'}), (46, {'retval': '$buy_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    buy_Fee = arg(0, name=buy_Fee)           ['buy_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    buy_Fee = $22binary_multiply.2 * size    ['$22binary_multiply.2', 'buy_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    buy_Fee = const(int, 0)                  ['buy_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=buy_Fee)  ['$46return_value.1', 'buy_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF54A00>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF54A00>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF54A00>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF54A00>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF54A00>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CF54A00>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CF5A280>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CA20B50>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51CA208E0>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CA37A90>],
             '$38pred': [<numba.core.ir.Assign object at 0x000001A51CA371F0>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x000001A51C8106D0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CF5A370>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CF5A490>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CF5A880>],
             '$const34.1': [<numba.core.ir.Assign object at 0x000001A51CA373D0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CF5AD60>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51CA20E20>],
             'bool38': [<numba.core.ir.Assign object at 0x000001A51CA37A60>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CF5A8E0>],
             'buy_Fee': [<numba.core.ir.Assign object at 0x000001A51CA13CD0>,
                         <numba.core.ir.Assign object at 0x000001A51CA37100>,
                         <numba.core.ir.Assign object at 0x000001A51C810AC0>],
             'fee': [<numba.core.ir.Assign object at 0x000001A51CA139A0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CA13B20>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CA13BE0>],
             'size': [<numba.core.ir.Assign object at 0x000001A51CA13940>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51CA13760>]})
2023-02-02 09:41 DEBUG SSA violators {'buy_Fee'}
2023-02-02 09:41 DEBUG Fix SSA violator on var buy_Fee
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG first assign: buy_Fee
2023-02-02 09:41 DEBUG replaced with: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG replaced with: buy_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: buy_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C701F10>],
             18: [<numba.core.ir.Assign object at 0x000001A51C87AC70>],
             40: [<numba.core.ir.Assign object at 0x000001A51C87A910>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:172),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: buy_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:174),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: buy_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13EB0>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG find_def var='buy_Fee' stmt=$46return_value.1 = cast(value=buy_Fee)
2023-02-02 09:41 DEBUG find_def_from_top label 44
2023-02-02 09:41 DEBUG insert phi node buy_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-02-02 09:41 DEBUG find_def_from_bottom label 32
2023-02-02 09:41 DEBUG find_def_from_top label 32
2023-02-02 09:41 DEBUG idom 0 from label 32
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def buy_Fee = arg(0, name=buy_Fee)
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def buy_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG find_def_from_bottom label 40
2023-02-02 09:41 DEBUG incoming_def buy_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $46return_value.1 = cast(value=buy_Fee.3)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=193)
           2	LOAD_FAST(arg=4, lineno=193)
           4	LOAD_CONST(arg=1, lineno=193)
           6	COMPARE_OP(arg=2, lineno=193)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=193)
          10	LOAD_FAST(arg=5, lineno=193)
          12	LOAD_CONST(arg=2, lineno=193)
          14	COMPARE_OP(arg=2, lineno=193)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=193)
          18	LOAD_FAST(arg=3, lineno=194)
          20	LOAD_FAST(arg=1, lineno=194)
          22	BINARY_MULTIPLY(arg=None, lineno=194)
          24	LOAD_FAST(arg=2, lineno=194)
          26	BINARY_MULTIPLY(arg=None, lineno=194)
          28	STORE_FAST(arg=0, lineno=194)
          30	JUMP_FORWARD(arg=12, lineno=194)
>         32	LOAD_FAST(arg=4, lineno=195)
          34	LOAD_CONST(arg=1, lineno=195)
          36	COMPARE_OP(arg=2, lineno=195)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=195)
          40	LOAD_CONST(arg=1, lineno=196)
          42	STORE_FAST(arg=0, lineno=196)
>         44	LOAD_FAST(arg=0, lineno=197)
          46	RETURN_VALUE(arg=None, lineno=197)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=193)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=193)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=193)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=193)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=193)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=193)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=193)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=193)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=193)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=195)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=195)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0']
2023-02-02 09:41 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=195)
2023-02-02 09:41 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-02-02 09:41 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=195)
2023-02-02 09:41 DEBUG stack ['$36compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=194)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=194)
2023-02-02 09:41 DEBUG stack ['$target_price18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=194)
2023-02-02 09:41 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=194)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=194)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=194)
2023-02-02 09:41 DEBUG stack ['$26binary_multiply.4']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=194)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=196)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=196)
2023-02-02 09:41 DEBUG stack ['$const40.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=197)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=197)
2023-02-02 09:41 DEBUG stack ['$sell_Fee44.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$sell_Fee44.0'}), (46, {'retval': '$sell_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    sell_Fee = arg(0, name=sell_Fee)         ['sell_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    sell_Fee = $22binary_multiply.2 * size   ['$22binary_multiply.2', 'sell_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    sell_Fee = const(int, 0)                 ['sell_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=sell_Fee) ['$46return_value.1', 'sell_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CA13E80>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CA13E80>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CA13E80>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CA13E80>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CA13E80>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CA13E80>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C855C10>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51C6FB040>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51C97C2E0>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C88C460>],
             '$38pred': [<numba.core.ir.Assign object at 0x000001A51C88CE20>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x000001A51C88C3D0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C855490>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51C855730>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51C855A90>],
             '$const34.1': [<numba.core.ir.Assign object at 0x000001A51C855FA0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51C855310>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51C81D580>],
             'bool38': [<numba.core.ir.Assign object at 0x000001A51C88CF10>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51C855610>],
             'fee': [<numba.core.ir.Assign object at 0x000001A51C81D2E0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51C855070>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51C81D2B0>],
             'sell_Fee': [<numba.core.ir.Assign object at 0x000001A51C81D1F0>,
                          <numba.core.ir.Assign object at 0x000001A51C855CA0>,
                          <numba.core.ir.Assign object at 0x000001A51C88CBE0>],
             'size': [<numba.core.ir.Assign object at 0x000001A51C81DB50>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51C81DCD0>]})
2023-02-02 09:41 DEBUG SSA violators {'sell_Fee'}
2023-02-02 09:41 DEBUG Fix SSA violator on var sell_Fee
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG first assign: sell_Fee
2023-02-02 09:41 DEBUG replaced with: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG replaced with: sell_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: sell_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C88C130>],
             18: [<numba.core.ir.Assign object at 0x000001A51C88C2E0>],
             40: [<numba.core.ir.Assign object at 0x000001A51C88C220>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG on stmt: fee = arg(1, name=fee)
2023-02-02 09:41 DEBUG on stmt: size = arg(2, name=size)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:193),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-02-02 09:41 DEBUG on stmt: sell_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $const34.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-02-02 09:41 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:195),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $38pred, 40, 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: sell_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 44
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA13D30>
2023-02-02 09:41 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG find_def var='sell_Fee' stmt=$46return_value.1 = cast(value=sell_Fee)
2023-02-02 09:41 DEBUG find_def_from_top label 44
2023-02-02 09:41 DEBUG insert phi node sell_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-02-02 09:41 DEBUG find_def_from_bottom label 32
2023-02-02 09:41 DEBUG find_def_from_top label 32
2023-02-02 09:41 DEBUG idom 0 from label 32
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def sell_Fee = arg(0, name=sell_Fee)
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def sell_Fee.1 = $22binary_multiply.2 * size
2023-02-02 09:41 DEBUG find_def_from_bottom label 40
2023-02-02 09:41 DEBUG incoming_def sell_Fee.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $46return_value.1 = cast(value=sell_Fee.3)
2023-02-02 09:41 DEBUG on stmt: return $46return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=202)
           2	LOAD_FAST(arg=1, lineno=202)
           4	LOAD_CONST(arg=1, lineno=202)
           6	COMPARE_OP(arg=2, lineno=202)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=202)
          10	LOAD_FAST(arg=4, lineno=203)
          12	LOAD_FAST(arg=5, lineno=203)
          14	BINARY_MULTIPLY(arg=None, lineno=203)
          16	LOAD_FAST(arg=6, lineno=203)
          18	LOAD_FAST(arg=5, lineno=203)
          20	BINARY_MULTIPLY(arg=None, lineno=203)
          22	BINARY_SUBTRACT(arg=None, lineno=203)
          24	STORE_FAST(arg=0, lineno=203)
          26	JUMP_FORWARD(arg=4, lineno=203)
>         28	LOAD_CONST(arg=2, lineno=205)
          30	STORE_FAST(arg=0, lineno=205)
>         32	LOAD_FAST(arg=0, lineno=206)
          34	RETURN_VALUE(arg=None, lineno=206)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=202)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=202)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=202)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=202)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=202)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=4, lineno=203)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=5, lineno=203)
2023-02-02 09:41 DEBUG stack ['$Close10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=203)
2023-02-02 09:41 DEBUG stack ['$Close10.0', '$buy_sizes12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=5, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3']
2023-02-02 09:41 DEBUG dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3', '$buy_sizes18.4']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=203)
2023-02-02 09:41 DEBUG stack ['$14binary_multiply.2', '$20binary_multiply.5']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=203)
2023-02-02 09:41 DEBUG stack ['$22binary_subtract.6']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=4, lineno=203)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=205)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=30, inst=STORE_FAST(arg=0, lineno=205)
2023-02-02 09:41 DEBUG stack ['$const28.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=206)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=206)
2023-02-02 09:41 DEBUG stack ['$OpenPostionprofit32.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$Close10.0'}), (12, {'res': '$buy_sizes12.1'}), (14, {'lhs': '$Close10.0', 'rhs': '$buy_sizes12.1', 'res': '$14binary_multiply.2'}), (16, {'res': '$entryprice16.3'}), (18, {'res': '$buy_sizes18.4'}), (20, {'lhs': '$entryprice16.3', 'rhs': '$buy_sizes18.4', 'res': '$20binary_multiply.5'}), (22, {'lhs': '$14binary_multiply.2', 'rhs': '$20binary_multiply.5', 'res': '$22binary_subtract.6'}), (24, {'value': '$22binary_subtract.6'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$const28.0'}), (30, {'value': '$const28.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$OpenPostionprofit32.0'}), (34, {'retval': '$OpenPostionprofit32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    OpenPostionprofit = arg(0, name=OpenPostionprofit) ['OpenPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    Close = arg(4, name=Close)               ['Close']
    buy_sizes = arg(5, name=buy_sizes)       ['buy_sizes']
    entryprice = arg(6, name=entryprice)     ['entryprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $14binary_multiply.2 = Close * buy_sizes ['$14binary_multiply.2', 'Close', 'buy_sizes']
    $20binary_multiply.5 = entryprice * buy_sizes ['$20binary_multiply.5', 'buy_sizes', 'entryprice']
    OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5 ['$14binary_multiply.2', '$20binary_multiply.5', 'OpenPostionprofit']
    jump 32                                  []
label 28:
    OpenPostionprofit = const(int, 0)        ['OpenPostionprofit']
    jump 32                                  []
label 32:
    $34return_value.1 = cast(value=OpenPostionprofit) ['$34return_value.1', 'OpenPostionprofit']
    return $34return_value.1                 ['$34return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C874070>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: Close = arg(4, name=Close)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C874070>
2023-02-02 09:41 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-02-02 09:41 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C874070>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C874070>
2023-02-02 09:41 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $34return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51CED7BB0>],
             '$20binary_multiply.5': [<numba.core.ir.Assign object at 0x000001A51CED7640>],
             '$34return_value.1': [<numba.core.ir.Assign object at 0x000001A51CA49B50>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C81DA60>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CED7C70>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51C81D4F0>],
             'Close': [<numba.core.ir.Assign object at 0x000001A51C81D3A0>],
             'OpenPostionprofit': [<numba.core.ir.Assign object at 0x000001A51CA3AA00>,
                                   <numba.core.ir.Assign object at 0x000001A51CED7340>,
                                   <numba.core.ir.Assign object at 0x000001A51CED7A30>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CED7940>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x000001A51CA3AEB0>],
             'buy_sizes': [<numba.core.ir.Assign object at 0x000001A51C81D8E0>],
             'entryprice': [<numba.core.ir.Assign object at 0x000001A51C81DFA0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CA3AF10>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CA3ABE0>]})
2023-02-02 09:41 DEBUG SSA violators {'OpenPostionprofit'}
2023-02-02 09:41 DEBUG Fix SSA violator on var OpenPostionprofit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG first assign: OpenPostionprofit
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: Close = arg(4, name=Close)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-02-02 09:41 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: OpenPostionprofit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $34return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C88C9A0>],
             10: [<numba.core.ir.Assign object at 0x000001A51C88C610>],
             28: [<numba.core.ir.Assign object at 0x000001A51CA49EB0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: Close = arg(4, name=Close)
2023-02-02 09:41 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-02-02 09:41 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-02-02 09:41 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: OpenPostionprofit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 32
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 32
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51C8745E0>
2023-02-02 09:41 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG find_def var='OpenPostionprofit' stmt=$34return_value.1 = cast(value=OpenPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_top label 32
2023-02-02 09:41 DEBUG insert phi node OpenPostionprofit.3 = phi(incoming_values=[], incoming_blocks=[]) at 32
2023-02-02 09:41 DEBUG find_def_from_bottom label 10
2023-02-02 09:41 DEBUG incoming_def OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG incoming_def OpenPostionprofit.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $34return_value.1 = cast(value=OpenPostionprofit.3)
2023-02-02 09:41 DEBUG on stmt: return $34return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=212)
           2	LOAD_FAST(arg=1, lineno=212)
           4	LOAD_CONST(arg=1, lineno=212)
           6	COMPARE_OP(arg=2, lineno=212)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=212)
          10	LOAD_FAST(arg=2, lineno=212)
          12	LOAD_CONST(arg=2, lineno=212)
          14	COMPARE_OP(arg=2, lineno=212)
          16	POP_JUMP_IF_FALSE(arg=28, lineno=212)
          18	LOAD_FAST(arg=0, lineno=213)
          20	LOAD_FAST(arg=3, lineno=213)
          22	BINARY_SUBTRACT(arg=None, lineno=213)
          24	STORE_FAST(arg=0, lineno=213)
          26	JUMP_FORWARD(arg=44, lineno=213)
>         28	LOAD_FAST(arg=1, lineno=214)
          30	LOAD_CONST(arg=2, lineno=214)
          32	COMPARE_OP(arg=2, lineno=214)
          34	POP_JUMP_IF_FALSE(arg=72, lineno=214)
          36	LOAD_FAST(arg=2, lineno=214)
          38	LOAD_CONST(arg=1, lineno=214)
          40	COMPARE_OP(arg=2, lineno=214)
          42	POP_JUMP_IF_FALSE(arg=72, lineno=214)
          44	LOAD_FAST(arg=0, lineno=215)
          46	LOAD_FAST(arg=4, lineno=215)
          48	BINARY_SUBTRACT(arg=None, lineno=215)
          50	STORE_FAST(arg=0, lineno=215)
          52	LOAD_FAST(arg=0, lineno=221)
          54	LOAD_FAST(arg=7, lineno=222)
          56	LOAD_FAST(arg=5, lineno=222)
          58	BINARY_MULTIPLY(arg=None, lineno=222)
          60	LOAD_FAST(arg=6, lineno=222)
          62	LOAD_FAST(arg=5, lineno=222)
          64	BINARY_MULTIPLY(arg=None, lineno=222)
          66	BINARY_SUBTRACT(arg=None, lineno=222)
          68	BINARY_ADD(arg=None, lineno=221)
          70	STORE_FAST(arg=0, lineno=221)
>         72	LOAD_FAST(arg=0, lineno=224)
          74	RETURN_VALUE(arg=None, lineno=224)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=212)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=212)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=212)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=212)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=212)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=28, lineno=212)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=214)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack ['$marketpostion28.0']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=COMPARE_OP(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack ['$marketpostion28.0', '$const30.1']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=72, lineno=214)
2023-02-02 09:41 DEBUG stack ['$32compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=213)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=213)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=213)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit18.0', '$buy_Fees20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=213)
2023-02-02 09:41 DEBUG stack ['$22binary_subtract.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=44, lineno=213)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=214)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion36.0']
2023-02-02 09:41 DEBUG dispatch pc=40, inst=COMPARE_OP(arg=2, lineno=214)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion36.0', '$const38.1']
2023-02-02 09:41 DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=72, lineno=214)
2023-02-02 09:41 DEBUG stack ['$40compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=224)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=224)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit72.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=215)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=215)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit44.0']
2023-02-02 09:41 DEBUG dispatch pc=48, inst=BINARY_SUBTRACT(arg=None, lineno=215)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit44.0', '$sell_Fees46.1']
2023-02-02 09:41 DEBUG dispatch pc=50, inst=STORE_FAST(arg=0, lineno=215)
2023-02-02 09:41 DEBUG stack ['$48binary_subtract.2']
2023-02-02 09:41 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=221)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=7, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3']
2023-02-02 09:41 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=5, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4']
2023-02-02 09:41 DEBUG dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4', '$sizes56.5']
2023-02-02 09:41 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6']
2023-02-02 09:41 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7']
2023-02-02 09:41 DEBUG dispatch pc=64, inst=BINARY_MULTIPLY(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7', '$sizes62.8']
2023-02-02 09:41 DEBUG dispatch pc=66, inst=BINARY_SUBTRACT(arg=None, lineno=222)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$64binary_multiply.9']
2023-02-02 09:41 DEBUG dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=221)
2023-02-02 09:41 DEBUG stack ['$ClosedPostionprofit52.3', '$66binary_subtract.10']
2023-02-02 09:41 DEBUG dispatch pc=70, inst=STORE_FAST(arg=0, lineno=221)
2023-02-02 09:41 DEBUG stack ['$68binary_add.11']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 28: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$ClosedPostionprofit18.0'}), (20, {'res': '$buy_Fees20.1'}), (22, {'lhs': '$ClosedPostionprofit18.0', 'rhs': '$buy_Fees20.1', 'res': '$22binary_subtract.2'}), (24, {'value': '$22binary_subtract.2'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$marketpostion28.0'}), (30, {'res': '$const30.1'}), (32, {'lhs': '$marketpostion28.0', 'rhs': '$const30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$last_marketpostion36.0'}), (38, {'res': '$const38.1'}), (40, {'lhs': '$last_marketpostion36.0', 'rhs': '$const38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$ClosedPostionprofit44.0'}), (46, {'res': '$sell_Fees46.1'}), (48, {'lhs': '$ClosedPostionprofit44.0', 'rhs': '$sell_Fees46.1', 'res': '$48binary_subtract.2'}), (50, {'value': '$48binary_subtract.2'}), (52, {'res': '$ClosedPostionprofit52.3'}), (54, {'res': '$exitsprice54.4'}), (56, {'res': '$sizes56.5'}), (58, {'lhs': '$exitsprice54.4', 'rhs': '$sizes56.5', 'res': '$58binary_multiply.6'}), (60, {'res': '$last_entryprice60.7'}), (62, {'res': '$sizes62.8'}), (64, {'lhs': '$last_entryprice60.7', 'rhs': '$sizes62.8', 'res': '$64binary_multiply.9'}), (66, {'lhs': '$58binary_multiply.6', 'rhs': '$64binary_multiply.9', 'res': '$66binary_subtract.10'}), (68, {'lhs': '$ClosedPostionprofit52.3', 'rhs': '$66binary_subtract.10', 'res': '$68binary_add.11'}), (70, {'value': '$68binary_add.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$ClosedPostionprofit72.0'}), (74, {'retval': '$ClosedPostionprofit72.0', 'castval': '$74return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    ClosedPostionprofit = arg(0, name=ClosedPostionprofit) ['ClosedPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    sell_Fees = arg(4, name=sell_Fees)       ['sell_Fees']
    sizes = arg(5, name=sizes)               ['sizes']
    last_entryprice = arg(6, name=last_entryprice) ['last_entryprice']
    exitsprice = arg(7, name=exitsprice)     ['exitsprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 28                   ['$16pred']
label 18:
    $22binary_subtract.2 = ClosedPostionprofit - buy_Fees ['$22binary_subtract.2', 'ClosedPostionprofit', 'buy_Fees']
    ClosedPostionprofit = $22binary_subtract.2 ['$22binary_subtract.2', 'ClosedPostionprofit']
    jump 72                                  []
label 28:
    $const30.1 = const(int, 0)               ['$const30.1']
    $32compare_op.2 = marketpostion == $const30.1 ['$32compare_op.2', '$const30.1', 'marketpostion']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 72                   ['$34pred']
label 36:
    $const38.1 = const(int, 1)               ['$const38.1']
    $40compare_op.2 = last_marketpostion == $const38.1 ['$40compare_op.2', '$const38.1', 'last_marketpostion']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.2', '$42pred', 'bool42']
    branch $42pred, 44, 72                   ['$42pred']
label 44:
    $48binary_subtract.2 = ClosedPostionprofit - sell_Fees ['$48binary_subtract.2', 'ClosedPostionprofit', 'sell_Fees']
    ClosedPostionprofit = $48binary_subtract.2 ['$48binary_subtract.2', 'ClosedPostionprofit']
    $58binary_multiply.6 = exitsprice * sizes ['$58binary_multiply.6', 'exitsprice', 'sizes']
    $64binary_multiply.9 = last_entryprice * sizes ['$64binary_multiply.9', 'last_entryprice', 'sizes']
    $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9 ['$58binary_multiply.6', '$64binary_multiply.9', '$66binary_subtract.10']
    $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10 ['$66binary_subtract.10', '$68binary_add.11', 'ClosedPostionprofit']
    ClosedPostionprofit = $68binary_add.11   ['$68binary_add.11', 'ClosedPostionprofit']
    jump 72                                  []
label 72:
    $74return_value.1 = cast(value=ClosedPostionprofit) ['$74return_value.1', 'ClosedPostionprofit']
    return $74return_value.1                 ['$74return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD33700>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-02-02 09:41 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD33700>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 28
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD33700>
2023-02-02 09:41 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD33700>
2023-02-02 09:41 DEBUG on stmt: $const30.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-02-02 09:41 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $34pred, 36, 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD33700>
2023-02-02 09:41 DEBUG on stmt: $const38.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-02-02 09:41 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $42pred, 44, 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD33700>
2023-02-02 09:41 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-02-02 09:41 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-02-02 09:41 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-02-02 09:41 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 72
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51CD33700>
2023-02-02 09:41 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $74return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CB66550>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51CB667F0>],
             '$22binary_subtract.2': [<numba.core.ir.Assign object at 0x000001A51CB66C70>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CB65250>],
             '$34pred': [<numba.core.ir.Assign object at 0x000001A51CB654F0>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CB65A00>],
             '$42pred': [<numba.core.ir.Assign object at 0x000001A51CB65CA0>],
             '$48binary_subtract.2': [<numba.core.ir.Assign object at 0x000001A51CB624F0>],
             '$58binary_multiply.6': [<numba.core.ir.Assign object at 0x000001A51CED7340>],
             '$64binary_multiply.9': [<numba.core.ir.Assign object at 0x000001A51C977DC0>],
             '$66binary_subtract.10': [<numba.core.ir.Assign object at 0x000001A51C977FD0>],
             '$68binary_add.11': [<numba.core.ir.Assign object at 0x000001A51C9778B0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CB5AD90>],
             '$74return_value.1': [<numba.core.ir.Assign object at 0x000001A51C9776D0>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51CB66070>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51CB663D0>],
             '$const30.1': [<numba.core.ir.Assign object at 0x000001A51CB650D0>],
             '$const38.1': [<numba.core.ir.Assign object at 0x000001A51CB65880>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CB5AC10>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x000001A51CB5A190>,
                                     <numba.core.ir.Assign object at 0x000001A51CB66D30>,
                                     <numba.core.ir.Assign object at 0x000001A51CB62640>,
                                     <numba.core.ir.Assign object at 0x000001A51C9779A0>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51CB666D0>],
             'bool34': [<numba.core.ir.Assign object at 0x000001A51CB653D0>],
             'bool42': [<numba.core.ir.Assign object at 0x000001A51CB65B80>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CB5AF10>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x000001A51CB5A4F0>],
             'exitsprice': [<numba.core.ir.Assign object at 0x000001A51CB5A970>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x000001A51CB5A850>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CB5A3D0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CB5A2B0>],
             'sell_Fees': [<numba.core.ir.Assign object at 0x000001A51CB5A610>],
             'sizes': [<numba.core.ir.Assign object at 0x000001A51CB5A730>]})
2023-02-02 09:41 DEBUG SSA violators {'ClosedPostionprofit'}
2023-02-02 09:41 DEBUG Fix SSA violator on var ClosedPostionprofit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG first assign: ClosedPostionprofit
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-02-02 09:41 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.1 = $22binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $const30.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-02-02 09:41 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $34pred, 36, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $const38.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-02-02 09:41 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $42pred, 44, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.2 = $48binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-02-02 09:41 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-02-02 09:41 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-02-02 09:41 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-02-02 09:41 DEBUG replaced with: ClosedPostionprofit.3 = $68binary_add.11
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 72
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: return $74return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51CB626A0>],
             18: [<numba.core.ir.Assign object at 0x000001A51C977310>],
             44: [<numba.core.ir.Assign object at 0x000001A51C9770D0>,
                  <numba.core.ir.Assign object at 0x000001A51C977B50>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-02-02 09:41 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-02-02 09:41 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 28
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 18
2023-02-02 09:41 DEBUG idom 10 from label 18
2023-02-02 09:41 DEBUG find_def_from_bottom label 10
2023-02-02 09:41 DEBUG find_def_from_top label 10
2023-02-02 09:41 DEBUG idom 0 from label 10
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.1 = $22binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 28
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $const30.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-02-02 09:41 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $34pred, 36, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $const38.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-02-02 09:41 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $42pred, 44, 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 44
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-02-02 09:41 DEBUG find_def_from_top label 44
2023-02-02 09:41 DEBUG idom 36 from label 44
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG find_def_from_top label 36
2023-02-02 09:41 DEBUG idom 28 from label 36
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG find_def_from_top label 28
2023-02-02 09:41 DEBUG idom 0 from label 28
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.2 = $48binary_subtract.2
2023-02-02 09:41 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-02-02 09:41 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-02-02 09:41 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-02-02 09:41 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-02-02 09:41 DEBUG replaced with: $68binary_add.11 = ClosedPostionprofit.2 + $66binary_subtract.10
2023-02-02 09:41 DEBUG on stmt: ClosedPostionprofit.3 = $68binary_add.11
2023-02-02 09:41 DEBUG on stmt: jump 72
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 72
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CA2C370>
2023-02-02 09:41 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def var='ClosedPostionprofit' stmt=$74return_value.1 = cast(value=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_top label 72
2023-02-02 09:41 DEBUG insert phi node ClosedPostionprofit.4 = phi(incoming_values=[], incoming_blocks=[]) at 72
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit.1 = $22binary_subtract.2
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG find_def_from_top label 28
2023-02-02 09:41 DEBUG idom 0 from label 28
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG find_def_from_top label 36
2023-02-02 09:41 DEBUG idom 28 from label 36
2023-02-02 09:41 DEBUG find_def_from_bottom label 28
2023-02-02 09:41 DEBUG find_def_from_top label 28
2023-02-02 09:41 DEBUG idom 0 from label 28
2023-02-02 09:41 DEBUG find_def_from_bottom label 0
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-02-02 09:41 DEBUG find_def_from_bottom label 44
2023-02-02 09:41 DEBUG incoming_def ClosedPostionprofit.3 = $68binary_add.11
2023-02-02 09:41 DEBUG replaced with: $74return_value.1 = cast(value=ClosedPostionprofit.4)
2023-02-02 09:41 DEBUG on stmt: return $74return_value.1
2023-02-02 09:41 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=242)
           2	LOAD_FAST(arg=1, lineno=242)
           4	LOAD_CONST(arg=1, lineno=242)
           6	COMPARE_OP(arg=2, lineno=242)
           8	POP_JUMP_IF_FALSE(arg=36, lineno=242)
          10	LOAD_FAST(arg=2, lineno=242)
          12	LOAD_CONST(arg=2, lineno=242)
          14	COMPARE_OP(arg=2, lineno=242)
          16	POP_JUMP_IF_FALSE(arg=36, lineno=242)
          18	LOAD_FAST(arg=3, lineno=243)
          20	LOAD_FAST(arg=4, lineno=243)
          22	BINARY_MULTIPLY(arg=None, lineno=243)
          24	LOAD_FAST(arg=5, lineno=243)
          26	LOAD_FAST(arg=4, lineno=243)
          28	BINARY_MULTIPLY(arg=None, lineno=243)
          30	BINARY_SUBTRACT(arg=None, lineno=243)
          32	STORE_FAST(arg=0, lineno=243)
          34	JUMP_FORWARD(arg=4, lineno=243)
>         36	LOAD_CONST(arg=1, lineno=245)
          38	STORE_FAST(arg=0, lineno=245)
>         40	LOAD_FAST(arg=0, lineno=246)
          42	RETURN_VALUE(arg=None, lineno=246)
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=242)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=242)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=242)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0']
2023-02-02 09:41 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-02-02 09:41 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=36, lineno=242)
2023-02-02 09:41 DEBUG stack ['$6compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0']
2023-02-02 09:41 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=242)
2023-02-02 09:41 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-02-02 09:41 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=36, lineno=242)
2023-02-02 09:41 DEBUG stack ['$14compare_op.2']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=245)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=245)
2023-02-02 09:41 DEBUG stack ['$const36.0']
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=243)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=243)
2023-02-02 09:41 DEBUG stack ['$target_price18.0']
2023-02-02 09:41 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=243)
2023-02-02 09:41 DEBUG stack ['$target_price18.0', '$sell_sizes20.1']
2023-02-02 09:41 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=5, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2']
2023-02-02 09:41 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3']
2023-02-02 09:41 DEBUG dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3', '$sell_sizes26.4']
2023-02-02 09:41 DEBUG dispatch pc=30, inst=BINARY_SUBTRACT(arg=None, lineno=243)
2023-02-02 09:41 DEBUG stack ['$22binary_multiply.2', '$28binary_multiply.5']
2023-02-02 09:41 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=243)
2023-02-02 09:41 DEBUG stack ['$30binary_subtract.6']
2023-02-02 09:41 DEBUG dispatch pc=34, inst=JUMP_FORWARD(arg=4, lineno=243)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG stack: []
2023-02-02 09:41 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=246)
2023-02-02 09:41 DEBUG stack []
2023-02-02 09:41 DEBUG dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=246)
2023-02-02 09:41 DEBUG stack ['$profit40.0']
2023-02-02 09:41 DEBUG end state. edges=[]
2023-02-02 09:41 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0)])
2023-02-02 09:41 DEBUG -------------------------Prune PHIs-------------------------
2023-02-02 09:41 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set()})
2023-02-02 09:41 DEBUG defmap: {}
2023-02-02 09:41 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-02-02 09:41 DEBUG keep phismap: {}
2023-02-02 09:41 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-02-02 09:41 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-02-02 09:41 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 36: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 36: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$sell_sizes20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$sell_sizes20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$last_entryprice24.3'}), (26, {'res': '$sell_sizes26.4'}), (28, {'lhs': '$last_entryprice24.3', 'rhs': '$sell_sizes26.4', 'res': '$28binary_multiply.5'}), (30, {'lhs': '$22binary_multiply.2', 'rhs': '$28binary_multiply.5', 'res': '$30binary_subtract.6'}), (32, {'value': '$30binary_subtract.6'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-02-02 09:41 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$profit40.0'}), (42, {'retval': '$profit40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-02-02 09:41 DEBUG label 0:
    profit = arg(0, name=profit)             ['profit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    target_price = arg(3, name=target_price) ['target_price']
    sell_sizes = arg(4, name=sell_sizes)     ['sell_sizes']
    last_entryprice = arg(5, name=last_entryprice) ['last_entryprice']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 36                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 36                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * sell_sizes ['$22binary_multiply.2', 'sell_sizes', 'target_price']
    $28binary_multiply.5 = last_entryprice * sell_sizes ['$28binary_multiply.5', 'last_entryprice', 'sell_sizes']
    profit = $22binary_multiply.2 - $28binary_multiply.5 ['$22binary_multiply.2', '$28binary_multiply.5', 'profit']
    jump 40                                  []
label 36:
    profit = const(int, 0)                   ['profit']
    jump 40                                  []
label 40:
    $42return_value.1 = cast(value=profit)   ['$42return_value.1', 'profit']
    return $42return_value.1                 ['$42return_value.1']

2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C97E5B0>
2023-02-02 09:41 DEBUG on stmt: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 36
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C97E5B0>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 36
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C97E5B0>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-02-02 09:41 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-02-02 09:41 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C97E5B0>
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block analysis pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001A51C97E5B0>
2023-02-02 09:41 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG on stmt: return $42return_value.1
2023-02-02 09:41 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x000001A51C65B5B0>],
             '$16pred': [<numba.core.ir.Assign object at 0x000001A51C65B580>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x000001A51C65B1F0>],
             '$28binary_multiply.5': [<numba.core.ir.Assign object at 0x000001A51C603970>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x000001A51C8180D0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001A51CD32430>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001A51C65BDC0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x000001A51C65BA30>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001A51CD32D60>],
             'bool16': [<numba.core.ir.Assign object at 0x000001A51C65B4C0>],
             'bool8': [<numba.core.ir.Assign object at 0x000001A51CD32730>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x000001A51C977D60>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x000001A51CB622B0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001A51CB5A190>],
             'profit': [<numba.core.ir.Assign object at 0x000001A51CB65FD0>,
                        <numba.core.ir.Assign object at 0x000001A51C8186D0>,
                        <numba.core.ir.Assign object at 0x000001A51C818D90>],
             'sell_sizes': [<numba.core.ir.Assign object at 0x000001A51C9778B0>],
             'target_price': [<numba.core.ir.Assign object at 0x000001A51C977400>]})
2023-02-02 09:41 DEBUG SSA violators {'profit'}
2023-02-02 09:41 DEBUG Fix SSA violator on var profit
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG first assign: profit
2023-02-02 09:41 DEBUG replaced with: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-02-02 09:41 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-02-02 09:41 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG replaced with: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: profit = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: profit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG on stmt: return $42return_value.1
2023-02-02 09:41 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A51C8189A0>],
             18: [<numba.core.ir.Assign object at 0x000001A51C818670>],
             36: [<numba.core.ir.Assign object at 0x000001A51C818BE0>]})
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 0
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: profit = arg(0, name=profit)
2023-02-02 09:41 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-02-02 09:41 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-02-02 09:41 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-02-02 09:41 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-02-02 09:41 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-02-02 09:41 DEBUG on stmt: $const4.1 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-02-02 09:41 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $8pred, 10, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 10
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: $const12.1 = const(int, 1)
2023-02-02 09:41 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-02-02 09:41 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-02-02 09:41 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
2023-02-02 09:41 DEBUG on stmt: branch $16pred, 18, 36
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 18
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-02-02 09:41 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-02-02 09:41 DEBUG on stmt: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 36
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: profit.2 = const(int, 0)
2023-02-02 09:41 DEBUG on stmt: jump 40
2023-02-02 09:41 DEBUG ==== SSA block rewrite pass on 40
2023-02-02 09:41 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001A51CC85280>
2023-02-02 09:41 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG find_def var='profit' stmt=$42return_value.1 = cast(value=profit)
2023-02-02 09:41 DEBUG find_def_from_top label 40
2023-02-02 09:41 DEBUG insert phi node profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 40
2023-02-02 09:41 DEBUG find_def_from_bottom label 18
2023-02-02 09:41 DEBUG incoming_def profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-02-02 09:41 DEBUG find_def_from_bottom label 36
2023-02-02 09:41 DEBUG incoming_def profit.2 = const(int, 0)
2023-02-02 09:41 DEBUG replaced with: $42return_value.1 = cast(value=profit.3)
2023-02-02 09:41 DEBUG on stmt: return $42return_value.1
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/account?timestamp=1675302117561&signature=e11aeb78c72076c6939a64de7d6d5325bc5ea45298a1b54df2bea7661f6f1f37 HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/exchangeInfo HTTP/1.1" 200 None
2023-02-02 09:41 DEBUG Starting new HTTPS connection (1): notify-api.line.me:443
2023-02-02 09:41 DEBUG https://notify-api.line.me:443 "POST /api/notify?message=%0A%E5%95%86%E5%93%81%3ABTCUSDT%0A%E8%B2%B7%E8%B3%A3%E5%88%A5%3ABUY%0A%E5%A7%94%E8%A8%97%E5%96%AE%3AMARKET%0A%E5%A7%94%E8%A8%97%E9%A1%9E%E5%88%A5%3AIOC%0A%E5%A7%94%E8%A8%97%E6%95%B8%E9%87%8F%3A0.9496833688681066 HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG Starting new HTTPS connection (1): api.binance.com:443
2023-02-02 09:42 DEBUG https://api.binance.com:443 "GET /api/v3/ping HTTP/1.1" 200 2
2023-02-02 09:42 DEBUG Starting new HTTPS connection (1): fapi.binance.com:443
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?interval=1m&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302121413&interval=1m&limit=1&startTime=0&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302180000&interval=1m&limit=1000&startTime=1675302060000&symbol=ETHUSDT HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG Starting new HTTPS connection (1): api.binance.com:443
2023-02-02 09:42 DEBUG https://api.binance.com:443 "GET /api/v3/ping HTTP/1.1" 200 2
2023-02-02 09:42 DEBUG Starting new HTTPS connection (1): fapi.binance.com:443
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?interval=1m&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302122260&interval=1m&limit=1&startTime=0&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/klines?endTime=1675302180000&interval=1m&limit=1000&startTime=1675302060000&symbol=BTCUSDT HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/account?timestamp=1675302128395&signature=9deedc4057c09ed819f364b60bfb7a78e0c651a89b5cb29c0a31cf0c3d64e457 HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG https://fapi.binance.com:443 "GET /fapi/v1/exchangeInfo HTTP/1.1" 200 None
2023-02-02 09:42 DEBUG Starting new HTTPS connection (1): notify-api.line.me:443
2023-02-02 09:42 DEBUG https://notify-api.line.me:443 "POST /api/notify?message=%0A%E5%95%86%E5%93%81%3ABTCUSDT%0A%E8%B2%B7%E8%B3%A3%E5%88%A5%3ABUY%0A%E5%A7%94%E8%A8%97%E5%96%AE%3AMARKET%0A%E5%A7%94%E8%A8%97%E9%A1%9E%E5%88%A5%3AIOC%0A%E5%A7%94%E8%A8%97%E6%95%B8%E9%87%8F%3A0.9496833688681066 HTTP/1.1" 200 None
