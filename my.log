2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=438)
           2	LOAD_GLOBAL(arg=0, lineno=438)
           4	LOAD_ATTR(arg=1, lineno=438)
           6	LOAD_FAST(arg=6, lineno=438)
           8	LOAD_CONST(arg=1, lineno=438)
          10	CALL_FUNCTION_KW(arg=1, lineno=438)
          12	STORE_FAST(arg=13, lineno=438)
          14	LOAD_GLOBAL(arg=0, lineno=439)
          16	LOAD_ATTR(arg=1, lineno=439)
          18	LOAD_FAST(arg=6, lineno=439)
          20	LOAD_CONST(arg=1, lineno=439)
          22	CALL_FUNCTION_KW(arg=1, lineno=439)
          24	STORE_FAST(arg=14, lineno=439)
          26	LOAD_GLOBAL(arg=0, lineno=440)
          28	LOAD_ATTR(arg=1, lineno=440)
          30	LOAD_FAST(arg=6, lineno=440)
          32	LOAD_CONST(arg=1, lineno=440)
          34	CALL_FUNCTION_KW(arg=1, lineno=440)
          36	STORE_FAST(arg=15, lineno=440)
          38	LOAD_GLOBAL(arg=0, lineno=441)
          40	LOAD_ATTR(arg=1, lineno=441)
          42	LOAD_FAST(arg=6, lineno=441)
          44	LOAD_CONST(arg=1, lineno=441)
          46	CALL_FUNCTION_KW(arg=1, lineno=441)
          48	STORE_FAST(arg=16, lineno=441)
          50	LOAD_GLOBAL(arg=0, lineno=442)
          52	LOAD_ATTR(arg=1, lineno=442)
          54	LOAD_FAST(arg=6, lineno=442)
          56	LOAD_CONST(arg=1, lineno=442)
          58	CALL_FUNCTION_KW(arg=1, lineno=442)
          60	STORE_FAST(arg=17, lineno=442)
          62	LOAD_GLOBAL(arg=0, lineno=443)
          64	LOAD_ATTR(arg=1, lineno=443)
          66	LOAD_FAST(arg=6, lineno=443)
          68	LOAD_CONST(arg=1, lineno=443)
          70	CALL_FUNCTION_KW(arg=1, lineno=443)
          72	STORE_FAST(arg=18, lineno=443)
          74	LOAD_GLOBAL(arg=0, lineno=444)
          76	LOAD_ATTR(arg=1, lineno=444)
          78	LOAD_FAST(arg=6, lineno=444)
          80	LOAD_CONST(arg=1, lineno=444)
          82	CALL_FUNCTION_KW(arg=1, lineno=444)
          84	STORE_FAST(arg=19, lineno=444)
          86	LOAD_GLOBAL(arg=0, lineno=445)
          88	LOAD_ATTR(arg=1, lineno=445)
          90	LOAD_FAST(arg=6, lineno=445)
          92	LOAD_CONST(arg=1, lineno=445)
          94	CALL_FUNCTION_KW(arg=1, lineno=445)
          96	STORE_FAST(arg=20, lineno=445)
          98	LOAD_GLOBAL(arg=0, lineno=446)
         100	LOAD_ATTR(arg=1, lineno=446)
         102	LOAD_FAST(arg=6, lineno=446)
         104	LOAD_CONST(arg=1, lineno=446)
         106	CALL_FUNCTION_KW(arg=1, lineno=446)
         108	STORE_FAST(arg=21, lineno=446)
         110	LOAD_GLOBAL(arg=0, lineno=447)
         112	LOAD_ATTR(arg=1, lineno=447)
         114	LOAD_FAST(arg=6, lineno=447)
         116	LOAD_CONST(arg=1, lineno=447)
         118	CALL_FUNCTION_KW(arg=1, lineno=447)
         120	STORE_FAST(arg=22, lineno=447)
         122	LOAD_GLOBAL(arg=0, lineno=448)
         124	LOAD_ATTR(arg=1, lineno=448)
         126	LOAD_FAST(arg=6, lineno=448)
         128	LOAD_CONST(arg=1, lineno=448)
         130	CALL_FUNCTION_KW(arg=1, lineno=448)
         132	STORE_FAST(arg=23, lineno=448)
         134	LOAD_CONST(arg=2, lineno=451)
         136	STORE_FAST(arg=24, lineno=451)
         138	LOAD_CONST(arg=2, lineno=452)
         140	STORE_FAST(arg=25, lineno=452)
         142	LOAD_CONST(arg=2, lineno=453)
         144	STORE_FAST(arg=26, lineno=453)
         146	LOAD_CONST(arg=2, lineno=454)
         148	STORE_FAST(arg=27, lineno=454)
         150	LOAD_CONST(arg=2, lineno=455)
         152	STORE_FAST(arg=28, lineno=455)
         154	LOAD_CONST(arg=2, lineno=456)
         156	STORE_FAST(arg=29, lineno=456)
         158	LOAD_FAST(arg=7, lineno=457)
         160	STORE_FAST(arg=30, lineno=457)
         162	LOAD_CONST(arg=2, lineno=458)
         164	STORE_FAST(arg=31, lineno=458)
         166	LOAD_FAST(arg=9, lineno=459)
         168	STORE_FAST(arg=32, lineno=459)
         170	LOAD_FAST(arg=9, lineno=460)
         172	STORE_FAST(arg=33, lineno=460)
         174	LOAD_CONST(arg=2, lineno=461)
         176	STORE_FAST(arg=34, lineno=461)
         178	LOAD_CONST(arg=2, lineno=462)
         180	STORE_FAST(arg=35, lineno=462)
         182	LOAD_CONST(arg=2, lineno=463)
         184	STORE_FAST(arg=36, lineno=463)
         186	LOAD_CONST(arg=2, lineno=464)
         188	STORE_FAST(arg=37, lineno=464)
         190	LOAD_FAST(arg=8, lineno=467)
         192	STORE_FAST(arg=8, lineno=467)
         194	LOAD_FAST(arg=10, lineno=468)
         196	STORE_FAST(arg=10, lineno=468)
         198	LOAD_CONST(arg=3, lineno=469)
         200	STORE_FAST(arg=38, lineno=469)
         202	LOAD_GLOBAL(arg=2, lineno=472)
         204	LOAD_FAST(arg=6, lineno=473)
         206	LOAD_FAST(arg=1, lineno=473)
         208	LOAD_FAST(arg=2, lineno=473)
         210	LOAD_FAST(arg=3, lineno=473)
         212	LOAD_FAST(arg=11, lineno=473)
         214	CALL_FUNCTION(arg=5, lineno=472)
         216	STORE_FAST(arg=39, lineno=472)
         218	LOAD_GLOBAL(arg=2, lineno=475)
         220	LOAD_FAST(arg=6, lineno=476)
         222	LOAD_FAST(arg=1, lineno=476)
         224	LOAD_FAST(arg=2, lineno=476)
         226	LOAD_FAST(arg=3, lineno=476)
         228	LOAD_FAST(arg=12, lineno=476)
         230	CALL_FUNCTION(arg=5, lineno=475)
         232	STORE_FAST(arg=40, lineno=475)
         234	LOAD_GLOBAL(arg=0, lineno=479)
         236	LOAD_METHOD(arg=3, lineno=479)
         238	LOAD_FAST(arg=1, lineno=479)
         240	LOAD_FAST(arg=4, lineno=479)
         242	BINARY_SUBTRACT(arg=None, lineno=479)
         244	LOAD_CONST(arg=2, lineno=479)
         246	COMPARE_OP(arg=4, lineno=479)
         248	LOAD_FAST(arg=39, lineno=480)
         250	LOAD_FAST(arg=40, lineno=480)
         252	BINARY_SUBTRACT(arg=None, lineno=480)
         254	LOAD_CONST(arg=2, lineno=480)
         256	COMPARE_OP(arg=4, lineno=480)
         258	BINARY_AND(arg=None, lineno=479)
         260	LOAD_CONST(arg=4, lineno=480)
         262	LOAD_CONST(arg=2, lineno=480)
         264	CALL_METHOD(arg=3, lineno=479)
         266	STORE_FAST(arg=41, lineno=479)
         268	LOAD_GLOBAL(arg=0, lineno=481)
         270	LOAD_METHOD(arg=3, lineno=481)
         272	LOAD_FAST(arg=2, lineno=481)
         274	LOAD_FAST(arg=5, lineno=481)
         276	BINARY_SUBTRACT(arg=None, lineno=481)
         278	LOAD_CONST(arg=2, lineno=481)
         280	COMPARE_OP(arg=0, lineno=481)
         282	LOAD_CONST(arg=5, lineno=481)
         284	LOAD_FAST(arg=41, lineno=481)
         286	CALL_METHOD(arg=3, lineno=481)
         288	STORE_FAST(arg=42, lineno=481)
         290	LOAD_GLOBAL(arg=0, lineno=482)
         292	LOAD_METHOD(arg=4, lineno=482)
         294	LOAD_FAST(arg=42, lineno=482)
         296	LOAD_CONST(arg=4, lineno=482)
         298	CALL_METHOD(arg=2, lineno=482)
         300	STORE_FAST(arg=43, lineno=482)
         302	LOAD_CONST(arg=2, lineno=483)
         304	LOAD_FAST(arg=43, lineno=483)
         306	LOAD_CONST(arg=2, lineno=483)
         308	STORE_SUBSCR(arg=None, lineno=483)
         310	LOAD_GLOBAL(arg=5, lineno=486)
         312	LOAD_FAST(arg=6, lineno=486)
         314	CALL_FUNCTION(arg=1, lineno=486)
         316	GET_ITER(arg=None, lineno=486)
>        318	FOR_ITER(arg=392, lineno=486)
         322	STORE_FAST(arg=44, lineno=486)
         324	LOAD_FAST(arg=0, lineno=487)
         326	LOAD_FAST(arg=44, lineno=487)
         328	BINARY_SUBSCR(arg=None, lineno=487)
         330	STORE_FAST(arg=45, lineno=487)
         332	LOAD_FAST(arg=43, lineno=488)
         334	LOAD_FAST(arg=44, lineno=488)
         336	BINARY_SUBSCR(arg=None, lineno=488)
         338	STORE_FAST(arg=46, lineno=488)
         340	LOAD_FAST(arg=24, lineno=489)
         342	STORE_FAST(arg=47, lineno=489)
         344	LOAD_FAST(arg=25, lineno=490)
         346	STORE_FAST(arg=48, lineno=490)
         348	LOAD_FAST(arg=46, lineno=493)
         350	LOAD_CONST(arg=4, lineno=493)
         352	COMPARE_OP(arg=2, lineno=493)
         354	POP_JUMP_IF_FALSE(arg=362, lineno=493)
         358	LOAD_CONST(arg=4, lineno=494)
         360	STORE_FAST(arg=24, lineno=494)
>        362	LOAD_FAST(arg=46, lineno=495)
         364	LOAD_CONST(arg=5, lineno=495)
         366	COMPARE_OP(arg=2, lineno=495)
         368	POP_JUMP_IF_FALSE(arg=376, lineno=495)
         372	LOAD_CONST(arg=2, lineno=496)
         374	STORE_FAST(arg=24, lineno=496)
>        376	LOAD_FAST(arg=24, lineno=498)
         378	LOAD_FAST(arg=13, lineno=498)
         380	LOAD_FAST(arg=44, lineno=498)
         382	STORE_SUBSCR(arg=None, lineno=498)
         384	LOAD_GLOBAL(arg=6, lineno=501)
         386	LOAD_FAST(arg=25, lineno=502)
         388	LOAD_FAST(arg=45, lineno=502)
         390	LOAD_FAST(arg=24, lineno=502)
         392	LOAD_FAST(arg=47, lineno=502)
         394	LOAD_FAST(arg=8, lineno=502)
         396	LOAD_FAST(arg=38, lineno=502)
         398	CALL_FUNCTION(arg=6, lineno=501)
         400	STORE_FAST(arg=25, lineno=501)
         402	LOAD_GLOBAL(arg=7, lineno=505)
         404	LOAD_FAST(arg=26, lineno=506)
         406	LOAD_FAST(arg=45, lineno=506)
         408	LOAD_FAST(arg=24, lineno=506)
         410	LOAD_FAST(arg=47, lineno=506)
         412	LOAD_FAST(arg=8, lineno=506)
         414	LOAD_FAST(arg=38, lineno=506)
         416	CALL_FUNCTION(arg=6, lineno=505)
         418	STORE_FAST(arg=26, lineno=505)
         420	LOAD_GLOBAL(arg=8, lineno=509)
         422	LOAD_FAST(arg=27, lineno=510)
         424	LOAD_FAST(arg=10, lineno=510)
         426	LOAD_FAST(arg=32, lineno=510)
         428	LOAD_FAST(arg=45, lineno=510)
         430	LOAD_FAST(arg=24, lineno=510)
         432	LOAD_FAST(arg=47, lineno=510)
         434	CALL_FUNCTION(arg=6, lineno=509)
         436	STORE_FAST(arg=27, lineno=509)
         438	LOAD_GLOBAL(arg=9, lineno=513)
         440	LOAD_FAST(arg=28, lineno=514)
         442	LOAD_FAST(arg=10, lineno=514)
         444	LOAD_FAST(arg=33, lineno=514)
         446	LOAD_FAST(arg=45, lineno=514)
         448	LOAD_FAST(arg=24, lineno=514)
         450	LOAD_FAST(arg=47, lineno=514)
         452	CALL_FUNCTION(arg=6, lineno=513)
         454	STORE_FAST(arg=28, lineno=513)
         456	LOAD_GLOBAL(arg=10, lineno=517)
         458	LOAD_FAST(arg=29, lineno=518)
         460	LOAD_FAST(arg=24, lineno=518)
         462	LOAD_FAST(arg=47, lineno=518)
         464	LOAD_FAST(arg=27, lineno=518)
         466	LOAD_FAST(arg=45, lineno=518)
         468	LOAD_FAST(arg=32, lineno=518)
         470	LOAD_FAST(arg=25, lineno=518)
         472	CALL_FUNCTION(arg=7, lineno=517)
         474	STORE_FAST(arg=29, lineno=517)
         476	LOAD_GLOBAL(arg=11, lineno=521)
         478	LOAD_FAST(arg=30, lineno=522)
         480	LOAD_FAST(arg=24, lineno=522)
         482	LOAD_FAST(arg=47, lineno=522)
         484	LOAD_FAST(arg=27, lineno=522)
         486	LOAD_FAST(arg=28, lineno=522)
         488	LOAD_FAST(arg=33, lineno=522)
         490	LOAD_FAST(arg=48, lineno=522)
         492	LOAD_FAST(arg=26, lineno=522)
         494	CALL_FUNCTION(arg=8, lineno=521)
         496	STORE_FAST(arg=30, lineno=521)
         498	LOAD_GLOBAL(arg=12, lineno=525)
         500	LOAD_FAST(arg=31, lineno=526)
         502	LOAD_FAST(arg=24, lineno=526)
         504	LOAD_FAST(arg=47, lineno=526)
         506	LOAD_FAST(arg=45, lineno=526)
         508	LOAD_FAST(arg=33, lineno=526)
         510	LOAD_FAST(arg=48, lineno=526)
         512	CALL_FUNCTION(arg=6, lineno=525)
         514	STORE_FAST(arg=31, lineno=525)
         516	LOAD_FAST(arg=31, lineno=529)
         518	LOAD_CONST(arg=2, lineno=529)
         520	COMPARE_OP(arg=4, lineno=529)
         522	POP_JUMP_IF_FALSE(arg=534, lineno=529)
         526	LOAD_FAST(arg=34, lineno=530)
         528	LOAD_FAST(arg=31, lineno=530)
         530	BINARY_ADD(arg=None, lineno=530)
         532	STORE_FAST(arg=34, lineno=530)
>        534	LOAD_FAST(arg=31, lineno=533)
         536	LOAD_CONST(arg=2, lineno=533)
         538	COMPARE_OP(arg=0, lineno=533)
         540	POP_JUMP_IF_FALSE(arg=552, lineno=533)
         544	LOAD_FAST(arg=35, lineno=534)
         546	LOAD_FAST(arg=31, lineno=534)
         548	BINARY_ADD(arg=None, lineno=534)
         550	STORE_FAST(arg=35, lineno=534)
>        552	LOAD_FAST(arg=24, lineno=537)
         554	LOAD_CONST(arg=4, lineno=537)
         556	COMPARE_OP(arg=2, lineno=537)
         558	POP_JUMP_IF_FALSE(arg=582, lineno=537)
         562	LOAD_FAST(arg=47, lineno=537)
         564	LOAD_CONST(arg=2, lineno=537)
         566	COMPARE_OP(arg=2, lineno=537)
         568	POP_JUMP_IF_FALSE(arg=582, lineno=537)
         572	LOAD_FAST(arg=36, lineno=538)
         574	LOAD_FAST(arg=27, lineno=538)
         576	BINARY_ADD(arg=None, lineno=538)
         578	STORE_FAST(arg=36, lineno=538)
         580	JUMP_FORWARD(arg=28, lineno=538)
>        582	LOAD_FAST(arg=24, lineno=539)
         584	LOAD_CONST(arg=2, lineno=539)
         586	COMPARE_OP(arg=2, lineno=539)
         588	POP_JUMP_IF_FALSE(arg=610, lineno=539)
         592	LOAD_FAST(arg=47, lineno=539)
         594	LOAD_CONST(arg=4, lineno=539)
         596	COMPARE_OP(arg=2, lineno=539)
         598	POP_JUMP_IF_FALSE(arg=610, lineno=539)
         602	LOAD_FAST(arg=36, lineno=540)
         604	LOAD_FAST(arg=28, lineno=540)
         606	BINARY_ADD(arg=None, lineno=540)
         608	STORE_FAST(arg=36, lineno=540)
>        610	LOAD_FAST(arg=7, lineno=543)
         612	LOAD_FAST(arg=36, lineno=543)
         614	BINARY_SUBTRACT(arg=None, lineno=543)
         616	LOAD_FAST(arg=34, lineno=543)
         618	BINARY_ADD(arg=None, lineno=543)
         620	LOAD_FAST(arg=35, lineno=543)
         622	BINARY_ADD(arg=None, lineno=543)
         624	LOAD_FAST(arg=29, lineno=543)
         626	BINARY_ADD(arg=None, lineno=543)
         628	STORE_FAST(arg=37, lineno=543)
         630	LOAD_FAST(arg=25, lineno=546)
         632	LOAD_FAST(arg=14, lineno=546)
         634	LOAD_FAST(arg=44, lineno=546)
         636	STORE_SUBSCR(arg=None, lineno=546)
         638	LOAD_FAST(arg=27, lineno=547)
         640	LOAD_FAST(arg=15, lineno=547)
         642	LOAD_FAST(arg=44, lineno=547)
         644	STORE_SUBSCR(arg=None, lineno=547)
         646	LOAD_FAST(arg=28, lineno=548)
         648	LOAD_FAST(arg=16, lineno=548)
         650	LOAD_FAST(arg=44, lineno=548)
         652	STORE_SUBSCR(arg=None, lineno=548)
         654	LOAD_FAST(arg=29, lineno=549)
         656	LOAD_FAST(arg=17, lineno=549)
         658	LOAD_FAST(arg=44, lineno=549)
         660	STORE_SUBSCR(arg=None, lineno=549)
         662	LOAD_FAST(arg=30, lineno=550)
         664	LOAD_FAST(arg=18, lineno=550)
         666	LOAD_FAST(arg=44, lineno=550)
         668	STORE_SUBSCR(arg=None, lineno=550)
         670	LOAD_FAST(arg=31, lineno=551)
         672	LOAD_FAST(arg=19, lineno=551)
         674	LOAD_FAST(arg=44, lineno=551)
         676	STORE_SUBSCR(arg=None, lineno=551)
         678	LOAD_FAST(arg=34, lineno=552)
         680	LOAD_FAST(arg=20, lineno=552)
         682	LOAD_FAST(arg=44, lineno=552)
         684	STORE_SUBSCR(arg=None, lineno=552)
         686	LOAD_FAST(arg=35, lineno=553)
         688	LOAD_FAST(arg=21, lineno=553)
         690	LOAD_FAST(arg=44, lineno=553)
         692	STORE_SUBSCR(arg=None, lineno=553)
         694	LOAD_FAST(arg=36, lineno=554)
         696	LOAD_FAST(arg=22, lineno=554)
         698	LOAD_FAST(arg=44, lineno=554)
         700	STORE_SUBSCR(arg=None, lineno=554)
         702	LOAD_FAST(arg=37, lineno=555)
         704	LOAD_FAST(arg=23, lineno=555)
         706	LOAD_FAST(arg=44, lineno=555)
         708	STORE_SUBSCR(arg=None, lineno=555)
         710	JUMP_ABSOLUTE(arg=318, lineno=555)
>        714	LOAD_GLOBAL(arg=13, lineno=561)
         716	LOAD_FAST(arg=13, lineno=561)
         718	CALL_FUNCTION(arg=1, lineno=561)
         720	STORE_FAST(arg=49, lineno=561)
         722	LOAD_FAST(arg=49, lineno=562)
         724	LOAD_FAST(arg=13, lineno=562)
         726	LOAD_FAST(arg=14, lineno=562)
         728	LOAD_FAST(arg=15, lineno=562)
         730	LOAD_FAST(arg=16, lineno=562)
         732	LOAD_FAST(arg=17, lineno=562)
         734	LOAD_FAST(arg=18, lineno=562)
         736	LOAD_FAST(arg=19, lineno=562)
         738	LOAD_FAST(arg=20, lineno=562)
         740	LOAD_FAST(arg=21, lineno=562)
         742	LOAD_FAST(arg=22, lineno=562)
         744	LOAD_FAST(arg=23, lineno=562)
         746	BUILD_TUPLE(arg=12, lineno=562)
         748	RETURN_VALUE(arg=None, lineno=562)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=438)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=438)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=438)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=6, lineno=438)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=438)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$Length6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION_KW(arg=1, lineno=438)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$Length6.2', '$const8.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=STORE_FAST(arg=13, lineno=438)
2023-01-02 21:03 DEBUG stack ['$10call_function_kw.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=439)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=439)
2023-01-02 21:03 DEBUG stack ['$14load_global.5']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=6, lineno=439)
2023-01-02 21:03 DEBUG stack ['$16load_attr.6']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=439)
2023-01-02 21:03 DEBUG stack ['$16load_attr.6', '$Length18.7']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=CALL_FUNCTION_KW(arg=1, lineno=439)
2023-01-02 21:03 DEBUG stack ['$16load_attr.6', '$Length18.7', '$const20.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=STORE_FAST(arg=14, lineno=439)
2023-01-02 21:03 DEBUG stack ['$22call_function_kw.9']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=440)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_ATTR(arg=1, lineno=440)
2023-01-02 21:03 DEBUG stack ['$26load_global.10']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=6, lineno=440)
2023-01-02 21:03 DEBUG stack ['$28load_attr.11']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=440)
2023-01-02 21:03 DEBUG stack ['$28load_attr.11', '$Length30.12']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=CALL_FUNCTION_KW(arg=1, lineno=440)
2023-01-02 21:03 DEBUG stack ['$28load_attr.11', '$Length30.12', '$const32.13']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=STORE_FAST(arg=15, lineno=440)
2023-01-02 21:03 DEBUG stack ['$34call_function_kw.14']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=441)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=1, lineno=441)
2023-01-02 21:03 DEBUG stack ['$38load_global.15']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=6, lineno=441)
2023-01-02 21:03 DEBUG stack ['$40load_attr.16']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=441)
2023-01-02 21:03 DEBUG stack ['$40load_attr.16', '$Length42.17']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=CALL_FUNCTION_KW(arg=1, lineno=441)
2023-01-02 21:03 DEBUG stack ['$40load_attr.16', '$Length42.17', '$const44.18']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=STORE_FAST(arg=16, lineno=441)
2023-01-02 21:03 DEBUG stack ['$46call_function_kw.19']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=442)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_ATTR(arg=1, lineno=442)
2023-01-02 21:03 DEBUG stack ['$50load_global.20']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=6, lineno=442)
2023-01-02 21:03 DEBUG stack ['$52load_attr.21']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_CONST(arg=1, lineno=442)
2023-01-02 21:03 DEBUG stack ['$52load_attr.21', '$Length54.22']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=CALL_FUNCTION_KW(arg=1, lineno=442)
2023-01-02 21:03 DEBUG stack ['$52load_attr.21', '$Length54.22', '$const56.23']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=STORE_FAST(arg=17, lineno=442)
2023-01-02 21:03 DEBUG stack ['$58call_function_kw.24']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_GLOBAL(arg=0, lineno=443)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=443)
2023-01-02 21:03 DEBUG stack ['$62load_global.25']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=443)
2023-01-02 21:03 DEBUG stack ['$64load_attr.26']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=443)
2023-01-02 21:03 DEBUG stack ['$64load_attr.26', '$Length66.27']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=CALL_FUNCTION_KW(arg=1, lineno=443)
2023-01-02 21:03 DEBUG stack ['$64load_attr.26', '$Length66.27', '$const68.28']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=STORE_FAST(arg=18, lineno=443)
2023-01-02 21:03 DEBUG stack ['$70call_function_kw.29']
2023-01-02 21:03 DEBUG dispatch pc=74, inst=LOAD_GLOBAL(arg=0, lineno=444)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=76, inst=LOAD_ATTR(arg=1, lineno=444)
2023-01-02 21:03 DEBUG stack ['$74load_global.30']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=LOAD_FAST(arg=6, lineno=444)
2023-01-02 21:03 DEBUG stack ['$76load_attr.31']
2023-01-02 21:03 DEBUG dispatch pc=80, inst=LOAD_CONST(arg=1, lineno=444)
2023-01-02 21:03 DEBUG stack ['$76load_attr.31', '$Length78.32']
2023-01-02 21:03 DEBUG dispatch pc=82, inst=CALL_FUNCTION_KW(arg=1, lineno=444)
2023-01-02 21:03 DEBUG stack ['$76load_attr.31', '$Length78.32', '$const80.33']
2023-01-02 21:03 DEBUG dispatch pc=84, inst=STORE_FAST(arg=19, lineno=444)
2023-01-02 21:03 DEBUG stack ['$82call_function_kw.34']
2023-01-02 21:03 DEBUG dispatch pc=86, inst=LOAD_GLOBAL(arg=0, lineno=445)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=88, inst=LOAD_ATTR(arg=1, lineno=445)
2023-01-02 21:03 DEBUG stack ['$86load_global.35']
2023-01-02 21:03 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=445)
2023-01-02 21:03 DEBUG stack ['$88load_attr.36']
2023-01-02 21:03 DEBUG dispatch pc=92, inst=LOAD_CONST(arg=1, lineno=445)
2023-01-02 21:03 DEBUG stack ['$88load_attr.36', '$Length90.37']
2023-01-02 21:03 DEBUG dispatch pc=94, inst=CALL_FUNCTION_KW(arg=1, lineno=445)
2023-01-02 21:03 DEBUG stack ['$88load_attr.36', '$Length90.37', '$const92.38']
2023-01-02 21:03 DEBUG dispatch pc=96, inst=STORE_FAST(arg=20, lineno=445)
2023-01-02 21:03 DEBUG stack ['$94call_function_kw.39']
2023-01-02 21:03 DEBUG dispatch pc=98, inst=LOAD_GLOBAL(arg=0, lineno=446)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=100, inst=LOAD_ATTR(arg=1, lineno=446)
2023-01-02 21:03 DEBUG stack ['$98load_global.40']
2023-01-02 21:03 DEBUG dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=446)
2023-01-02 21:03 DEBUG stack ['$100load_attr.41']
2023-01-02 21:03 DEBUG dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=446)
2023-01-02 21:03 DEBUG stack ['$100load_attr.41', '$Length102.42']
2023-01-02 21:03 DEBUG dispatch pc=106, inst=CALL_FUNCTION_KW(arg=1, lineno=446)
2023-01-02 21:03 DEBUG stack ['$100load_attr.41', '$Length102.42', '$const104.43']
2023-01-02 21:03 DEBUG dispatch pc=108, inst=STORE_FAST(arg=21, lineno=446)
2023-01-02 21:03 DEBUG stack ['$106call_function_kw.44']
2023-01-02 21:03 DEBUG dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=447)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=112, inst=LOAD_ATTR(arg=1, lineno=447)
2023-01-02 21:03 DEBUG stack ['$110load_global.45']
2023-01-02 21:03 DEBUG dispatch pc=114, inst=LOAD_FAST(arg=6, lineno=447)
2023-01-02 21:03 DEBUG stack ['$112load_attr.46']
2023-01-02 21:03 DEBUG dispatch pc=116, inst=LOAD_CONST(arg=1, lineno=447)
2023-01-02 21:03 DEBUG stack ['$112load_attr.46', '$Length114.47']
2023-01-02 21:03 DEBUG dispatch pc=118, inst=CALL_FUNCTION_KW(arg=1, lineno=447)
2023-01-02 21:03 DEBUG stack ['$112load_attr.46', '$Length114.47', '$const116.48']
2023-01-02 21:03 DEBUG dispatch pc=120, inst=STORE_FAST(arg=22, lineno=447)
2023-01-02 21:03 DEBUG stack ['$118call_function_kw.49']
2023-01-02 21:03 DEBUG dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=448)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=124, inst=LOAD_ATTR(arg=1, lineno=448)
2023-01-02 21:03 DEBUG stack ['$122load_global.50']
2023-01-02 21:03 DEBUG dispatch pc=126, inst=LOAD_FAST(arg=6, lineno=448)
2023-01-02 21:03 DEBUG stack ['$124load_attr.51']
2023-01-02 21:03 DEBUG dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=448)
2023-01-02 21:03 DEBUG stack ['$124load_attr.51', '$Length126.52']
2023-01-02 21:03 DEBUG dispatch pc=130, inst=CALL_FUNCTION_KW(arg=1, lineno=448)
2023-01-02 21:03 DEBUG stack ['$124load_attr.51', '$Length126.52', '$const128.53']
2023-01-02 21:03 DEBUG dispatch pc=132, inst=STORE_FAST(arg=23, lineno=448)
2023-01-02 21:03 DEBUG stack ['$130call_function_kw.54']
2023-01-02 21:03 DEBUG dispatch pc=134, inst=LOAD_CONST(arg=2, lineno=451)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=136, inst=STORE_FAST(arg=24, lineno=451)
2023-01-02 21:03 DEBUG stack ['$const134.55']
2023-01-02 21:03 DEBUG dispatch pc=138, inst=LOAD_CONST(arg=2, lineno=452)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=140, inst=STORE_FAST(arg=25, lineno=452)
2023-01-02 21:03 DEBUG stack ['$const138.56']
2023-01-02 21:03 DEBUG dispatch pc=142, inst=LOAD_CONST(arg=2, lineno=453)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=144, inst=STORE_FAST(arg=26, lineno=453)
2023-01-02 21:03 DEBUG stack ['$const142.57']
2023-01-02 21:03 DEBUG dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=454)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=148, inst=STORE_FAST(arg=27, lineno=454)
2023-01-02 21:03 DEBUG stack ['$const146.58']
2023-01-02 21:03 DEBUG dispatch pc=150, inst=LOAD_CONST(arg=2, lineno=455)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=152, inst=STORE_FAST(arg=28, lineno=455)
2023-01-02 21:03 DEBUG stack ['$const150.59']
2023-01-02 21:03 DEBUG dispatch pc=154, inst=LOAD_CONST(arg=2, lineno=456)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=156, inst=STORE_FAST(arg=29, lineno=456)
2023-01-02 21:03 DEBUG stack ['$const154.60']
2023-01-02 21:03 DEBUG dispatch pc=158, inst=LOAD_FAST(arg=7, lineno=457)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=160, inst=STORE_FAST(arg=30, lineno=457)
2023-01-02 21:03 DEBUG stack ['$init_cash158.61']
2023-01-02 21:03 DEBUG dispatch pc=162, inst=LOAD_CONST(arg=2, lineno=458)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=164, inst=STORE_FAST(arg=31, lineno=458)
2023-01-02 21:03 DEBUG stack ['$const162.62']
2023-01-02 21:03 DEBUG dispatch pc=166, inst=LOAD_FAST(arg=9, lineno=459)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=168, inst=STORE_FAST(arg=32, lineno=459)
2023-01-02 21:03 DEBUG stack ['$size166.63']
2023-01-02 21:03 DEBUG dispatch pc=170, inst=LOAD_FAST(arg=9, lineno=460)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=172, inst=STORE_FAST(arg=33, lineno=460)
2023-01-02 21:03 DEBUG stack ['$size170.64']
2023-01-02 21:03 DEBUG dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=461)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=176, inst=STORE_FAST(arg=34, lineno=461)
2023-01-02 21:03 DEBUG stack ['$const174.65']
2023-01-02 21:03 DEBUG dispatch pc=178, inst=LOAD_CONST(arg=2, lineno=462)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=180, inst=STORE_FAST(arg=35, lineno=462)
2023-01-02 21:03 DEBUG stack ['$const178.66']
2023-01-02 21:03 DEBUG dispatch pc=182, inst=LOAD_CONST(arg=2, lineno=463)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=184, inst=STORE_FAST(arg=36, lineno=463)
2023-01-02 21:03 DEBUG stack ['$const182.67']
2023-01-02 21:03 DEBUG dispatch pc=186, inst=LOAD_CONST(arg=2, lineno=464)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=188, inst=STORE_FAST(arg=37, lineno=464)
2023-01-02 21:03 DEBUG stack ['$const186.68']
2023-01-02 21:03 DEBUG dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=467)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=192, inst=STORE_FAST(arg=8, lineno=467)
2023-01-02 21:03 DEBUG stack ['$slippage190.69']
2023-01-02 21:03 DEBUG dispatch pc=194, inst=LOAD_FAST(arg=10, lineno=468)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=196, inst=STORE_FAST(arg=10, lineno=468)
2023-01-02 21:03 DEBUG stack ['$fee194.70']
2023-01-02 21:03 DEBUG dispatch pc=198, inst=LOAD_CONST(arg=3, lineno=469)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=200, inst=STORE_FAST(arg=38, lineno=469)
2023-01-02 21:03 DEBUG stack ['$const198.71']
2023-01-02 21:03 DEBUG dispatch pc=202, inst=LOAD_GLOBAL(arg=2, lineno=472)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=204, inst=LOAD_FAST(arg=6, lineno=473)
2023-01-02 21:03 DEBUG stack ['$202load_global.72']
2023-01-02 21:03 DEBUG dispatch pc=206, inst=LOAD_FAST(arg=1, lineno=473)
2023-01-02 21:03 DEBUG stack ['$202load_global.72', '$Length204.73']
2023-01-02 21:03 DEBUG dispatch pc=208, inst=LOAD_FAST(arg=2, lineno=473)
2023-01-02 21:03 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74']
2023-01-02 21:03 DEBUG dispatch pc=210, inst=LOAD_FAST(arg=3, lineno=473)
2023-01-02 21:03 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74', '$low_array208.75']
2023-01-02 21:03 DEBUG dispatch pc=212, inst=LOAD_FAST(arg=11, lineno=473)
2023-01-02 21:03 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74', '$low_array208.75', '$close_array210.76']
2023-01-02 21:03 DEBUG dispatch pc=214, inst=CALL_FUNCTION(arg=5, lineno=472)
2023-01-02 21:03 DEBUG stack ['$202load_global.72', '$Length204.73', '$high_array206.74', '$low_array208.75', '$close_array210.76', '$ATR_short1212.77']
2023-01-02 21:03 DEBUG dispatch pc=216, inst=STORE_FAST(arg=39, lineno=472)
2023-01-02 21:03 DEBUG stack ['$214call_function.78']
2023-01-02 21:03 DEBUG dispatch pc=218, inst=LOAD_GLOBAL(arg=2, lineno=475)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=220, inst=LOAD_FAST(arg=6, lineno=476)
2023-01-02 21:03 DEBUG stack ['$218load_global.79']
2023-01-02 21:03 DEBUG dispatch pc=222, inst=LOAD_FAST(arg=1, lineno=476)
2023-01-02 21:03 DEBUG stack ['$218load_global.79', '$Length220.80']
2023-01-02 21:03 DEBUG dispatch pc=224, inst=LOAD_FAST(arg=2, lineno=476)
2023-01-02 21:03 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81']
2023-01-02 21:03 DEBUG dispatch pc=226, inst=LOAD_FAST(arg=3, lineno=476)
2023-01-02 21:03 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81', '$low_array224.82']
2023-01-02 21:03 DEBUG dispatch pc=228, inst=LOAD_FAST(arg=12, lineno=476)
2023-01-02 21:03 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81', '$low_array224.82', '$close_array226.83']
2023-01-02 21:03 DEBUG dispatch pc=230, inst=CALL_FUNCTION(arg=5, lineno=475)
2023-01-02 21:03 DEBUG stack ['$218load_global.79', '$Length220.80', '$high_array222.81', '$low_array224.82', '$close_array226.83', '$ATR_long2228.84']
2023-01-02 21:03 DEBUG dispatch pc=232, inst=STORE_FAST(arg=40, lineno=475)
2023-01-02 21:03 DEBUG stack ['$230call_function.85']
2023-01-02 21:03 DEBUG dispatch pc=234, inst=LOAD_GLOBAL(arg=0, lineno=479)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=236, inst=LOAD_METHOD(arg=3, lineno=479)
2023-01-02 21:03 DEBUG stack ['$234load_global.86']
2023-01-02 21:03 DEBUG dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=479)
2023-01-02 21:03 DEBUG stack ['$236load_method.87']
2023-01-02 21:03 DEBUG dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=479)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$high_array238.88']
2023-01-02 21:03 DEBUG dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=479)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$high_array238.88', '$highestarr240.89']
2023-01-02 21:03 DEBUG dispatch pc=244, inst=LOAD_CONST(arg=2, lineno=479)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$242binary_subtract.90']
2023-01-02 21:03 DEBUG dispatch pc=246, inst=COMPARE_OP(arg=4, lineno=479)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$242binary_subtract.90', '$const244.91']
2023-01-02 21:03 DEBUG dispatch pc=248, inst=LOAD_FAST(arg=39, lineno=480)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$246compare_op.92']
2023-01-02 21:03 DEBUG dispatch pc=250, inst=LOAD_FAST(arg=40, lineno=480)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$246compare_op.92', '$ATR_short248.93']
2023-01-02 21:03 DEBUG dispatch pc=252, inst=BINARY_SUBTRACT(arg=None, lineno=480)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$246compare_op.92', '$ATR_short248.93', '$ATR_long250.94']
2023-01-02 21:03 DEBUG dispatch pc=254, inst=LOAD_CONST(arg=2, lineno=480)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$246compare_op.92', '$252binary_subtract.95']
2023-01-02 21:03 DEBUG dispatch pc=256, inst=COMPARE_OP(arg=4, lineno=480)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$246compare_op.92', '$252binary_subtract.95', '$const254.96']
2023-01-02 21:03 DEBUG dispatch pc=258, inst=BINARY_AND(arg=None, lineno=479)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$246compare_op.92', '$256compare_op.97']
2023-01-02 21:03 DEBUG dispatch pc=260, inst=LOAD_CONST(arg=4, lineno=480)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$258binary_and.98']
2023-01-02 21:03 DEBUG dispatch pc=262, inst=LOAD_CONST(arg=2, lineno=480)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$258binary_and.98', '$const260.99']
2023-01-02 21:03 DEBUG dispatch pc=264, inst=CALL_METHOD(arg=3, lineno=479)
2023-01-02 21:03 DEBUG stack ['$236load_method.87', '$258binary_and.98', '$const260.99', '$const262.100']
2023-01-02 21:03 DEBUG dispatch pc=266, inst=STORE_FAST(arg=41, lineno=479)
2023-01-02 21:03 DEBUG stack ['$264call_method.101']
2023-01-02 21:03 DEBUG dispatch pc=268, inst=LOAD_GLOBAL(arg=0, lineno=481)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=270, inst=LOAD_METHOD(arg=3, lineno=481)
2023-01-02 21:03 DEBUG stack ['$268load_global.102']
2023-01-02 21:03 DEBUG dispatch pc=272, inst=LOAD_FAST(arg=2, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103']
2023-01-02 21:03 DEBUG dispatch pc=274, inst=LOAD_FAST(arg=5, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103', '$low_array272.104']
2023-01-02 21:03 DEBUG dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103', '$low_array272.104', '$lowestarr274.105']
2023-01-02 21:03 DEBUG dispatch pc=278, inst=LOAD_CONST(arg=2, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103', '$276binary_subtract.106']
2023-01-02 21:03 DEBUG dispatch pc=280, inst=COMPARE_OP(arg=0, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103', '$276binary_subtract.106', '$const278.107']
2023-01-02 21:03 DEBUG dispatch pc=282, inst=LOAD_CONST(arg=5, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103', '$280compare_op.108']
2023-01-02 21:03 DEBUG dispatch pc=284, inst=LOAD_FAST(arg=41, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103', '$280compare_op.108', '$const282.109']
2023-01-02 21:03 DEBUG dispatch pc=286, inst=CALL_METHOD(arg=3, lineno=481)
2023-01-02 21:03 DEBUG stack ['$270load_method.103', '$280compare_op.108', '$const282.109', '$trends284.110']
2023-01-02 21:03 DEBUG dispatch pc=288, inst=STORE_FAST(arg=42, lineno=481)
2023-01-02 21:03 DEBUG stack ['$286call_method.111']
2023-01-02 21:03 DEBUG dispatch pc=290, inst=LOAD_GLOBAL(arg=0, lineno=482)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=292, inst=LOAD_METHOD(arg=4, lineno=482)
2023-01-02 21:03 DEBUG stack ['$290load_global.112']
2023-01-02 21:03 DEBUG dispatch pc=294, inst=LOAD_FAST(arg=42, lineno=482)
2023-01-02 21:03 DEBUG stack ['$292load_method.113']
2023-01-02 21:03 DEBUG dispatch pc=296, inst=LOAD_CONST(arg=4, lineno=482)
2023-01-02 21:03 DEBUG stack ['$292load_method.113', '$orders294.114']
2023-01-02 21:03 DEBUG dispatch pc=298, inst=CALL_METHOD(arg=2, lineno=482)
2023-01-02 21:03 DEBUG stack ['$292load_method.113', '$orders294.114', '$const296.115']
2023-01-02 21:03 DEBUG dispatch pc=300, inst=STORE_FAST(arg=43, lineno=482)
2023-01-02 21:03 DEBUG stack ['$298call_method.116']
2023-01-02 21:03 DEBUG dispatch pc=302, inst=LOAD_CONST(arg=2, lineno=483)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=304, inst=LOAD_FAST(arg=43, lineno=483)
2023-01-02 21:03 DEBUG stack ['$const302.117']
2023-01-02 21:03 DEBUG dispatch pc=306, inst=LOAD_CONST(arg=2, lineno=483)
2023-01-02 21:03 DEBUG stack ['$const302.117', '$shiftorder304.118']
2023-01-02 21:03 DEBUG dispatch pc=308, inst=STORE_SUBSCR(arg=None, lineno=483)
2023-01-02 21:03 DEBUG stack ['$const302.117', '$shiftorder304.118', '$const306.119']
2023-01-02 21:03 DEBUG dispatch pc=310, inst=LOAD_GLOBAL(arg=5, lineno=486)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=312, inst=LOAD_FAST(arg=6, lineno=486)
2023-01-02 21:03 DEBUG stack ['$310load_global.120']
2023-01-02 21:03 DEBUG dispatch pc=314, inst=CALL_FUNCTION(arg=1, lineno=486)
2023-01-02 21:03 DEBUG stack ['$310load_global.120', '$Length312.121']
2023-01-02 21:03 DEBUG dispatch pc=316, inst=GET_ITER(arg=None, lineno=486)
2023-01-02 21:03 DEBUG stack ['$314call_function.122']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=318, stack=('$316get_iter.123',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=318 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi318.0']
2023-01-02 21:03 DEBUG dispatch pc=318, inst=FOR_ITER(arg=392, lineno=486)
2023-01-02 21:03 DEBUG stack ['$phi318.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=714, stack=(), blockstack=(), npush=0), Edge(pc=322, stack=('$phi318.0', '$318for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=714 nstack_initial=0), State(pc_initial=322 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=714, inst=LOAD_GLOBAL(arg=13, lineno=561)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=716, inst=LOAD_FAST(arg=13, lineno=561)
2023-01-02 21:03 DEBUG stack ['$714load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=718, inst=CALL_FUNCTION(arg=1, lineno=561)
2023-01-02 21:03 DEBUG stack ['$714load_global.0', '$marketpostion_array716.1']
2023-01-02 21:03 DEBUG dispatch pc=720, inst=STORE_FAST(arg=49, lineno=561)
2023-01-02 21:03 DEBUG stack ['$718call_function.2']
2023-01-02 21:03 DEBUG dispatch pc=722, inst=LOAD_FAST(arg=49, lineno=562)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=724, inst=LOAD_FAST(arg=13, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3']
2023-01-02 21:03 DEBUG dispatch pc=726, inst=LOAD_FAST(arg=14, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4']
2023-01-02 21:03 DEBUG dispatch pc=728, inst=LOAD_FAST(arg=15, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5']
2023-01-02 21:03 DEBUG dispatch pc=730, inst=LOAD_FAST(arg=16, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6']
2023-01-02 21:03 DEBUG dispatch pc=732, inst=LOAD_FAST(arg=17, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7']
2023-01-02 21:03 DEBUG dispatch pc=734, inst=LOAD_FAST(arg=18, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8']
2023-01-02 21:03 DEBUG dispatch pc=736, inst=LOAD_FAST(arg=19, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8', '$ClosedPostionprofit_array734.9']
2023-01-02 21:03 DEBUG dispatch pc=738, inst=LOAD_FAST(arg=20, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8', '$ClosedPostionprofit_array734.9', '$profit_array736.10']
2023-01-02 21:03 DEBUG dispatch pc=740, inst=LOAD_FAST(arg=21, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8', '$ClosedPostionprofit_array734.9', '$profit_array736.10', '$Gross_profit_array738.11']
2023-01-02 21:03 DEBUG dispatch pc=742, inst=LOAD_FAST(arg=22, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8', '$ClosedPostionprofit_array734.9', '$profit_array736.10', '$Gross_profit_array738.11', '$Gross_loss_array740.12']
2023-01-02 21:03 DEBUG dispatch pc=744, inst=LOAD_FAST(arg=23, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8', '$ClosedPostionprofit_array734.9', '$profit_array736.10', '$Gross_profit_array738.11', '$Gross_loss_array740.12', '$all_Fees_array742.13']
2023-01-02 21:03 DEBUG dispatch pc=746, inst=BUILD_TUPLE(arg=12, lineno=562)
2023-01-02 21:03 DEBUG stack ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8', '$ClosedPostionprofit_array734.9', '$profit_array736.10', '$Gross_profit_array738.11', '$Gross_loss_array740.12', '$all_Fees_array742.13', '$netprofit_array744.14']
2023-01-02 21:03 DEBUG dispatch pc=748, inst=RETURN_VALUE(arg=None, lineno=562)
2023-01-02 21:03 DEBUG stack ['$746build_tuple.15']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=322 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi322.0', '$phi322.1']
2023-01-02 21:03 DEBUG dispatch pc=322, inst=STORE_FAST(arg=44, lineno=486)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$phi322.1']
2023-01-02 21:03 DEBUG dispatch pc=324, inst=LOAD_FAST(arg=0, lineno=487)
2023-01-02 21:03 DEBUG stack ['$phi322.0']
2023-01-02 21:03 DEBUG dispatch pc=326, inst=LOAD_FAST(arg=44, lineno=487)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$open_array324.2']
2023-01-02 21:03 DEBUG dispatch pc=328, inst=BINARY_SUBSCR(arg=None, lineno=487)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$open_array324.2', '$i326.3']
2023-01-02 21:03 DEBUG dispatch pc=330, inst=STORE_FAST(arg=45, lineno=487)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$328binary_subscr.4']
2023-01-02 21:03 DEBUG dispatch pc=332, inst=LOAD_FAST(arg=43, lineno=488)
2023-01-02 21:03 DEBUG stack ['$phi322.0']
2023-01-02 21:03 DEBUG dispatch pc=334, inst=LOAD_FAST(arg=44, lineno=488)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$shiftorder332.5']
2023-01-02 21:03 DEBUG dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=488)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$shiftorder332.5', '$i334.6']
2023-01-02 21:03 DEBUG dispatch pc=338, inst=STORE_FAST(arg=46, lineno=488)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$336binary_subscr.7']
2023-01-02 21:03 DEBUG dispatch pc=340, inst=LOAD_FAST(arg=24, lineno=489)
2023-01-02 21:03 DEBUG stack ['$phi322.0']
2023-01-02 21:03 DEBUG dispatch pc=342, inst=STORE_FAST(arg=47, lineno=489)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$marketpostion340.8']
2023-01-02 21:03 DEBUG dispatch pc=344, inst=LOAD_FAST(arg=25, lineno=490)
2023-01-02 21:03 DEBUG stack ['$phi322.0']
2023-01-02 21:03 DEBUG dispatch pc=346, inst=STORE_FAST(arg=48, lineno=490)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$entryprice344.9']
2023-01-02 21:03 DEBUG dispatch pc=348, inst=LOAD_FAST(arg=46, lineno=493)
2023-01-02 21:03 DEBUG stack ['$phi322.0']
2023-01-02 21:03 DEBUG dispatch pc=350, inst=LOAD_CONST(arg=4, lineno=493)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$current_order348.10']
2023-01-02 21:03 DEBUG dispatch pc=352, inst=COMPARE_OP(arg=2, lineno=493)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$current_order348.10', '$const350.11']
2023-01-02 21:03 DEBUG dispatch pc=354, inst=POP_JUMP_IF_FALSE(arg=362, lineno=493)
2023-01-02 21:03 DEBUG stack ['$phi322.0', '$352compare_op.12']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=358, stack=('$phi322.0',), blockstack=(), npush=0), Edge(pc=362, stack=('$phi322.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=358 nstack_initial=1), State(pc_initial=362 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi358.0']
2023-01-02 21:03 DEBUG dispatch pc=358, inst=LOAD_CONST(arg=4, lineno=494)
2023-01-02 21:03 DEBUG stack ['$phi358.0']
2023-01-02 21:03 DEBUG dispatch pc=360, inst=STORE_FAST(arg=24, lineno=494)
2023-01-02 21:03 DEBUG stack ['$phi358.0', '$const358.1']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=362, stack=('$phi358.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=362 nstack_initial=1), State(pc_initial=362 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi362.0']
2023-01-02 21:03 DEBUG dispatch pc=362, inst=LOAD_FAST(arg=46, lineno=495)
2023-01-02 21:03 DEBUG stack ['$phi362.0']
2023-01-02 21:03 DEBUG dispatch pc=364, inst=LOAD_CONST(arg=5, lineno=495)
2023-01-02 21:03 DEBUG stack ['$phi362.0', '$current_order362.1']
2023-01-02 21:03 DEBUG dispatch pc=366, inst=COMPARE_OP(arg=2, lineno=495)
2023-01-02 21:03 DEBUG stack ['$phi362.0', '$current_order362.1', '$const364.2']
2023-01-02 21:03 DEBUG dispatch pc=368, inst=POP_JUMP_IF_FALSE(arg=376, lineno=495)
2023-01-02 21:03 DEBUG stack ['$phi362.0', '$366compare_op.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=372, stack=('$phi362.0',), blockstack=(), npush=0), Edge(pc=376, stack=('$phi362.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=362 nstack_initial=1), State(pc_initial=372 nstack_initial=1), State(pc_initial=376 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=372 nstack_initial=1), State(pc_initial=376 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi372.0']
2023-01-02 21:03 DEBUG dispatch pc=372, inst=LOAD_CONST(arg=2, lineno=496)
2023-01-02 21:03 DEBUG stack ['$phi372.0']
2023-01-02 21:03 DEBUG dispatch pc=374, inst=STORE_FAST(arg=24, lineno=496)
2023-01-02 21:03 DEBUG stack ['$phi372.0', '$const372.1']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=376, stack=('$phi372.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=376 nstack_initial=1), State(pc_initial=376 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=376, inst=LOAD_FAST(arg=24, lineno=498)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=378, inst=LOAD_FAST(arg=13, lineno=498)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$marketpostion376.1']
2023-01-02 21:03 DEBUG dispatch pc=380, inst=LOAD_FAST(arg=44, lineno=498)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$marketpostion376.1', '$marketpostion_array378.2']
2023-01-02 21:03 DEBUG dispatch pc=382, inst=STORE_SUBSCR(arg=None, lineno=498)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$marketpostion376.1', '$marketpostion_array378.2', '$i380.3']
2023-01-02 21:03 DEBUG dispatch pc=384, inst=LOAD_GLOBAL(arg=6, lineno=501)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=386, inst=LOAD_FAST(arg=25, lineno=502)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$384load_global.4']
2023-01-02 21:03 DEBUG dispatch pc=388, inst=LOAD_FAST(arg=45, lineno=502)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$384load_global.4', '$entryprice386.5']
2023-01-02 21:03 DEBUG dispatch pc=390, inst=LOAD_FAST(arg=24, lineno=502)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$384load_global.4', '$entryprice386.5', '$Open388.6']
2023-01-02 21:03 DEBUG dispatch pc=392, inst=LOAD_FAST(arg=47, lineno=502)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$384load_global.4', '$entryprice386.5', '$Open388.6', '$marketpostion390.7']
2023-01-02 21:03 DEBUG dispatch pc=394, inst=LOAD_FAST(arg=8, lineno=502)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$384load_global.4', '$entryprice386.5', '$Open388.6', '$marketpostion390.7', '$last_marketpostion392.8']
2023-01-02 21:03 DEBUG dispatch pc=396, inst=LOAD_FAST(arg=38, lineno=502)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$384load_global.4', '$entryprice386.5', '$Open388.6', '$marketpostion390.7', '$last_marketpostion392.8', '$slippage394.9']
2023-01-02 21:03 DEBUG dispatch pc=398, inst=CALL_FUNCTION(arg=6, lineno=501)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$384load_global.4', '$entryprice386.5', '$Open388.6', '$marketpostion390.7', '$last_marketpostion392.8', '$slippage394.9', '$direction396.10']
2023-01-02 21:03 DEBUG dispatch pc=400, inst=STORE_FAST(arg=25, lineno=501)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$398call_function.11']
2023-01-02 21:03 DEBUG dispatch pc=402, inst=LOAD_GLOBAL(arg=7, lineno=505)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=404, inst=LOAD_FAST(arg=26, lineno=506)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$402load_global.12']
2023-01-02 21:03 DEBUG dispatch pc=406, inst=LOAD_FAST(arg=45, lineno=506)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$402load_global.12', '$exitsprice404.13']
2023-01-02 21:03 DEBUG dispatch pc=408, inst=LOAD_FAST(arg=24, lineno=506)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$402load_global.12', '$exitsprice404.13', '$Open406.14']
2023-01-02 21:03 DEBUG dispatch pc=410, inst=LOAD_FAST(arg=47, lineno=506)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$402load_global.12', '$exitsprice404.13', '$Open406.14', '$marketpostion408.15']
2023-01-02 21:03 DEBUG dispatch pc=412, inst=LOAD_FAST(arg=8, lineno=506)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$402load_global.12', '$exitsprice404.13', '$Open406.14', '$marketpostion408.15', '$last_marketpostion410.16']
2023-01-02 21:03 DEBUG dispatch pc=414, inst=LOAD_FAST(arg=38, lineno=506)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$402load_global.12', '$exitsprice404.13', '$Open406.14', '$marketpostion408.15', '$last_marketpostion410.16', '$slippage412.17']
2023-01-02 21:03 DEBUG dispatch pc=416, inst=CALL_FUNCTION(arg=6, lineno=505)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$402load_global.12', '$exitsprice404.13', '$Open406.14', '$marketpostion408.15', '$last_marketpostion410.16', '$slippage412.17', '$direction414.18']
2023-01-02 21:03 DEBUG dispatch pc=418, inst=STORE_FAST(arg=26, lineno=505)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$416call_function.19']
2023-01-02 21:03 DEBUG dispatch pc=420, inst=LOAD_GLOBAL(arg=8, lineno=509)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=422, inst=LOAD_FAST(arg=27, lineno=510)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$420load_global.20']
2023-01-02 21:03 DEBUG dispatch pc=424, inst=LOAD_FAST(arg=10, lineno=510)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$420load_global.20', '$buy_Fees422.21']
2023-01-02 21:03 DEBUG dispatch pc=426, inst=LOAD_FAST(arg=32, lineno=510)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$420load_global.20', '$buy_Fees422.21', '$fee424.22']
2023-01-02 21:03 DEBUG dispatch pc=428, inst=LOAD_FAST(arg=45, lineno=510)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$420load_global.20', '$buy_Fees422.21', '$fee424.22', '$buy_sizes426.23']
2023-01-02 21:03 DEBUG dispatch pc=430, inst=LOAD_FAST(arg=24, lineno=510)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$420load_global.20', '$buy_Fees422.21', '$fee424.22', '$buy_sizes426.23', '$Open428.24']
2023-01-02 21:03 DEBUG dispatch pc=432, inst=LOAD_FAST(arg=47, lineno=510)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$420load_global.20', '$buy_Fees422.21', '$fee424.22', '$buy_sizes426.23', '$Open428.24', '$marketpostion430.25']
2023-01-02 21:03 DEBUG dispatch pc=434, inst=CALL_FUNCTION(arg=6, lineno=509)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$420load_global.20', '$buy_Fees422.21', '$fee424.22', '$buy_sizes426.23', '$Open428.24', '$marketpostion430.25', '$last_marketpostion432.26']
2023-01-02 21:03 DEBUG dispatch pc=436, inst=STORE_FAST(arg=27, lineno=509)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$434call_function.27']
2023-01-02 21:03 DEBUG dispatch pc=438, inst=LOAD_GLOBAL(arg=9, lineno=513)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=440, inst=LOAD_FAST(arg=28, lineno=514)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$438load_global.28']
2023-01-02 21:03 DEBUG dispatch pc=442, inst=LOAD_FAST(arg=10, lineno=514)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$438load_global.28', '$sell_Fees440.29']
2023-01-02 21:03 DEBUG dispatch pc=444, inst=LOAD_FAST(arg=33, lineno=514)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$438load_global.28', '$sell_Fees440.29', '$fee442.30']
2023-01-02 21:03 DEBUG dispatch pc=446, inst=LOAD_FAST(arg=45, lineno=514)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$438load_global.28', '$sell_Fees440.29', '$fee442.30', '$sell_sizes444.31']
2023-01-02 21:03 DEBUG dispatch pc=448, inst=LOAD_FAST(arg=24, lineno=514)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$438load_global.28', '$sell_Fees440.29', '$fee442.30', '$sell_sizes444.31', '$Open446.32']
2023-01-02 21:03 DEBUG dispatch pc=450, inst=LOAD_FAST(arg=47, lineno=514)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$438load_global.28', '$sell_Fees440.29', '$fee442.30', '$sell_sizes444.31', '$Open446.32', '$marketpostion448.33']
2023-01-02 21:03 DEBUG dispatch pc=452, inst=CALL_FUNCTION(arg=6, lineno=513)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$438load_global.28', '$sell_Fees440.29', '$fee442.30', '$sell_sizes444.31', '$Open446.32', '$marketpostion448.33', '$last_marketpostion450.34']
2023-01-02 21:03 DEBUG dispatch pc=454, inst=STORE_FAST(arg=28, lineno=513)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$452call_function.35']
2023-01-02 21:03 DEBUG dispatch pc=456, inst=LOAD_GLOBAL(arg=10, lineno=517)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=458, inst=LOAD_FAST(arg=29, lineno=518)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36']
2023-01-02 21:03 DEBUG dispatch pc=460, inst=LOAD_FAST(arg=24, lineno=518)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36', '$OpenPostionprofit458.37']
2023-01-02 21:03 DEBUG dispatch pc=462, inst=LOAD_FAST(arg=47, lineno=518)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36', '$OpenPostionprofit458.37', '$marketpostion460.38']
2023-01-02 21:03 DEBUG dispatch pc=464, inst=LOAD_FAST(arg=27, lineno=518)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36', '$OpenPostionprofit458.37', '$marketpostion460.38', '$last_marketpostion462.39']
2023-01-02 21:03 DEBUG dispatch pc=466, inst=LOAD_FAST(arg=45, lineno=518)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36', '$OpenPostionprofit458.37', '$marketpostion460.38', '$last_marketpostion462.39', '$buy_Fees464.40']
2023-01-02 21:03 DEBUG dispatch pc=468, inst=LOAD_FAST(arg=32, lineno=518)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36', '$OpenPostionprofit458.37', '$marketpostion460.38', '$last_marketpostion462.39', '$buy_Fees464.40', '$Open466.41']
2023-01-02 21:03 DEBUG dispatch pc=470, inst=LOAD_FAST(arg=25, lineno=518)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36', '$OpenPostionprofit458.37', '$marketpostion460.38', '$last_marketpostion462.39', '$buy_Fees464.40', '$Open466.41', '$buy_sizes468.42']
2023-01-02 21:03 DEBUG dispatch pc=472, inst=CALL_FUNCTION(arg=7, lineno=517)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$456load_global.36', '$OpenPostionprofit458.37', '$marketpostion460.38', '$last_marketpostion462.39', '$buy_Fees464.40', '$Open466.41', '$buy_sizes468.42', '$entryprice470.43']
2023-01-02 21:03 DEBUG dispatch pc=474, inst=STORE_FAST(arg=29, lineno=517)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$472call_function.44']
2023-01-02 21:03 DEBUG dispatch pc=476, inst=LOAD_GLOBAL(arg=11, lineno=521)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=478, inst=LOAD_FAST(arg=30, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45']
2023-01-02 21:03 DEBUG dispatch pc=480, inst=LOAD_FAST(arg=24, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46']
2023-01-02 21:03 DEBUG dispatch pc=482, inst=LOAD_FAST(arg=47, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46', '$marketpostion480.47']
2023-01-02 21:03 DEBUG dispatch pc=484, inst=LOAD_FAST(arg=27, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46', '$marketpostion480.47', '$last_marketpostion482.48']
2023-01-02 21:03 DEBUG dispatch pc=486, inst=LOAD_FAST(arg=28, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46', '$marketpostion480.47', '$last_marketpostion482.48', '$buy_Fees484.49']
2023-01-02 21:03 DEBUG dispatch pc=488, inst=LOAD_FAST(arg=33, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46', '$marketpostion480.47', '$last_marketpostion482.48', '$buy_Fees484.49', '$sell_Fees486.50']
2023-01-02 21:03 DEBUG dispatch pc=490, inst=LOAD_FAST(arg=48, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46', '$marketpostion480.47', '$last_marketpostion482.48', '$buy_Fees484.49', '$sell_Fees486.50', '$sell_sizes488.51']
2023-01-02 21:03 DEBUG dispatch pc=492, inst=LOAD_FAST(arg=26, lineno=522)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46', '$marketpostion480.47', '$last_marketpostion482.48', '$buy_Fees484.49', '$sell_Fees486.50', '$sell_sizes488.51', '$last_entryprice490.52']
2023-01-02 21:03 DEBUG dispatch pc=494, inst=CALL_FUNCTION(arg=8, lineno=521)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$476load_global.45', '$ClosedPostionprofit478.46', '$marketpostion480.47', '$last_marketpostion482.48', '$buy_Fees484.49', '$sell_Fees486.50', '$sell_sizes488.51', '$last_entryprice490.52', '$exitsprice492.53']
2023-01-02 21:03 DEBUG dispatch pc=496, inst=STORE_FAST(arg=30, lineno=521)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$494call_function.54']
2023-01-02 21:03 DEBUG dispatch pc=498, inst=LOAD_GLOBAL(arg=12, lineno=525)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=500, inst=LOAD_FAST(arg=31, lineno=526)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$498load_global.55']
2023-01-02 21:03 DEBUG dispatch pc=502, inst=LOAD_FAST(arg=24, lineno=526)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$498load_global.55', '$profit500.56']
2023-01-02 21:03 DEBUG dispatch pc=504, inst=LOAD_FAST(arg=47, lineno=526)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$498load_global.55', '$profit500.56', '$marketpostion502.57']
2023-01-02 21:03 DEBUG dispatch pc=506, inst=LOAD_FAST(arg=45, lineno=526)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$498load_global.55', '$profit500.56', '$marketpostion502.57', '$last_marketpostion504.58']
2023-01-02 21:03 DEBUG dispatch pc=508, inst=LOAD_FAST(arg=33, lineno=526)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$498load_global.55', '$profit500.56', '$marketpostion502.57', '$last_marketpostion504.58', '$Open506.59']
2023-01-02 21:03 DEBUG dispatch pc=510, inst=LOAD_FAST(arg=48, lineno=526)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$498load_global.55', '$profit500.56', '$marketpostion502.57', '$last_marketpostion504.58', '$Open506.59', '$sell_sizes508.60']
2023-01-02 21:03 DEBUG dispatch pc=512, inst=CALL_FUNCTION(arg=6, lineno=525)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$498load_global.55', '$profit500.56', '$marketpostion502.57', '$last_marketpostion504.58', '$Open506.59', '$sell_sizes508.60', '$last_entryprice510.61']
2023-01-02 21:03 DEBUG dispatch pc=514, inst=STORE_FAST(arg=31, lineno=525)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$512call_function.62']
2023-01-02 21:03 DEBUG dispatch pc=516, inst=LOAD_FAST(arg=31, lineno=529)
2023-01-02 21:03 DEBUG stack ['$phi376.0']
2023-01-02 21:03 DEBUG dispatch pc=518, inst=LOAD_CONST(arg=2, lineno=529)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$profit516.63']
2023-01-02 21:03 DEBUG dispatch pc=520, inst=COMPARE_OP(arg=4, lineno=529)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$profit516.63', '$const518.64']
2023-01-02 21:03 DEBUG dispatch pc=522, inst=POP_JUMP_IF_FALSE(arg=534, lineno=529)
2023-01-02 21:03 DEBUG stack ['$phi376.0', '$520compare_op.65']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=526, stack=('$phi376.0',), blockstack=(), npush=0), Edge(pc=534, stack=('$phi376.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=376 nstack_initial=1), State(pc_initial=526 nstack_initial=1), State(pc_initial=534 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=526 nstack_initial=1), State(pc_initial=534 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi526.0']
2023-01-02 21:03 DEBUG dispatch pc=526, inst=LOAD_FAST(arg=34, lineno=530)
2023-01-02 21:03 DEBUG stack ['$phi526.0']
2023-01-02 21:03 DEBUG dispatch pc=528, inst=LOAD_FAST(arg=31, lineno=530)
2023-01-02 21:03 DEBUG stack ['$phi526.0', '$Gross_profit526.1']
2023-01-02 21:03 DEBUG dispatch pc=530, inst=BINARY_ADD(arg=None, lineno=530)
2023-01-02 21:03 DEBUG stack ['$phi526.0', '$Gross_profit526.1', '$profit528.2']
2023-01-02 21:03 DEBUG dispatch pc=532, inst=STORE_FAST(arg=34, lineno=530)
2023-01-02 21:03 DEBUG stack ['$phi526.0', '$530binary_add.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=534, stack=('$phi526.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=534 nstack_initial=1), State(pc_initial=534 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi534.0']
2023-01-02 21:03 DEBUG dispatch pc=534, inst=LOAD_FAST(arg=31, lineno=533)
2023-01-02 21:03 DEBUG stack ['$phi534.0']
2023-01-02 21:03 DEBUG dispatch pc=536, inst=LOAD_CONST(arg=2, lineno=533)
2023-01-02 21:03 DEBUG stack ['$phi534.0', '$profit534.1']
2023-01-02 21:03 DEBUG dispatch pc=538, inst=COMPARE_OP(arg=0, lineno=533)
2023-01-02 21:03 DEBUG stack ['$phi534.0', '$profit534.1', '$const536.2']
2023-01-02 21:03 DEBUG dispatch pc=540, inst=POP_JUMP_IF_FALSE(arg=552, lineno=533)
2023-01-02 21:03 DEBUG stack ['$phi534.0', '$538compare_op.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=544, stack=('$phi534.0',), blockstack=(), npush=0), Edge(pc=552, stack=('$phi534.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=534 nstack_initial=1), State(pc_initial=544 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=544 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi544.0']
2023-01-02 21:03 DEBUG dispatch pc=544, inst=LOAD_FAST(arg=35, lineno=534)
2023-01-02 21:03 DEBUG stack ['$phi544.0']
2023-01-02 21:03 DEBUG dispatch pc=546, inst=LOAD_FAST(arg=31, lineno=534)
2023-01-02 21:03 DEBUG stack ['$phi544.0', '$Gross_loss544.1']
2023-01-02 21:03 DEBUG dispatch pc=548, inst=BINARY_ADD(arg=None, lineno=534)
2023-01-02 21:03 DEBUG stack ['$phi544.0', '$Gross_loss544.1', '$profit546.2']
2023-01-02 21:03 DEBUG dispatch pc=550, inst=STORE_FAST(arg=35, lineno=534)
2023-01-02 21:03 DEBUG stack ['$phi544.0', '$548binary_add.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=552, stack=('$phi544.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=552 nstack_initial=1), State(pc_initial=552 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi552.0']
2023-01-02 21:03 DEBUG dispatch pc=552, inst=LOAD_FAST(arg=24, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi552.0']
2023-01-02 21:03 DEBUG dispatch pc=554, inst=LOAD_CONST(arg=4, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi552.0', '$marketpostion552.1']
2023-01-02 21:03 DEBUG dispatch pc=556, inst=COMPARE_OP(arg=2, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi552.0', '$marketpostion552.1', '$const554.2']
2023-01-02 21:03 DEBUG dispatch pc=558, inst=POP_JUMP_IF_FALSE(arg=582, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi552.0', '$556compare_op.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=562, stack=('$phi552.0',), blockstack=(), npush=0), Edge(pc=582, stack=('$phi552.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=552 nstack_initial=1), State(pc_initial=562 nstack_initial=1), State(pc_initial=582 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=562 nstack_initial=1), State(pc_initial=582 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi562.0']
2023-01-02 21:03 DEBUG dispatch pc=562, inst=LOAD_FAST(arg=47, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi562.0']
2023-01-02 21:03 DEBUG dispatch pc=564, inst=LOAD_CONST(arg=2, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi562.0', '$last_marketpostion562.1']
2023-01-02 21:03 DEBUG dispatch pc=566, inst=COMPARE_OP(arg=2, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi562.0', '$last_marketpostion562.1', '$const564.2']
2023-01-02 21:03 DEBUG dispatch pc=568, inst=POP_JUMP_IF_FALSE(arg=582, lineno=537)
2023-01-02 21:03 DEBUG stack ['$phi562.0', '$566compare_op.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=572, stack=('$phi562.0',), blockstack=(), npush=0), Edge(pc=582, stack=('$phi562.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=582 nstack_initial=1), State(pc_initial=572 nstack_initial=1), State(pc_initial=582 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi582.0']
2023-01-02 21:03 DEBUG dispatch pc=582, inst=LOAD_FAST(arg=24, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi582.0']
2023-01-02 21:03 DEBUG dispatch pc=584, inst=LOAD_CONST(arg=2, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi582.0', '$marketpostion582.1']
2023-01-02 21:03 DEBUG dispatch pc=586, inst=COMPARE_OP(arg=2, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi582.0', '$marketpostion582.1', '$const584.2']
2023-01-02 21:03 DEBUG dispatch pc=588, inst=POP_JUMP_IF_FALSE(arg=610, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi582.0', '$586compare_op.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=592, stack=('$phi582.0',), blockstack=(), npush=0), Edge(pc=610, stack=('$phi582.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=572 nstack_initial=1), State(pc_initial=582 nstack_initial=1), State(pc_initial=592 nstack_initial=1), State(pc_initial=610 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi572.0']
2023-01-02 21:03 DEBUG dispatch pc=572, inst=LOAD_FAST(arg=36, lineno=538)
2023-01-02 21:03 DEBUG stack ['$phi572.0']
2023-01-02 21:03 DEBUG dispatch pc=574, inst=LOAD_FAST(arg=27, lineno=538)
2023-01-02 21:03 DEBUG stack ['$phi572.0', '$all_Fees572.1']
2023-01-02 21:03 DEBUG dispatch pc=576, inst=BINARY_ADD(arg=None, lineno=538)
2023-01-02 21:03 DEBUG stack ['$phi572.0', '$all_Fees572.1', '$buy_Fees574.2']
2023-01-02 21:03 DEBUG dispatch pc=578, inst=STORE_FAST(arg=36, lineno=538)
2023-01-02 21:03 DEBUG stack ['$phi572.0', '$576binary_add.3']
2023-01-02 21:03 DEBUG dispatch pc=580, inst=JUMP_FORWARD(arg=28, lineno=538)
2023-01-02 21:03 DEBUG stack ['$phi572.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=610, stack=('$phi572.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=582 nstack_initial=1), State(pc_initial=592 nstack_initial=1), State(pc_initial=610 nstack_initial=1), State(pc_initial=610 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=592 nstack_initial=1), State(pc_initial=610 nstack_initial=1), State(pc_initial=610 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi592.0']
2023-01-02 21:03 DEBUG dispatch pc=592, inst=LOAD_FAST(arg=47, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi592.0']
2023-01-02 21:03 DEBUG dispatch pc=594, inst=LOAD_CONST(arg=4, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi592.0', '$last_marketpostion592.1']
2023-01-02 21:03 DEBUG dispatch pc=596, inst=COMPARE_OP(arg=2, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi592.0', '$last_marketpostion592.1', '$const594.2']
2023-01-02 21:03 DEBUG dispatch pc=598, inst=POP_JUMP_IF_FALSE(arg=610, lineno=539)
2023-01-02 21:03 DEBUG stack ['$phi592.0', '$596compare_op.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=602, stack=('$phi592.0',), blockstack=(), npush=0), Edge(pc=610, stack=('$phi592.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=610 nstack_initial=1), State(pc_initial=610 nstack_initial=1), State(pc_initial=602 nstack_initial=1), State(pc_initial=610 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=610, inst=LOAD_FAST(arg=7, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=612, inst=LOAD_FAST(arg=36, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$init_cash610.1']
2023-01-02 21:03 DEBUG dispatch pc=614, inst=BINARY_SUBTRACT(arg=None, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$init_cash610.1', '$all_Fees612.2']
2023-01-02 21:03 DEBUG dispatch pc=616, inst=LOAD_FAST(arg=34, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$614binary_subtract.3']
2023-01-02 21:03 DEBUG dispatch pc=618, inst=BINARY_ADD(arg=None, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$614binary_subtract.3', '$Gross_profit616.4']
2023-01-02 21:03 DEBUG dispatch pc=620, inst=LOAD_FAST(arg=35, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$618binary_add.5']
2023-01-02 21:03 DEBUG dispatch pc=622, inst=BINARY_ADD(arg=None, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$618binary_add.5', '$Gross_loss620.6']
2023-01-02 21:03 DEBUG dispatch pc=624, inst=LOAD_FAST(arg=29, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$622binary_add.7']
2023-01-02 21:03 DEBUG dispatch pc=626, inst=BINARY_ADD(arg=None, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$622binary_add.7', '$OpenPostionprofit624.8']
2023-01-02 21:03 DEBUG dispatch pc=628, inst=STORE_FAST(arg=37, lineno=543)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$626binary_add.9']
2023-01-02 21:03 DEBUG dispatch pc=630, inst=LOAD_FAST(arg=25, lineno=546)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=632, inst=LOAD_FAST(arg=14, lineno=546)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$entryprice630.10']
2023-01-02 21:03 DEBUG dispatch pc=634, inst=LOAD_FAST(arg=44, lineno=546)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$entryprice630.10', '$entryprice_array632.11']
2023-01-02 21:03 DEBUG dispatch pc=636, inst=STORE_SUBSCR(arg=None, lineno=546)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$entryprice630.10', '$entryprice_array632.11', '$i634.12']
2023-01-02 21:03 DEBUG dispatch pc=638, inst=LOAD_FAST(arg=27, lineno=547)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=640, inst=LOAD_FAST(arg=15, lineno=547)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$buy_Fees638.13']
2023-01-02 21:03 DEBUG dispatch pc=642, inst=LOAD_FAST(arg=44, lineno=547)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$buy_Fees638.13', '$buy_Fees_array640.14']
2023-01-02 21:03 DEBUG dispatch pc=644, inst=STORE_SUBSCR(arg=None, lineno=547)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$buy_Fees638.13', '$buy_Fees_array640.14', '$i642.15']
2023-01-02 21:03 DEBUG dispatch pc=646, inst=LOAD_FAST(arg=28, lineno=548)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=648, inst=LOAD_FAST(arg=16, lineno=548)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$sell_Fees646.16']
2023-01-02 21:03 DEBUG dispatch pc=650, inst=LOAD_FAST(arg=44, lineno=548)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$sell_Fees646.16', '$sell_Fees_array648.17']
2023-01-02 21:03 DEBUG dispatch pc=652, inst=STORE_SUBSCR(arg=None, lineno=548)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$sell_Fees646.16', '$sell_Fees_array648.17', '$i650.18']
2023-01-02 21:03 DEBUG dispatch pc=654, inst=LOAD_FAST(arg=29, lineno=549)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=656, inst=LOAD_FAST(arg=17, lineno=549)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$OpenPostionprofit654.19']
2023-01-02 21:03 DEBUG dispatch pc=658, inst=LOAD_FAST(arg=44, lineno=549)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$OpenPostionprofit654.19', '$OpenPostionprofit_array656.20']
2023-01-02 21:03 DEBUG dispatch pc=660, inst=STORE_SUBSCR(arg=None, lineno=549)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$OpenPostionprofit654.19', '$OpenPostionprofit_array656.20', '$i658.21']
2023-01-02 21:03 DEBUG dispatch pc=662, inst=LOAD_FAST(arg=30, lineno=550)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=664, inst=LOAD_FAST(arg=18, lineno=550)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$ClosedPostionprofit662.22']
2023-01-02 21:03 DEBUG dispatch pc=666, inst=LOAD_FAST(arg=44, lineno=550)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$ClosedPostionprofit662.22', '$ClosedPostionprofit_array664.23']
2023-01-02 21:03 DEBUG dispatch pc=668, inst=STORE_SUBSCR(arg=None, lineno=550)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$ClosedPostionprofit662.22', '$ClosedPostionprofit_array664.23', '$i666.24']
2023-01-02 21:03 DEBUG dispatch pc=670, inst=LOAD_FAST(arg=31, lineno=551)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=672, inst=LOAD_FAST(arg=19, lineno=551)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$profit670.25']
2023-01-02 21:03 DEBUG dispatch pc=674, inst=LOAD_FAST(arg=44, lineno=551)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$profit670.25', '$profit_array672.26']
2023-01-02 21:03 DEBUG dispatch pc=676, inst=STORE_SUBSCR(arg=None, lineno=551)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$profit670.25', '$profit_array672.26', '$i674.27']
2023-01-02 21:03 DEBUG dispatch pc=678, inst=LOAD_FAST(arg=34, lineno=552)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=680, inst=LOAD_FAST(arg=20, lineno=552)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$Gross_profit678.28']
2023-01-02 21:03 DEBUG dispatch pc=682, inst=LOAD_FAST(arg=44, lineno=552)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$Gross_profit678.28', '$Gross_profit_array680.29']
2023-01-02 21:03 DEBUG dispatch pc=684, inst=STORE_SUBSCR(arg=None, lineno=552)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$Gross_profit678.28', '$Gross_profit_array680.29', '$i682.30']
2023-01-02 21:03 DEBUG dispatch pc=686, inst=LOAD_FAST(arg=35, lineno=553)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=688, inst=LOAD_FAST(arg=21, lineno=553)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$Gross_loss686.31']
2023-01-02 21:03 DEBUG dispatch pc=690, inst=LOAD_FAST(arg=44, lineno=553)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$Gross_loss686.31', '$Gross_loss_array688.32']
2023-01-02 21:03 DEBUG dispatch pc=692, inst=STORE_SUBSCR(arg=None, lineno=553)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$Gross_loss686.31', '$Gross_loss_array688.32', '$i690.33']
2023-01-02 21:03 DEBUG dispatch pc=694, inst=LOAD_FAST(arg=36, lineno=554)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=696, inst=LOAD_FAST(arg=22, lineno=554)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$all_Fees694.34']
2023-01-02 21:03 DEBUG dispatch pc=698, inst=LOAD_FAST(arg=44, lineno=554)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$all_Fees694.34', '$all_Fees_array696.35']
2023-01-02 21:03 DEBUG dispatch pc=700, inst=STORE_SUBSCR(arg=None, lineno=554)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$all_Fees694.34', '$all_Fees_array696.35', '$i698.36']
2023-01-02 21:03 DEBUG dispatch pc=702, inst=LOAD_FAST(arg=37, lineno=555)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG dispatch pc=704, inst=LOAD_FAST(arg=23, lineno=555)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$netprofit702.37']
2023-01-02 21:03 DEBUG dispatch pc=706, inst=LOAD_FAST(arg=44, lineno=555)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$netprofit702.37', '$netprofit_array704.38']
2023-01-02 21:03 DEBUG dispatch pc=708, inst=STORE_SUBSCR(arg=None, lineno=555)
2023-01-02 21:03 DEBUG stack ['$phi610.0', '$netprofit702.37', '$netprofit_array704.38', '$i706.39']
2023-01-02 21:03 DEBUG dispatch pc=710, inst=JUMP_ABSOLUTE(arg=318, lineno=555)
2023-01-02 21:03 DEBUG stack ['$phi610.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=318, stack=('$phi610.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=610 nstack_initial=1), State(pc_initial=602 nstack_initial=1), State(pc_initial=610 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=602 nstack_initial=1), State(pc_initial=610 nstack_initial=1), State(pc_initial=318 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi602.0']
2023-01-02 21:03 DEBUG dispatch pc=602, inst=LOAD_FAST(arg=36, lineno=540)
2023-01-02 21:03 DEBUG stack ['$phi602.0']
2023-01-02 21:03 DEBUG dispatch pc=604, inst=LOAD_FAST(arg=28, lineno=540)
2023-01-02 21:03 DEBUG stack ['$phi602.0', '$all_Fees602.1']
2023-01-02 21:03 DEBUG dispatch pc=606, inst=BINARY_ADD(arg=None, lineno=540)
2023-01-02 21:03 DEBUG stack ['$phi602.0', '$all_Fees602.1', '$sell_Fees604.2']
2023-01-02 21:03 DEBUG dispatch pc=608, inst=STORE_FAST(arg=36, lineno=540)
2023-01-02 21:03 DEBUG stack ['$phi602.0', '$606binary_add.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=610, stack=('$phi602.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=610 nstack_initial=1), State(pc_initial=318 nstack_initial=1), State(pc_initial=610 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=318 nstack_initial=1), State(pc_initial=610 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=610 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=318 nstack_initial=1): {'$phi318.0'},
             State(pc_initial=322 nstack_initial=2): {'$phi322.1'},
             State(pc_initial=358 nstack_initial=1): set(),
             State(pc_initial=362 nstack_initial=1): set(),
             State(pc_initial=372 nstack_initial=1): set(),
             State(pc_initial=376 nstack_initial=1): set(),
             State(pc_initial=526 nstack_initial=1): set(),
             State(pc_initial=534 nstack_initial=1): set(),
             State(pc_initial=544 nstack_initial=1): set(),
             State(pc_initial=552 nstack_initial=1): set(),
             State(pc_initial=562 nstack_initial=1): set(),
             State(pc_initial=572 nstack_initial=1): set(),
             State(pc_initial=582 nstack_initial=1): set(),
             State(pc_initial=592 nstack_initial=1): set(),
             State(pc_initial=602 nstack_initial=1): set(),
             State(pc_initial=610 nstack_initial=1): set(),
             State(pc_initial=714 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi318.0': State(pc_initial=0 nstack_initial=0),
 '$phi322.1': State(pc_initial=318 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi318.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi610.0',
                            State(pc_initial=610 nstack_initial=1))},
             '$phi322.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi322.1': {('$318for_iter.2',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi358.0': {('$phi322.0',
                            State(pc_initial=322 nstack_initial=2))},
             '$phi362.0': {('$phi322.0',
                            State(pc_initial=322 nstack_initial=2)),
                           ('$phi358.0',
                            State(pc_initial=358 nstack_initial=1))},
             '$phi372.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=1))},
             '$phi376.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=1)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=1))},
             '$phi526.0': {('$phi376.0',
                            State(pc_initial=376 nstack_initial=1))},
             '$phi534.0': {('$phi376.0',
                            State(pc_initial=376 nstack_initial=1)),
                           ('$phi526.0',
                            State(pc_initial=526 nstack_initial=1))},
             '$phi544.0': {('$phi534.0',
                            State(pc_initial=534 nstack_initial=1))},
             '$phi552.0': {('$phi534.0',
                            State(pc_initial=534 nstack_initial=1)),
                           ('$phi544.0',
                            State(pc_initial=544 nstack_initial=1))},
             '$phi562.0': {('$phi552.0',
                            State(pc_initial=552 nstack_initial=1))},
             '$phi572.0': {('$phi562.0',
                            State(pc_initial=562 nstack_initial=1))},
             '$phi582.0': {('$phi552.0',
                            State(pc_initial=552 nstack_initial=1)),
                           ('$phi562.0',
                            State(pc_initial=562 nstack_initial=1))},
             '$phi592.0': {('$phi582.0',
                            State(pc_initial=582 nstack_initial=1))},
             '$phi602.0': {('$phi592.0',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi610.0': {('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi318.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi322.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi322.1': {('$318for_iter.2',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi358.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi362.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi372.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi376.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi526.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi534.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi544.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi552.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi562.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi572.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi582.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi582.0',
                            State(pc_initial=582 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi592.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi602.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi572.0',
                            State(pc_initial=572 nstack_initial=1)),
                           ('$phi602.0',
                            State(pc_initial=602 nstack_initial=1))},
             '$phi610.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi318.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi322.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi322.1': {('$318for_iter.2',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi358.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi372.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi376.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi526.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi534.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi544.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi552.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi562.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi572.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi582.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi602.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi610.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi318.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi322.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi322.1': {('$318for_iter.2',
                            State(pc_initial=318 nstack_initial=1))},
             '$phi358.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi362.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi372.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi376.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi526.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi534.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi544.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi552.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi562.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi572.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi582.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi592.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi602.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi610.0': {('$316get_iter.123',
                            State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi318.0': {('$316get_iter.123', State(pc_initial=0 nstack_initial=0))},
 '$phi322.1': {('$318for_iter.2', State(pc_initial=318 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi318.0': '$316get_iter.123'},
             State(pc_initial=318 nstack_initial=1): {'$phi322.1': '$318for_iter.2'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$Length6.2'}), (8, {'res': '$const8.3'}), (10, {'func': '$4load_attr.1', 'args': ['$Length6.2'], 'names': '$const8.3', 'res': '$10call_function_kw.4'}), (12, {'value': '$10call_function_kw.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$Length18.7'}), (20, {'res': '$const20.8'}), (22, {'func': '$16load_attr.6', 'args': ['$Length18.7'], 'names': '$const20.8', 'res': '$22call_function_kw.9'}), (24, {'value': '$22call_function_kw.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'res': '$Length30.12'}), (32, {'res': '$const32.13'}), (34, {'func': '$28load_attr.11', 'args': ['$Length30.12'], 'names': '$const32.13', 'res': '$34call_function_kw.14'}), (36, {'value': '$34call_function_kw.14'}), (38, {'res': '$38load_global.15'}), (40, {'item': '$38load_global.15', 'res': '$40load_attr.16'}), (42, {'res': '$Length42.17'}), (44, {'res': '$const44.18'}), (46, {'func': '$40load_attr.16', 'args': ['$Length42.17'], 'names': '$const44.18', 'res': '$46call_function_kw.19'}), (48, {'value': '$46call_function_kw.19'}), (50, {'res': '$50load_global.20'}), (52, {'item': '$50load_global.20', 'res': '$52load_attr.21'}), (54, {'res': '$Length54.22'}), (56, {'res': '$const56.23'}), (58, {'func': '$52load_attr.21', 'args': ['$Length54.22'], 'names': '$const56.23', 'res': '$58call_function_kw.24'}), (60, {'value': '$58call_function_kw.24'}), (62, {'res': '$62load_global.25'}), (64, {'item': '$62load_global.25', 'res': '$64load_attr.26'}), (66, {'res': '$Length66.27'}), (68, {'res': '$const68.28'}), (70, {'func': '$64load_attr.26', 'args': ['$Length66.27'], 'names': '$const68.28', 'res': '$70call_function_kw.29'}), (72, {'value': '$70call_function_kw.29'}), (74, {'res': '$74load_global.30'}), (76, {'item': '$74load_global.30', 'res': '$76load_attr.31'}), (78, {'res': '$Length78.32'}), (80, {'res': '$const80.33'}), (82, {'func': '$76load_attr.31', 'args': ['$Length78.32'], 'names': '$const80.33', 'res': '$82call_function_kw.34'}), (84, {'value': '$82call_function_kw.34'}), (86, {'res': '$86load_global.35'}), (88, {'item': '$86load_global.35', 'res': '$88load_attr.36'}), (90, {'res': '$Length90.37'}), (92, {'res': '$const92.38'}), (94, {'func': '$88load_attr.36', 'args': ['$Length90.37'], 'names': '$const92.38', 'res': '$94call_function_kw.39'}), (96, {'value': '$94call_function_kw.39'}), (98, {'res': '$98load_global.40'}), (100, {'item': '$98load_global.40', 'res': '$100load_attr.41'}), (102, {'res': '$Length102.42'}), (104, {'res': '$const104.43'}), (106, {'func': '$100load_attr.41', 'args': ['$Length102.42'], 'names': '$const104.43', 'res': '$106call_function_kw.44'}), (108, {'value': '$106call_function_kw.44'}), (110, {'res': '$110load_global.45'}), (112, {'item': '$110load_global.45', 'res': '$112load_attr.46'}), (114, {'res': '$Length114.47'}), (116, {'res': '$const116.48'}), (118, {'func': '$112load_attr.46', 'args': ['$Length114.47'], 'names': '$const116.48', 'res': '$118call_function_kw.49'}), (120, {'value': '$118call_function_kw.49'}), (122, {'res': '$122load_global.50'}), (124, {'item': '$122load_global.50', 'res': '$124load_attr.51'}), (126, {'res': '$Length126.52'}), (128, {'res': '$const128.53'}), (130, {'func': '$124load_attr.51', 'args': ['$Length126.52'], 'names': '$const128.53', 'res': '$130call_function_kw.54'}), (132, {'value': '$130call_function_kw.54'}), (134, {'res': '$const134.55'}), (136, {'value': '$const134.55'}), (138, {'res': '$const138.56'}), (140, {'value': '$const138.56'}), (142, {'res': '$const142.57'}), (144, {'value': '$const142.57'}), (146, {'res': '$const146.58'}), (148, {'value': '$const146.58'}), (150, {'res': '$const150.59'}), (152, {'value': '$const150.59'}), (154, {'res': '$const154.60'}), (156, {'value': '$const154.60'}), (158, {'res': '$init_cash158.61'}), (160, {'value': '$init_cash158.61'}), (162, {'res': '$const162.62'}), (164, {'value': '$const162.62'}), (166, {'res': '$size166.63'}), (168, {'value': '$size166.63'}), (170, {'res': '$size170.64'}), (172, {'value': '$size170.64'}), (174, {'res': '$const174.65'}), (176, {'value': '$const174.65'}), (178, {'res': '$const178.66'}), (180, {'value': '$const178.66'}), (182, {'res': '$const182.67'}), (184, {'value': '$const182.67'}), (186, {'res': '$const186.68'}), (188, {'value': '$const186.68'}), (190, {'res': '$slippage190.69'}), (192, {'value': '$slippage190.69'}), (194, {'res': '$fee194.70'}), (196, {'value': '$fee194.70'}), (198, {'res': '$const198.71'}), (200, {'value': '$const198.71'}), (202, {'res': '$202load_global.72'}), (204, {'res': '$Length204.73'}), (206, {'res': '$high_array206.74'}), (208, {'res': '$low_array208.75'}), (210, {'res': '$close_array210.76'}), (212, {'res': '$ATR_short1212.77'}), (214, {'func': '$202load_global.72', 'args': ['$Length204.73', '$high_array206.74', '$low_array208.75', '$close_array210.76', '$ATR_short1212.77'], 'res': '$214call_function.78'}), (216, {'value': '$214call_function.78'}), (218, {'res': '$218load_global.79'}), (220, {'res': '$Length220.80'}), (222, {'res': '$high_array222.81'}), (224, {'res': '$low_array224.82'}), (226, {'res': '$close_array226.83'}), (228, {'res': '$ATR_long2228.84'}), (230, {'func': '$218load_global.79', 'args': ['$Length220.80', '$high_array222.81', '$low_array224.82', '$close_array226.83', '$ATR_long2228.84'], 'res': '$230call_function.85'}), (232, {'value': '$230call_function.85'}), (234, {'res': '$234load_global.86'}), (236, {'item': '$234load_global.86', 'res': '$236load_method.87'}), (238, {'res': '$high_array238.88'}), (240, {'res': '$highestarr240.89'}), (242, {'lhs': '$high_array238.88', 'rhs': '$highestarr240.89', 'res': '$242binary_subtract.90'}), (244, {'res': '$const244.91'}), (246, {'lhs': '$242binary_subtract.90', 'rhs': '$const244.91', 'res': '$246compare_op.92'}), (248, {'res': '$ATR_short248.93'}), (250, {'res': '$ATR_long250.94'}), (252, {'lhs': '$ATR_short248.93', 'rhs': '$ATR_long250.94', 'res': '$252binary_subtract.95'}), (254, {'res': '$const254.96'}), (256, {'lhs': '$252binary_subtract.95', 'rhs': '$const254.96', 'res': '$256compare_op.97'}), (258, {'lhs': '$246compare_op.92', 'rhs': '$256compare_op.97', 'res': '$258binary_and.98'}), (260, {'res': '$const260.99'}), (262, {'res': '$const262.100'}), (264, {'func': '$236load_method.87', 'args': ['$258binary_and.98', '$const260.99', '$const262.100'], 'res': '$264call_method.101'}), (266, {'value': '$264call_method.101'}), (268, {'res': '$268load_global.102'}), (270, {'item': '$268load_global.102', 'res': '$270load_method.103'}), (272, {'res': '$low_array272.104'}), (274, {'res': '$lowestarr274.105'}), (276, {'lhs': '$low_array272.104', 'rhs': '$lowestarr274.105', 'res': '$276binary_subtract.106'}), (278, {'res': '$const278.107'}), (280, {'lhs': '$276binary_subtract.106', 'rhs': '$const278.107', 'res': '$280compare_op.108'}), (282, {'res': '$const282.109'}), (284, {'res': '$trends284.110'}), (286, {'func': '$270load_method.103', 'args': ['$280compare_op.108', '$const282.109', '$trends284.110'], 'res': '$286call_method.111'}), (288, {'value': '$286call_method.111'}), (290, {'res': '$290load_global.112'}), (292, {'item': '$290load_global.112', 'res': '$292load_method.113'}), (294, {'res': '$orders294.114'}), (296, {'res': '$const296.115'}), (298, {'func': '$292load_method.113', 'args': ['$orders294.114', '$const296.115'], 'res': '$298call_method.116'}), (300, {'value': '$298call_method.116'}), (302, {'res': '$const302.117'}), (304, {'res': '$shiftorder304.118'}), (306, {'res': '$const306.119'}), (308, {'target': '$shiftorder304.118', 'index': '$const306.119', 'value': '$const302.117'}), (310, {'res': '$310load_global.120'}), (312, {'res': '$Length312.121'}), (314, {'func': '$310load_global.120', 'args': ['$Length312.121'], 'res': '$314call_function.122'}), (316, {'value': '$314call_function.122', 'res': '$316get_iter.123'})), outgoing_phis={'$phi318.0': '$316get_iter.123'}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ('$316get_iter.123',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=318 nstack_initial=1):
AdaptBlockInfo(insts=((318, {'iterator': '$phi318.0', 'pair': '$318for_iter.1', 'indval': '$318for_iter.2', 'pred': '$318for_iter.3'}),), outgoing_phis={'$phi322.1': '$318for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={714: (), 322: ('$phi318.0', '$318for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=322 nstack_initial=2):
AdaptBlockInfo(insts=((322, {'value': '$phi322.1'}), (324, {'res': '$open_array324.2'}), (326, {'res': '$i326.3'}), (328, {'index': '$i326.3', 'target': '$open_array324.2', 'res': '$328binary_subscr.4'}), (330, {'value': '$328binary_subscr.4'}), (332, {'res': '$shiftorder332.5'}), (334, {'res': '$i334.6'}), (336, {'index': '$i334.6', 'target': '$shiftorder332.5', 'res': '$336binary_subscr.7'}), (338, {'value': '$336binary_subscr.7'}), (340, {'res': '$marketpostion340.8'}), (342, {'value': '$marketpostion340.8'}), (344, {'res': '$entryprice344.9'}), (346, {'value': '$entryprice344.9'}), (348, {'res': '$current_order348.10'}), (350, {'res': '$const350.11'}), (352, {'lhs': '$current_order348.10', 'rhs': '$const350.11', 'res': '$352compare_op.12'}), (354, {'pred': '$352compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={358: ('$phi322.0',), 362: ('$phi322.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=358 nstack_initial=1):
AdaptBlockInfo(insts=((358, {'res': '$const358.1'}), (360, {'value': '$const358.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ('$phi358.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=362 nstack_initial=1):
AdaptBlockInfo(insts=((362, {'res': '$current_order362.1'}), (364, {'res': '$const364.2'}), (366, {'lhs': '$current_order362.1', 'rhs': '$const364.2', 'res': '$366compare_op.3'}), (368, {'pred': '$366compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={372: ('$phi362.0',), 376: ('$phi362.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=372 nstack_initial=1):
AdaptBlockInfo(insts=((372, {'res': '$const372.1'}), (374, {'value': '$const372.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={376: ('$phi372.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=376 nstack_initial=1):
AdaptBlockInfo(insts=((376, {'res': '$marketpostion376.1'}), (378, {'res': '$marketpostion_array378.2'}), (380, {'res': '$i380.3'}), (382, {'target': '$marketpostion_array378.2', 'index': '$i380.3', 'value': '$marketpostion376.1'}), (384, {'res': '$384load_global.4'}), (386, {'res': '$entryprice386.5'}), (388, {'res': '$Open388.6'}), (390, {'res': '$marketpostion390.7'}), (392, {'res': '$last_marketpostion392.8'}), (394, {'res': '$slippage394.9'}), (396, {'res': '$direction396.10'}), (398, {'func': '$384load_global.4', 'args': ['$entryprice386.5', '$Open388.6', '$marketpostion390.7', '$last_marketpostion392.8', '$slippage394.9', '$direction396.10'], 'res': '$398call_function.11'}), (400, {'value': '$398call_function.11'}), (402, {'res': '$402load_global.12'}), (404, {'res': '$exitsprice404.13'}), (406, {'res': '$Open406.14'}), (408, {'res': '$marketpostion408.15'}), (410, {'res': '$last_marketpostion410.16'}), (412, {'res': '$slippage412.17'}), (414, {'res': '$direction414.18'}), (416, {'func': '$402load_global.12', 'args': ['$exitsprice404.13', '$Open406.14', '$marketpostion408.15', '$last_marketpostion410.16', '$slippage412.17', '$direction414.18'], 'res': '$416call_function.19'}), (418, {'value': '$416call_function.19'}), (420, {'res': '$420load_global.20'}), (422, {'res': '$buy_Fees422.21'}), (424, {'res': '$fee424.22'}), (426, {'res': '$buy_sizes426.23'}), (428, {'res': '$Open428.24'}), (430, {'res': '$marketpostion430.25'}), (432, {'res': '$last_marketpostion432.26'}), (434, {'func': '$420load_global.20', 'args': ['$buy_Fees422.21', '$fee424.22', '$buy_sizes426.23', '$Open428.24', '$marketpostion430.25', '$last_marketpostion432.26'], 'res': '$434call_function.27'}), (436, {'value': '$434call_function.27'}), (438, {'res': '$438load_global.28'}), (440, {'res': '$sell_Fees440.29'}), (442, {'res': '$fee442.30'}), (444, {'res': '$sell_sizes444.31'}), (446, {'res': '$Open446.32'}), (448, {'res': '$marketpostion448.33'}), (450, {'res': '$last_marketpostion450.34'}), (452, {'func': '$438load_global.28', 'args': ['$sell_Fees440.29', '$fee442.30', '$sell_sizes444.31', '$Open446.32', '$marketpostion448.33', '$last_marketpostion450.34'], 'res': '$452call_function.35'}), (454, {'value': '$452call_function.35'}), (456, {'res': '$456load_global.36'}), (458, {'res': '$OpenPostionprofit458.37'}), (460, {'res': '$marketpostion460.38'}), (462, {'res': '$last_marketpostion462.39'}), (464, {'res': '$buy_Fees464.40'}), (466, {'res': '$Open466.41'}), (468, {'res': '$buy_sizes468.42'}), (470, {'res': '$entryprice470.43'}), (472, {'func': '$456load_global.36', 'args': ['$OpenPostionprofit458.37', '$marketpostion460.38', '$last_marketpostion462.39', '$buy_Fees464.40', '$Open466.41', '$buy_sizes468.42', '$entryprice470.43'], 'res': '$472call_function.44'}), (474, {'value': '$472call_function.44'}), (476, {'res': '$476load_global.45'}), (478, {'res': '$ClosedPostionprofit478.46'}), (480, {'res': '$marketpostion480.47'}), (482, {'res': '$last_marketpostion482.48'}), (484, {'res': '$buy_Fees484.49'}), (486, {'res': '$sell_Fees486.50'}), (488, {'res': '$sell_sizes488.51'}), (490, {'res': '$last_entryprice490.52'}), (492, {'res': '$exitsprice492.53'}), (494, {'func': '$476load_global.45', 'args': ['$ClosedPostionprofit478.46', '$marketpostion480.47', '$last_marketpostion482.48', '$buy_Fees484.49', '$sell_Fees486.50', '$sell_sizes488.51', '$last_entryprice490.52', '$exitsprice492.53'], 'res': '$494call_function.54'}), (496, {'value': '$494call_function.54'}), (498, {'res': '$498load_global.55'}), (500, {'res': '$profit500.56'}), (502, {'res': '$marketpostion502.57'}), (504, {'res': '$last_marketpostion504.58'}), (506, {'res': '$Open506.59'}), (508, {'res': '$sell_sizes508.60'}), (510, {'res': '$last_entryprice510.61'}), (512, {'func': '$498load_global.55', 'args': ['$profit500.56', '$marketpostion502.57', '$last_marketpostion504.58', '$Open506.59', '$sell_sizes508.60', '$last_entryprice510.61'], 'res': '$512call_function.62'}), (514, {'value': '$512call_function.62'}), (516, {'res': '$profit516.63'}), (518, {'res': '$const518.64'}), (520, {'lhs': '$profit516.63', 'rhs': '$const518.64', 'res': '$520compare_op.65'}), (522, {'pred': '$520compare_op.65'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={526: ('$phi376.0',), 534: ('$phi376.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=526 nstack_initial=1):
AdaptBlockInfo(insts=((526, {'res': '$Gross_profit526.1'}), (528, {'res': '$profit528.2'}), (530, {'lhs': '$Gross_profit526.1', 'rhs': '$profit528.2', 'res': '$530binary_add.3'}), (532, {'value': '$530binary_add.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={534: ('$phi526.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=534 nstack_initial=1):
AdaptBlockInfo(insts=((534, {'res': '$profit534.1'}), (536, {'res': '$const536.2'}), (538, {'lhs': '$profit534.1', 'rhs': '$const536.2', 'res': '$538compare_op.3'}), (540, {'pred': '$538compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={544: ('$phi534.0',), 552: ('$phi534.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=544 nstack_initial=1):
AdaptBlockInfo(insts=((544, {'res': '$Gross_loss544.1'}), (546, {'res': '$profit546.2'}), (548, {'lhs': '$Gross_loss544.1', 'rhs': '$profit546.2', 'res': '$548binary_add.3'}), (550, {'value': '$548binary_add.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={552: ('$phi544.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=552 nstack_initial=1):
AdaptBlockInfo(insts=((552, {'res': '$marketpostion552.1'}), (554, {'res': '$const554.2'}), (556, {'lhs': '$marketpostion552.1', 'rhs': '$const554.2', 'res': '$556compare_op.3'}), (558, {'pred': '$556compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={562: ('$phi552.0',), 582: ('$phi552.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=562 nstack_initial=1):
AdaptBlockInfo(insts=((562, {'res': '$last_marketpostion562.1'}), (564, {'res': '$const564.2'}), (566, {'lhs': '$last_marketpostion562.1', 'rhs': '$const564.2', 'res': '$566compare_op.3'}), (568, {'pred': '$566compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={572: ('$phi562.0',), 582: ('$phi562.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=572 nstack_initial=1):
AdaptBlockInfo(insts=((572, {'res': '$all_Fees572.1'}), (574, {'res': '$buy_Fees574.2'}), (576, {'lhs': '$all_Fees572.1', 'rhs': '$buy_Fees574.2', 'res': '$576binary_add.3'}), (578, {'value': '$576binary_add.3'}), (580, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={610: ('$phi572.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=582 nstack_initial=1):
AdaptBlockInfo(insts=((582, {'res': '$marketpostion582.1'}), (584, {'res': '$const584.2'}), (586, {'lhs': '$marketpostion582.1', 'rhs': '$const584.2', 'res': '$586compare_op.3'}), (588, {'pred': '$586compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={592: ('$phi582.0',), 610: ('$phi582.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=592 nstack_initial=1):
AdaptBlockInfo(insts=((592, {'res': '$last_marketpostion592.1'}), (594, {'res': '$const594.2'}), (596, {'lhs': '$last_marketpostion592.1', 'rhs': '$const594.2', 'res': '$596compare_op.3'}), (598, {'pred': '$596compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={602: ('$phi592.0',), 610: ('$phi592.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=602 nstack_initial=1):
AdaptBlockInfo(insts=((602, {'res': '$all_Fees602.1'}), (604, {'res': '$sell_Fees604.2'}), (606, {'lhs': '$all_Fees602.1', 'rhs': '$sell_Fees604.2', 'res': '$606binary_add.3'}), (608, {'value': '$606binary_add.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={610: ('$phi602.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=610 nstack_initial=1):
AdaptBlockInfo(insts=((610, {'res': '$init_cash610.1'}), (612, {'res': '$all_Fees612.2'}), (614, {'lhs': '$init_cash610.1', 'rhs': '$all_Fees612.2', 'res': '$614binary_subtract.3'}), (616, {'res': '$Gross_profit616.4'}), (618, {'lhs': '$614binary_subtract.3', 'rhs': '$Gross_profit616.4', 'res': '$618binary_add.5'}), (620, {'res': '$Gross_loss620.6'}), (622, {'lhs': '$618binary_add.5', 'rhs': '$Gross_loss620.6', 'res': '$622binary_add.7'}), (624, {'res': '$OpenPostionprofit624.8'}), (626, {'lhs': '$622binary_add.7', 'rhs': '$OpenPostionprofit624.8', 'res': '$626binary_add.9'}), (628, {'value': '$626binary_add.9'}), (630, {'res': '$entryprice630.10'}), (632, {'res': '$entryprice_array632.11'}), (634, {'res': '$i634.12'}), (636, {'target': '$entryprice_array632.11', 'index': '$i634.12', 'value': '$entryprice630.10'}), (638, {'res': '$buy_Fees638.13'}), (640, {'res': '$buy_Fees_array640.14'}), (642, {'res': '$i642.15'}), (644, {'target': '$buy_Fees_array640.14', 'index': '$i642.15', 'value': '$buy_Fees638.13'}), (646, {'res': '$sell_Fees646.16'}), (648, {'res': '$sell_Fees_array648.17'}), (650, {'res': '$i650.18'}), (652, {'target': '$sell_Fees_array648.17', 'index': '$i650.18', 'value': '$sell_Fees646.16'}), (654, {'res': '$OpenPostionprofit654.19'}), (656, {'res': '$OpenPostionprofit_array656.20'}), (658, {'res': '$i658.21'}), (660, {'target': '$OpenPostionprofit_array656.20', 'index': '$i658.21', 'value': '$OpenPostionprofit654.19'}), (662, {'res': '$ClosedPostionprofit662.22'}), (664, {'res': '$ClosedPostionprofit_array664.23'}), (666, {'res': '$i666.24'}), (668, {'target': '$ClosedPostionprofit_array664.23', 'index': '$i666.24', 'value': '$ClosedPostionprofit662.22'}), (670, {'res': '$profit670.25'}), (672, {'res': '$profit_array672.26'}), (674, {'res': '$i674.27'}), (676, {'target': '$profit_array672.26', 'index': '$i674.27', 'value': '$profit670.25'}), (678, {'res': '$Gross_profit678.28'}), (680, {'res': '$Gross_profit_array680.29'}), (682, {'res': '$i682.30'}), (684, {'target': '$Gross_profit_array680.29', 'index': '$i682.30', 'value': '$Gross_profit678.28'}), (686, {'res': '$Gross_loss686.31'}), (688, {'res': '$Gross_loss_array688.32'}), (690, {'res': '$i690.33'}), (692, {'target': '$Gross_loss_array688.32', 'index': '$i690.33', 'value': '$Gross_loss686.31'}), (694, {'res': '$all_Fees694.34'}), (696, {'res': '$all_Fees_array696.35'}), (698, {'res': '$i698.36'}), (700, {'target': '$all_Fees_array696.35', 'index': '$i698.36', 'value': '$all_Fees694.34'}), (702, {'res': '$netprofit702.37'}), (704, {'res': '$netprofit_array704.38'}), (706, {'res': '$i706.39'}), (708, {'target': '$netprofit_array704.38', 'index': '$i706.39', 'value': '$netprofit702.37'}), (710, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ('$phi610.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=714 nstack_initial=0):
AdaptBlockInfo(insts=((714, {'res': '$714load_global.0'}), (716, {'res': '$marketpostion_array716.1'}), (718, {'func': '$714load_global.0', 'args': ['$marketpostion_array716.1'], 'res': '$718call_function.2'}), (720, {'value': '$718call_function.2'}), (722, {'res': '$neworders722.3'}), (724, {'res': '$marketpostion_array724.4'}), (726, {'res': '$entryprice_array726.5'}), (728, {'res': '$buy_Fees_array728.6'}), (730, {'res': '$sell_Fees_array730.7'}), (732, {'res': '$OpenPostionprofit_array732.8'}), (734, {'res': '$ClosedPostionprofit_array734.9'}), (736, {'res': '$profit_array736.10'}), (738, {'res': '$Gross_profit_array738.11'}), (740, {'res': '$Gross_loss_array740.12'}), (742, {'res': '$all_Fees_array742.13'}), (744, {'res': '$netprofit_array744.14'}), (746, {'items': ['$neworders722.3', '$marketpostion_array724.4', '$entryprice_array726.5', '$buy_Fees_array728.6', '$sell_Fees_array730.7', '$OpenPostionprofit_array732.8', '$ClosedPostionprofit_array734.9', '$profit_array736.10', '$Gross_profit_array738.11', '$Gross_loss_array740.12', '$all_Fees_array742.13', '$netprofit_array744.14'], 'res': '$746build_tuple.15'}), (748, {'retval': '$746build_tuple.15', 'castval': '$748return_value.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    open_array = arg(0, name=open_array)     ['open_array']
    high_array = arg(1, name=high_array)     ['high_array']
    low_array = arg(2, name=low_array)       ['low_array']
    close_array = arg(3, name=close_array)   ['close_array']
    highestarr = arg(4, name=highestarr)     ['highestarr']
    lowestarr = arg(5, name=lowestarr)       ['lowestarr']
    Length = arg(6, name=Length)             ['Length']
    init_cash = arg(7, name=init_cash)       ['init_cash']
    slippage = arg(8, name=slippage)         ['slippage']
    size = arg(9, name=size)                 ['size']
    fee = arg(10, name=fee)                  ['fee']
    ATR_short1 = arg(11, name=ATR_short1)    ['ATR_short1']
    ATR_long2 = arg(12, name=ATR_long2)      ['ATR_long2']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'Length', 'marketpostion_array']
    $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=empty) ['$14load_global.5', '$16load_attr.6']
    entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$16load_attr.6', 'Length', 'entryprice_array']
    $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=empty) ['$26load_global.10', '$28load_attr.11']
    buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$28load_attr.11', 'Length', 'buy_Fees_array']
    $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$38load_global.15']
    $40load_attr.16 = getattr(value=$38load_global.15, attr=empty) ['$38load_global.15', '$40load_attr.16']
    sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$40load_attr.16', 'Length', 'sell_Fees_array']
    $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$50load_global.20']
    $52load_attr.21 = getattr(value=$50load_global.20, attr=empty) ['$50load_global.20', '$52load_attr.21']
    OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$52load_attr.21', 'Length', 'OpenPostionprofit_array']
    $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$62load_global.25']
    $64load_attr.26 = getattr(value=$62load_global.25, attr=empty) ['$62load_global.25', '$64load_attr.26']
    ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$64load_attr.26', 'ClosedPostionprofit_array', 'Length']
    $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$74load_global.30']
    $76load_attr.31 = getattr(value=$74load_global.30, attr=empty) ['$74load_global.30', '$76load_attr.31']
    profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$76load_attr.31', 'Length', 'profit_array']
    $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$86load_global.35']
    $88load_attr.36 = getattr(value=$86load_global.35, attr=empty) ['$86load_global.35', '$88load_attr.36']
    Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$88load_attr.36', 'Gross_profit_array', 'Length']
    $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$98load_global.40']
    $100load_attr.41 = getattr(value=$98load_global.40, attr=empty) ['$100load_attr.41', '$98load_global.40']
    Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$100load_attr.41', 'Gross_loss_array', 'Length']
    $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$110load_global.45']
    $112load_attr.46 = getattr(value=$110load_global.45, attr=empty) ['$110load_global.45', '$112load_attr.46']
    all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$112load_attr.46', 'Length', 'all_Fees_array']
    $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$122load_global.50']
    $124load_attr.51 = getattr(value=$122load_global.50, attr=empty) ['$122load_global.50', '$124load_attr.51']
    netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None) ['$124load_attr.51', 'Length', 'netprofit_array']
    marketpostion = const(int, 0)            ['marketpostion']
    entryprice = const(int, 0)               ['entryprice']
    exitsprice = const(int, 0)               ['exitsprice']
    buy_Fees = const(int, 0)                 ['buy_Fees']
    sell_Fees = const(int, 0)                ['sell_Fees']
    OpenPostionprofit = const(int, 0)        ['OpenPostionprofit']
    ClosedPostionprofit = init_cash          ['ClosedPostionprofit', 'init_cash']
    profit = const(int, 0)                   ['profit']
    buy_sizes = size                         ['buy_sizes', 'size']
    sell_sizes = size                        ['sell_sizes', 'size']
    Gross_profit = const(int, 0)             ['Gross_profit']
    Gross_loss = const(int, 0)               ['Gross_loss']
    all_Fees = const(int, 0)                 ['all_Fees']
    netprofit = const(int, 0)                ['netprofit']
    slippage.1 = slippage                    ['slippage', 'slippage.1']
    fee.1 = fee                              ['fee', 'fee.1']
    direction = const(str, buyonly)          ['direction']
    $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>)) ['$202load_global.72']
    ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None) ['$202load_global.72', 'ATR_short', 'ATR_short1', 'Length', 'close_array', 'high_array', 'low_array']
    $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>)) ['$218load_global.79']
    ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.79', 'ATR_long', 'ATR_long2', 'Length', 'close_array', 'high_array', 'low_array']
    $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$234load_global.86']
    $236load_method.87 = getattr(value=$234load_global.86, attr=where) ['$234load_global.86', '$236load_method.87']
    $242binary_subtract.90 = high_array - highestarr ['$242binary_subtract.90', 'high_array', 'highestarr']
    $const244.91 = const(int, 0)             ['$const244.91']
    $246compare_op.92 = $242binary_subtract.90 > $const244.91 ['$242binary_subtract.90', '$246compare_op.92', '$const244.91']
    $252binary_subtract.95 = ATR_short - ATR_long ['$252binary_subtract.95', 'ATR_long', 'ATR_short']
    $const254.96 = const(int, 0)             ['$const254.96']
    $256compare_op.97 = $252binary_subtract.95 > $const254.96 ['$252binary_subtract.95', '$256compare_op.97', '$const254.96']
    $258binary_and.98 = $246compare_op.92 & $256compare_op.97 ['$246compare_op.92', '$256compare_op.97', '$258binary_and.98']
    $const260.99 = const(int, 1)             ['$const260.99']
    $const262.100 = const(int, 0)            ['$const262.100']
    trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None) ['$236load_method.87', '$258binary_and.98', '$const260.99', '$const262.100', 'trends']
    $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$268load_global.102']
    $270load_method.103 = getattr(value=$268load_global.102, attr=where) ['$268load_global.102', '$270load_method.103']
    $276binary_subtract.106 = low_array - lowestarr ['$276binary_subtract.106', 'low_array', 'lowestarr']
    $const278.107 = const(int, 0)            ['$const278.107']
    $280compare_op.108 = $276binary_subtract.106 < $const278.107 ['$276binary_subtract.106', '$280compare_op.108', '$const278.107']
    $const282.109 = const(int, -1)           ['$const282.109']
    orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_method.103', '$280compare_op.108', '$const282.109', 'orders', 'trends']
    $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$290load_global.112']
    $292load_method.113 = getattr(value=$290load_global.112, attr=roll) ['$290load_global.112', '$292load_method.113']
    $const296.115 = const(int, 1)            ['$const296.115']
    shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None) ['$292load_method.113', '$const296.115', 'orders', 'shiftorder']
    $const302.117 = const(int, 0)            ['$const302.117']
    $const306.119 = const(int, 0)            ['$const306.119']
    shiftorder[$const306.119] = $const302.117 ['$const302.117', '$const306.119', 'shiftorder']
    $310load_global.120 = global(range: <class 'range'>) ['$310load_global.120']
    $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None) ['$310load_global.120', '$314call_function.122', 'Length']
    $316get_iter.123 = getiter(value=$314call_function.122) ['$314call_function.122', '$316get_iter.123']
    $phi318.0 = $316get_iter.123             ['$316get_iter.123', '$phi318.0']
    jump 318                                 []
label 318:
    $318for_iter.1 = iternext(value=$phi318.0) ['$318for_iter.1', '$phi318.0']
    $318for_iter.2 = pair_first(value=$318for_iter.1) ['$318for_iter.1', '$318for_iter.2']
    $318for_iter.3 = pair_second(value=$318for_iter.1) ['$318for_iter.1', '$318for_iter.3']
    $phi322.1 = $318for_iter.2               ['$318for_iter.2', '$phi322.1']
    branch $318for_iter.3, 322, 714          ['$318for_iter.3']
label 322:
    i = $phi322.1                            ['$phi322.1', 'i']
    Open = getitem(value=open_array, index=i, fn=<built-in function getitem>) ['Open', 'i', 'open_array']
    current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>) ['current_order', 'i', 'shiftorder']
    last_marketpostion = marketpostion       ['last_marketpostion', 'marketpostion']
    last_entryprice = entryprice             ['entryprice', 'last_entryprice']
    $const350.11 = const(int, 1)             ['$const350.11']
    $352compare_op.12 = current_order == $const350.11 ['$352compare_op.12', '$const350.11', 'current_order']
    bool354 = global(bool: <class 'bool'>)   ['bool354']
    $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None) ['$352compare_op.12', '$354pred', 'bool354']
    branch $354pred, 358, 362                ['$354pred']
label 358:
    marketpostion = const(int, 1)            ['marketpostion']
    jump 362                                 []
label 362:
    $const364.2 = const(int, -1)             ['$const364.2']
    $366compare_op.3 = current_order == $const364.2 ['$366compare_op.3', '$const364.2', 'current_order']
    bool368 = global(bool: <class 'bool'>)   ['bool368']
    $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None) ['$366compare_op.3', '$368pred', 'bool368']
    branch $368pred, 372, 376                ['$368pred']
label 372:
    marketpostion = const(int, 0)            ['marketpostion']
    jump 376                                 []
label 376:
    marketpostion_array[i] = marketpostion   ['i', 'marketpostion', 'marketpostion_array']
    $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>)) ['$384load_global.4']
    entryprice = call $384load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None) ['$384load_global.4', 'Open', 'direction', 'entryprice', 'entryprice', 'last_marketpostion', 'marketpostion', 'slippage.1']
    $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>)) ['$402load_global.12']
    exitsprice = call $402load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None) ['$402load_global.12', 'Open', 'direction', 'exitsprice', 'exitsprice', 'last_marketpostion', 'marketpostion', 'slippage.1']
    $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>)) ['$420load_global.20']
    buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None) ['$420load_global.20', 'Open', 'buy_Fees', 'buy_Fees', 'buy_sizes', 'fee.1', 'last_marketpostion', 'marketpostion']
    $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>)) ['$438load_global.28']
    sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None) ['$438load_global.28', 'Open', 'fee.1', 'last_marketpostion', 'marketpostion', 'sell_Fees', 'sell_Fees', 'sell_sizes']
    $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>)) ['$456load_global.36']
    OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None) ['$456load_global.36', 'Open', 'OpenPostionprofit', 'OpenPostionprofit', 'buy_Fees', 'buy_sizes', 'entryprice', 'last_marketpostion', 'marketpostion']
    $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>)) ['$476load_global.45']
    ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None) ['$476load_global.45', 'ClosedPostionprofit', 'ClosedPostionprofit', 'buy_Fees', 'exitsprice', 'last_entryprice', 'last_marketpostion', 'marketpostion', 'sell_Fees', 'sell_sizes']
    $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>)) ['$498load_global.55']
    profit = call $498load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None) ['$498load_global.55', 'Open', 'last_entryprice', 'last_marketpostion', 'marketpostion', 'profit', 'profit', 'sell_sizes']
    $const518.64 = const(int, 0)             ['$const518.64']
    $520compare_op.65 = profit > $const518.64 ['$520compare_op.65', '$const518.64', 'profit']
    bool522 = global(bool: <class 'bool'>)   ['bool522']
    $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None) ['$520compare_op.65', '$522pred', 'bool522']
    branch $522pred, 526, 534                ['$522pred']
label 526:
    $530binary_add.3 = Gross_profit + profit ['$530binary_add.3', 'Gross_profit', 'profit']
    Gross_profit = $530binary_add.3          ['$530binary_add.3', 'Gross_profit']
    jump 534                                 []
label 534:
    $const536.2 = const(int, 0)              ['$const536.2']
    $538compare_op.3 = profit < $const536.2  ['$538compare_op.3', '$const536.2', 'profit']
    bool540 = global(bool: <class 'bool'>)   ['bool540']
    $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None) ['$538compare_op.3', '$540pred', 'bool540']
    branch $540pred, 544, 552                ['$540pred']
label 544:
    $548binary_add.3 = Gross_loss + profit   ['$548binary_add.3', 'Gross_loss', 'profit']
    Gross_loss = $548binary_add.3            ['$548binary_add.3', 'Gross_loss']
    jump 552                                 []
label 552:
    $const554.2 = const(int, 1)              ['$const554.2']
    $556compare_op.3 = marketpostion == $const554.2 ['$556compare_op.3', '$const554.2', 'marketpostion']
    bool558 = global(bool: <class 'bool'>)   ['bool558']
    $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None) ['$556compare_op.3', '$558pred', 'bool558']
    branch $558pred, 562, 582                ['$558pred']
label 562:
    $const564.2 = const(int, 0)              ['$const564.2']
    $566compare_op.3 = last_marketpostion == $const564.2 ['$566compare_op.3', '$const564.2', 'last_marketpostion']
    bool568 = global(bool: <class 'bool'>)   ['bool568']
    $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None) ['$566compare_op.3', '$568pred', 'bool568']
    branch $568pred, 572, 582                ['$568pred']
label 572:
    $576binary_add.3 = all_Fees + buy_Fees   ['$576binary_add.3', 'all_Fees', 'buy_Fees']
    all_Fees = $576binary_add.3              ['$576binary_add.3', 'all_Fees']
    jump 610                                 []
label 582:
    $const584.2 = const(int, 0)              ['$const584.2']
    $586compare_op.3 = marketpostion == $const584.2 ['$586compare_op.3', '$const584.2', 'marketpostion']
    bool588 = global(bool: <class 'bool'>)   ['bool588']
    $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None) ['$586compare_op.3', '$588pred', 'bool588']
    branch $588pred, 592, 610                ['$588pred']
label 592:
    $const594.2 = const(int, 1)              ['$const594.2']
    $596compare_op.3 = last_marketpostion == $const594.2 ['$596compare_op.3', '$const594.2', 'last_marketpostion']
    bool598 = global(bool: <class 'bool'>)   ['bool598']
    $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None) ['$596compare_op.3', '$598pred', 'bool598']
    branch $598pred, 602, 610                ['$598pred']
label 602:
    $606binary_add.3 = all_Fees + sell_Fees  ['$606binary_add.3', 'all_Fees', 'sell_Fees']
    all_Fees = $606binary_add.3              ['$606binary_add.3', 'all_Fees']
    jump 610                                 []
label 610:
    $614binary_subtract.3 = init_cash - all_Fees ['$614binary_subtract.3', 'all_Fees', 'init_cash']
    $618binary_add.5 = $614binary_subtract.3 + Gross_profit ['$614binary_subtract.3', '$618binary_add.5', 'Gross_profit']
    $622binary_add.7 = $618binary_add.5 + Gross_loss ['$618binary_add.5', '$622binary_add.7', 'Gross_loss']
    netprofit = $622binary_add.7 + OpenPostionprofit ['$622binary_add.7', 'OpenPostionprofit', 'netprofit']
    entryprice_array[i] = entryprice         ['entryprice', 'entryprice_array', 'i']
    buy_Fees_array[i] = buy_Fees             ['buy_Fees', 'buy_Fees_array', 'i']
    sell_Fees_array[i] = sell_Fees           ['i', 'sell_Fees', 'sell_Fees_array']
    OpenPostionprofit_array[i] = OpenPostionprofit ['OpenPostionprofit', 'OpenPostionprofit_array', 'i']
    ClosedPostionprofit_array[i] = ClosedPostionprofit ['ClosedPostionprofit', 'ClosedPostionprofit_array', 'i']
    profit_array[i] = profit                 ['i', 'profit', 'profit_array']
    Gross_profit_array[i] = Gross_profit     ['Gross_profit', 'Gross_profit_array', 'i']
    Gross_loss_array[i] = Gross_loss         ['Gross_loss', 'Gross_loss_array', 'i']
    all_Fees_array[i] = all_Fees             ['all_Fees', 'all_Fees_array', 'i']
    netprofit_array[i] = netprofit           ['i', 'netprofit', 'netprofit_array']
    jump 318                                 []
label 714:
    $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>)) ['$714load_global.0']
    neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None) ['$714load_global.0', 'marketpostion_array', 'neworders']
    $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)]) ['$746build_tuple.15', 'ClosedPostionprofit_array', 'Gross_loss_array', 'Gross_profit_array', 'OpenPostionprofit_array', 'all_Fees_array', 'buy_Fees_array', 'entryprice_array', 'marketpostion_array', 'netprofit_array', 'neworders', 'profit_array', 'sell_Fees_array']
    $748return_value.16 = cast(value=$746build_tuple.15) ['$746build_tuple.15', '$748return_value.16']
    return $748return_value.16               ['$748return_value.16']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01970a7d90>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$100load_attr.41': [<numba.core.ir.Assign object at 0x7f01970f4280>],
             '$110load_global.45': [<numba.core.ir.Assign object at 0x7f01970f49a0>],
             '$112load_attr.46': [<numba.core.ir.Assign object at 0x7f01970f4b20>],
             '$122load_global.50': [<numba.core.ir.Assign object at 0x7f01970f7280>],
             '$124load_attr.51': [<numba.core.ir.Assign object at 0x7f01970f7400>],
             '$14load_global.5': [<numba.core.ir.Assign object at 0x7f01970e83a0>],
             '$16load_attr.6': [<numba.core.ir.Assign object at 0x7f01970e8520>],
             '$202load_global.72': [<numba.core.ir.Assign object at 0x7f01970fc6a0>],
             '$218load_global.79': [<numba.core.ir.Assign object at 0x7f01970fe0a0>],
             '$234load_global.86': [<numba.core.ir.Assign object at 0x7f01970fea60>],
             '$236load_method.87': [<numba.core.ir.Assign object at 0x7f01970febe0>],
             '$242binary_subtract.90': [<numba.core.ir.Assign object at 0x7f01970fefa0>],
             '$246compare_op.92': [<numba.core.ir.Assign object at 0x7f01971012e0>],
             '$252binary_subtract.95': [<numba.core.ir.Assign object at 0x7f01971016a0>],
             '$256compare_op.97': [<numba.core.ir.Assign object at 0x7f01971019a0>],
             '$258binary_and.98': [<numba.core.ir.Assign object at 0x7f0197101b20>],
             '$268load_global.102': [<numba.core.ir.Assign object at 0x7f0197103280>],
             '$26load_global.10': [<numba.core.ir.Assign object at 0x7f01970e8c40>],
             '$270load_method.103': [<numba.core.ir.Assign object at 0x7f0197103400>],
             '$276binary_subtract.106': [<numba.core.ir.Assign object at 0x7f01971037c0>],
             '$280compare_op.108': [<numba.core.ir.Assign object at 0x7f0197103ac0>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0x7f01970e8dc0>],
             '$290load_global.112': [<numba.core.ir.Assign object at 0x7f01971051c0>],
             '$292load_method.113': [<numba.core.ir.Assign object at 0x7f0197105340>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01970e1ac0>],
             '$310load_global.120': [<numba.core.ir.Assign object at 0x7f0197105ee0>],
             '$314call_function.122': [<numba.core.ir.Assign object at 0x7f01971081f0>],
             '$316get_iter.123': [<numba.core.ir.Assign object at 0x7f0197108340>],
             '$318for_iter.1': [<numba.core.ir.Assign object at 0x7f01970ef970>],
             '$318for_iter.2': [<numba.core.ir.Assign object at 0x7f01970f24c0>],
             '$318for_iter.3': [<numba.core.ir.Assign object at 0x7f01970f43d0>],
             '$352compare_op.12': [<numba.core.ir.Assign object at 0x7f0197108640>],
             '$354pred': [<numba.core.ir.Assign object at 0x7f01971088e0>],
             '$366compare_op.3': [<numba.core.ir.Assign object at 0x7f0197108d60>],
             '$368pred': [<numba.core.ir.Assign object at 0x7f019710c040>],
             '$384load_global.4': [<numba.core.ir.Assign object at 0x7f019710c940>],
             '$38load_global.15': [<numba.core.ir.Assign object at 0x7f01970ec520>],
             '$402load_global.12': [<numba.core.ir.Assign object at 0x7f019710e400>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x7f01970ec6a0>],
             '$420load_global.20': [<numba.core.ir.Assign object at 0x7f019710ee80>],
             '$438load_global.28': [<numba.core.ir.Assign object at 0x7f0197111940>],
             '$456load_global.36': [<numba.core.ir.Assign object at 0x7f0197113400>],
             '$476load_global.45': [<numba.core.ir.Assign object at 0x7f0197113fa0>],
             '$498load_global.55': [<numba.core.ir.Assign object at 0x7f0197116ca0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01970e1c40>],
             '$50load_global.20': [<numba.core.ir.Assign object at 0x7f01970ecdc0>],
             '$520compare_op.65': [<numba.core.ir.Assign object at 0x7f0197115a00>],
             '$522pred': [<numba.core.ir.Assign object at 0x7f0197115ca0>],
             '$52load_attr.21': [<numba.core.ir.Assign object at 0x7f01970ecf40>],
             '$530binary_add.3': [<numba.core.ir.Assign object at 0x7f0197111130>],
             '$538compare_op.3': [<numba.core.ir.Assign object at 0x7f0197113250>],
             '$540pred': [<numba.core.ir.Assign object at 0x7f0197113c10>],
             '$548binary_add.3': [<numba.core.ir.Assign object at 0x7f0197116af0>],
             '$556compare_op.3': [<numba.core.ir.Assign object at 0x7f0197115280>],
             '$558pred': [<numba.core.ir.Assign object at 0x7f0197115e20>],
             '$566compare_op.3': [<numba.core.ir.Assign object at 0x7f0197119340>],
             '$568pred': [<numba.core.ir.Assign object at 0x7f01971195e0>],
             '$576binary_add.3': [<numba.core.ir.Assign object at 0x7f0197119a60>],
             '$586compare_op.3': [<numba.core.ir.Assign object at 0x7f019711c040>],
             '$588pred': [<numba.core.ir.Assign object at 0x7f019711c2e0>],
             '$596compare_op.3': [<numba.core.ir.Assign object at 0x7f019711c7c0>],
             '$598pred': [<numba.core.ir.Assign object at 0x7f019711ca60>],
             '$606binary_add.3': [<numba.core.ir.Assign object at 0x7f019711cee0>],
             '$614binary_subtract.3': [<numba.core.ir.Assign object at 0x7f019711e400>],
             '$618binary_add.5': [<numba.core.ir.Assign object at 0x7f019711e6a0>],
             '$622binary_add.7': [<numba.core.ir.Assign object at 0x7f019711e940>],
             '$62load_global.25': [<numba.core.ir.Assign object at 0x7f01970ef6a0>],
             '$64load_attr.26': [<numba.core.ir.Assign object at 0x7f01970ef820>],
             '$714load_global.0': [<numba.core.ir.Assign object at 0x7f019711ecd0>],
             '$746build_tuple.15': [<numba.core.ir.Assign object at 0x7f01970a4eb0>],
             '$748return_value.16': [<numba.core.ir.Assign object at 0x7f01970a7040>],
             '$74load_global.30': [<numba.core.ir.Assign object at 0x7f01970eff40>],
             '$76load_attr.31': [<numba.core.ir.Assign object at 0x7f01970f2100>],
             '$86load_global.35': [<numba.core.ir.Assign object at 0x7f01970f2820>],
             '$88load_attr.36': [<numba.core.ir.Assign object at 0x7f01970f29a0>],
             '$98load_global.40': [<numba.core.ir.Assign object at 0x7f01970f4100>],
             '$const244.91': [<numba.core.ir.Assign object at 0x7f0197101160>],
             '$const254.96': [<numba.core.ir.Assign object at 0x7f0197101820>],
             '$const260.99': [<numba.core.ir.Assign object at 0x7f0197101ca0>],
             '$const262.100': [<numba.core.ir.Assign object at 0x7f0197101e20>],
             '$const278.107': [<numba.core.ir.Assign object at 0x7f0197103940>],
             '$const282.109': [<numba.core.ir.Assign object at 0x7f0197103c40>],
             '$const296.115': [<numba.core.ir.Assign object at 0x7f01971055e0>],
             '$const302.117': [<numba.core.ir.Assign object at 0x7f0197105a00>],
             '$const306.119': [<numba.core.ir.Assign object at 0x7f0197105ca0>],
             '$const350.11': [<numba.core.ir.Assign object at 0x7f01971084c0>],
             '$const364.2': [<numba.core.ir.Assign object at 0x7f0197108be0>],
             '$const518.64': [<numba.core.ir.Assign object at 0x7f0197115880>],
             '$const536.2': [<numba.core.ir.Assign object at 0x7f0197111df0>],
             '$const554.2': [<numba.core.ir.Assign object at 0x7f019710cdf0>],
             '$const564.2': [<numba.core.ir.Assign object at 0x7f01971191c0>],
             '$const584.2': [<numba.core.ir.Assign object at 0x7f0197119e80>],
             '$const594.2': [<numba.core.ir.Assign object at 0x7f019711c640>],
             '$phi318.0': [<numba.core.ir.Assign object at 0x7f01970e8160>],
             '$phi322.1': [<numba.core.ir.Assign object at 0x7f01970ef0a0>],
             'ATR_long': [<numba.core.ir.Assign object at 0x7f01970fe7f0>],
             'ATR_long2': [<numba.core.ir.Assign object at 0x7f01970e1940>],
             'ATR_short': [<numba.core.ir.Assign object at 0x7f01970fcdf0>],
             'ATR_short1': [<numba.core.ir.Assign object at 0x7f01970e1820>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x7f01970f9be0>,
                                     <numba.core.ir.Assign object at 0x7f0197116a90>],
             'ClosedPostionprofit_array': [<numba.core.ir.Assign object at 0x7f01970efdf0>],
             'Gross_loss': [<numba.core.ir.Assign object at 0x7f01970fa760>,
                            <numba.core.ir.Assign object at 0x7f0197116f10>],
             'Gross_loss_array': [<numba.core.ir.Assign object at 0x7f01970f4850>],
             'Gross_profit': [<numba.core.ir.Assign object at 0x7f01970fa4c0>,
                              <numba.core.ir.Assign object at 0x7f0197111370>],
             'Gross_profit_array': [<numba.core.ir.Assign object at 0x7f01970f2f70>],
             'Length': [<numba.core.ir.Assign object at 0x7f01970e1280>],
             'Open': [<numba.core.ir.Assign object at 0x7f01970fa8b0>],
             'OpenPostionprofit': [<numba.core.ir.Assign object at 0x7f01970f9880>,
                                   <numba.core.ir.Assign object at 0x7f0197113d90>],
             'OpenPostionprofit_array': [<numba.core.ir.Assign object at 0x7f01970ef550>],
             'all_Fees': [<numba.core.ir.Assign object at 0x7f01970faa00>,
                          <numba.core.ir.Assign object at 0x7f0197119b20>,
                          <numba.core.ir.Assign object at 0x7f019711cfa0>],
             'all_Fees_array': [<numba.core.ir.Assign object at 0x7f01970f7130>],
             'bool354': [<numba.core.ir.Assign object at 0x7f01971087c0>],
             'bool368': [<numba.core.ir.Assign object at 0x7f0197108ee0>],
             'bool522': [<numba.core.ir.Assign object at 0x7f0197115b80>],
             'bool540': [<numba.core.ir.Assign object at 0x7f01971138b0>],
             'bool558': [<numba.core.ir.Assign object at 0x7f0197115700>],
             'bool568': [<numba.core.ir.Assign object at 0x7f01971194c0>],
             'bool588': [<numba.core.ir.Assign object at 0x7f019711c1c0>],
             'bool598': [<numba.core.ir.Assign object at 0x7f019711c940>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x7f01970f9340>,
                          <numba.core.ir.Assign object at 0x7f0197111730>],
             'buy_Fees_array': [<numba.core.ir.Assign object at 0x7f01970ec3d0>],
             'buy_sizes': [<numba.core.ir.Assign object at 0x7f01970fa100>],
             'close_array': [<numba.core.ir.Assign object at 0x7f0197196ee0>],
             'current_order': [<numba.core.ir.Assign object at 0x7f01970fe310>],
             'direction': [<numba.core.ir.Assign object at 0x7f01970fc400>],
             'entryprice': [<numba.core.ir.Assign object at 0x7f01970f7dc0>,
                            <numba.core.ir.Assign object at 0x7f019710e1f0>],
             'entryprice_array': [<numba.core.ir.Assign object at 0x7f01970e8af0>],
             'exitsprice': [<numba.core.ir.Assign object at 0x7f01970f90a0>,
                            <numba.core.ir.Assign object at 0x7f019710ec70>],
             'fee': [<numba.core.ir.Assign object at 0x7f01970e1700>],
             'fee.1': [<numba.core.ir.Assign object at 0x7f01970fc280>],
             'high_array': [<numba.core.ir.Assign object at 0x7f0197196790>],
             'highestarr': [<numba.core.ir.Assign object at 0x7f01970e1040>],
             'i': [<numba.core.ir.Assign object at 0x7f01970f7f10>],
             'init_cash': [<numba.core.ir.Assign object at 0x7f01970e13a0>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x7f01971058b0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0197103130>],
             'low_array': [<numba.core.ir.Assign object at 0x7f0197196dc0>],
             'lowestarr': [<numba.core.ir.Assign object at 0x7f01970e1160>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f01970f7b20>,
                               <numba.core.ir.Assign object at 0x7f01970fe8e0>,
                               <numba.core.ir.Assign object at 0x7f019710c280>],
             'marketpostion_array': [<numba.core.ir.Assign object at 0x7f01970e8250>],
             'netprofit': [<numba.core.ir.Assign object at 0x7f01970faca0>,
                           <numba.core.ir.Assign object at 0x7f019711ebe0>],
             'netprofit_array': [<numba.core.ir.Assign object at 0x7f01970f79d0>],
             'neworders': [<numba.core.ir.Assign object at 0x7f01970a0640>],
             'open_array': [<numba.core.ir.Assign object at 0x7f0197196550>],
             'orders': [<numba.core.ir.Assign object at 0x7f0197103f10>],
             'profit': [<numba.core.ir.Assign object at 0x7f01970f9d60>,
                        <numba.core.ir.Assign object at 0x7f0197115550>],
             'profit_array': [<numba.core.ir.Assign object at 0x7f01970f26d0>],
             'sell_Fees': [<numba.core.ir.Assign object at 0x7f01970f95e0>,
                           <numba.core.ir.Assign object at 0x7f01971131f0>],
             'sell_Fees_array': [<numba.core.ir.Assign object at 0x7f01970ecc70>],
             'sell_sizes': [<numba.core.ir.Assign object at 0x7f01970fa340>],
             'shiftorder': [<numba.core.ir.Assign object at 0x7f0197105790>],
             'size': [<numba.core.ir.Assign object at 0x7f01970e15e0>],
             'slippage': [<numba.core.ir.Assign object at 0x7f01970e14c0>],
             'slippage.1': [<numba.core.ir.Assign object at 0x7f01970fc040>],
             'trends': [<numba.core.ir.Assign object at 0x7f0197101fd0>]})
2023-01-02 21:03 DEBUG SSA violators {'ClosedPostionprofit',
 'Gross_loss',
 'Gross_profit',
 'OpenPostionprofit',
 'all_Fees',
 'buy_Fees',
 'entryprice',
 'exitsprice',
 'marketpostion',
 'netprofit',
 'profit',
 'sell_Fees'}
2023-01-02 21:03 DEBUG Fix SSA violator on var marketpostion
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG first assign: marketpostion
2023-01-02 21:03 DEBUG replaced with: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 1)
2023-01-02 21:03 DEBUG replaced with: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0197196670>],
             358: [<numba.core.ir.Assign object at 0x7f0197176460>],
             372: [<numba.core.ir.Assign object at 0x7f01970a75b0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=last_marketpostion = marketpostion
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node marketpostion.3 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG insert phi node marketpostion.4 = phi(incoming_values=[], incoming_blocks=[]) at 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG insert phi node marketpostion.5 = phi(incoming_values=[], incoming_blocks=[]) at 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG incoming_def marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451)], incoming_blocks=[0])
2023-01-02 21:03 DEBUG find_def_from_bottom label 358
2023-01-02 21:03 DEBUG incoming_def marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG incoming_def marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG find_def_from_bottom label 372
2023-01-02 21:03 DEBUG incoming_def marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG incoming_def marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG replaced with: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=marketpostion_array[i] = marketpostion
2023-01-02 21:03 DEBUG replaced with: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=entryprice = call $384load_global.4(entryprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=exitsprice = call $402load_global.12(exitsprice, Open, marketpostion, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=profit = call $498load_global.55(profit, marketpostion, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion, nb.py:451), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion == $const554.2
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=$556compare_op.3 = marketpostion == $const554.2
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion == $const584.2
2023-01-02 21:03 DEBUG find_def var='marketpostion' stmt=$586compare_op.3 = marketpostion == $const584.2
2023-01-02 21:03 DEBUG find_def_from_top label 582
2023-01-02 21:03 DEBUG idom 552 from label 582
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var Gross_profit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG first assign: Gross_profit
2023-01-02 21:03 DEBUG replaced with: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit = $530binary_add.3
2023-01-02 21:03 DEBUG replaced with: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a78b0>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01970a7490>],
             526: [<numba.core.ir.Assign object at 0x7f01970a7820>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit + profit
2023-01-02 21:03 DEBUG find_def var='Gross_profit' stmt=$530binary_add.3 = Gross_profit + profit
2023-01-02 21:03 DEBUG find_def_from_top label 526
2023-01-02 21:03 DEBUG idom 376 from label 526
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node Gross_profit.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG insert phi node Gross_profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG incoming_def Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461)], incoming_blocks=[0])
2023-01-02 21:03 DEBUG find_def_from_bottom label 526
2023-01-02 21:03 DEBUG incoming_def Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG incoming_def Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG replaced with: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit
2023-01-02 21:03 DEBUG find_def var='Gross_profit' stmt=$618binary_add.5 = $614binary_subtract.3 + Gross_profit
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG replaced with: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit
2023-01-02 21:03 DEBUG find_def var='Gross_profit' stmt=Gross_profit_array[i] = Gross_profit
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG replaced with: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var OpenPostionprofit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG first assign: OpenPostionprofit
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ae50>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f019706ad60>],
             376: [<numba.core.ir.Assign object at 0x7f01970a7fa0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='OpenPostionprofit' stmt=OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node OpenPostionprofit.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG incoming_def OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit, nb.py:456), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG find_def var='OpenPostionprofit' stmt=netprofit = $622binary_add.7 + OpenPostionprofit
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: netprofit = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG find_def var='OpenPostionprofit' stmt=OpenPostionprofit_array[i] = OpenPostionprofit
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var netprofit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG first assign: netprofit
2023-01-02 21:03 DEBUG replaced with: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG replaced with: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01971963a0>],
             610: [<numba.core.ir.Assign object at 0x7f019706c910>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG find_def var='netprofit' stmt=netprofit_array[i] = netprofit
2023-01-02 21:03 DEBUG replaced with: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7fa0>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var sell_Fees
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG first assign: sell_Fees
2023-01-02 21:03 DEBUG replaced with: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: sell_Fees.1 = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196370>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0197196610>],
             376: [<numba.core.ir.Assign object at 0x7f01970a7a30>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='sell_Fees' stmt=sell_Fees.1 = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node sell_Fees.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG incoming_def sell_Fees.1 = call $438load_global.28(sell_Fees, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees, nb.py:455), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='sell_Fees' stmt=ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees, nb.py:455), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG find_def var='sell_Fees' stmt=$606binary_add.3 = all_Fees + sell_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 602
2023-01-02 21:03 DEBUG idom 592 from label 602
2023-01-02 21:03 DEBUG find_def_from_bottom label 592
2023-01-02 21:03 DEBUG find_def_from_top label 592
2023-01-02 21:03 DEBUG idom 582 from label 592
2023-01-02 21:03 DEBUG find_def_from_bottom label 582
2023-01-02 21:03 DEBUG find_def_from_top label 582
2023-01-02 21:03 DEBUG idom 552 from label 582
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG find_def var='sell_Fees' stmt=sell_Fees_array[i] = sell_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706ad90>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var profit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG first assign: profit
2023-01-02 21:03 DEBUG replaced with: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: profit.1 = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7c10>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01970a7370>],
             376: [<numba.core.ir.Assign object at 0x7f0197196850>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='profit' stmt=profit.1 = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node profit.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def profit = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG incoming_def profit.1 = call $498load_global.55(profit, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit, nb.py:458), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG find_def var='profit' stmt=$520compare_op.65 = profit > $const518.64
2023-01-02 21:03 DEBUG replaced with: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG find_def var='profit' stmt=$530binary_add.3 = Gross_profit.2 + profit
2023-01-02 21:03 DEBUG find_def_from_top label 526
2023-01-02 21:03 DEBUG idom 376 from label 526
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG find_def var='profit' stmt=$538compare_op.3 = profit < $const536.2
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG find_def var='profit' stmt=$548binary_add.3 = Gross_loss + profit
2023-01-02 21:03 DEBUG find_def_from_top label 544
2023-01-02 21:03 DEBUG idom 534 from label 544
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: $548binary_add.3 = Gross_loss + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit
2023-01-02 21:03 DEBUG find_def var='profit' stmt=profit_array[i] = profit
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706cee0>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var buy_Fees
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG first assign: buy_Fees
2023-01-02 21:03 DEBUG replaced with: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: buy_Fees.1 = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706afa0>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f019706ae20>],
             376: [<numba.core.ir.Assign object at 0x7f01970a7190>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='buy_Fees' stmt=buy_Fees.1 = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node buy_Fees.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG incoming_def buy_Fees.1 = call $420load_global.20(buy_Fees, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees, nb.py:454), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='buy_Fees' stmt=OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='buy_Fees' stmt=ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees, nb.py:454), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG find_def var='buy_Fees' stmt=$576binary_add.3 = all_Fees + buy_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 572
2023-01-02 21:03 DEBUG idom 562 from label 572
2023-01-02 21:03 DEBUG find_def_from_bottom label 562
2023-01-02 21:03 DEBUG find_def_from_top label 562
2023-01-02 21:03 DEBUG idom 552 from label 562
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG find_def var='buy_Fees' stmt=buy_Fees_array[i] = buy_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0197196850>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var Gross_loss
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG first assign: Gross_loss
2023-01-02 21:03 DEBUG replaced with: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss = $548binary_add.3
2023-01-02 21:03 DEBUG replaced with: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ce20>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f019706ca90>],
             544: [<numba.core.ir.Assign object at 0x7f01970a77c0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss + profit.1
2023-01-02 21:03 DEBUG find_def var='Gross_loss' stmt=$548binary_add.3 = Gross_loss + profit.1
2023-01-02 21:03 DEBUG find_def_from_top label 544
2023-01-02 21:03 DEBUG idom 534 from label 544
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node Gross_loss.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG insert phi node Gross_loss.3 = phi(incoming_values=[], incoming_blocks=[]) at 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 544
2023-01-02 21:03 DEBUG incoming_def Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG incoming_def Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462)], incoming_blocks=[0])
2023-01-02 21:03 DEBUG incoming_def Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG replaced with: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG find_def var='Gross_loss' stmt=$622binary_add.7 = $618binary_add.5 + Gross_loss
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG replaced with: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG find_def var='Gross_loss' stmt=Gross_loss_array[i] = Gross_loss
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG replaced with: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7190>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var exitsprice
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG first assign: exitsprice
2023-01-02 21:03 DEBUG replaced with: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: exitsprice.1 = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197196490>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f019706d7c0>],
             376: [<numba.core.ir.Assign object at 0x7f019706c7f0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='exitsprice' stmt=exitsprice.1 = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node exitsprice.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG incoming_def exitsprice.1 = call $402load_global.12(exitsprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice, nb.py:453), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: exitsprice.1 = call $402load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice.2, nb.py:498), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='exitsprice' stmt=ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice, nb.py:453)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706dee0>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var entryprice
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG first assign: entryprice
2023-01-02 21:03 DEBUG replaced with: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:453), Var(exitsprice.1, nb.py:505)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: entryprice.1 = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = call $402load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice.2, nb.py:498), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01970a78b0>],
             376: [<numba.core.ir.Assign object at 0x7f019706acd0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:453), Var(exitsprice.1, nb.py:505)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice
2023-01-02 21:03 DEBUG find_def var='entryprice' stmt=last_entryprice = entryprice
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node entryprice.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def entryprice = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG incoming_def entryprice.1 = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: last_entryprice = entryprice.2
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice.1 = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='entryprice' stmt=entryprice.1 = call $384load_global.4(entryprice, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice, nb.py:452), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG replaced with: entryprice.1 = call $384load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice.2, nb.py:486), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = call $402load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice.2, nb.py:498), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='entryprice' stmt=OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice, nb.py:452)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice.1, nb.py:501)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG find_def var='entryprice' stmt=entryprice_array[i] = entryprice
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: entryprice_array[i] = entryprice.1
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019706c7f0>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var ClosedPostionprofit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG first assign: ClosedPostionprofit
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:452), Var(entryprice.1, nb.py:501)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:453), Var(exitsprice.1, nb.py:505)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice.2
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice.1 = call $384load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice.2, nb.py:486), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = call $402load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice.2, nb.py:498), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice.1, nb.py:501)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.1 = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019706ad30>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f019706dee0>],
             376: [<numba.core.ir.Assign object at 0x7f01970a76a0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:452), Var(entryprice.1, nb.py:501)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:453), Var(exitsprice.1, nb.py:505)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice.2
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice.1 = call $384load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice.2, nb.py:486), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = call $402load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice.2, nb.py:498), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice.1, nb.py:501)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.1 = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=ClosedPostionprofit.1 = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node ClosedPostionprofit.2 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit.1 = call $476load_global.45(ClosedPostionprofit, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit, nb.py:457), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.1 = call $476load_global.45(ClosedPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=ClosedPostionprofit_array[i] = ClosedPostionprofit
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG idom 552 from label 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a7250>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Fix SSA violator on var all_Fees
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG first assign: all_Fees
2023-01-02 21:03 DEBUG replaced with: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:457), Var(ClosedPostionprofit.1, nb.py:521)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:452), Var(entryprice.1, nb.py:501)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:453), Var(exitsprice.1, nb.py:505)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice.2
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice.1 = call $384load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice.2, nb.py:486), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = call $402load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice.2, nb.py:498), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice.1, nb.py:501)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.1 = call $476load_global.45(ClosedPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $576binary_add.3
2023-01-02 21:03 DEBUG replaced with: all_Fees.1 = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees = $606binary_add.3
2023-01-02 21:03 DEBUG replaced with: all_Fees.2 = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0197071d60>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0197071490>],
             572: [<numba.core.ir.Assign object at 0x7f019706adf0>],
             602: [<numba.core.ir.Assign object at 0x7f0197073190>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-02 21:03 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-02 21:03 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-02 21:03 DEBUG on stmt: size = arg(9, name=size)
2023-01-02 21:03 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-02 21:03 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-02 21:03 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: marketpostion_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $16load_attr.6 = getattr(value=$14load_global.5, attr=empty)
2023-01-02 21:03 DEBUG on stmt: entryprice_array = call $16load_attr.6(func=$16load_attr.6, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=empty)
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array = call $28load_attr.11(func=$28load_attr.11, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $38load_global.15 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=$38load_global.15, attr=empty)
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array = call $40load_attr.16(func=$40load_attr.16, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $50load_global.20 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $52load_attr.21 = getattr(value=$50load_global.20, attr=empty)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array = call $52load_attr.21(func=$52load_attr.21, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $62load_global.25 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $64load_attr.26 = getattr(value=$62load_global.25, attr=empty)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array = call $64load_attr.26(func=$64load_attr.26, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $74load_global.30 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $76load_attr.31 = getattr(value=$74load_global.30, attr=empty)
2023-01-02 21:03 DEBUG on stmt: profit_array = call $76load_attr.31(func=$76load_attr.31, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $86load_global.35 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $88load_attr.36 = getattr(value=$86load_global.35, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array = call $88load_attr.36(func=$88load_attr.36, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $98load_global.40 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $100load_attr.41 = getattr(value=$98load_global.40, attr=empty)
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array = call $100load_attr.41(func=$100load_attr.41, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $110load_global.45 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $112load_attr.46 = getattr(value=$110load_global.45, attr=empty)
2023-01-02 21:03 DEBUG on stmt: all_Fees_array = call $112load_attr.46(func=$112load_attr.46, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $122load_global.50 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $124load_attr.51 = getattr(value=$122load_global.50, attr=empty)
2023-01-02 21:03 DEBUG on stmt: netprofit_array = call $124load_attr.51(func=$124load_attr.51, args=[], kws=[('shape', Var(Length, nb.py:438))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = init_cash
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = size
2023-01-02 21:03 DEBUG on stmt: sell_sizes = size
2023-01-02 21:03 DEBUG on stmt: Gross_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: Gross_loss = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: netprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: slippage.1 = slippage
2023-01-02 21:03 DEBUG on stmt: fee.1 = fee
2023-01-02 21:03 DEBUG on stmt: direction = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $202load_global.72 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_short = call $202load_global.72(Length, high_array, low_array, close_array, ATR_short1, func=$202load_global.72, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_short1, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $218load_global.79 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x7f01ccd2adc0>))
2023-01-02 21:03 DEBUG on stmt: ATR_long = call $218load_global.79(Length, high_array, low_array, close_array, ATR_long2, func=$218load_global.79, args=[Var(Length, nb.py:438), Var(high_array, nb.py:438), Var(low_array, nb.py:438), Var(close_array, nb.py:438), Var(ATR_long2, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $234load_global.86 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $236load_method.87 = getattr(value=$234load_global.86, attr=where)
2023-01-02 21:03 DEBUG on stmt: $242binary_subtract.90 = high_array - highestarr
2023-01-02 21:03 DEBUG on stmt: $const244.91 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $246compare_op.92 = $242binary_subtract.90 > $const244.91
2023-01-02 21:03 DEBUG on stmt: $252binary_subtract.95 = ATR_short - ATR_long
2023-01-02 21:03 DEBUG on stmt: $const254.96 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $256compare_op.97 = $252binary_subtract.95 > $const254.96
2023-01-02 21:03 DEBUG on stmt: $258binary_and.98 = $246compare_op.92 & $256compare_op.97
2023-01-02 21:03 DEBUG on stmt: $const260.99 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $const262.100 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: trends = call $236load_method.87($258binary_and.98, $const260.99, $const262.100, func=$236load_method.87, args=[Var($258binary_and.98, nb.py:479), Var($const260.99, nb.py:480), Var($const262.100, nb.py:480)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $268load_global.102 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $270load_method.103 = getattr(value=$268load_global.102, attr=where)
2023-01-02 21:03 DEBUG on stmt: $276binary_subtract.106 = low_array - lowestarr
2023-01-02 21:03 DEBUG on stmt: $const278.107 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $280compare_op.108 = $276binary_subtract.106 < $const278.107
2023-01-02 21:03 DEBUG on stmt: $const282.109 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: orders = call $270load_method.103($280compare_op.108, $const282.109, trends, func=$270load_method.103, args=[Var($280compare_op.108, nb.py:481), Var($const282.109, nb.py:481), Var(trends, nb.py:479)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $290load_global.112 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $292load_method.113 = getattr(value=$290load_global.112, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const296.115 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: shiftorder = call $292load_method.113(orders, $const296.115, func=$292load_method.113, args=[Var(orders, nb.py:481), Var($const296.115, nb.py:482)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const302.117 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const306.119 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: shiftorder[0] = $const302.117
2023-01-02 21:03 DEBUG on stmt: $310load_global.120 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $314call_function.122 = call $310load_global.120(Length, func=$310load_global.120, args=[Var(Length, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $316get_iter.123 = getiter(value=$314call_function.122)
2023-01-02 21:03 DEBUG on stmt: $phi318.0 = $316get_iter.123
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 318
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.2 = phi(incoming_values=[Var(ClosedPostionprofit, nb.py:457), Var(ClosedPostionprofit.1, nb.py:521)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: entryprice.2 = phi(incoming_values=[Var(entryprice, nb.py:452), Var(entryprice.1, nb.py:501)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = phi(incoming_values=[Var(exitsprice, nb.py:453), Var(exitsprice.1, nb.py:505)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_loss.2 = phi(incoming_values=[Var(Gross_loss, nb.py:462), Var(Gross_loss.3, nb.py:534)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: buy_Fees.2 = phi(incoming_values=[Var(buy_Fees, nb.py:454), Var(buy_Fees.1, nb.py:509)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: profit.2 = phi(incoming_values=[Var(profit, nb.py:458), Var(profit.1, nb.py:525)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: sell_Fees.2 = phi(incoming_values=[Var(sell_Fees, nb.py:455), Var(sell_Fees.1, nb.py:513)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = phi(incoming_values=[Var(OpenPostionprofit, nb.py:456), Var(OpenPostionprofit.1, nb.py:517)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: Gross_profit.2 = phi(incoming_values=[Var(Gross_profit, nb.py:461), Var(Gross_profit.3, nb.py:530)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion, nb.py:451), Var(marketpostion.4, nb.py:486)], incoming_blocks=[0, 610])
2023-01-02 21:03 DEBUG on stmt: $318for_iter.1 = iternext(value=$phi318.0)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.2 = pair_first(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $318for_iter.3 = pair_second(value=$318for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi322.1 = $318for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $318for_iter.3, 322, 714
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 322
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: i = $phi322.1
2023-01-02 21:03 DEBUG on stmt: Open = getitem(value=open_array, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = marketpostion.3
2023-01-02 21:03 DEBUG on stmt: last_entryprice = entryprice.2
2023-01-02 21:03 DEBUG on stmt: $const350.11 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $352compare_op.12 = current_order == $const350.11
2023-01-02 21:03 DEBUG on stmt: bool354 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $354pred = call bool354($352compare_op.12, func=bool354, args=(Var($352compare_op.12, nb.py:493),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $354pred, 358, 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 358
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: jump 362
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 362
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion.3, nb.py:486), Var(marketpostion.1, nb.py:494)], incoming_blocks=[322, 358])
2023-01-02 21:03 DEBUG on stmt: $const364.2 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: $366compare_op.3 = current_order == $const364.2
2023-01-02 21:03 DEBUG on stmt: bool368 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $368pred = call bool368($366compare_op.3, func=bool368, args=(Var($366compare_op.3, nb.py:495),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $368pred, 372, 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 372
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 376
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 376
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:486), Var(marketpostion.2, nb.py:496)], incoming_blocks=[362, 372])
2023-01-02 21:03 DEBUG on stmt: marketpostion_array[i] = marketpostion.4
2023-01-02 21:03 DEBUG on stmt: $384load_global.4 = global(get_entryprice: CPUDispatcher(<function get_entryprice at 0x7f01ccc813a0>))
2023-01-02 21:03 DEBUG on stmt: entryprice.1 = call $384load_global.4(entryprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$384load_global.4, args=[Var(entryprice.2, nb.py:486), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $402load_global.12 = global(get_exitsprice: CPUDispatcher(<function get_exitsprice at 0x7f01ccc81550>))
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = call $402load_global.12(exitsprice.2, Open, marketpostion.4, last_marketpostion, slippage.1, direction, func=$402load_global.12, args=[Var(exitsprice.2, nb.py:498), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(slippage.1, nb.py:467), Var(direction, nb.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $420load_global.20 = global(get_buy_Fees: CPUDispatcher(<function get_buy_Fees at 0x7f01ccc81700>))
2023-01-02 21:03 DEBUG on stmt: buy_Fees.1 = call $420load_global.20(buy_Fees.2, fee.1, buy_sizes, Open, marketpostion.4, last_marketpostion, func=$420load_global.20, args=[Var(buy_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(buy_sizes, nb.py:459), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $438load_global.28 = global(get_sell_Fees: CPUDispatcher(<function get_sell_Fees at 0x7f01ccc818b0>))
2023-01-02 21:03 DEBUG on stmt: sell_Fees.1 = call $438load_global.28(sell_Fees.2, fee.1, sell_sizes, Open, marketpostion.4, last_marketpostion, func=$438load_global.28, args=[Var(sell_Fees.2, nb.py:498), Var(fee.1, nb.py:468), Var(sell_sizes, nb.py:460), Var(Open, nb.py:487), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $456load_global.36 = global(get_OpenPostionprofit: CPUDispatcher(<function get_OpenPostionprofit at 0x7f01ccc81a60>))
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = call $456load_global.36(OpenPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, Open, buy_sizes, entryprice.1, func=$456load_global.36, args=[Var(OpenPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(Open, nb.py:487), Var(buy_sizes, nb.py:459), Var(entryprice.1, nb.py:501)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $476load_global.45 = global(get_ClosedPostionprofit: CPUDispatcher(<function get_ClosedPostionprofit at 0x7f01ccc81c10>))
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.1 = call $476load_global.45(ClosedPostionprofit.2, marketpostion.4, last_marketpostion, buy_Fees.1, sell_Fees.1, sell_sizes, last_entryprice, exitsprice.1, func=$476load_global.45, args=[Var(ClosedPostionprofit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(buy_Fees.1, nb.py:509), Var(sell_Fees.1, nb.py:513), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490), Var(exitsprice.1, nb.py:505)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $498load_global.55 = global(get_profit: CPUDispatcher(<function get_profit at 0x7f01ccc81dc0>))
2023-01-02 21:03 DEBUG on stmt: profit.1 = call $498load_global.55(profit.2, marketpostion.4, last_marketpostion, Open, sell_sizes, last_entryprice, func=$498load_global.55, args=[Var(profit.2, nb.py:498), Var(marketpostion.4, nb.py:486), Var(last_marketpostion, nb.py:489), Var(Open, nb.py:487), Var(sell_sizes, nb.py:460), Var(last_entryprice, nb.py:490)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const518.64 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $520compare_op.65 = profit.1 > $const518.64
2023-01-02 21:03 DEBUG on stmt: bool522 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $522pred = call bool522($520compare_op.65, func=bool522, args=(Var($520compare_op.65, nb.py:529),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $522pred, 526, 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 526
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $530binary_add.3 = Gross_profit.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit.1 = $530binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 534
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 534
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: Gross_profit.3 = phi(incoming_values=[Var(Gross_profit.2, nb.py:530), Var(Gross_profit.1, nb.py:530)], incoming_blocks=[376, 526])
2023-01-02 21:03 DEBUG on stmt: $const536.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $538compare_op.3 = profit.1 < $const536.2
2023-01-02 21:03 DEBUG on stmt: bool540 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $540pred = call bool540($538compare_op.3, func=bool540, args=(Var($538compare_op.3, nb.py:533),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $540pred, 544, 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 544
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $548binary_add.3 = Gross_loss.2 + profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_loss.1 = $548binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 552
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 552
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: Gross_loss.3 = phi(incoming_values=[Var(Gross_loss.1, nb.py:534), Var(Gross_loss.2, nb.py:534)], incoming_blocks=[544, 534])
2023-01-02 21:03 DEBUG on stmt: $const554.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $556compare_op.3 = marketpostion.4 == $const554.2
2023-01-02 21:03 DEBUG on stmt: bool558 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $558pred = call bool558($556compare_op.3, func=bool558, args=(Var($556compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $558pred, 562, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 562
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $const564.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $566compare_op.3 = last_marketpostion == $const564.2
2023-01-02 21:03 DEBUG on stmt: bool568 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $568pred = call bool568($566compare_op.3, func=bool568, args=(Var($566compare_op.3, nb.py:537),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $568pred, 572, 582
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 572
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG find_def var='all_Fees' stmt=$576binary_add.3 = all_Fees + buy_Fees.1
2023-01-02 21:03 DEBUG find_def_from_top label 572
2023-01-02 21:03 DEBUG idom 562 from label 572
2023-01-02 21:03 DEBUG find_def_from_bottom label 562
2023-01-02 21:03 DEBUG find_def_from_top label 562
2023-01-02 21:03 DEBUG idom 552 from label 562
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG find_def_from_top label 318
2023-01-02 21:03 DEBUG insert phi node all_Fees.3 = phi(incoming_values=[], incoming_blocks=[]) at 318
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def all_Fees = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 610
2023-01-02 21:03 DEBUG find_def_from_top label 610
2023-01-02 21:03 DEBUG insert phi node all_Fees.4 = phi(incoming_values=[], incoming_blocks=[]) at 610
2023-01-02 21:03 DEBUG find_def_from_bottom label 592
2023-01-02 21:03 DEBUG find_def_from_top label 592
2023-01-02 21:03 DEBUG idom 582 from label 592
2023-01-02 21:03 DEBUG find_def_from_bottom label 582
2023-01-02 21:03 DEBUG find_def_from_top label 582
2023-01-02 21:03 DEBUG idom 552 from label 582
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG incoming_def all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:463)], incoming_blocks=[0])
2023-01-02 21:03 DEBUG find_def_from_bottom label 602
2023-01-02 21:03 DEBUG incoming_def all_Fees.2 = $606binary_add.3
2023-01-02 21:03 DEBUG find_def_from_bottom label 572
2023-01-02 21:03 DEBUG incoming_def all_Fees.1 = $576binary_add.3
2023-01-02 21:03 DEBUG find_def_from_bottom label 582
2023-01-02 21:03 DEBUG find_def_from_top label 582
2023-01-02 21:03 DEBUG idom 552 from label 582
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG incoming_def all_Fees.3 = phi(incoming_values=[Var(all_Fees, nb.py:463)], incoming_blocks=[0])
2023-01-02 21:03 DEBUG incoming_def all_Fees.4 = phi(incoming_values=[Var(all_Fees.3, nb.py:538), Var(all_Fees.2, nb.py:540), Var(all_Fees.1, nb.py:538), Var(all_Fees.3, nb.py:538)], incoming_blocks=[592, 602, 572, 582])
2023-01-02 21:03 DEBUG replaced with: $576binary_add.3 = all_Fees.3 + buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees.1 = $576binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 582
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $const584.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $586compare_op.3 = marketpostion.4 == $const584.2
2023-01-02 21:03 DEBUG on stmt: bool588 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $588pred = call bool588($586compare_op.3, func=bool588, args=(Var($586compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $588pred, 592, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 592
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $const594.2 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $596compare_op.3 = last_marketpostion == $const594.2
2023-01-02 21:03 DEBUG on stmt: bool598 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $598pred = call bool598($596compare_op.3, func=bool598, args=(Var($596compare_op.3, nb.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $598pred, 602, 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 602
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG find_def var='all_Fees' stmt=$606binary_add.3 = all_Fees + sell_Fees.1
2023-01-02 21:03 DEBUG find_def_from_top label 602
2023-01-02 21:03 DEBUG idom 592 from label 602
2023-01-02 21:03 DEBUG find_def_from_bottom label 592
2023-01-02 21:03 DEBUG find_def_from_top label 592
2023-01-02 21:03 DEBUG idom 582 from label 592
2023-01-02 21:03 DEBUG find_def_from_bottom label 582
2023-01-02 21:03 DEBUG find_def_from_top label 582
2023-01-02 21:03 DEBUG idom 552 from label 582
2023-01-02 21:03 DEBUG find_def_from_bottom label 552
2023-01-02 21:03 DEBUG find_def_from_top label 552
2023-01-02 21:03 DEBUG idom 534 from label 552
2023-01-02 21:03 DEBUG find_def_from_bottom label 534
2023-01-02 21:03 DEBUG find_def_from_top label 534
2023-01-02 21:03 DEBUG idom 376 from label 534
2023-01-02 21:03 DEBUG find_def_from_bottom label 376
2023-01-02 21:03 DEBUG find_def_from_top label 376
2023-01-02 21:03 DEBUG idom 362 from label 376
2023-01-02 21:03 DEBUG find_def_from_bottom label 362
2023-01-02 21:03 DEBUG find_def_from_top label 362
2023-01-02 21:03 DEBUG idom 322 from label 362
2023-01-02 21:03 DEBUG find_def_from_bottom label 322
2023-01-02 21:03 DEBUG find_def_from_top label 322
2023-01-02 21:03 DEBUG idom 318 from label 322
2023-01-02 21:03 DEBUG find_def_from_bottom label 318
2023-01-02 21:03 DEBUG replaced with: $606binary_add.3 = all_Fees.3 + sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: all_Fees.2 = $606binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 610
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 610
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG find_def var='all_Fees' stmt=$614binary_subtract.3 = init_cash - all_Fees
2023-01-02 21:03 DEBUG replaced with: $614binary_subtract.3 = init_cash - all_Fees.4
2023-01-02 21:03 DEBUG on stmt: $618binary_add.5 = $614binary_subtract.3 + Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: $622binary_add.7 = $618binary_add.5 + Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: netprofit.1 = $622binary_add.7 + OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: entryprice_array[i] = entryprice.1
2023-01-02 21:03 DEBUG on stmt: buy_Fees_array[i] = buy_Fees.1
2023-01-02 21:03 DEBUG on stmt: sell_Fees_array[i] = sell_Fees.1
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit_array[i] = OpenPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit_array[i] = ClosedPostionprofit.1
2023-01-02 21:03 DEBUG on stmt: profit_array[i] = profit.1
2023-01-02 21:03 DEBUG on stmt: Gross_profit_array[i] = Gross_profit.3
2023-01-02 21:03 DEBUG on stmt: Gross_loss_array[i] = Gross_loss.3
2023-01-02 21:03 DEBUG on stmt: all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG find_def var='all_Fees' stmt=all_Fees_array[i] = all_Fees
2023-01-02 21:03 DEBUG replaced with: all_Fees_array[i] = all_Fees.4
2023-01-02 21:03 DEBUG on stmt: netprofit_array[i] = netprofit.1
2023-01-02 21:03 DEBUG on stmt: jump 318
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 714
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01970a76a0>
2023-01-02 21:03 DEBUG on stmt: $714load_global.0 = global(get_order: CPUDispatcher(<function get_order at 0x7f01ccc8a310>))
2023-01-02 21:03 DEBUG on stmt: neworders = call $714load_global.0(marketpostion_array, func=$714load_global.0, args=[Var(marketpostion_array, nb.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $746build_tuple.15 = build_tuple(items=[Var(neworders, nb.py:561), Var(marketpostion_array, nb.py:438), Var(entryprice_array, nb.py:439), Var(buy_Fees_array, nb.py:440), Var(sell_Fees_array, nb.py:441), Var(OpenPostionprofit_array, nb.py:442), Var(ClosedPostionprofit_array, nb.py:443), Var(profit_array, nb.py:444), Var(Gross_profit_array, nb.py:445), Var(Gross_loss_array, nb.py:446), Var(all_Fees_array, nb.py:447), Var(netprofit_array, nb.py:448)])
2023-01-02 21:03 DEBUG on stmt: $748return_value.16 = cast(value=$746build_tuple.15)
2023-01-02 21:03 DEBUG on stmt: return $748return_value.16
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$10call_function.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019703f850>
2023-01-02 21:03 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-02 21:03 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-02 21:03 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-01-02 21:03 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f0197043be0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0197043d30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0197043040>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f0197043a30>],
             'dtype': [<numba.core.ir.Assign object at 0x7f01970431c0>],
             'shape': [<numba.core.ir.Assign object at 0x7f01970432e0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3979)
           2	LOAD_FAST(arg=0, lineno=3979)
           4	LOAD_METHOD(arg=0, lineno=3979)
           6	LOAD_FAST(arg=1, lineno=3979)
           8	LOAD_FAST(arg=2, lineno=3979)
          10	CALL_METHOD(arg=2, lineno=3979)
          12	RETURN_VALUE(arg=None, lineno=3979)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3979)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3979)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3979)
2023-01-02 21:03 DEBUG stack ['$arrtype2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3979)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3979)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$size6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3979)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$size6.2', '$align8.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3979)
2023-01-02 21:03 DEBUG stack ['$10call_method.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0197017760>
2023-01-02 21:03 DEBUG on stmt: arrtype = arg(0, name=arrtype)
2023-01-02 21:03 DEBUG on stmt: size = arg(1, name=size)
2023-01-02 21:03 DEBUG on stmt: align = arg(2, name=align)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
2023-01-02 21:03 DEBUG on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_method.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f0197017130>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0197017280>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f019701dd00>],
             'align': [<numba.core.ir.Assign object at 0x7f019701da60>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f019701d820>],
             'size': [<numba.core.ir.Assign object at 0x7f019701d940>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3972)
           2	LOAD_GLOBAL(arg=0, lineno=3972)
           4	LOAD_FAST(arg=1, lineno=3972)
           6	LOAD_FAST(arg=2, lineno=3972)
           8	CALL_FUNCTION(arg=2, lineno=3972)
          10	RETURN_VALUE(arg=None, lineno=3972)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3972)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3972)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3972)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3972)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$allocsize4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3972)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3972)
2023-01-02 21:03 DEBUG stack ['$8call_function.3']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f2f1f0>
2023-01-02 21:03 DEBUG on stmt: cls = arg(0, name=cls)
2023-01-02 21:03 DEBUG on stmt: allocsize = arg(1, name=allocsize)
2023-01-02 21:03 DEBUG on stmt: align = arg(2, name=align)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2023-01-02 21:03 DEBUG on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $10return_value.4 = cast(value=$8call_function.3)
2023-01-02 21:03 DEBUG on stmt: return $10return_value.4
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f0196f2fd60>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196f2f820>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f0196f2fc10>],
             'align': [<numba.core.ir.Assign object at 0x7f0196f2f6a0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f0196f2f580>],
             'cls': [<numba.core.ir.Assign object at 0x7f0196f22700>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=51)
           2	LOAD_GLOBAL(arg=0, lineno=51)
           4	LOAD_METHOD(arg=1, lineno=51)
           6	LOAD_FAST(arg=3, lineno=51)
           8	LOAD_CONST(arg=1, lineno=51)
          10	CALL_METHOD(arg=2, lineno=51)
          12	STORE_FAST(arg=5, lineno=51)
          14	LOAD_CONST(arg=2, lineno=52)
          16	LOAD_FAST(arg=5, lineno=52)
          18	LOAD_CONST(arg=2, lineno=52)
          20	STORE_SUBSCR(arg=None, lineno=52)
          22	LOAD_CONST(arg=6, lineno=54)
          24	LOAD_CONST(arg=4, lineno=54)
          26	LOAD_CONST(arg=5, lineno=54)
          28	MAKE_FUNCTION(arg=1, lineno=54)
          30	STORE_FAST(arg=6, lineno=54)
          32	LOAD_GLOBAL(arg=0, lineno=64)
          34	LOAD_METHOD(arg=2, lineno=64)
          36	LOAD_FAST(arg=3, lineno=64)
          38	LOAD_FAST(arg=2, lineno=64)
          40	BINARY_SUBTRACT(arg=None, lineno=64)
          42	LOAD_GLOBAL(arg=0, lineno=65)
          44	LOAD_METHOD(arg=3, lineno=65)
          46	LOAD_FAST(arg=1, lineno=65)
          48	LOAD_FAST(arg=5, lineno=65)
          50	BINARY_SUBTRACT(arg=None, lineno=65)
          52	CALL_METHOD(arg=1, lineno=65)
          54	CALL_METHOD(arg=2, lineno=64)
          56	STORE_FAST(arg=7, lineno=64)
          58	LOAD_GLOBAL(arg=0, lineno=66)
          60	LOAD_METHOD(arg=2, lineno=66)
          62	LOAD_FAST(arg=7, lineno=66)
          64	LOAD_GLOBAL(arg=0, lineno=66)
          66	LOAD_METHOD(arg=3, lineno=66)
          68	LOAD_FAST(arg=2, lineno=66)
          70	LOAD_FAST(arg=5, lineno=66)
          72	BINARY_SUBTRACT(arg=None, lineno=66)
          74	CALL_METHOD(arg=1, lineno=66)
          76	CALL_METHOD(arg=2, lineno=66)
          78	STORE_FAST(arg=8, lineno=66)
          80	LOAD_FAST(arg=6, lineno=67)
          82	LOAD_FAST(arg=8, lineno=67)
          84	LOAD_FAST(arg=4, lineno=67)
          86	CALL_FUNCTION(arg=2, lineno=67)
          88	STORE_FAST(arg=9, lineno=67)
          90	LOAD_FAST(arg=9, lineno=69)
          92	RETURN_VALUE(arg=None, lineno=69)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=51)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=51)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=51)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=51)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=51)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$close_array6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=51)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$close_array6.2', '$const8.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=STORE_FAST(arg=5, lineno=51)
2023-01-02 21:03 DEBUG stack ['$10call_method.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=52)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=5, lineno=52)
2023-01-02 21:03 DEBUG stack ['$const14.5']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=52)
2023-01-02 21:03 DEBUG stack ['$const14.5', '$last_close_array16.6']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=STORE_SUBSCR(arg=None, lineno=52)
2023-01-02 21:03 DEBUG stack ['$const14.5', '$last_close_array16.6', '$const18.7']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_CONST(arg=6, lineno=54)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=4, lineno=54)
2023-01-02 21:03 DEBUG stack ['$const22.8']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_CONST(arg=5, lineno=54)
2023-01-02 21:03 DEBUG stack ['$const22.8', '$const24.9']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=MAKE_FUNCTION(arg=1, lineno=54)
2023-01-02 21:03 DEBUG stack ['$const22.8', '$const24.9', '$const26.10']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=STORE_FAST(arg=6, lineno=54)
2023-01-02 21:03 DEBUG stack ['$28make_function.11']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=64)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=64)
2023-01-02 21:03 DEBUG stack ['$32load_global.12']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=64)
2023-01-02 21:03 DEBUG stack ['$34load_method.13']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=64)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$close_array36.14']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=64)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$close_array36.14', '$low_array38.15']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=65)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$40binary_subtract.16']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_METHOD(arg=3, lineno=65)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$42load_global.17']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=65)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=65)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$high_array46.19']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=BINARY_SUBTRACT(arg=None, lineno=65)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$high_array46.19', '$last_close_array48.20']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=65)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$50binary_subtract.21']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=CALL_METHOD(arg=2, lineno=64)
2023-01-02 21:03 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$52call_method.22']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=STORE_FAST(arg=7, lineno=64)
2023-01-02 21:03 DEBUG stack ['$54call_method.23']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=66)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=60, inst=LOAD_METHOD(arg=2, lineno=66)
2023-01-02 21:03 DEBUG stack ['$58load_global.24']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=LOAD_GLOBAL(arg=0, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25', '$each_num62.26']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_METHOD(arg=3, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25', '$each_num62.26', '$64load_global.27']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=LOAD_FAST(arg=2, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$low_array68.29']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=BINARY_SUBTRACT(arg=None, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$low_array68.29', '$last_close_array70.30']
2023-01-02 21:03 DEBUG dispatch pc=74, inst=CALL_METHOD(arg=1, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$72binary_subtract.31']
2023-01-02 21:03 DEBUG dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=66)
2023-01-02 21:03 DEBUG stack ['$60load_method.25', '$each_num62.26', '$74call_method.32']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=STORE_FAST(arg=8, lineno=66)
2023-01-02 21:03 DEBUG stack ['$76call_method.33']
2023-01-02 21:03 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=67)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=82, inst=LOAD_FAST(arg=8, lineno=67)
2023-01-02 21:03 DEBUG stack ['$moving_average80.34']
2023-01-02 21:03 DEBUG dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=67)
2023-01-02 21:03 DEBUG stack ['$moving_average80.34', '$TR82.35']
2023-01-02 21:03 DEBUG dispatch pc=86, inst=CALL_FUNCTION(arg=2, lineno=67)
2023-01-02 21:03 DEBUG stack ['$moving_average80.34', '$TR82.35', '$parameter_timeperiod84.36']
2023-01-02 21:03 DEBUG dispatch pc=88, inst=STORE_FAST(arg=9, lineno=67)
2023-01-02 21:03 DEBUG stack ['$86call_function.37']
2023-01-02 21:03 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=9, lineno=69)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=69)
2023-01-02 21:03 DEBUG stack ['$ATR90.38']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$close_array6.2'}), (8, {'res': '$const8.3'}), (10, {'func': '$4load_method.1', 'args': ['$close_array6.2', '$const8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$last_close_array16.6'}), (18, {'res': '$const18.7'}), (20, {'target': '$last_close_array16.6', 'index': '$const18.7', 'value': '$const14.5'}), (22, {'res': '$const22.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$const26.10'}), (28, {'name': '$const26.10', 'code': '$const24.9', 'closure': None, 'annotations': None, 'kwdefaults': None, 'defaults': '$const22.8', 'res': '$28make_function.11'}), (30, {'value': '$28make_function.11'}), (32, {'res': '$32load_global.12'}), (34, {'item': '$32load_global.12', 'res': '$34load_method.13'}), (36, {'res': '$close_array36.14'}), (38, {'res': '$low_array38.15'}), (40, {'lhs': '$close_array36.14', 'rhs': '$low_array38.15', 'res': '$40binary_subtract.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_method.18'}), (46, {'res': '$high_array46.19'}), (48, {'res': '$last_close_array48.20'}), (50, {'lhs': '$high_array46.19', 'rhs': '$last_close_array48.20', 'res': '$50binary_subtract.21'}), (52, {'func': '$44load_method.18', 'args': ['$50binary_subtract.21'], 'res': '$52call_method.22'}), (54, {'func': '$34load_method.13', 'args': ['$40binary_subtract.16', '$52call_method.22'], 'res': '$54call_method.23'}), (56, {'value': '$54call_method.23'}), (58, {'res': '$58load_global.24'}), (60, {'item': '$58load_global.24', 'res': '$60load_method.25'}), (62, {'res': '$each_num62.26'}), (64, {'res': '$64load_global.27'}), (66, {'item': '$64load_global.27', 'res': '$66load_method.28'}), (68, {'res': '$low_array68.29'}), (70, {'res': '$last_close_array70.30'}), (72, {'lhs': '$low_array68.29', 'rhs': '$last_close_array70.30', 'res': '$72binary_subtract.31'}), (74, {'func': '$66load_method.28', 'args': ['$72binary_subtract.31'], 'res': '$74call_method.32'}), (76, {'func': '$60load_method.25', 'args': ['$each_num62.26', '$74call_method.32'], 'res': '$76call_method.33'}), (78, {'value': '$76call_method.33'}), (80, {'res': '$moving_average80.34'}), (82, {'res': '$TR82.35'}), (84, {'res': '$parameter_timeperiod84.36'}), (86, {'func': '$moving_average80.34', 'args': ['$TR82.35', '$parameter_timeperiod84.36'], 'res': '$86call_function.37'}), (88, {'value': '$86call_function.37'}), (90, {'res': '$ATR90.38'}), (92, {'retval': '$ATR90.38', 'castval': '$92return_value.39'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    Length = arg(0, name=Length)             ['Length']
    high_array = arg(1, name=high_array)     ['high_array']
    low_array = arg(2, name=low_array)       ['low_array']
    close_array = arg(3, name=close_array)   ['close_array']
    parameter_timeperiod = arg(4, name=parameter_timeperiod) ['parameter_timeperiod']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=roll) ['$2load_global.0', '$4load_method.1']
    $const8.3 = const(int, 1)                ['$const8.3']
    last_close_array = call $4load_method.1(close_array, $const8.3, func=$4load_method.1, args=[Var(close_array, nb.py:51), Var($const8.3, nb.py:51)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$const8.3', 'close_array', 'last_close_array']
    $const14.5 = const(int, 0)               ['$const14.5']
    $const18.7 = const(int, 0)               ['$const18.7']
    last_close_array[$const18.7] = $const14.5 ['$const14.5', '$const18.7', 'last_close_array']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.8 = build_tuple(items=[Var($const_3, nb.py:54)]) ['$const22.8', '$const_3']
    $const24.9 = const(code, <code object moving_average at 0x7f01e6cb6240, file "/home/abcd/桌面/mydir/backtesting/Crypto_trading/Count/nb.py", line 54>) ['$const24.9']
    $const26.10 = const(str, get_ATR.<locals>.moving_average) ['$const26.10']
    moving_average = make_function(name=$const26.10, code=<code object moving_average at 0x7f01e6cb6240, file "/home/abcd/桌面/mydir/backtesting/Crypto_trading/Count/nb.py", line 54>, closure=None, defaults=$const22.8) ['$const22.8', '$const26.10', 'moving_average']
    $32load_global.12 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$32load_global.12']
    $34load_method.13 = getattr(value=$32load_global.12, attr=maximum) ['$32load_global.12', '$34load_method.13']
    $40binary_subtract.16 = close_array - low_array ['$40binary_subtract.16', 'close_array', 'low_array']
    $42load_global.17 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=abs) ['$42load_global.17', '$44load_method.18']
    $50binary_subtract.21 = high_array - last_close_array ['$50binary_subtract.21', 'high_array', 'last_close_array']
    $52call_method.22 = call $44load_method.18($50binary_subtract.21, func=$44load_method.18, args=[Var($50binary_subtract.21, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_method.18', '$50binary_subtract.21', '$52call_method.22']
    each_num = call $34load_method.13($40binary_subtract.16, $52call_method.22, func=$34load_method.13, args=[Var($40binary_subtract.16, nb.py:64), Var($52call_method.22, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_method.13', '$40binary_subtract.16', '$52call_method.22', 'each_num']
    $58load_global.24 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$58load_global.24']
    $60load_method.25 = getattr(value=$58load_global.24, attr=maximum) ['$58load_global.24', '$60load_method.25']
    $64load_global.27 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$64load_global.27']
    $66load_method.28 = getattr(value=$64load_global.27, attr=abs) ['$64load_global.27', '$66load_method.28']
    $72binary_subtract.31 = low_array - last_close_array ['$72binary_subtract.31', 'last_close_array', 'low_array']
    $74call_method.32 = call $66load_method.28($72binary_subtract.31, func=$66load_method.28, args=[Var($72binary_subtract.31, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.28', '$72binary_subtract.31', '$74call_method.32']
    TR = call $60load_method.25(each_num, $74call_method.32, func=$60load_method.25, args=[Var(each_num, nb.py:64), Var($74call_method.32, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.25', '$74call_method.32', 'TR', 'each_num']
    ATR = call moving_average(TR, parameter_timeperiod, func=moving_average, args=[Var(TR, nb.py:66), Var(parameter_timeperiod, nb.py:51)], kws=(), vararg=None, varkwarg=None, target=None) ['ATR', 'TR', 'moving_average', 'parameter_timeperiod']
    $92return_value.39 = cast(value=ATR)     ['$92return_value.39', 'ATR']
    return $92return_value.39                ['$92return_value.39']

2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=58)
           2	LOAD_GLOBAL(arg=0, lineno=58)
           4	LOAD_METHOD(arg=1, lineno=58)
           6	LOAD_FAST(arg=0, lineno=58)
           8	CALL_METHOD(arg=1, lineno=58)
          10	STORE_FAST(arg=2, lineno=58)
          12	LOAD_FAST(arg=2, lineno=59)
          14	LOAD_FAST(arg=1, lineno=59)
          16	LOAD_CONST(arg=1, lineno=59)
          18	BUILD_SLICE(arg=2, lineno=59)
          20	BINARY_SUBSCR(arg=None, lineno=59)
          22	LOAD_FAST(arg=2, lineno=59)
          24	LOAD_CONST(arg=1, lineno=59)
          26	LOAD_FAST(arg=1, lineno=59)
          28	UNARY_NEGATIVE(arg=None, lineno=59)
          30	BUILD_SLICE(arg=2, lineno=59)
          32	BINARY_SUBSCR(arg=None, lineno=59)
          34	BINARY_SUBTRACT(arg=None, lineno=59)
          36	LOAD_FAST(arg=2, lineno=59)
          38	LOAD_FAST(arg=1, lineno=59)
          40	LOAD_CONST(arg=1, lineno=59)
          42	BUILD_SLICE(arg=2, lineno=59)
          44	STORE_SUBSCR(arg=None, lineno=59)
          46	LOAD_GLOBAL(arg=0, lineno=60)
          48	LOAD_ATTR(arg=2, lineno=60)
          50	LOAD_FAST(arg=2, lineno=60)
          52	LOAD_CONST(arg=1, lineno=60)
          54	LOAD_FAST(arg=1, lineno=60)
          56	BUILD_SLICE(arg=2, lineno=60)
          58	STORE_SUBSCR(arg=None, lineno=60)
          60	LOAD_FAST(arg=2, lineno=61)
          62	LOAD_FAST(arg=1, lineno=61)
          64	BINARY_TRUE_DIVIDE(arg=None, lineno=61)
          66	RETURN_VALUE(arg=None, lineno=61)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=58)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=58)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=58)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=58)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=58)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$a6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=58)
2023-01-02 21:03 DEBUG stack ['$8call_method.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=59)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-02 21:03 DEBUG stack ['$ret12.4']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=59)
2023-01-02 21:03 DEBUG stack ['$ret12.4', '$n14.5']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=59)
2023-01-02 21:03 DEBUG stack ['$ret12.4', '$n14.5', '$const16.6']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=59)
2023-01-02 21:03 DEBUG stack ['$ret12.4', '$18build_slice.8']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=59)
2023-01-02 21:03 DEBUG stack ['$20binary_subscr.9']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=59)
2023-01-02 21:03 DEBUG stack ['$20binary_subscr.9', '$ret22.10']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-02 21:03 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=UNARY_NEGATIVE(arg=None, lineno=59)
2023-01-02 21:03 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11', '$n26.12']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=59)
2023-01-02 21:03 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11', '$28unary_negative.13']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=59)
2023-01-02 21:03 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$30build_slice.15']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=BINARY_SUBTRACT(arg=None, lineno=59)
2023-01-02 21:03 DEBUG stack ['$20binary_subscr.9', '$32binary_subscr.16']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=59)
2023-01-02 21:03 DEBUG stack ['$34binary_subtract.17']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-02 21:03 DEBUG stack ['$34binary_subtract.17', '$ret36.18']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=59)
2023-01-02 21:03 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$n38.19']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=BUILD_SLICE(arg=2, lineno=59)
2023-01-02 21:03 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$n38.19', '$const40.20']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=59)
2023-01-02 21:03 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$42build_slice.22']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=60)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=48, inst=LOAD_ATTR(arg=2, lineno=60)
2023-01-02 21:03 DEBUG stack ['$46load_global.23']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=60)
2023-01-02 21:03 DEBUG stack ['$48load_attr.24']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=60)
2023-01-02 21:03 DEBUG stack ['$48load_attr.24', '$ret50.25']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=60)
2023-01-02 21:03 DEBUG stack ['$48load_attr.24', '$ret50.25', '$const52.26']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=60)
2023-01-02 21:03 DEBUG stack ['$48load_attr.24', '$ret50.25', '$const52.26', '$n54.27']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=STORE_SUBSCR(arg=None, lineno=60)
2023-01-02 21:03 DEBUG stack ['$48load_attr.24', '$ret50.25', '$56build_slice.29']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=61)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=61)
2023-01-02 21:03 DEBUG stack ['$ret60.30']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=61)
2023-01-02 21:03 DEBUG stack ['$ret60.30', '$n62.31']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=61)
2023-01-02 21:03 DEBUG stack ['$64binary_true_divide.32']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$ret12.4'}), (14, {'res': '$n14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$n14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'index': '$18build_slice.8', 'target': '$ret12.4', 'res': '$20binary_subscr.9'}), (22, {'res': '$ret22.10'}), (24, {'res': '$const24.11'}), (26, {'res': '$n26.12'}), (28, {'value': '$n26.12', 'res': '$28unary_negative.13'}), (30, {'start': '$const24.11', 'stop': '$28unary_negative.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$ret22.10', 'res': '$32binary_subscr.16'}), (34, {'lhs': '$20binary_subscr.9', 'rhs': '$32binary_subscr.16', 'res': '$34binary_subtract.17'}), (36, {'res': '$ret36.18'}), (38, {'res': '$n38.19'}), (40, {'res': '$const40.20'}), (42, {'start': '$n38.19', 'stop': '$const40.20', 'step': None, 'res': '$42build_slice.22', 'slicevar': '$42build_slice.21'}), (44, {'target': '$ret36.18', 'index': '$42build_slice.22', 'value': '$34binary_subtract.17'}), (46, {'res': '$46load_global.23'}), (48, {'item': '$46load_global.23', 'res': '$48load_attr.24'}), (50, {'res': '$ret50.25'}), (52, {'res': '$const52.26'}), (54, {'res': '$n54.27'}), (56, {'start': '$const52.26', 'stop': '$n54.27', 'step': None, 'res': '$56build_slice.29', 'slicevar': '$56build_slice.28'}), (58, {'target': '$ret50.25', 'index': '$56build_slice.29', 'value': '$48load_attr.24'}), (60, {'res': '$ret60.30'}), (62, {'res': '$n62.31'}), (64, {'lhs': '$ret60.30', 'rhs': '$n62.31', 'res': '$64binary_true_divide.32'}), (66, {'retval': '$64binary_true_divide.32', 'castval': '$66return_value.33'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    n = arg(1, name=n)                       ['n']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cumsum) ['$2load_global.0', '$4load_method.1']
    ret = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, nb.py:58)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'ret']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7(n, $const16.6, func=$18build_slice.7, args=(Var(n, nb.py:58), Var($const16.6, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const16.6', 'n']
    $20binary_subscr.9 = getitem(value=ret, index=$18build_slice.8, fn=<built-in function getitem>) ['$18build_slice.8', '$20binary_subscr.9', 'ret']
    $const24.11 = const(NoneType, None)      ['$const24.11']
    $28unary_negative.13 = unary(fn=<built-in function neg>, value=n) ['$28unary_negative.13', 'n']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const24.11, $28unary_negative.13, func=$30build_slice.14, args=(Var($const24.11, nb.py:59), Var($28unary_negative.13, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None) ['$28unary_negative.13', '$30build_slice.14', '$30build_slice.15', '$const24.11']
    $32binary_subscr.16 = getitem(value=ret, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'ret']
    $34binary_subtract.17 = $20binary_subscr.9 - $32binary_subscr.16 ['$20binary_subscr.9', '$32binary_subscr.16', '$34binary_subtract.17']
    $const40.20 = const(NoneType, None)      ['$const40.20']
    $42build_slice.21 = global(slice: <class 'slice'>) ['$42build_slice.21']
    $42build_slice.22 = call $42build_slice.21(n, $const40.20, func=$42build_slice.21, args=(Var(n, nb.py:58), Var($const40.20, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None) ['$42build_slice.21', '$42build_slice.22', '$const40.20', 'n']
    ret[$42build_slice.22] = $34binary_subtract.17 ['$34binary_subtract.17', '$42build_slice.22', 'ret']
    $46load_global.23 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$46load_global.23']
    $48load_attr.24 = getattr(value=$46load_global.23, attr=nan) ['$46load_global.23', '$48load_attr.24']
    $const52.26 = const(NoneType, None)      ['$const52.26']
    $56build_slice.28 = global(slice: <class 'slice'>) ['$56build_slice.28']
    $56build_slice.29 = call $56build_slice.28($const52.26, n, func=$56build_slice.28, args=(Var($const52.26, nb.py:60), Var(n, nb.py:58)), kws=(), vararg=None, varkwarg=None, target=None) ['$56build_slice.28', '$56build_slice.29', '$const52.26', 'n']
    ret[$56build_slice.29] = $48load_attr.24 ['$48load_attr.24', '$56build_slice.29', 'ret']
    $64binary_true_divide.32 = ret / n       ['$64binary_true_divide.32', 'n', 'ret']
    $66return_value.33 = cast(value=$64binary_true_divide.32) ['$64binary_true_divide.32', '$66return_value.33']
    return $66return_value.33                ['$66return_value.33']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ea7f10>
2023-01-02 21:03 DEBUG on stmt: a = arg(0, name=a)
2023-01-02 21:03 DEBUG on stmt: n = arg(1, name=n)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cumsum)
2023-01-02 21:03 DEBUG on stmt: ret = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, nb.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const16.6 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: $18build_slice.8 = call $18build_slice.7(n, $const16.6, func=$18build_slice.7, args=(Var(n, nb.py:58), Var($const16.6, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $20binary_subscr.9 = getitem(value=ret, index=$18build_slice.8, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const24.11 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: $28unary_negative.13 = unary(fn=<built-in function neg>, value=n)
2023-01-02 21:03 DEBUG on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: $30build_slice.15 = call $30build_slice.14($const24.11, $28unary_negative.13, func=$30build_slice.14, args=(Var($const24.11, nb.py:59), Var($28unary_negative.13, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.16 = getitem(value=ret, index=$30build_slice.15, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $34binary_subtract.17 = $20binary_subscr.9 - $32binary_subscr.16
2023-01-02 21:03 DEBUG on stmt: $const40.20 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: $42build_slice.21 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: $42build_slice.22 = call $42build_slice.21(n, $const40.20, func=$42build_slice.21, args=(Var(n, nb.py:58), Var($const40.20, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: ret[$42build_slice.22] = $34binary_subtract.17
2023-01-02 21:03 DEBUG on stmt: $46load_global.23 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $48load_attr.24 = getattr(value=$46load_global.23, attr=nan)
2023-01-02 21:03 DEBUG on stmt: $const52.26 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: $56build_slice.28 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: $56build_slice.29 = call $56build_slice.28($const52.26, n, func=$56build_slice.28, args=(Var($const52.26, nb.py:60), Var(n, nb.py:58)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: ret[$56build_slice.29] = $48load_attr.24
2023-01-02 21:03 DEBUG on stmt: $64binary_true_divide.32 = ret / n
2023-01-02 21:03 DEBUG on stmt: $66return_value.33 = cast(value=$64binary_true_divide.32)
2023-01-02 21:03 DEBUG on stmt: return $66return_value.33
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$18build_slice.7': [<numba.core.ir.Assign object at 0x7f0196ea34f0>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x7f0196ea3610>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x7f0196ea3760>],
             '$28unary_negative.13': [<numba.core.ir.Assign object at 0x7f0196ea3ca0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f019702e700>],
             '$30build_slice.14': [<numba.core.ir.Assign object at 0x7f0196ea3e50>],
             '$30build_slice.15': [<numba.core.ir.Assign object at 0x7f0196ea3f70>],
             '$32binary_subscr.16': [<numba.core.ir.Assign object at 0x7f0196ea5100>],
             '$34binary_subtract.17': [<numba.core.ir.Assign object at 0x7f0196ea5280>],
             '$42build_slice.21': [<numba.core.ir.Assign object at 0x7f0196ea57f0>],
             '$42build_slice.22': [<numba.core.ir.Assign object at 0x7f0196ea5910>],
             '$46load_global.23': [<numba.core.ir.Assign object at 0x7f0196ea5b20>],
             '$48load_attr.24': [<numba.core.ir.Assign object at 0x7f0196ea5ca0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f0196efcdf0>],
             '$56build_slice.28': [<numba.core.ir.Assign object at 0x7f0196ea7250>],
             '$56build_slice.29': [<numba.core.ir.Assign object at 0x7f0196ea7370>],
             '$64binary_true_divide.32': [<numba.core.ir.Assign object at 0x7f0196ea77c0>],
             '$66return_value.33': [<numba.core.ir.Assign object at 0x7f0196ea7940>],
             '$const16.6': [<numba.core.ir.Assign object at 0x7f0196ea3340>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7f0196ea3a00>],
             '$const40.20': [<numba.core.ir.Assign object at 0x7f0196ea5640>],
             '$const52.26': [<numba.core.ir.Assign object at 0x7f0196ea5f40>],
             'a': [<numba.core.ir.Assign object at 0x7f0196f11160>],
             'n': [<numba.core.ir.Assign object at 0x7f0196f11250>],
             'ret': [<numba.core.ir.Assign object at 0x7f0196f1ee80>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ea9670>
2023-01-02 21:03 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-02 21:03 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-02 21:03 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-02 21:03 DEBUG on stmt: parameter_timeperiod = arg(4, name=parameter_timeperiod)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=roll)
2023-01-02 21:03 DEBUG on stmt: $const8.3 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: last_close_array = call $4load_method.1(close_array, $const8.3, func=$4load_method.1, args=[Var(close_array, nb.py:51), Var($const8.3, nb.py:51)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $const14.5 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $const18.7 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: last_close_array[0] = $const14.5
2023-01-02 21:03 DEBUG on stmt: $32load_global.12 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $34load_method.13 = getattr(value=$32load_global.12, attr=maximum)
2023-01-02 21:03 DEBUG on stmt: $40binary_subtract.16 = close_array - low_array
2023-01-02 21:03 DEBUG on stmt: $42load_global.17 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=abs)
2023-01-02 21:03 DEBUG on stmt: $50binary_subtract.21 = high_array - last_close_array
2023-01-02 21:03 DEBUG on stmt: $52call_method.22 = call $44load_method.18($50binary_subtract.21, func=$44load_method.18, args=[Var($50binary_subtract.21, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: each_num = call $34load_method.13($40binary_subtract.16, $52call_method.22, func=$34load_method.13, args=[Var($40binary_subtract.16, nb.py:64), Var($52call_method.22, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $60load_method.25 = getattr(value=$58load_global.24, attr=maximum)
2023-01-02 21:03 DEBUG on stmt: $64load_global.27 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=abs)
2023-01-02 21:03 DEBUG on stmt: $72binary_subtract.31 = low_array - last_close_array
2023-01-02 21:03 DEBUG on stmt: $74call_method.32 = call $66load_method.28($72binary_subtract.31, func=$66load_method.28, args=[Var($72binary_subtract.31, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: TR = call $60load_method.25(each_num, $74call_method.32, func=$60load_method.25, args=[Var(each_num, nb.py:64), Var($74call_method.32, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6_a = TR
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6_n = parameter_timeperiod
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v2load_global_0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v4load_method_1 = getattr(value=closure__locals__moving_average_v6__v2load_global_0, attr=cumsum)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6_ret = call closure__locals__moving_average_v6__v4load_method_1(closure__locals__moving_average_v6_a, func=closure__locals__moving_average_v6__v4load_method_1, args=[Var(closure__locals__moving_average_v6_a, nb.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__vconst16_6 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v18build_slice_7 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v18build_slice_8 = call closure__locals__moving_average_v6__v18build_slice_7(closure__locals__moving_average_v6_n, closure__locals__moving_average_v6__vconst16_6, func=closure__locals__moving_average_v6__v18build_slice_7, args=(Var(closure__locals__moving_average_v6_n, nb.py:58), Var(closure__locals__moving_average_v6__vconst16_6, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v20binary_subscr_9 = getitem(value=closure__locals__moving_average_v6_ret, index=closure__locals__moving_average_v6__v18build_slice_8, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__vconst24_11 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v28unary_negative_13 = unary(fn=<built-in function neg>, value=closure__locals__moving_average_v6_n)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v30build_slice_14 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v30build_slice_15 = call closure__locals__moving_average_v6__v30build_slice_14(closure__locals__moving_average_v6__vconst24_11, closure__locals__moving_average_v6__v28unary_negative_13, func=closure__locals__moving_average_v6__v30build_slice_14, args=(Var(closure__locals__moving_average_v6__vconst24_11, nb.py:59), Var(closure__locals__moving_average_v6__v28unary_negative_13, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v32binary_subscr_16 = getitem(value=closure__locals__moving_average_v6_ret, index=closure__locals__moving_average_v6__v30build_slice_15, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v34binary_subtract_17 = closure__locals__moving_average_v6__v20binary_subscr_9 - closure__locals__moving_average_v6__v32binary_subscr_16
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__vconst40_20 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v42build_slice_21 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v42build_slice_22 = call closure__locals__moving_average_v6__v42build_slice_21(closure__locals__moving_average_v6_n, closure__locals__moving_average_v6__vconst40_20, func=closure__locals__moving_average_v6__v42build_slice_21, args=(Var(closure__locals__moving_average_v6_n, nb.py:58), Var(closure__locals__moving_average_v6__vconst40_20, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6_ret[closure__locals__moving_average_v6__v42build_slice_22] = closure__locals__moving_average_v6__v34binary_subtract_17
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v46load_global_23 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v48load_attr_24 = getattr(value=closure__locals__moving_average_v6__v46load_global_23, attr=nan)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__vconst52_26 = const(NoneType, None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v56build_slice_28 = global(slice: <class 'slice'>)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v56build_slice_29 = call closure__locals__moving_average_v6__v56build_slice_28(closure__locals__moving_average_v6__vconst52_26, closure__locals__moving_average_v6_n, func=closure__locals__moving_average_v6__v56build_slice_28, args=(Var(closure__locals__moving_average_v6__vconst52_26, nb.py:60), Var(closure__locals__moving_average_v6_n, nb.py:58)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6_ret[closure__locals__moving_average_v6__v56build_slice_29] = closure__locals__moving_average_v6__v48load_attr_24
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v64binary_true_divide_32 = closure__locals__moving_average_v6_ret / closure__locals__moving_average_v6_n
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v66return_value_33 = closure__locals__moving_average_v6__v64binary_true_divide_32
2023-01-02 21:03 DEBUG on stmt: ATR = closure__locals__moving_average_v6__v66return_value_33
2023-01-02 21:03 DEBUG on stmt: $92return_value.39 = cast(value=ATR)
2023-01-02 21:03 DEBUG on stmt: return $92return_value.39
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196f163d0>],
             '$32load_global.12': [<numba.core.ir.Assign object at 0x7f0196f18970>],
             '$34load_method.13': [<numba.core.ir.Assign object at 0x7f0196f18af0>],
             '$40binary_subtract.16': [<numba.core.ir.Assign object at 0x7f0196f18eb0>],
             '$42load_global.17': [<numba.core.ir.Assign object at 0x7f0196f1a070>],
             '$44load_method.18': [<numba.core.ir.Assign object at 0x7f0196f1a1f0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f0196f16550>],
             '$50binary_subtract.21': [<numba.core.ir.Assign object at 0x7f0196f1a5b0>],
             '$52call_method.22': [<numba.core.ir.Assign object at 0x7f0196f1a760>],
             '$58load_global.24': [<numba.core.ir.Assign object at 0x7f0196f1ab50>],
             '$60load_method.25': [<numba.core.ir.Assign object at 0x7f0196f1acd0>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x7f0196f1af70>],
             '$66load_method.28': [<numba.core.ir.Assign object at 0x7f0196f1c130>],
             '$72binary_subtract.31': [<numba.core.ir.Assign object at 0x7f0196f1c4f0>],
             '$74call_method.32': [<numba.core.ir.Assign object at 0x7f0196f1c6a0>],
             '$92return_value.39': [<numba.core.ir.Assign object at 0x7f0196f1e1f0>],
             '$const14.5': [<numba.core.ir.Assign object at 0x7f0196f16c10>],
             '$const18.7': [<numba.core.ir.Assign object at 0x7f0196f16eb0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7f0196f167f0>],
             'ATR': [<numba.core.ir.Assign object at 0x7f0196eadcd0>],
             'TR': [<numba.core.ir.Assign object at 0x7f0196f1c820>],
             'close_array': [<numba.core.ir.Assign object at 0x7f0196f16130>],
             'closure__locals__moving_average_v6__v18build_slice_7': [<numba.core.ir.Assign object at 0x7f0196ea34f0>],
             'closure__locals__moving_average_v6__v18build_slice_8': [<numba.core.ir.Assign object at 0x7f0196ea3610>],
             'closure__locals__moving_average_v6__v20binary_subscr_9': [<numba.core.ir.Assign object at 0x7f0196ea3760>],
             'closure__locals__moving_average_v6__v28unary_negative_13': [<numba.core.ir.Assign object at 0x7f0196ea3ca0>],
             'closure__locals__moving_average_v6__v2load_global_0': [<numba.core.ir.Assign object at 0x7f019702e700>],
             'closure__locals__moving_average_v6__v30build_slice_14': [<numba.core.ir.Assign object at 0x7f0196ea3e50>],
             'closure__locals__moving_average_v6__v30build_slice_15': [<numba.core.ir.Assign object at 0x7f0196ea3f70>],
             'closure__locals__moving_average_v6__v32binary_subscr_16': [<numba.core.ir.Assign object at 0x7f0196ea5100>],
             'closure__locals__moving_average_v6__v34binary_subtract_17': [<numba.core.ir.Assign object at 0x7f0196ea5280>],
             'closure__locals__moving_average_v6__v42build_slice_21': [<numba.core.ir.Assign object at 0x7f0196ea57f0>],
             'closure__locals__moving_average_v6__v42build_slice_22': [<numba.core.ir.Assign object at 0x7f0196ea5910>],
             'closure__locals__moving_average_v6__v46load_global_23': [<numba.core.ir.Assign object at 0x7f0196ea5b20>],
             'closure__locals__moving_average_v6__v48load_attr_24': [<numba.core.ir.Assign object at 0x7f0196ea5ca0>],
             'closure__locals__moving_average_v6__v4load_method_1': [<numba.core.ir.Assign object at 0x7f0196efcdf0>],
             'closure__locals__moving_average_v6__v56build_slice_28': [<numba.core.ir.Assign object at 0x7f0196ea7250>],
             'closure__locals__moving_average_v6__v56build_slice_29': [<numba.core.ir.Assign object at 0x7f0196ea7370>],
             'closure__locals__moving_average_v6__v64binary_true_divide_32': [<numba.core.ir.Assign object at 0x7f0196ea77c0>],
             'closure__locals__moving_average_v6__v66return_value_33': [<numba.core.ir.Assign object at 0x7f0196ea7940>],
             'closure__locals__moving_average_v6__vconst16_6': [<numba.core.ir.Assign object at 0x7f0196ea3340>],
             'closure__locals__moving_average_v6__vconst24_11': [<numba.core.ir.Assign object at 0x7f0196ea3a00>],
             'closure__locals__moving_average_v6__vconst40_20': [<numba.core.ir.Assign object at 0x7f0196ea5640>],
             'closure__locals__moving_average_v6__vconst52_26': [<numba.core.ir.Assign object at 0x7f0196ea5f40>],
             'closure__locals__moving_average_v6_a': [<numba.core.ir.Assign object at 0x7f0196f11160>],
             'closure__locals__moving_average_v6_n': [<numba.core.ir.Assign object at 0x7f0196f11250>],
             'closure__locals__moving_average_v6_ret': [<numba.core.ir.Assign object at 0x7f0196f1ee80>],
             'each_num': [<numba.core.ir.Assign object at 0x7f0196f1a8e0>],
             'high_array': [<numba.core.ir.Assign object at 0x7f0196f11eb0>],
             'last_close_array': [<numba.core.ir.Assign object at 0x7f0196f169a0>],
             'low_array': [<numba.core.ir.Assign object at 0x7f0196f11fd0>],
             'parameter_timeperiod': [<numba.core.ir.Assign object at 0x7f0196f16250>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2226)
           2	LOAD_GLOBAL(arg=0, lineno=2226)
           4	LOAD_METHOD(arg=1, lineno=2226)
           6	LOAD_FAST(arg=0, lineno=2226)
           8	CALL_METHOD(arg=1, lineno=2226)
          10	STORE_FAST(arg=2, lineno=2226)
          12	LOAD_GLOBAL(arg=0, lineno=2227)
          14	LOAD_ATTR(arg=2, lineno=2227)
          16	LOAD_FAST(arg=2, lineno=2227)
          18	LOAD_ATTR(arg=3, lineno=2227)
          20	LOAD_FAST(arg=2, lineno=2227)
          22	LOAD_ATTR(arg=4, lineno=2227)
          24	LOAD_CONST(arg=1, lineno=2227)
          26	CALL_FUNCTION_KW(arg=2, lineno=2227)
          28	STORE_FAST(arg=3, lineno=2227)
          30	LOAD_FAST(arg=2, lineno=2230)
          32	LOAD_ATTR(arg=5, lineno=2230)
          34	STORE_FAST(arg=4, lineno=2230)
          36	LOAD_GLOBAL(arg=6, lineno=2231)
          38	LOAD_FAST(arg=2, lineno=2231)
          40	LOAD_ATTR(arg=7, lineno=2231)
          42	CALL_FUNCTION(arg=1, lineno=2231)
          44	GET_ITER(arg=None, lineno=2231)
>         46	FOR_ITER(arg=32, lineno=2231)
          48	STORE_FAST(arg=5, lineno=2231)
          50	LOAD_FAST(arg=5, lineno=2232)
          52	LOAD_FAST(arg=1, lineno=2232)
          54	BINARY_ADD(arg=None, lineno=2232)
          56	LOAD_FAST(arg=2, lineno=2232)
          58	LOAD_ATTR(arg=7, lineno=2232)
          60	BINARY_MODULO(arg=None, lineno=2232)
          62	STORE_FAST(arg=6, lineno=2232)
          64	LOAD_FAST(arg=4, lineno=2233)
          66	LOAD_FAST(arg=5, lineno=2233)
          68	BINARY_SUBSCR(arg=None, lineno=2233)
          70	LOAD_FAST(arg=3, lineno=2233)
          72	LOAD_ATTR(arg=5, lineno=2233)
          74	LOAD_FAST(arg=6, lineno=2233)
          76	STORE_SUBSCR(arg=None, lineno=2233)
          78	JUMP_ABSOLUTE(arg=46, lineno=2233)
>         80	LOAD_FAST(arg=3, lineno=2235)
          82	RETURN_VALUE(arg=None, lineno=2235)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2226)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2226)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$a6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$8call_method.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2227)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$12load_global.4']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=3, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$arr16.6']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$arr20.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=CALL_FUNCTION_KW(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', '$const24.10']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$26call_function_kw.11']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2230)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=5, lineno=2230)
2023-01-02 21:03 DEBUG stack ['$arr30.12']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2230)
2023-01-02 21:03 DEBUG stack ['$32load_attr.13']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=6, lineno=2231)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$36load_global.14']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=7, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$36load_global.14', '$arr38.15']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=1, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$36load_global.14', '$40load_attr.16']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$42call_function.17']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.18',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi46.0']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=FOR_ITER(arg=32, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$phi46.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2235)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=2235)
2023-01-02 21:03 DEBUG stack ['$out80.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=48 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi48.0', '$phi48.1']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=STORE_FAST(arg=5, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$phi48.1']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$i50.2']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$i50.2', '$shift52.3']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$54binary_add.4']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=LOAD_ATTR(arg=7, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$54binary_add.4', '$arr56.5']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=BINARY_MODULO(arg=None, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$54binary_add.4', '$58load_attr.6']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=STORE_FAST(arg=6, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$60binary_modulo.7']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$arr_flat64.8']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$arr_flat64.8', '$i66.9']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=LOAD_ATTR(arg=5, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$out70.11']
2023-01-02 21:03 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=6, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12']
2023-01-02 21:03 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12', '$idx74.13']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=JUMP_ABSOLUTE(arg=46, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=80 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi46.0': {('$44get_iter.18', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.18'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_attr.7'}), (20, {'res': '$arr20.8'}), (22, {'item': '$arr20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'func': '$14load_attr.5', 'args': ['$18load_attr.7', '$22load_attr.9'], 'names': '$const24.10', 'res': '$26call_function_kw.11'}), (28, {'value': '$26call_function_kw.11'}), (30, {'res': '$arr30.12'}), (32, {'item': '$arr30.12', 'res': '$32load_attr.13'}), (34, {'value': '$32load_attr.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$arr38.15'}), (40, {'item': '$arr38.15', 'res': '$40load_attr.16'}), (42, {'func': '$36load_global.14', 'args': ['$40load_attr.16'], 'res': '$42call_function.17'}), (44, {'value': '$42call_function.17', 'res': '$44get_iter.18'})), outgoing_phis={'$phi46.0': '$44get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.18',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 48: ('$phi46.0', '$46for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$i50.2'}), (52, {'res': '$shift52.3'}), (54, {'lhs': '$i50.2', 'rhs': '$shift52.3', 'res': '$54binary_add.4'}), (56, {'res': '$arr56.5'}), (58, {'item': '$arr56.5', 'res': '$58load_attr.6'}), (60, {'lhs': '$54binary_add.4', 'rhs': '$58load_attr.6', 'res': '$60binary_modulo.7'}), (62, {'value': '$60binary_modulo.7'}), (64, {'res': '$arr_flat64.8'}), (66, {'res': '$i66.9'}), (68, {'index': '$i66.9', 'target': '$arr_flat64.8', 'res': '$68binary_subscr.10'}), (70, {'res': '$out70.11'}), (72, {'item': '$out70.11', 'res': '$72load_attr.12'}), (74, {'res': '$idx74.13'}), (76, {'target': '$72load_attr.12', 'index': '$idx74.13', 'value': '$68binary_subscr.10'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$out80.0'}), (82, {'retval': '$out80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    shift = arg(1, name=shift)               ['shift']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'arr']
    $12load_global.4 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$12load_global.4']
    $14load_attr.5 = getattr(value=$12load_global.4, attr=empty) ['$12load_global.4', '$14load_attr.5']
    $18load_attr.7 = getattr(value=arr, attr=shape) ['$18load_attr.7', 'arr']
    $22load_attr.9 = getattr(value=arr, attr=dtype) ['$22load_attr.9', 'arr']
    out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', 'out']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $36load_global.14 = global(range: <class 'range'>) ['$36load_global.14']
    $40load_attr.16 = getattr(value=arr, attr=size) ['$40load_attr.16', 'arr']
    $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.14', '$40load_attr.16', '$42call_function.17']
    $44get_iter.18 = getiter(value=$42call_function.17) ['$42call_function.17', '$44get_iter.18']
    $phi46.0 = $44get_iter.18                ['$44get_iter.18', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 80             ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    $54binary_add.4 = i + shift              ['$54binary_add.4', 'i', 'shift']
    $58load_attr.6 = getattr(value=arr, attr=size) ['$58load_attr.6', 'arr']
    idx = $54binary_add.4 % $58load_attr.6   ['$54binary_add.4', '$58load_attr.6', 'idx']
    $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>) ['$68binary_subscr.10', 'arr_flat', 'i']
    $72load_attr.12 = getattr(value=out, attr=flat) ['$72load_attr.12', 'out']
    $72load_attr.12[idx] = $68binary_subscr.10 ['$68binary_subscr.10', '$72load_attr.12', 'idx']
    jump 46                                  []
label 80:
    $82return_value.1 = cast(value=out)      ['$82return_value.1', 'out']
    return $82return_value.1                 ['$82return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f1e820>
2023-01-02 21:03 DEBUG on stmt: a = arg(0, name=a)
2023-01-02 21:03 DEBUG on stmt: shift = arg(1, name=shift)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
2023-01-02 21:03 DEBUG on stmt: arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12load_global.4 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $18load_attr.7 = getattr(value=arr, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $22load_attr.9 = getattr(value=arr, attr=dtype)
2023-01-02 21:03 DEBUG on stmt: out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-01-02 21:03 DEBUG on stmt: $36load_global.14 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=arr, attr=size)
2023-01-02 21:03 DEBUG on stmt: $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $44get_iter.18 = getiter(value=$42call_function.17)
2023-01-02 21:03 DEBUG on stmt: $phi46.0 = $44get_iter.18
2023-01-02 21:03 DEBUG on stmt: jump 46
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 46
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f1e820>
2023-01-02 21:03 DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
2023-01-02 21:03 DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi48.1 = $46for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $46for_iter.3, 48, 80
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 48
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f1e820>
2023-01-02 21:03 DEBUG on stmt: i = $phi48.1
2023-01-02 21:03 DEBUG on stmt: $54binary_add.4 = i + shift
2023-01-02 21:03 DEBUG on stmt: $58load_attr.6 = getattr(value=arr, attr=size)
2023-01-02 21:03 DEBUG on stmt: idx = $54binary_add.4 % $58load_attr.6
2023-01-02 21:03 DEBUG on stmt: $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $72load_attr.12 = getattr(value=out, attr=flat)
2023-01-02 21:03 DEBUG on stmt: $72load_attr.12[idx] = $68binary_subscr.10
2023-01-02 21:03 DEBUG on stmt: jump 46
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 80
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f1e820>
2023-01-02 21:03 DEBUG on stmt: $82return_value.1 = cast(value=out)
2023-01-02 21:03 DEBUG on stmt: return $82return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x7f0196eb9f40>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x7f0196ebf100>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x7f0196ebf3a0>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x7f0196ebf640>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196eb9880>],
             '$36load_global.14': [<numba.core.ir.Assign object at 0x7f0196ec6040>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x7f0196ec62e0>],
             '$42call_function.17': [<numba.core.ir.Assign object at 0x7f0196ec6490>],
             '$44get_iter.18': [<numba.core.ir.Assign object at 0x7f0196ec65e0>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x7f0196ec66a0>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x7f0196ec67c0>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x7f0196ec68e0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f0196eb9a00>],
             '$54binary_add.4': [<numba.core.ir.Assign object at 0x7f0196ec6f40>],
             '$58load_attr.6': [<numba.core.ir.Assign object at 0x7f0196ec9220>],
             '$68binary_subscr.10': [<numba.core.ir.Assign object at 0x7f0196ec9880>],
             '$72load_attr.12': [<numba.core.ir.Assign object at 0x7f0196ec9b20>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x7f0196ec9e20>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x7f0196ebf4c0>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x7f0196eb9040>],
             'a': [<numba.core.ir.Assign object at 0x7f0196eb95e0>],
             'arr': [<numba.core.ir.Assign object at 0x7f0196eb9cd0>],
             'arr_flat': [<numba.core.ir.Assign object at 0x7f0196ebfd60>],
             'i': [<numba.core.ir.Assign object at 0x7f0196ec6b80>],
             'idx': [<numba.core.ir.Assign object at 0x7f0196ec93a0>],
             'out': [<numba.core.ir.Assign object at 0x7f0196ebfaf0>],
             'shift': [<numba.core.ir.Assign object at 0x7f0196eb9700>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4428)
           2	LOAD_FAST(arg=0, lineno=4428)
           4	RETURN_VALUE(arg=None, lineno=4428)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4428)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4428)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4428)
2023-01-02 21:03 DEBUG stack ['$a2.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f48f40>
2023-01-02 21:03 DEBUG on stmt: a = arg(0, name=a)
2023-01-02 21:03 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-02 21:03 DEBUG on stmt: $4return_value.1 = cast(value=a)
2023-01-02 21:03 DEBUG on stmt: return $4return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7f0196f3d670>],
             'a': [<numba.core.ir.Assign object at 0x7f0196f48af0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f0196f480d0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$10call_function.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f41c40>
2023-01-02 21:03 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-02 21:03 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-02 21:03 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-01-02 21:03 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f0196f22fd0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0196f222e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196f3db20>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f0196f22040>],
             'dtype': [<numba.core.ir.Assign object at 0x7f0196f3df10>],
             'shape': [<numba.core.ir.Assign object at 0x7f0196f41700>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=51)
           6	LOAD_FAST(arg=3, lineno=51)
           8	BINARY_SUBTRACT(arg=None, lineno=1)
          10	LOAD_GLOBAL(arg=1, lineno=1)
          12	LOAD_FAST(arg=1, lineno=51)
          14	LOAD_FAST(arg=2, lineno=51)
          16	BINARY_SUBTRACT(arg=None, lineno=1)
          18	CALL_FUNCTION(arg=1, lineno=1)
          20	CALL_FUNCTION(arg=2, lineno=1)
          22	RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=51)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=51)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$close_array_14.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$close_array_14.1', '$low_array_16.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$8binary_subtract.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=51)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=51)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$high_array_112.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$high_array_112.5', '$last_close_array_114.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$16binary_subtract.7']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$18call_function.8']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$20call_function.9']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$close_array_14.1'}), (6, {'res': '$low_array_16.2'}), (8, {'lhs': '$close_array_14.1', 'rhs': '$low_array_16.2', 'res': '$8binary_subtract.3'}), (10, {'res': '$10load_global.4'}), (12, {'res': '$high_array_112.5'}), (14, {'res': '$last_close_array_114.6'}), (16, {'lhs': '$high_array_112.5', 'rhs': '$last_close_array_114.6', 'res': '$16binary_subtract.7'}), (18, {'func': '$10load_global.4', 'args': ['$16binary_subtract.7'], 'res': '$18call_function.8'}), (20, {'func': '$2load_global.0', 'args': ['$8binary_subtract.3', '$18call_function.8'], 'res': '$20call_function.9'}), (22, {'retval': '$20call_function.9', 'castval': '$22return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    close_array_1 = arg(0, name=close_array_1) ['close_array_1']
    high_array_1 = arg(1, name=high_array_1) ['high_array_1']
    last_close_array_1 = arg(2, name=last_close_array_1) ['last_close_array_1']
    low_array_1 = arg(3, name=low_array_1)   ['low_array_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f01f05fca4: <ufunc 'maximum'>) ['$2load_global.0']
    $8binary_subtract.3 = close_array_1 - low_array_1 ['$8binary_subtract.3', 'close_array_1', 'low_array_1']
    $10load_global.4 = global(__ufunc_or_dufunc_0x7f01f0bc0a4: <ufunc 'absolute'>) ['$10load_global.4']
    $16binary_subtract.7 = high_array_1 - last_close_array_1 ['$16binary_subtract.7', 'high_array_1', 'last_close_array_1']
    $18call_function.8 = call $10load_global.4($16binary_subtract.7, func=$10load_global.4, args=[Var($16binary_subtract.7, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.4', '$16binary_subtract.7', '$18call_function.8']
    $20call_function.9 = call $2load_global.0($8binary_subtract.3, $18call_function.8, func=$2load_global.0, args=[Var($8binary_subtract.3, nb.py:1), Var($18call_function.8, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$20call_function.9', '$2load_global.0', '$8binary_subtract.3']
    $22return_value.10 = cast(value=$20call_function.9) ['$20call_function.9', '$22return_value.10']
    return $22return_value.10                ['$22return_value.10']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d619d0>
2023-01-02 21:03 DEBUG on stmt: close_array_1 = arg(0, name=close_array_1)
2023-01-02 21:03 DEBUG on stmt: high_array_1 = arg(1, name=high_array_1)
2023-01-02 21:03 DEBUG on stmt: last_close_array_1 = arg(2, name=last_close_array_1)
2023-01-02 21:03 DEBUG on stmt: low_array_1 = arg(3, name=low_array_1)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7f01f05fca4: <ufunc 'maximum'>)
2023-01-02 21:03 DEBUG on stmt: $8binary_subtract.3 = close_array_1 - low_array_1
2023-01-02 21:03 DEBUG on stmt: $10load_global.4 = global(__ufunc_or_dufunc_0x7f01f0bc0a4: <ufunc 'absolute'>)
2023-01-02 21:03 DEBUG on stmt: $16binary_subtract.7 = high_array_1 - last_close_array_1
2023-01-02 21:03 DEBUG on stmt: $18call_function.8 = call $10load_global.4($16binary_subtract.7, func=$10load_global.4, args=[Var($16binary_subtract.7, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $20call_function.9 = call $2load_global.0($8binary_subtract.3, $18call_function.8, func=$2load_global.0, args=[Var($8binary_subtract.3, nb.py:1), Var($18call_function.8, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $22return_value.10 = cast(value=$20call_function.9)
2023-01-02 21:03 DEBUG on stmt: return $22return_value.10
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f0196d62610>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x7f0196d629d0>],
             '$18call_function.8': [<numba.core.ir.Assign object at 0x7f0196d62b80>],
             '$20call_function.9': [<numba.core.ir.Assign object at 0x7f0196d61c40>],
             '$22return_value.10': [<numba.core.ir.Assign object at 0x7f0196d61ac0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196d620d0>],
             '$8binary_subtract.3': [<numba.core.ir.Assign object at 0x7f0196d62490>],
             'close_array_1': [<numba.core.ir.Assign object at 0x7f0196d613d0>],
             'high_array_1': [<numba.core.ir.Assign object at 0x7f0196d61cd0>],
             'last_close_array_1': [<numba.core.ir.Assign object at 0x7f0196d61df0>],
             'low_array_1': [<numba.core.ir.Assign object at 0x7f0196d61f10>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=205)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
2023-01-02 21:03 DEBUG stack ['$src_ndim2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
2023-01-02 21:03 DEBUG stack ['$src_ndim2.0', '$dest_ndim4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
2023-01-02 21:03 DEBUG stack ['$const10.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=14 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
2023-01-02 21:03 DEBUG stack ['$const14.0']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
2023-01-02 21:03 DEBUG stack ['$dest_ndim18.1']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
2023-01-02 21:03 DEBUG stack ['$dest_ndim18.1', '$src_ndim20.2']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
2023-01-02 21:03 DEBUG stack ['$22binary_subtract.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
2023-01-02 21:03 DEBUG stack ['$src_index26.0']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
2023-01-02 21:03 DEBUG stack ['$src_index26.0', '$src_ndim28.1']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
2023-01-02 21:03 DEBUG stack ['$30compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
2023-01-02 21:03 DEBUG stack ['$src_shape34.0']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
2023-01-02 21:03 DEBUG stack ['$src_shape34.0', '$src_index36.1']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
2023-01-02 21:03 DEBUG stack ['$38binary_subscr.2']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
2023-01-02 21:03 DEBUG stack ['$dest_shape42.3']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
2023-01-02 21:03 DEBUG stack ['$dest_shape42.3', '$dest_index44.4']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
2023-01-02 21:03 DEBUG stack ['$46binary_subscr.5']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
2023-01-02 21:03 DEBUG stack ['$dest_dim_size50.6']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
2023-01-02 21:03 DEBUG stack ['$dest_dim_size50.6', '$const52.7']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
2023-01-02 21:03 DEBUG stack ['$54compare_op.8']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
2023-01-02 21:03 DEBUG stack ['$dest_index120.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
2023-01-02 21:03 DEBUG stack ['$src_dim_size58.0']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
2023-01-02 21:03 DEBUG stack ['$src_dim_size58.0', '$dest_dim_size60.1']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
2023-01-02 21:03 DEBUG stack ['$62compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
2023-01-02 21:03 DEBUG stack ['$src_dim_size86.0']
2023-01-02 21:03 DEBUG dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
2023-01-02 21:03 DEBUG stack ['$src_dim_size86.0', '$const88.1']
2023-01-02 21:03 DEBUG dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
2023-01-02 21:03 DEBUG stack ['$90compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
2023-01-02 21:03 DEBUG stack ['$src_dim_size66.0']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
2023-01-02 21:03 DEBUG stack ['$src_dim_size66.0', '$const68.1']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
2023-01-02 21:03 DEBUG stack ['$70compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
2023-01-02 21:03 DEBUG stack ['$src_index102.0']
2023-01-02 21:03 DEBUG dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
2023-01-02 21:03 DEBUG stack ['$src_index102.0', '$const104.1']
2023-01-02 21:03 DEBUG dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
2023-01-02 21:03 DEBUG stack ['$106inplace_add.2']
2023-01-02 21:03 DEBUG dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
2023-01-02 21:03 DEBUG stack ['$dest_index110.3']
2023-01-02 21:03 DEBUG dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
2023-01-02 21:03 DEBUG stack ['$dest_index110.3', '$const112.4']
2023-01-02 21:03 DEBUG dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
2023-01-02 21:03 DEBUG stack ['$114inplace_add.5']
2023-01-02 21:03 DEBUG dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
2023-01-02 21:03 DEBUG stack ['$src_dim_size94.0']
2023-01-02 21:03 DEBUG dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
2023-01-02 21:03 DEBUG stack ['$src_dim_size94.0', '$dest_shape96.1']
2023-01-02 21:03 DEBUG dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
2023-01-02 21:03 DEBUG stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
2023-01-02 21:03 DEBUG stack ['$dest_index74.0']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
2023-01-02 21:03 DEBUG stack ['$dest_index74.0', '$const76.1']
2023-01-02 21:03 DEBUG dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
2023-01-02 21:03 DEBUG stack ['$78binary_add.2']
2023-01-02 21:03 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
2023-01-02 21:03 DEBUG stack ['$80unary_negative.3']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-02 21:03 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-02 21:03 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-02 21:03 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 14
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.1
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: src_index = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-02 21:03 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $32pred, 34, 120
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 86
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-02 21:03 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $64pred, 66, 102
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 66
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-02 21:03 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $72pred, 74, 102
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 74
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-01-02 21:03 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-02 21:03 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-02 21:03 DEBUG on stmt: return $82return_value.4
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 86
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-02 21:03 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $92pred, 94, 102
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 94
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-01-02 21:03 DEBUG on stmt: jump 102
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 102
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-02 21:03 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: dest_index = $114inplace_add.5
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 120
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d9bc40>
2023-01-02 21:03 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-01-02 21:03 DEBUG on stmt: return $122return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x7f0196d99ee0>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x7f0196d9b400>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x7f0196d9b820>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f0196d910d0>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d91cd0>],
             '$32pred': [<numba.core.ir.Assign object at 0x7f0196d91f70>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x7f0196d94df0>],
             '$56pred': [<numba.core.ir.Assign object at 0x7f0196d960d0>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d81e80>],
             '$64pred': [<numba.core.ir.Assign object at 0x7f0196d81460>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d92a90>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d963a0>],
             '$72pred': [<numba.core.ir.Assign object at 0x7f0196d96640>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x7f0196d96b20>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x7f0196d96ca0>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x7f0196d96e20>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196d92d30>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d99340>],
             '$92pred': [<numba.core.ir.Assign object at 0x7f0196d995e0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f0196d92f10>],
             '$const104.1': [<numba.core.ir.Assign object at 0x7f0196d99d60>],
             '$const112.4': [<numba.core.ir.Assign object at 0x7f0196d9b280>],
             '$const52.7': [<numba.core.ir.Assign object at 0x7f0196d94c70>],
             '$const68.1': [<numba.core.ir.Assign object at 0x7f0196d96220>],
             '$const76.1': [<numba.core.ir.Assign object at 0x7f0196d969a0>],
             '$const88.1': [<numba.core.ir.Assign object at 0x7f0196d991c0>],
             'bool32': [<numba.core.ir.Assign object at 0x7f0196d91e50>],
             'bool56': [<numba.core.ir.Assign object at 0x7f0196d94f70>],
             'bool64': [<numba.core.ir.Assign object at 0x7f0196d81d00>],
             'bool72': [<numba.core.ir.Assign object at 0x7f0196d96520>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196d92c10>],
             'bool92': [<numba.core.ir.Assign object at 0x7f0196d994c0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f0196d948b0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f0196d91850>,
                            <numba.core.ir.Assign object at 0x7f0196d9b4c0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f0196d925b0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f0196d926d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f0196d943d0>],
             'src_index': [<numba.core.ir.Assign object at 0x7f0196d91370>,
                           <numba.core.ir.Assign object at 0x7f0196d99fa0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f0196d92370>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f0196d92490>]})
2023-01-02 21:03 DEBUG SSA violators {'dest_index', 'src_index'}
2023-01-02 21:03 DEBUG Fix SSA violator on var dest_index
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-02 21:03 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-02 21:03 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-02 21:03 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 14
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_index = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-02 21:03 DEBUG first assign: dest_index
2023-01-02 21:03 DEBUG replaced with: dest_index = dest_ndim - src_ndim
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-02 21:03 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $32pred, 34, 120
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 86
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-02 21:03 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $64pred, 66, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 66
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-02 21:03 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $72pred, 74, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 74
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-01-02 21:03 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-02 21:03 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-02 21:03 DEBUG on stmt: return $82return_value.4
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 86
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-02 21:03 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $92pred, 94, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 94
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-01-02 21:03 DEBUG on stmt: jump 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 102
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-02 21:03 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: dest_index = $114inplace_add.5
2023-01-02 21:03 DEBUG replaced with: dest_index.1 = $114inplace_add.5
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 120
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-01-02 21:03 DEBUG on stmt: return $122return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f0196d81580>],
             102: [<numba.core.ir.Assign object at 0x7f0196d9bd60>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-02 21:03 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-02 21:03 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-02 21:03 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 14
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_index = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-02 21:03 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $32pred, 34, 120
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG find_def_from_top label 34
2023-01-02 21:03 DEBUG idom 26 from label 34
2023-01-02 21:03 DEBUG find_def_from_bottom label 26
2023-01-02 21:03 DEBUG find_def_from_top label 26
2023-01-02 21:03 DEBUG insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2023-01-02 21:03 DEBUG find_def_from_bottom label 102
2023-01-02 21:03 DEBUG incoming_def dest_index.1 = $114inplace_add.5
2023-01-02 21:03 DEBUG find_def_from_bottom label 14
2023-01-02 21:03 DEBUG incoming_def dest_index = dest_ndim - src_ndim
2023-01-02 21:03 DEBUG replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 86
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-02 21:03 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $64pred, 66, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 66
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-02 21:03 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $72pred, 74, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 74
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-01-02 21:03 DEBUG find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
2023-01-02 21:03 DEBUG find_def_from_top label 74
2023-01-02 21:03 DEBUG idom 66 from label 74
2023-01-02 21:03 DEBUG find_def_from_bottom label 66
2023-01-02 21:03 DEBUG find_def_from_top label 66
2023-01-02 21:03 DEBUG idom 58 from label 66
2023-01-02 21:03 DEBUG find_def_from_bottom label 58
2023-01-02 21:03 DEBUG find_def_from_top label 58
2023-01-02 21:03 DEBUG idom 34 from label 58
2023-01-02 21:03 DEBUG find_def_from_bottom label 34
2023-01-02 21:03 DEBUG find_def_from_top label 34
2023-01-02 21:03 DEBUG idom 26 from label 34
2023-01-02 21:03 DEBUG find_def_from_bottom label 26
2023-01-02 21:03 DEBUG replaced with: $78binary_add.2 = dest_index.2 + $const76.1
2023-01-02 21:03 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-02 21:03 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-02 21:03 DEBUG on stmt: return $82return_value.4
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 86
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-02 21:03 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $92pred, 94, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 94
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-01-02 21:03 DEBUG find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
2023-01-02 21:03 DEBUG find_def_from_top label 94
2023-01-02 21:03 DEBUG idom 86 from label 94
2023-01-02 21:03 DEBUG find_def_from_bottom label 86
2023-01-02 21:03 DEBUG find_def_from_top label 86
2023-01-02 21:03 DEBUG idom 34 from label 86
2023-01-02 21:03 DEBUG find_def_from_bottom label 34
2023-01-02 21:03 DEBUG find_def_from_top label 34
2023-01-02 21:03 DEBUG idom 26 from label 34
2023-01-02 21:03 DEBUG find_def_from_bottom label 26
2023-01-02 21:03 DEBUG replaced with: dest_shape[dest_index.2] = src_dim_size
2023-01-02 21:03 DEBUG on stmt: jump 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 102
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-02 21:03 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG find_def_from_top label 102
2023-01-02 21:03 DEBUG idom 34 from label 102
2023-01-02 21:03 DEBUG find_def_from_bottom label 34
2023-01-02 21:03 DEBUG find_def_from_top label 34
2023-01-02 21:03 DEBUG idom 26 from label 34
2023-01-02 21:03 DEBUG find_def_from_bottom label 26
2023-01-02 21:03 DEBUG replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 120
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-01-02 21:03 DEBUG find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
2023-01-02 21:03 DEBUG find_def_from_top label 120
2023-01-02 21:03 DEBUG idom 26 from label 120
2023-01-02 21:03 DEBUG find_def_from_bottom label 26
2023-01-02 21:03 DEBUG replaced with: $122return_value.1 = cast(value=dest_index.2)
2023-01-02 21:03 DEBUG on stmt: return $122return_value.1
2023-01-02 21:03 DEBUG Fix SSA violator on var src_index
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-02 21:03 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-02 21:03 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-02 21:03 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 14
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: src_index = const(int, 0)
2023-01-02 21:03 DEBUG first assign: src_index
2023-01-02 21:03 DEBUG replaced with: src_index = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
2023-01-02 21:03 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-02 21:03 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $32pred, 34, 120
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 86
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-02 21:03 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $64pred, 66, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 66
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-02 21:03 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $72pred, 74, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 74
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2023-01-02 21:03 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-02 21:03 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-02 21:03 DEBUG on stmt: return $82return_value.4
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 86
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-02 21:03 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $92pred, 94, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 94
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: dest_shape[dest_index.2] = src_dim_size
2023-01-02 21:03 DEBUG on stmt: jump 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 102
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-02 21:03 DEBUG replaced with: src_index.1 = $106inplace_add.2
2023-01-02 21:03 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 120
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d9baf0>
2023-01-02 21:03 DEBUG on stmt: $122return_value.1 = cast(value=dest_index.2)
2023-01-02 21:03 DEBUG on stmt: return $122return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f0196d81a90>],
             102: [<numba.core.ir.Assign object at 0x7f0196d2b760>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-02 21:03 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-02 21:03 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-02 21:03 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 14
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_index = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
2023-01-02 21:03 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-02 21:03 DEBUG find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
2023-01-02 21:03 DEBUG find_def_from_top label 26
2023-01-02 21:03 DEBUG insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2023-01-02 21:03 DEBUG find_def_from_bottom label 102
2023-01-02 21:03 DEBUG incoming_def src_index.1 = $106inplace_add.2
2023-01-02 21:03 DEBUG find_def_from_bottom label 14
2023-01-02 21:03 DEBUG incoming_def src_index = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $30compare_op.2 = src_index.2 < src_ndim
2023-01-02 21:03 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $32pred, 34, 120
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG find_def_from_top label 34
2023-01-02 21:03 DEBUG idom 26 from label 34
2023-01-02 21:03 DEBUG find_def_from_bottom label 26
2023-01-02 21:03 DEBUG replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 86
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-02 21:03 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $64pred, 66, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 66
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-02 21:03 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $72pred, 74, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 74
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2023-01-02 21:03 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-02 21:03 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-02 21:03 DEBUG on stmt: return $82return_value.4
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 86
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-02 21:03 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $92pred, 94, 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 94
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: dest_shape[dest_index.2] = src_dim_size
2023-01-02 21:03 DEBUG on stmt: jump 102
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 102
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG find_def_from_top label 102
2023-01-02 21:03 DEBUG idom 34 from label 102
2023-01-02 21:03 DEBUG find_def_from_bottom label 34
2023-01-02 21:03 DEBUG find_def_from_top label 34
2023-01-02 21:03 DEBUG idom 26 from label 34
2023-01-02 21:03 DEBUG find_def_from_bottom label 26
2023-01-02 21:03 DEBUG replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: src_index.1 = $106inplace_add.2
2023-01-02 21:03 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-01-02 21:03 DEBUG on stmt: jump 26
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 120
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d81730>
2023-01-02 21:03 DEBUG on stmt: $122return_value.1 = cast(value=dest_index.2)
2023-01-02 21:03 DEBUG on stmt: return $122return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=64)
           6	LOAD_GLOBAL(arg=1, lineno=1)
           8	LOAD_FAST(arg=2, lineno=51)
          10	LOAD_FAST(arg=1, lineno=51)
          12	BINARY_SUBTRACT(arg=None, lineno=1)
          14	CALL_FUNCTION(arg=1, lineno=1)
          16	CALL_FUNCTION(arg=2, lineno=1)
          18	RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=64)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$each_num_14.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=51)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=51)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$low_array_28.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$low_array_28.3', '$last_close_array_210.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$12binary_subtract.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=1)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$14call_function.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$16call_function.7']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$each_num_14.1'}), (6, {'res': '$6load_global.2'}), (8, {'res': '$low_array_28.3'}), (10, {'res': '$last_close_array_210.4'}), (12, {'lhs': '$low_array_28.3', 'rhs': '$last_close_array_210.4', 'res': '$12binary_subtract.5'}), (14, {'func': '$6load_global.2', 'args': ['$12binary_subtract.5'], 'res': '$14call_function.6'}), (16, {'func': '$2load_global.0', 'args': ['$each_num_14.1', '$14call_function.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    each_num_1 = arg(0, name=each_num_1)     ['each_num_1']
    last_close_array_2 = arg(1, name=last_close_array_2) ['last_close_array_2']
    low_array_2 = arg(2, name=low_array_2)   ['low_array_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7f01f05fca4: <ufunc 'maximum'>) ['$2load_global.0']
    $6load_global.2 = global(__ufunc_or_dufunc_0x7f01f0bc0a4: <ufunc 'absolute'>) ['$6load_global.2']
    $12binary_subtract.5 = low_array_2 - last_close_array_2 ['$12binary_subtract.5', 'last_close_array_2', 'low_array_2']
    $14call_function.6 = call $6load_global.2($12binary_subtract.5, func=$6load_global.2, args=[Var($12binary_subtract.5, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_subtract.5', '$14call_function.6', '$6load_global.2']
    $16call_function.7 = call $2load_global.0(each_num_1, $14call_function.6, func=$2load_global.0, args=[Var(each_num_1, nb.py:1), Var($14call_function.6, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$14call_function.6', '$16call_function.7', '$2load_global.0', 'each_num_1']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196e57e20>
2023-01-02 21:03 DEBUG on stmt: each_num_1 = arg(0, name=each_num_1)
2023-01-02 21:03 DEBUG on stmt: last_close_array_2 = arg(1, name=last_close_array_2)
2023-01-02 21:03 DEBUG on stmt: low_array_2 = arg(2, name=low_array_2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7f01f05fca4: <ufunc 'maximum'>)
2023-01-02 21:03 DEBUG on stmt: $6load_global.2 = global(__ufunc_or_dufunc_0x7f01f0bc0a4: <ufunc 'absolute'>)
2023-01-02 21:03 DEBUG on stmt: $12binary_subtract.5 = low_array_2 - last_close_array_2
2023-01-02 21:03 DEBUG on stmt: $14call_function.6 = call $6load_global.2($12binary_subtract.5, func=$6load_global.2, args=[Var($12binary_subtract.5, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $16call_function.7 = call $2load_global.0(each_num_1, $14call_function.6, func=$2load_global.0, args=[Var(each_num_1, nb.py:1), Var($14call_function.6, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $18return_value.8 = cast(value=$16call_function.7)
2023-01-02 21:03 DEBUG on stmt: return $18return_value.8
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$12binary_subtract.5': [<numba.core.ir.Assign object at 0x7f0196de5c70>],
             '$14call_function.6': [<numba.core.ir.Assign object at 0x7f0196decf40>],
             '$16call_function.7': [<numba.core.ir.Assign object at 0x7f0196dec100>],
             '$18return_value.8': [<numba.core.ir.Assign object at 0x7f0196dec280>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196de5af0>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x7f0196de5dc0>],
             'each_num_1': [<numba.core.ir.Assign object at 0x7f0196de5280>],
             'last_close_array_2': [<numba.core.ir.Assign object at 0x7f0196de5610>],
             'low_array_2': [<numba.core.ir.Assign object at 0x7f0196de5700>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=377)
           2	LOAD_GLOBAL(arg=0, lineno=377)
           4	LOAD_METHOD(arg=1, lineno=377)
           6	LOAD_FAST(arg=0, lineno=377)
           8	LOAD_ATTR(arg=2, lineno=377)
          10	LOAD_DEREF(arg=0, lineno=377)
          12	CALL_METHOD(arg=2, lineno=377)
          14	STORE_FAST(arg=1, lineno=377)
          16	LOAD_DEREF(arg=1, lineno=378)
          18	STORE_FAST(arg=2, lineno=378)
          20	LOAD_GLOBAL(arg=3, lineno=379)
          22	LOAD_FAST(arg=0, lineno=379)
          24	LOAD_ATTR(arg=4, lineno=379)
          26	CALL_FUNCTION(arg=1, lineno=379)
          28	GET_ITER(arg=None, lineno=379)
>         30	FOR_ITER(arg=24, lineno=379)
          32	UNPACK_SEQUENCE(arg=2, lineno=379)
          34	STORE_FAST(arg=3, lineno=379)
          36	STORE_FAST(arg=4, lineno=379)
          38	LOAD_FAST(arg=2, lineno=380)
          40	LOAD_FAST(arg=4, lineno=380)
          42	INPLACE_ADD(arg=None, lineno=380)
          44	STORE_FAST(arg=2, lineno=380)
          46	LOAD_FAST(arg=2, lineno=381)
          48	LOAD_FAST(arg=1, lineno=381)
          50	LOAD_FAST(arg=3, lineno=381)
          52	STORE_SUBSCR(arg=None, lineno=381)
          54	JUMP_ABSOLUTE(arg=30, lineno=381)
>         56	LOAD_FAST(arg=1, lineno=382)
          58	RETURN_VALUE(arg=None, lineno=382)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=377)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=377)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=377)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=377)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=377)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$arr6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=377)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$8load_attr.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=CALL_METHOD(arg=2, lineno=377)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$8load_attr.3', '$10load_deref.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=STORE_FAST(arg=1, lineno=377)
2023-01-02 21:03 DEBUG stack ['$12call_method.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_DEREF(arg=1, lineno=378)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=STORE_FAST(arg=2, lineno=378)
2023-01-02 21:03 DEBUG stack ['$16load_deref.6']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_GLOBAL(arg=3, lineno=379)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=379)
2023-01-02 21:03 DEBUG stack ['$20load_global.7']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_ATTR(arg=4, lineno=379)
2023-01-02 21:03 DEBUG stack ['$20load_global.7', '$arr22.8']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=379)
2023-01-02 21:03 DEBUG stack ['$20load_global.7', '$24load_attr.9']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=GET_ITER(arg=None, lineno=379)
2023-01-02 21:03 DEBUG stack ['$26call_function.10']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=30, stack=('$28get_iter.11',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=30 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi30.0']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=FOR_ITER(arg=24, lineno=379)
2023-01-02 21:03 DEBUG stack ['$phi30.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=382)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=382)
2023-01-02 21:03 DEBUG stack ['$out56.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi32.0', '$phi32.1']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=UNPACK_SEQUENCE(arg=2, lineno=379)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$phi32.1']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=STORE_FAST(arg=3, lineno=379)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$32unpack_sequence.3', '$32unpack_sequence.2']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=STORE_FAST(arg=4, lineno=379)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$32unpack_sequence.3']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=380)
2023-01-02 21:03 DEBUG stack ['$phi32.0']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=380)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$c38.5']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=INPLACE_ADD(arg=None, lineno=380)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$c38.5', '$v40.6']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=STORE_FAST(arg=2, lineno=380)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$42inplace_add.7']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=381)
2023-01-02 21:03 DEBUG stack ['$phi32.0']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=381)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$c46.8']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=381)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$c46.8', '$out48.9']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=STORE_SUBSCR(arg=None, lineno=381)
2023-01-02 21:03 DEBUG stack ['$phi32.0', '$c46.8', '$out48.9', '$idx50.10']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=JUMP_ABSOLUTE(arg=30, lineno=381)
2023-01-02 21:03 DEBUG stack ['$phi32.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=30 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=56 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi30.0': {('$28get_iter.11', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.11'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$arr6.2'}), (8, {'item': '$arr6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'func': '$4load_method.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_deref.6'}), (18, {'value': '$16load_deref.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$arr22.8'}), (24, {'item': '$arr22.8', 'res': '$24load_attr.9'}), (26, {'func': '$20load_global.7', 'args': ['$24load_attr.9'], 'res': '$26call_function.10'}), (28, {'value': '$26call_function.10', 'res': '$28get_iter.11'})), outgoing_phis={'$phi30.0': '$28get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.11',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 32: ('$phi30.0', '$30for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'iterable': '$phi32.1', 'stores': ['$32unpack_sequence.2', '$32unpack_sequence.3'], 'tupleobj': '$32unpack_sequence.4'}), (34, {'value': '$32unpack_sequence.2'}), (36, {'value': '$32unpack_sequence.3'}), (38, {'res': '$c38.5'}), (40, {'res': '$v40.6'}), (42, {'lhs': '$c38.5', 'rhs': '$v40.6', 'res': '$42inplace_add.7'}), (44, {'value': '$42inplace_add.7'}), (46, {'res': '$c46.8'}), (48, {'res': '$out48.9'}), (50, {'res': '$idx50.10'}), (52, {'target': '$out48.9', 'index': '$idx50.10', 'value': '$c46.8'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$out56.0'}), (58, {'retval': '$out56.0', 'castval': '$58return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=arr, attr=size) ['$8load_attr.3', 'arr']
    $10load_deref.4 = freevar(dtype: float64) ['$10load_deref.4']
    out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_method.1', '$8load_attr.3', 'out']
    c = freevar(zero: 0.0)                   ['c']
    $20load_global.7 = global(enumerate: <class 'enumerate'>) ['$20load_global.7']
    $24load_attr.9 = getattr(value=arr, attr=flat) ['$24load_attr.9', 'arr']
    $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', '$24load_attr.9', '$26call_function.10']
    $28get_iter.11 = getiter(value=$26call_function.10) ['$26call_function.10', '$28get_iter.11']
    $phi30.0 = $28get_iter.11                ['$28get_iter.11', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 56             ['$30for_iter.3']
label 32:
    $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2) ['$32unpack_sequence.4', '$phi32.1']
    $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.2', '$32unpack_sequence.4']
    $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.3', '$32unpack_sequence.4']
    idx = $32unpack_sequence.2               ['$32unpack_sequence.2', 'idx']
    v = $32unpack_sequence.3                 ['$32unpack_sequence.3', 'v']
    $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined) ['$42inplace_add.7', 'c', 'v']
    c = $42inplace_add.7                     ['$42inplace_add.7', 'c']
    out[idx] = c                             ['c', 'idx', 'out']
    jump 30                                  []
label 56:
    $58return_value.1 = cast(value=out)      ['$58return_value.1', 'out']
    return $58return_value.1                 ['$58return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019700e5e0>
2023-01-02 21:03 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-01-02 21:03 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-01-02 21:03 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-02 21:03 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-01-02 21:03 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-01-02 21:03 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-01-02 21:03 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019700e5e0>
2023-01-02 21:03 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-01-02 21:03 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019700e5e0>
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $32unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: v = $32unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: c = $42inplace_add.7
2023-01-02 21:03 DEBUG on stmt: out[idx] = c
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 56
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019700e5e0>
2023-01-02 21:03 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-01-02 21:03 DEBUG on stmt: return $58return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x7f0196e35670>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x7f0196e355e0>],
             '$24load_attr.9': [<numba.core.ir.Assign object at 0x7f0196e35880>],
             '$26call_function.10': [<numba.core.ir.Assign object at 0x7f0196e35d90>],
             '$28get_iter.11': [<numba.core.ir.Assign object at 0x7f0196e1a0d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196fed850>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x7f0196e1a310>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x7f0196e1a430>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x7f0196e1a550>],
             '$32unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f0196e1a9a0>],
             '$32unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f0196e1aac0>],
             '$32unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f0196e1a850>],
             '$42inplace_add.7': [<numba.core.ir.Assign object at 0x7f0196e050d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f0196fed250>],
             '$58return_value.1': [<numba.core.ir.Assign object at 0x7f0196e057f0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f0196e35a00>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x7f0196e352e0>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x7f0196e1a220>],
             'arr': [<numba.core.ir.Assign object at 0x7f0196fed6d0>],
             'c': [<numba.core.ir.Assign object at 0x7f0196e35310>,
                   <numba.core.ir.Assign object at 0x7f0196e05190>],
             'idx': [<numba.core.ir.Assign object at 0x7f0196e1abb0>],
             'out': [<numba.core.ir.Assign object at 0x7f0196e35d60>],
             'v': [<numba.core.ir.Assign object at 0x7f0196e1acd0>]})
2023-01-02 21:03 DEBUG SSA violators {'c'}
2023-01-02 21:03 DEBUG Fix SSA violator on var c
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019700e370>
2023-01-02 21:03 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-01-02 21:03 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-01-02 21:03 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-02 21:03 DEBUG first assign: c
2023-01-02 21:03 DEBUG replaced with: c = freevar(zero: 0.0)
2023-01-02 21:03 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-01-02 21:03 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-01-02 21:03 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-01-02 21:03 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019700e370>
2023-01-02 21:03 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-01-02 21:03 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019700e370>
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $32unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: v = $32unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: c = $42inplace_add.7
2023-01-02 21:03 DEBUG replaced with: c.1 = $42inplace_add.7
2023-01-02 21:03 DEBUG on stmt: out[idx] = c
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 56
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019700e370>
2023-01-02 21:03 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-01-02 21:03 DEBUG on stmt: return $58return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f019700e460>],
             32: [<numba.core.ir.Assign object at 0x7f019700e670>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019700e790>
2023-01-02 21:03 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-01-02 21:03 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-01-02 21:03 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-02 21:03 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-01-02 21:03 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-01-02 21:03 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-01-02 21:03 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019700e790>
2023-01-02 21:03 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-01-02 21:03 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019700e790>
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $32unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: v = $32unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG find_def var='c' stmt=$42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG find_def_from_top label 32
2023-01-02 21:03 DEBUG idom 30 from label 32
2023-01-02 21:03 DEBUG find_def_from_bottom label 30
2023-01-02 21:03 DEBUG find_def_from_top label 30
2023-01-02 21:03 DEBUG insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def c = freevar(zero: 0.0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 32
2023-01-02 21:03 DEBUG incoming_def c.1 = $42inplace_add.7
2023-01-02 21:03 DEBUG replaced with: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-02 21:03 DEBUG on stmt: c.1 = $42inplace_add.7
2023-01-02 21:03 DEBUG on stmt: out[idx] = c
2023-01-02 21:03 DEBUG find_def var='c' stmt=out[idx] = c
2023-01-02 21:03 DEBUG replaced with: out[idx] = c.1
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 56
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019700e790>
2023-01-02 21:03 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-01-02 21:03 DEBUG on stmt: return $58return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$10call_function.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196de3460>
2023-01-02 21:03 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-02 21:03 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-02 21:03 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-01-02 21:03 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f0196e551c0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0196e55310>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196de3c10>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f0196de3fd0>],
             'dtype': [<numba.core.ir.Assign object at 0x7f0196de3a90>],
             'shape': [<numba.core.ir.Assign object at 0x7f0196de3100>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=59)
           2	LOAD_FAST(arg=0, lineno=59)
           4	LOAD_FAST(arg=1, lineno=59)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=59)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=59)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-02 21:03 DEBUG stack ['$closure__locals__moving_average_v6__v20binary_subscr_9_12.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$closure__locals__moving_average_v6__v20binary_subscr_9_12.0', '$closure__locals__moving_average_v6__v32binary_subscr_16_14.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$6binary_subtract.2']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$closure__locals__moving_average_v6__v20binary_subscr_9_12.0'}), (4, {'res': '$closure__locals__moving_average_v6__v32binary_subscr_16_14.1'}), (6, {'lhs': '$closure__locals__moving_average_v6__v20binary_subscr_9_12.0', 'rhs': '$closure__locals__moving_average_v6__v32binary_subscr_16_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    closure__locals__moving_average_v6__v20binary_subscr_9_1 = arg(0, name=closure__locals__moving_average_v6__v20binary_subscr_9_1) ['closure__locals__moving_average_v6__v20binary_subscr_9_1']
    closure__locals__moving_average_v6__v32binary_subscr_16_1 = arg(1, name=closure__locals__moving_average_v6__v32binary_subscr_16_1) ['closure__locals__moving_average_v6__v32binary_subscr_16_1']
    $6binary_subtract.2 = closure__locals__moving_average_v6__v20binary_subscr_9_1 - closure__locals__moving_average_v6__v32binary_subscr_16_1 ['$6binary_subtract.2', 'closure__locals__moving_average_v6__v20binary_subscr_9_1', 'closure__locals__moving_average_v6__v32binary_subscr_16_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d06580>
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v20binary_subscr_9_1 = arg(0, name=closure__locals__moving_average_v6__v20binary_subscr_9_1)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6__v32binary_subscr_16_1 = arg(1, name=closure__locals__moving_average_v6__v32binary_subscr_16_1)
2023-01-02 21:03 DEBUG on stmt: $6binary_subtract.2 = closure__locals__moving_average_v6__v20binary_subscr_9_1 - closure__locals__moving_average_v6__v32binary_subscr_16_1
2023-01-02 21:03 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
2023-01-02 21:03 DEBUG on stmt: return $8return_value.3
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f0196c86b20>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f0196d12e20>],
             'closure__locals__moving_average_v6__v20binary_subscr_9_1': [<numba.core.ir.Assign object at 0x7f0196d06430>],
             'closure__locals__moving_average_v6__v32binary_subscr_16_1': [<numba.core.ir.Assign object at 0x7f0196d061f0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=58)
           2	LOAD_FAST(arg=1, lineno=58)
           4	LOAD_FAST(arg=0, lineno=58)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=58)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=58)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=58)
2023-01-02 21:03 DEBUG stack ['$closure__locals__moving_average_v6_ret_12.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$closure__locals__moving_average_v6_ret_12.0', '$closure__locals__moving_average_v6_n_14.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$6binary_true_divide.2']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$closure__locals__moving_average_v6_ret_12.0'}), (4, {'res': '$closure__locals__moving_average_v6_n_14.1'}), (6, {'lhs': '$closure__locals__moving_average_v6_ret_12.0', 'rhs': '$closure__locals__moving_average_v6_n_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    closure__locals__moving_average_v6_n_1 = arg(0, name=closure__locals__moving_average_v6_n_1) ['closure__locals__moving_average_v6_n_1']
    closure__locals__moving_average_v6_ret_1 = arg(1, name=closure__locals__moving_average_v6_ret_1) ['closure__locals__moving_average_v6_ret_1']
    $6binary_true_divide.2 = closure__locals__moving_average_v6_ret_1 / closure__locals__moving_average_v6_n_1 ['$6binary_true_divide.2', 'closure__locals__moving_average_v6_n_1', 'closure__locals__moving_average_v6_ret_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196bf0400>
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6_n_1 = arg(0, name=closure__locals__moving_average_v6_n_1)
2023-01-02 21:03 DEBUG on stmt: closure__locals__moving_average_v6_ret_1 = arg(1, name=closure__locals__moving_average_v6_ret_1)
2023-01-02 21:03 DEBUG on stmt: $6binary_true_divide.2 = closure__locals__moving_average_v6_ret_1 / closure__locals__moving_average_v6_n_1
2023-01-02 21:03 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2023-01-02 21:03 DEBUG on stmt: return $8return_value.3
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f0196bf5670>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f0196bf57f0>],
             'closure__locals__moving_average_v6_n_1': [<numba.core.ir.Assign object at 0x7f0196bf0a00>],
             'closure__locals__moving_average_v6_ret_1': [<numba.core.ir.Assign object at 0x7f0196bf52b0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-01-02 21:03 DEBUG stack ['$10call_function.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196f16d30>
2023-01-02 21:03 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-01-02 21:03 DEBUG on stmt: tmp1 = arg(1, name=tmp1)
2023-01-02 21:03 DEBUG on stmt: tmp2 = arg(2, name=tmp2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-01-02 21:03 DEBUG on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f0196a622b0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0196a70850>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196cf3850>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f019703fe50>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f0196d42190>],
             'tmp2': [<numba.core.ir.Assign object at 0x7f0196dcbf70>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_ATTR(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_ATTR(arg=2, lineno=3538)
          10	LOAD_DEREF(arg=1, lineno=3538)
          12	LOAD_CONST(arg=1, lineno=3538)
          14	CALL_FUNCTION_KW(arg=2, lineno=3538)
          16	STORE_FAST(arg=3, lineno=3538)
          18	LOAD_DEREF(arg=0, lineno=3539)
          20	LOAD_FAST(arg=0, lineno=3539)
          22	LOAD_FAST(arg=1, lineno=3539)
          24	LOAD_FAST(arg=2, lineno=3539)
          26	LOAD_FAST(arg=3, lineno=3539)
          28	CALL_FUNCTION(arg=4, lineno=3539)
          30	RETURN_VALUE(arg=None, lineno=3539)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$cond6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4', '$const12.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=STORE_FAST(arg=3, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$14call_function_kw.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=3539)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=4, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10', '$res26.11']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$28call_function.12']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$cond6.2'}), (8, {'item': '$cond6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'value': '$14call_function_kw.6'}), (18, {'res': '$18load_deref.7'}), (20, {'res': '$cond20.8'}), (22, {'res': '$x22.9'}), (24, {'res': '$y24.10'}), (26, {'res': '$res26.11'}), (28, {'func': '$18load_deref.7', 'args': ['$cond20.8', '$x22.9', '$y24.10', '$res26.11'], 'res': '$28call_function.12'}), (30, {'retval': '$28call_function.12', 'castval': '$30return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=cond, attr=shape) ['$8load_attr.3', 'cond']
    $10load_deref.4 = freevar(npty: int64)   ['$10load_deref.4']
    res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_attr.1', '$8load_attr.3', 'res']
    $18load_deref.7 = freevar(impl: <function _where_x_y_scalar at 0x7f01b101de50>) ['$18load_deref.7']
    $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.7', '$28call_function.12', 'cond', 'res', 'x', 'y']
    $30return_value.13 = cast(value=$28call_function.12) ['$28call_function.12', '$30return_value.13']
    return $30return_value.13                ['$30return_value.13']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196b044f0>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=cond, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $10load_deref.4 = freevar(npty: int64)
2023-01-02 21:03 DEBUG on stmt: res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $18load_deref.7 = freevar(impl: <function _where_x_y_scalar at 0x7f01b101de50>)
2023-01-02 21:03 DEBUG on stmt: $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $30return_value.13 = cast(value=$28call_function.12)
2023-01-02 21:03 DEBUG on stmt: return $30return_value.13
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x7f0196a62a30>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x7f0196ac1c70>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x7f0196ac13d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196ac1250>],
             '$30return_value.13': [<numba.core.ir.Assign object at 0x7f0196ac1760>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f0196b11e80>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f0196b11b50>],
             'cond': [<numba.core.ir.Assign object at 0x7f0196ac1fd0>],
             'res': [<numba.core.ir.Assign object at 0x7f0196ea5f10>],
             'x': [<numba.core.ir.Assign object at 0x7f0196ac18b0>],
             'y': [<numba.core.ir.Assign object at 0x7f0196ac10d0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$10call_function.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196b9b850>
2023-01-02 21:03 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-02 21:03 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-02 21:03 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
2023-01-02 21:03 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f0196b1c610>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0196b1c760>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196b1c0a0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f0196b1c460>],
             'dtype': [<numba.core.ir.Assign object at 0x7f0196c07f40>],
             'shape': [<numba.core.ir.Assign object at 0x7f0196abdd30>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3506)
           2	LOAD_GLOBAL(arg=0, lineno=3506)
           4	LOAD_METHOD(arg=1, lineno=3506)
           6	LOAD_FAST(arg=0, lineno=3506)
           8	CALL_METHOD(arg=1, lineno=3506)
          10	GET_ITER(arg=None, lineno=3506)
>         12	FOR_ITER(arg=24, lineno=3506)
          14	UNPACK_SEQUENCE(arg=2, lineno=3506)
          16	STORE_FAST(arg=4, lineno=3506)
          18	STORE_FAST(arg=5, lineno=3506)
          20	LOAD_FAST(arg=5, lineno=3507)
          22	POP_JUMP_IF_FALSE(arg=28, lineno=3507)
          24	LOAD_FAST(arg=1, lineno=3507)
          26	JUMP_FORWARD(arg=2, lineno=3507)
>         28	LOAD_FAST(arg=2, lineno=3507)
>         30	LOAD_FAST(arg=3, lineno=3507)
          32	LOAD_FAST(arg=4, lineno=3507)
          34	STORE_SUBSCR(arg=None, lineno=3507)
          36	JUMP_ABSOLUTE(arg=12, lineno=3507)
>         38	LOAD_FAST(arg=3, lineno=3508)
          40	RETURN_VALUE(arg=None, lineno=3508)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3506)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3506)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$cond6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=GET_ITER(arg=None, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$8call_method.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi12.0']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=FOR_ITER(arg=24, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$phi12.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=3, lineno=3508)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=3508)
2023-01-02 21:03 DEBUG stack ['$res38.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=14 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi14.0', '$phi14.1']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$phi14.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$14unpack_sequence.3', '$14unpack_sequence.2']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=STORE_FAST(arg=5, lineno=3506)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$14unpack_sequence.3']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi14.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=28, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$c20.5']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=24, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=28, stack=('$phi14.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi24.0']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi24.0']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=2, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi24.0', '$x24.1']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=30, stack=('$phi24.0', '$x24.1'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=30 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi28.0']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi28.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=30, stack=('$phi28.0', '$y28.1'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=30 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi30.0', '$phi30.1']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi30.0', '$phi30.1']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi30.0', '$phi30.1', '$res30.2']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi30.0', '$phi30.1', '$res30.2', '$idx32.3']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=JUMP_ABSOLUTE(arg=12, lineno=3507)
2023-01-02 21:03 DEBUG stack ['$phi30.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=12, stack=('$phi30.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=12 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=24 nstack_initial=1): set(),
             State(pc_initial=28 nstack_initial=1): set(),
             State(pc_initial=30 nstack_initial=2): {'$phi30.1'},
             State(pc_initial=38 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1),
 '$phi30.1': State(pc_initial=24 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi28.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi30.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))},
 '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
              ('$y28.1', State(pc_initial=28 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'},
             State(pc_initial=24 nstack_initial=1): {'$phi30.1': '$x24.1'},
             State(pc_initial=28 nstack_initial=1): {'$phi30.1': '$y28.1'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$cond6.2'}), (8, {'func': '$4load_method.1', 'args': ['$cond6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 14: ('$phi12.0', '$12for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'iterable': '$phi14.1', 'stores': ['$14unpack_sequence.2', '$14unpack_sequence.3'], 'tupleobj': '$14unpack_sequence.4'}), (16, {'value': '$14unpack_sequence.2'}), (18, {'value': '$14unpack_sequence.3'}), (20, {'res': '$c20.5'}), (22, {'pred': '$c20.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi14.0',), 28: ('$phi14.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$x24.1'}), (26, {})), outgoing_phis={'$phi30.1': '$x24.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi24.0', '$x24.1')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'res': '$y28.1'}),), outgoing_phis={'$phi30.1': '$y28.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi28.0', '$y28.1')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=30 nstack_initial=2):
AdaptBlockInfo(insts=((30, {'res': '$res30.2'}), (32, {'res': '$idx32.3'}), (34, {'target': '$res30.2', 'index': '$idx32.3', 'value': '$phi30.1'}), (36, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi30.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$res38.0'}), (40, {'retval': '$res38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    res = arg(3, name=res)                   ['res']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'cond']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 38             ['$12for_iter.3']
label 14:
    $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2) ['$14unpack_sequence.4', '$phi14.1']
    $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.2', '$14unpack_sequence.4']
    $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.3', '$14unpack_sequence.4']
    idx = $14unpack_sequence.2               ['$14unpack_sequence.2', 'idx']
    c = $14unpack_sequence.3                 ['$14unpack_sequence.3', 'c']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None) ['$22pred', 'bool22', 'c']
    branch $22pred, 24, 28                   ['$22pred']
label 24:
    $phi30.1 = x                             ['$phi30.1', 'x']
    jump 30                                  []
label 28:
    $phi30.1 = y                             ['$phi30.1', 'y']
    jump 30                                  []
label 30:
    res[idx] = $phi30.1                      ['$phi30.1', 'idx', 'res']
    jump 12                                  []
label 38:
    $40return_value.1 = cast(value=res)      ['$40return_value.1', 'res']
    return $40return_value.1                 ['$40return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ad2e20>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: res = arg(3, name=res)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-02 21:03 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-02 21:03 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 12
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ad2e20>
2023-01-02 21:03 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ad2e20>
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $22pred, 24, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 24
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ad2e20>
2023-01-02 21:03 DEBUG on stmt: $phi30.1 = x
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ad2e20>
2023-01-02 21:03 DEBUG on stmt: $phi30.1 = y
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ad2e20>
2023-01-02 21:03 DEBUG on stmt: res[idx] = $phi30.1
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196ad2e20>
2023-01-02 21:03 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-01-02 21:03 DEBUG on stmt: return $40return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x7f0196adafa0>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x7f0196aca340>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x7f0196aca460>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x7f0196aca580>],
             '$14unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f0196aca9d0>],
             '$14unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f0196acaaf0>],
             '$14unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f0196aca880>],
             '$22pred': [<numba.core.ir.Assign object at 0x7f0196ad2100>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196adaa00>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x7f0196ad2d60>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f0196adab80>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x7f0196adae50>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x7f0196ada370>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x7f0196aca250>],
             '$phi30.1': [<numba.core.ir.Assign object at 0x7f0196ad2310>,
                          <numba.core.ir.Assign object at 0x7f0196ad25e0>],
             'bool22': [<numba.core.ir.Assign object at 0x7f0196acafa0>],
             'c': [<numba.core.ir.Assign object at 0x7f0196acad00>],
             'cond': [<numba.core.ir.Assign object at 0x7f0196ada520>],
             'idx': [<numba.core.ir.Assign object at 0x7f0196acabe0>],
             'res': [<numba.core.ir.Assign object at 0x7f0196ada880>],
             'x': [<numba.core.ir.Assign object at 0x7f0196ada640>],
             'y': [<numba.core.ir.Assign object at 0x7f0196ada760>]})
2023-01-02 21:03 DEBUG SSA violators {'$phi30.1'}
2023-01-02 21:03 DEBUG Fix SSA violator on var $phi30.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: res = arg(3, name=res)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-02 21:03 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-02 21:03 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 12
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $22pred, 24, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 24
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $phi30.1 = x
2023-01-02 21:03 DEBUG first assign: $phi30.1
2023-01-02 21:03 DEBUG replaced with: $phi30.1 = x
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $phi30.1 = y
2023-01-02 21:03 DEBUG replaced with: $phi30.1.1 = y
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: res[idx] = $phi30.1
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-01-02 21:03 DEBUG on stmt: return $40return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {24: [<numba.core.ir.Assign object at 0x7f0196ada310>],
             28: [<numba.core.ir.Assign object at 0x7f0196ada100>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: res = arg(3, name=res)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-02 21:03 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-02 21:03 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 12
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $22pred, 24, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 24
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $phi30.1 = x
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $phi30.1.1 = y
2023-01-02 21:03 DEBUG on stmt: jump 30
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: res[idx] = $phi30.1
2023-01-02 21:03 DEBUG find_def var='$phi30.1' stmt=res[idx] = $phi30.1
2023-01-02 21:03 DEBUG find_def_from_top label 30
2023-01-02 21:03 DEBUG insert phi node $phi30.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
2023-01-02 21:03 DEBUG find_def_from_bottom label 24
2023-01-02 21:03 DEBUG incoming_def $phi30.1 = x
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG incoming_def $phi30.1.1 = y
2023-01-02 21:03 DEBUG replaced with: res[idx] = $phi30.1.2
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196ad24f0>
2023-01-02 21:03 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-01-02 21:03 DEBUG on stmt: return $40return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-01-02 21:03 DEBUG stack ['$10call_function.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a0bdf0>
2023-01-02 21:03 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-01-02 21:03 DEBUG on stmt: tmp1 = arg(1, name=tmp1)
2023-01-02 21:03 DEBUG on stmt: tmp2 = arg(2, name=tmp2)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-01-02 21:03 DEBUG on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f0196a14df0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0196a14f40>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196a14280>],
             'tmp0': [<numba.core.ir.Assign object at 0x7f0196a14400>],
             'tmp1': [<numba.core.ir.Assign object at 0x7f0196a143a0>],
             'tmp2': [<numba.core.ir.Assign object at 0x7f0196a14a30>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_ATTR(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_ATTR(arg=2, lineno=3538)
          10	LOAD_DEREF(arg=1, lineno=3538)
          12	LOAD_CONST(arg=1, lineno=3538)
          14	CALL_FUNCTION_KW(arg=2, lineno=3538)
          16	STORE_FAST(arg=3, lineno=3538)
          18	LOAD_DEREF(arg=0, lineno=3539)
          20	LOAD_FAST(arg=0, lineno=3539)
          22	LOAD_FAST(arg=1, lineno=3539)
          24	LOAD_FAST(arg=2, lineno=3539)
          26	LOAD_FAST(arg=3, lineno=3539)
          28	CALL_FUNCTION(arg=4, lineno=3539)
          30	RETURN_VALUE(arg=None, lineno=3539)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$cond6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4', '$const12.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=STORE_FAST(arg=3, lineno=3538)
2023-01-02 21:03 DEBUG stack ['$14call_function_kw.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=3539)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=4, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10', '$res26.11']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=3539)
2023-01-02 21:03 DEBUG stack ['$28call_function.12']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$cond6.2'}), (8, {'item': '$cond6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'value': '$14call_function_kw.6'}), (18, {'res': '$18load_deref.7'}), (20, {'res': '$cond20.8'}), (22, {'res': '$x22.9'}), (24, {'res': '$y24.10'}), (26, {'res': '$res26.11'}), (28, {'func': '$18load_deref.7', 'args': ['$cond20.8', '$x22.9', '$y24.10', '$res26.11'], 'res': '$28call_function.12'}), (30, {'retval': '$28call_function.12', 'castval': '$30return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=cond, attr=shape) ['$8load_attr.3', 'cond']
    $10load_deref.4 = freevar(npty: int64)   ['$10load_deref.4']
    res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_attr.1', '$8load_attr.3', 'res']
    $18load_deref.7 = freevar(impl: <function _where_x_scalar at 0x7f01b1023040>) ['$18load_deref.7']
    $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.7', '$28call_function.12', 'cond', 'res', 'x', 'y']
    $30return_value.13 = cast(value=$28call_function.12) ['$28call_function.12', '$30return_value.13']
    return $30return_value.13                ['$30return_value.13']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969af280>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=cond, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $10load_deref.4 = freevar(npty: int64)
2023-01-02 21:03 DEBUG on stmt: res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $18load_deref.7 = freevar(impl: <function _where_x_scalar at 0x7f01b1023040>)
2023-01-02 21:03 DEBUG on stmt: $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $30return_value.13 = cast(value=$28call_function.12)
2023-01-02 21:03 DEBUG on stmt: return $30return_value.13
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x7f01969adac0>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x7f01969af130>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x7f01969af760>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01969ad520>],
             '$30return_value.13': [<numba.core.ir.Assign object at 0x7f01969af8b0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01969ad6a0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f01969ad940>],
             'cond': [<numba.core.ir.Assign object at 0x7f01969a5100>],
             'res': [<numba.core.ir.Assign object at 0x7f01969adf70>],
             'x': [<numba.core.ir.Assign object at 0x7f01969ad280>],
             'y': [<numba.core.ir.Assign object at 0x7f01969ad3a0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3513)
           2	LOAD_GLOBAL(arg=0, lineno=3513)
           4	LOAD_METHOD(arg=1, lineno=3513)
           6	LOAD_FAST(arg=0, lineno=3513)
           8	CALL_METHOD(arg=1, lineno=3513)
          10	GET_ITER(arg=None, lineno=3513)
>         12	FOR_ITER(arg=28, lineno=3513)
          14	UNPACK_SEQUENCE(arg=2, lineno=3513)
          16	STORE_FAST(arg=4, lineno=3513)
          18	STORE_FAST(arg=5, lineno=3513)
          20	LOAD_FAST(arg=5, lineno=3514)
          22	POP_JUMP_IF_FALSE(arg=28, lineno=3514)
          24	LOAD_FAST(arg=1, lineno=3514)
          26	JUMP_FORWARD(arg=6, lineno=3514)
>         28	LOAD_FAST(arg=2, lineno=3514)
          30	LOAD_FAST(arg=4, lineno=3514)
          32	BINARY_SUBSCR(arg=None, lineno=3514)
>         34	LOAD_FAST(arg=3, lineno=3514)
          36	LOAD_FAST(arg=4, lineno=3514)
          38	STORE_SUBSCR(arg=None, lineno=3514)
          40	JUMP_ABSOLUTE(arg=12, lineno=3514)
>         42	LOAD_FAST(arg=3, lineno=3515)
          44	RETURN_VALUE(arg=None, lineno=3515)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3513)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3513)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$cond6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=GET_ITER(arg=None, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$8call_method.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi12.0']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=FOR_ITER(arg=28, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$phi12.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=3515)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=3515)
2023-01-02 21:03 DEBUG stack ['$res42.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=14 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi14.0', '$phi14.1']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$phi14.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$14unpack_sequence.3', '$14unpack_sequence.2']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=STORE_FAST(arg=5, lineno=3513)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$14unpack_sequence.3']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi14.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=28, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi14.0', '$c20.5']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=24, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=28, stack=('$phi14.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi24.0']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi24.0']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=6, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi24.0', '$x24.1']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=34, stack=('$phi24.0', '$x24.1'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=34 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi28.0']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi28.0']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=4, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi28.0', '$y28.1']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi28.0', '$y28.1', '$idx30.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=34, stack=('$phi28.0', '$32binary_subscr.3'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=34 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi34.0', '$phi34.1']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi34.0', '$phi34.1']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2', '$idx36.3']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=12, lineno=3514)
2023-01-02 21:03 DEBUG stack ['$phi34.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=12, stack=('$phi34.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=12 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=24 nstack_initial=1): set(),
             State(pc_initial=28 nstack_initial=1): set(),
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1),
 '$phi34.1': State(pc_initial=24 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi28.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi34.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))},
 '$phi34.1': {('$32binary_subscr.3', State(pc_initial=28 nstack_initial=1)),
              ('$x24.1', State(pc_initial=24 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'},
             State(pc_initial=24 nstack_initial=1): {'$phi34.1': '$x24.1'},
             State(pc_initial=28 nstack_initial=1): {'$phi34.1': '$32binary_subscr.3'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$cond6.2'}), (8, {'func': '$4load_method.1', 'args': ['$cond6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 14: ('$phi12.0', '$12for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'iterable': '$phi14.1', 'stores': ['$14unpack_sequence.2', '$14unpack_sequence.3'], 'tupleobj': '$14unpack_sequence.4'}), (16, {'value': '$14unpack_sequence.2'}), (18, {'value': '$14unpack_sequence.3'}), (20, {'res': '$c20.5'}), (22, {'pred': '$c20.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi14.0',), 28: ('$phi14.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$x24.1'}), (26, {})), outgoing_phis={'$phi34.1': '$x24.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi24.0', '$x24.1')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'res': '$y28.1'}), (30, {'res': '$idx30.2'}), (32, {'index': '$idx30.2', 'target': '$y28.1', 'res': '$32binary_subscr.3'})), outgoing_phis={'$phi34.1': '$32binary_subscr.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi28.0', '$32binary_subscr.3')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'res': '$res34.2'}), (36, {'res': '$idx36.3'}), (38, {'target': '$res34.2', 'index': '$idx36.3', 'value': '$phi34.1'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi34.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$res42.0'}), (44, {'retval': '$res42.0', 'castval': '$44return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    res = arg(3, name=res)                   ['res']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'cond']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 42             ['$12for_iter.3']
label 14:
    $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2) ['$14unpack_sequence.4', '$phi14.1']
    $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.2', '$14unpack_sequence.4']
    $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.3', '$14unpack_sequence.4']
    idx = $14unpack_sequence.2               ['$14unpack_sequence.2', 'idx']
    c = $14unpack_sequence.3                 ['$14unpack_sequence.3', 'c']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None) ['$22pred', 'bool22', 'c']
    branch $22pred, 24, 28                   ['$22pred']
label 24:
    $phi34.1 = x                             ['$phi34.1', 'x']
    jump 34                                  []
label 28:
    $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>) ['$32binary_subscr.3', 'idx', 'y']
    $phi34.1 = $32binary_subscr.3            ['$32binary_subscr.3', '$phi34.1']
    jump 34                                  []
label 34:
    res[idx] = $phi34.1                      ['$phi34.1', 'idx', 'res']
    jump 12                                  []
label 42:
    $44return_value.1 = cast(value=res)      ['$44return_value.1', 'res']
    return $44return_value.1                 ['$44return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969b3ac0>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: res = arg(3, name=res)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-02 21:03 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-02 21:03 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 12
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969b3ac0>
2023-01-02 21:03 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969b3ac0>
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $22pred, 24, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 24
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969b3ac0>
2023-01-02 21:03 DEBUG on stmt: $phi34.1 = x
2023-01-02 21:03 DEBUG on stmt: jump 34
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969b3ac0>
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $phi34.1 = $32binary_subscr.3
2023-01-02 21:03 DEBUG on stmt: jump 34
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969b3ac0>
2023-01-02 21:03 DEBUG on stmt: res[idx] = $phi34.1
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01969b3ac0>
2023-01-02 21:03 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-02 21:03 DEBUG on stmt: return $44return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x7f01969bf4f0>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x7f01969bf850>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x7f01969bf970>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x7f01969bfa90>],
             '$14unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f01969bfee0>],
             '$14unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f01969c4040>],
             '$14unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f01969bfd90>],
             '$22pred': [<numba.core.ir.Assign object at 0x7f01969c4610>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01969b9f10>],
             '$32binary_subscr.3': [<numba.core.ir.Assign object at 0x7f01969b36d0>],
             '$44return_value.1': [<numba.core.ir.Assign object at 0x7f01969c4b80>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f01969bf0d0>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x7f01969bf3a0>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x7f01969bf220>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x7f01969bf760>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x7f01969c4820>,
                          <numba.core.ir.Assign object at 0x7f01969b9670>],
             'bool22': [<numba.core.ir.Assign object at 0x7f01969c44f0>],
             'c': [<numba.core.ir.Assign object at 0x7f01969c4250>],
             'cond': [<numba.core.ir.Assign object at 0x7f01969b9a30>],
             'idx': [<numba.core.ir.Assign object at 0x7f01969c4130>],
             'res': [<numba.core.ir.Assign object at 0x7f01969b9d90>],
             'x': [<numba.core.ir.Assign object at 0x7f01969b9b50>],
             'y': [<numba.core.ir.Assign object at 0x7f01969b9c70>]})
2023-01-02 21:03 DEBUG SSA violators {'$phi34.1'}
2023-01-02 21:03 DEBUG Fix SSA violator on var $phi34.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: res = arg(3, name=res)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-02 21:03 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-02 21:03 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 12
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $22pred, 24, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 24
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $phi34.1 = x
2023-01-02 21:03 DEBUG first assign: $phi34.1
2023-01-02 21:03 DEBUG replaced with: $phi34.1 = x
2023-01-02 21:03 DEBUG on stmt: jump 34
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $phi34.1 = $32binary_subscr.3
2023-01-02 21:03 DEBUG replaced with: $phi34.1.1 = $32binary_subscr.3
2023-01-02 21:03 DEBUG on stmt: jump 34
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: res[idx] = $phi34.1
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-02 21:03 DEBUG on stmt: return $44return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {24: [<numba.core.ir.Assign object at 0x7f01969c4a30>],
             28: [<numba.core.ir.Assign object at 0x7f01969c4c40>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-02 21:03 DEBUG on stmt: x = arg(1, name=x)
2023-01-02 21:03 DEBUG on stmt: y = arg(2, name=y)
2023-01-02 21:03 DEBUG on stmt: res = arg(3, name=res)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-02 21:03 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-02 21:03 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 12
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 14
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-02 21:03 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-02 21:03 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $22pred, 24, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 24
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $phi34.1 = x
2023-01-02 21:03 DEBUG on stmt: jump 34
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $phi34.1.1 = $32binary_subscr.3
2023-01-02 21:03 DEBUG on stmt: jump 34
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: res[idx] = $phi34.1
2023-01-02 21:03 DEBUG find_def var='$phi34.1' stmt=res[idx] = $phi34.1
2023-01-02 21:03 DEBUG find_def_from_top label 34
2023-01-02 21:03 DEBUG insert phi node $phi34.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 34
2023-01-02 21:03 DEBUG find_def_from_bottom label 24
2023-01-02 21:03 DEBUG incoming_def $phi34.1 = x
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG incoming_def $phi34.1.1 = $32binary_subscr.3
2023-01-02 21:03 DEBUG replaced with: res[idx] = $phi34.1.2
2023-01-02 21:03 DEBUG on stmt: jump 12
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3fd0>
2023-01-02 21:03 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-02 21:03 DEBUG on stmt: return $44return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2226)
           2	LOAD_GLOBAL(arg=0, lineno=2226)
           4	LOAD_METHOD(arg=1, lineno=2226)
           6	LOAD_FAST(arg=0, lineno=2226)
           8	CALL_METHOD(arg=1, lineno=2226)
          10	STORE_FAST(arg=2, lineno=2226)
          12	LOAD_GLOBAL(arg=0, lineno=2227)
          14	LOAD_ATTR(arg=2, lineno=2227)
          16	LOAD_FAST(arg=2, lineno=2227)
          18	LOAD_ATTR(arg=3, lineno=2227)
          20	LOAD_FAST(arg=2, lineno=2227)
          22	LOAD_ATTR(arg=4, lineno=2227)
          24	LOAD_CONST(arg=1, lineno=2227)
          26	CALL_FUNCTION_KW(arg=2, lineno=2227)
          28	STORE_FAST(arg=3, lineno=2227)
          30	LOAD_FAST(arg=2, lineno=2230)
          32	LOAD_ATTR(arg=5, lineno=2230)
          34	STORE_FAST(arg=4, lineno=2230)
          36	LOAD_GLOBAL(arg=6, lineno=2231)
          38	LOAD_FAST(arg=2, lineno=2231)
          40	LOAD_ATTR(arg=7, lineno=2231)
          42	CALL_FUNCTION(arg=1, lineno=2231)
          44	GET_ITER(arg=None, lineno=2231)
>         46	FOR_ITER(arg=32, lineno=2231)
          48	STORE_FAST(arg=5, lineno=2231)
          50	LOAD_FAST(arg=5, lineno=2232)
          52	LOAD_FAST(arg=1, lineno=2232)
          54	BINARY_ADD(arg=None, lineno=2232)
          56	LOAD_FAST(arg=2, lineno=2232)
          58	LOAD_ATTR(arg=7, lineno=2232)
          60	BINARY_MODULO(arg=None, lineno=2232)
          62	STORE_FAST(arg=6, lineno=2232)
          64	LOAD_FAST(arg=4, lineno=2233)
          66	LOAD_FAST(arg=5, lineno=2233)
          68	BINARY_SUBSCR(arg=None, lineno=2233)
          70	LOAD_FAST(arg=3, lineno=2233)
          72	LOAD_ATTR(arg=5, lineno=2233)
          74	LOAD_FAST(arg=6, lineno=2233)
          76	STORE_SUBSCR(arg=None, lineno=2233)
          78	JUMP_ABSOLUTE(arg=46, lineno=2233)
>         80	LOAD_FAST(arg=3, lineno=2235)
          82	RETURN_VALUE(arg=None, lineno=2235)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2226)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2226)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$4load_method.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$4load_method.1', '$a6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=2226)
2023-01-02 21:03 DEBUG stack ['$8call_method.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2227)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$12load_global.4']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=3, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$arr16.6']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$arr20.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=CALL_FUNCTION_KW(arg=2, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', '$const24.10']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=2227)
2023-01-02 21:03 DEBUG stack ['$26call_function_kw.11']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2230)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=5, lineno=2230)
2023-01-02 21:03 DEBUG stack ['$arr30.12']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2230)
2023-01-02 21:03 DEBUG stack ['$32load_attr.13']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=6, lineno=2231)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$36load_global.14']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=7, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$36load_global.14', '$arr38.15']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=1, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$36load_global.14', '$40load_attr.16']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$42call_function.17']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.18',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi46.0']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=FOR_ITER(arg=32, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$phi46.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2235)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=2235)
2023-01-02 21:03 DEBUG stack ['$out80.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=48 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi48.0', '$phi48.1']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=STORE_FAST(arg=5, lineno=2231)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$phi48.1']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$i50.2']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$i50.2', '$shift52.3']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$54binary_add.4']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=LOAD_ATTR(arg=7, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$54binary_add.4', '$arr56.5']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=BINARY_MODULO(arg=None, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$54binary_add.4', '$58load_attr.6']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=STORE_FAST(arg=6, lineno=2232)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$60binary_modulo.7']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$arr_flat64.8']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$arr_flat64.8', '$i66.9']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=LOAD_ATTR(arg=5, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$out70.11']
2023-01-02 21:03 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=6, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12']
2023-01-02 21:03 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12', '$idx74.13']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=JUMP_ABSOLUTE(arg=46, lineno=2233)
2023-01-02 21:03 DEBUG stack ['$phi48.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=80 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi46.0': {('$44get_iter.18', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.18'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_attr.7'}), (20, {'res': '$arr20.8'}), (22, {'item': '$arr20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'func': '$14load_attr.5', 'args': ['$18load_attr.7', '$22load_attr.9'], 'names': '$const24.10', 'res': '$26call_function_kw.11'}), (28, {'value': '$26call_function_kw.11'}), (30, {'res': '$arr30.12'}), (32, {'item': '$arr30.12', 'res': '$32load_attr.13'}), (34, {'value': '$32load_attr.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$arr38.15'}), (40, {'item': '$arr38.15', 'res': '$40load_attr.16'}), (42, {'func': '$36load_global.14', 'args': ['$40load_attr.16'], 'res': '$42call_function.17'}), (44, {'value': '$42call_function.17', 'res': '$44get_iter.18'})), outgoing_phis={'$phi46.0': '$44get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.18',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 48: ('$phi46.0', '$46for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$i50.2'}), (52, {'res': '$shift52.3'}), (54, {'lhs': '$i50.2', 'rhs': '$shift52.3', 'res': '$54binary_add.4'}), (56, {'res': '$arr56.5'}), (58, {'item': '$arr56.5', 'res': '$58load_attr.6'}), (60, {'lhs': '$54binary_add.4', 'rhs': '$58load_attr.6', 'res': '$60binary_modulo.7'}), (62, {'value': '$60binary_modulo.7'}), (64, {'res': '$arr_flat64.8'}), (66, {'res': '$i66.9'}), (68, {'index': '$i66.9', 'target': '$arr_flat64.8', 'res': '$68binary_subscr.10'}), (70, {'res': '$out70.11'}), (72, {'item': '$out70.11', 'res': '$72load_attr.12'}), (74, {'res': '$idx74.13'}), (76, {'target': '$72load_attr.12', 'index': '$idx74.13', 'value': '$68binary_subscr.10'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$out80.0'}), (82, {'retval': '$out80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    shift = arg(1, name=shift)               ['shift']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'arr']
    $12load_global.4 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$12load_global.4']
    $14load_attr.5 = getattr(value=$12load_global.4, attr=empty) ['$12load_global.4', '$14load_attr.5']
    $18load_attr.7 = getattr(value=arr, attr=shape) ['$18load_attr.7', 'arr']
    $22load_attr.9 = getattr(value=arr, attr=dtype) ['$22load_attr.9', 'arr']
    out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', 'out']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $36load_global.14 = global(range: <class 'range'>) ['$36load_global.14']
    $40load_attr.16 = getattr(value=arr, attr=size) ['$40load_attr.16', 'arr']
    $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.14', '$40load_attr.16', '$42call_function.17']
    $44get_iter.18 = getiter(value=$42call_function.17) ['$42call_function.17', '$44get_iter.18']
    $phi46.0 = $44get_iter.18                ['$44get_iter.18', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 80             ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    $54binary_add.4 = i + shift              ['$54binary_add.4', 'i', 'shift']
    $58load_attr.6 = getattr(value=arr, attr=size) ['$58load_attr.6', 'arr']
    idx = $54binary_add.4 % $58load_attr.6   ['$54binary_add.4', '$58load_attr.6', 'idx']
    $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>) ['$68binary_subscr.10', 'arr_flat', 'i']
    $72load_attr.12 = getattr(value=out, attr=flat) ['$72load_attr.12', 'out']
    $72load_attr.12[idx] = $68binary_subscr.10 ['$68binary_subscr.10', '$72load_attr.12', 'idx']
    jump 46                                  []
label 80:
    $82return_value.1 = cast(value=out)      ['$82return_value.1', 'out']
    return $82return_value.1                 ['$82return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196958cd0>
2023-01-02 21:03 DEBUG on stmt: a = arg(0, name=a)
2023-01-02 21:03 DEBUG on stmt: shift = arg(1, name=shift)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
2023-01-02 21:03 DEBUG on stmt: arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12load_global.4 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $18load_attr.7 = getattr(value=arr, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $22load_attr.9 = getattr(value=arr, attr=dtype)
2023-01-02 21:03 DEBUG on stmt: out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-01-02 21:03 DEBUG on stmt: $36load_global.14 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $40load_attr.16 = getattr(value=arr, attr=size)
2023-01-02 21:03 DEBUG on stmt: $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $44get_iter.18 = getiter(value=$42call_function.17)
2023-01-02 21:03 DEBUG on stmt: $phi46.0 = $44get_iter.18
2023-01-02 21:03 DEBUG on stmt: jump 46
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 46
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196958cd0>
2023-01-02 21:03 DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
2023-01-02 21:03 DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi48.1 = $46for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $46for_iter.3, 48, 80
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 48
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196958cd0>
2023-01-02 21:03 DEBUG on stmt: i = $phi48.1
2023-01-02 21:03 DEBUG on stmt: $54binary_add.4 = i + shift
2023-01-02 21:03 DEBUG on stmt: $58load_attr.6 = getattr(value=arr, attr=size)
2023-01-02 21:03 DEBUG on stmt: idx = $54binary_add.4 % $58load_attr.6
2023-01-02 21:03 DEBUG on stmt: $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $72load_attr.12 = getattr(value=out, attr=flat)
2023-01-02 21:03 DEBUG on stmt: $72load_attr.12[idx] = $68binary_subscr.10
2023-01-02 21:03 DEBUG on stmt: jump 46
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 80
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196958cd0>
2023-01-02 21:03 DEBUG on stmt: $82return_value.1 = cast(value=out)
2023-01-02 21:03 DEBUG on stmt: return $82return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x7f0196955640>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x7f01969557c0>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x7f0196955a60>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x7f0196955d00>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f019694af40>],
             '$36load_global.14': [<numba.core.ir.Assign object at 0x7f0196a1be80>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x7f0196957040>],
             '$42call_function.17': [<numba.core.ir.Assign object at 0x7f01969571f0>],
             '$44get_iter.18': [<numba.core.ir.Assign object at 0x7f0196957340>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x7f0196957400>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x7f0196957520>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x7f0196957640>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f0196955100>],
             '$54binary_add.4': [<numba.core.ir.Assign object at 0x7f0196957ca0>],
             '$58load_attr.6': [<numba.core.ir.Assign object at 0x7f0196957f40>],
             '$68binary_subscr.10': [<numba.core.ir.Assign object at 0x7f01969585e0>],
             '$72load_attr.12': [<numba.core.ir.Assign object at 0x7f0196958880>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x7f0196958b80>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x7f0196955220>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x7f019694a850>],
             'a': [<numba.core.ir.Assign object at 0x7f019694aca0>],
             'arr': [<numba.core.ir.Assign object at 0x7f01969553d0>],
             'arr_flat': [<numba.core.ir.Assign object at 0x7f019694a0a0>],
             'i': [<numba.core.ir.Assign object at 0x7f01969578e0>],
             'idx': [<numba.core.ir.Assign object at 0x7f0196958100>],
             'out': [<numba.core.ir.Assign object at 0x7f019694a9a0>],
             'shift': [<numba.core.ir.Assign object at 0x7f019694adc0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4428)
           2	LOAD_FAST(arg=0, lineno=4428)
           4	RETURN_VALUE(arg=None, lineno=4428)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4428)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4428)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4428)
2023-01-02 21:03 DEBUG stack ['$a2.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019695cd00>
2023-01-02 21:03 DEBUG on stmt: a = arg(0, name=a)
2023-01-02 21:03 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-02 21:03 DEBUG on stmt: $4return_value.1 = cast(value=a)
2023-01-02 21:03 DEBUG on stmt: return $4return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7f019693d550>],
             'a': [<numba.core.ir.Assign object at 0x7f019695c700>],
             'dtype': [<numba.core.ir.Assign object at 0x7f019693d6d0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-02 21:03 DEBUG stack ['$10call_function.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019695cfd0>
2023-01-02 21:03 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-02 21:03 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-02 21:03 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
2023-01-02 21:03 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f019695c790>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f019695c5e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f019694a730>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f019695c250>],
             'dtype': [<numba.core.ir.Assign object at 0x7f019694a6a0>],
             'shape': [<numba.core.ir.Assign object at 0x7f019692f790>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=115)
           2	LOAD_FAST(arg=2, lineno=115)
           4	LOAD_CONST(arg=1, lineno=115)
           6	COMPARE_OP(arg=2, lineno=115)
           8	POP_JUMP_IF_FALSE(arg=42, lineno=115)
          10	LOAD_FAST(arg=3, lineno=115)
          12	LOAD_CONST(arg=2, lineno=115)
          14	COMPARE_OP(arg=2, lineno=115)
          16	POP_JUMP_IF_FALSE(arg=42, lineno=115)
          18	LOAD_FAST(arg=4, lineno=116)
          20	POP_JUMP_IF_FALSE(arg=36, lineno=116)
          22	LOAD_FAST(arg=1, lineno=117)
          24	LOAD_CONST(arg=1, lineno=117)
          26	LOAD_FAST(arg=4, lineno=117)
          28	BINARY_ADD(arg=None, lineno=117)
          30	BINARY_MULTIPLY(arg=None, lineno=117)
          32	STORE_FAST(arg=0, lineno=117)
          34	JUMP_ABSOLUTE(arg=54, lineno=117)
>         36	LOAD_FAST(arg=1, lineno=119)
          38	STORE_FAST(arg=0, lineno=119)
          40	JUMP_FORWARD(arg=12, lineno=119)
>         42	LOAD_FAST(arg=2, lineno=120)
          44	LOAD_CONST(arg=2, lineno=120)
          46	COMPARE_OP(arg=2, lineno=120)
          48	POP_JUMP_IF_FALSE(arg=54, lineno=120)
          50	LOAD_CONST(arg=2, lineno=121)
          52	STORE_FAST(arg=0, lineno=121)
>         54	LOAD_FAST(arg=0, lineno=122)
          56	RETURN_VALUE(arg=None, lineno=122)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=115)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=115)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=42, lineno=115)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=115)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=42, lineno=115)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=120)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=120)
2023-01-02 21:03 DEBUG stack ['$marketpostion42.0']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=COMPARE_OP(arg=2, lineno=120)
2023-01-02 21:03 DEBUG stack ['$marketpostion42.0', '$const44.1']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=54, lineno=120)
2023-01-02 21:03 DEBUG stack ['$46compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=4, lineno=116)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=36, lineno=116)
2023-01-02 21:03 DEBUG stack ['$slippage18.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=121)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=52, inst=STORE_FAST(arg=0, lineno=121)
2023-01-02 21:03 DEBUG stack ['$const50.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=122)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=122)
2023-01-02 21:03 DEBUG stack ['$entryprice54.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=117)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0', '$const24.1']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=BINARY_ADD(arg=None, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0', '$const24.1', '$slippage26.2']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=BINARY_MULTIPLY(arg=None, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0', '$28binary_add.3']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=117)
2023-01-02 21:03 DEBUG stack ['$30binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=JUMP_ABSOLUTE(arg=54, lineno=117)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=119)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=119)
2023-01-02 21:03 DEBUG stack ['$target_price36.0']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=JUMP_FORWARD(arg=12, lineno=119)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 42: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 42: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$slippage18.0'}), (20, {'pred': '$slippage18.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 36: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$target_price22.0'}), (24, {'res': '$const24.1'}), (26, {'res': '$slippage26.2'}), (28, {'lhs': '$const24.1', 'rhs': '$slippage26.2', 'res': '$28binary_add.3'}), (30, {'lhs': '$target_price22.0', 'rhs': '$28binary_add.3', 'res': '$30binary_multiply.4'}), (32, {'value': '$30binary_multiply.4'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$target_price36.0'}), (38, {'value': '$target_price36.0'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$marketpostion42.0'}), (44, {'res': '$const44.1'}), (46, {'lhs': '$marketpostion42.0', 'rhs': '$const44.1', 'res': '$46compare_op.2'}), (48, {'pred': '$46compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'value': '$const50.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$entryprice54.0'}), (56, {'retval': '$entryprice54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    entryprice = arg(0, name=entryprice)     ['entryprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 42                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 42                   ['$16pred']
label 18:
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$20pred', 'bool20', 'slippage']
    branch $20pred, 22, 36                   ['$20pred']
label 22:
    $const24.1 = const(int, 1)               ['$const24.1']
    $28binary_add.3 = $const24.1 + slippage  ['$28binary_add.3', '$const24.1', 'slippage']
    entryprice = target_price * $28binary_add.3 ['$28binary_add.3', 'entryprice', 'target_price']
    jump 54                                  []
label 36:
    entryprice = target_price                ['entryprice', 'target_price']
    jump 54                                  []
label 42:
    $const44.1 = const(int, 0)               ['$const44.1']
    $46compare_op.2 = marketpostion == $const44.1 ['$46compare_op.2', '$const44.1', 'marketpostion']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.2', '$48pred', 'bool48']
    branch $48pred, 50, 54                   ['$48pred']
label 50:
    entryprice = const(int, 0)               ['entryprice']
    jump 54                                  []
label 54:
    $56return_value.1 = cast(value=entryprice) ['$56return_value.1', 'entryprice']
    return $56return_value.1                 ['$56return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 42
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 42
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $20pred, 22, 36
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 22
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: $const24.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: $const44.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-01-02 21:03 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $48pred, 50, 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019692f520>
2023-01-02 21:03 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG on stmt: return $56return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f01969b3040>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f01969bc3a0>],
             '$20pred': [<numba.core.ir.Assign object at 0x7f019692a9a0>],
             '$28binary_add.3': [<numba.core.ir.Assign object at 0x7f0196962d90>],
             '$46compare_op.2': [<numba.core.ir.Assign object at 0x7f0196a49dc0>],
             '$48pred': [<numba.core.ir.Assign object at 0x7f0196a49a60>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x7f019699ff40>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01969d0910>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f01969ce340>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f01969b3520>],
             '$const24.1': [<numba.core.ir.Assign object at 0x7f01969624f0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196b1ca00>],
             '$const44.1': [<numba.core.ir.Assign object at 0x7f0196a49940>],
             'bool16': [<numba.core.ir.Assign object at 0x7f01969b32b0>],
             'bool20': [<numba.core.ir.Assign object at 0x7f019692ad30>],
             'bool48': [<numba.core.ir.Assign object at 0x7f0196a49ee0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f01969ce3a0>],
             'direction': [<numba.core.ir.Assign object at 0x7f0196b1cac0>],
             'entryprice': [<numba.core.ir.Assign object at 0x7f01969663d0>,
                            <numba.core.ir.Assign object at 0x7f0196962940>,
                            <numba.core.ir.Assign object at 0x7f0196962f10>,
                            <numba.core.ir.Assign object at 0x7f019699f610>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196966be0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196966a60>],
             'slippage': [<numba.core.ir.Assign object at 0x7f0196966070>],
             'target_price': [<numba.core.ir.Assign object at 0x7f0196966190>]})
2023-01-02 21:03 DEBUG SSA violators {'entryprice'}
2023-01-02 21:03 DEBUG Fix SSA violator on var entryprice
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG first assign: entryprice
2023-01-02 21:03 DEBUG replaced with: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $20pred, 22, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 22
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $const24.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG replaced with: entryprice.1 = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price
2023-01-02 21:03 DEBUG replaced with: entryprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $const44.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-01-02 21:03 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $48pred, 50, 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: entryprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG on stmt: return $56return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01969d5340>],
             22: [<numba.core.ir.Assign object at 0x7f01969af250>],
             36: [<numba.core.ir.Assign object at 0x7f01969afb20>],
             50: [<numba.core.ir.Assign object at 0x7f0196966b80>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $20pred, 22, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 22
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $const24.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-01-02 21:03 DEBUG on stmt: entryprice.1 = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: entryprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $const44.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-01-02 21:03 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $48pred, 50, 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: entryprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019692f5b0>
2023-01-02 21:03 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG find_def var='entryprice' stmt=$56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG find_def_from_top label 54
2023-01-02 21:03 DEBUG insert phi node entryprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 54
2023-01-02 21:03 DEBUG find_def_from_bottom label 42
2023-01-02 21:03 DEBUG find_def_from_top label 42
2023-01-02 21:03 DEBUG idom 0 from label 42
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG incoming_def entryprice.2 = target_price
2023-01-02 21:03 DEBUG find_def_from_bottom label 50
2023-01-02 21:03 DEBUG incoming_def entryprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 22
2023-01-02 21:03 DEBUG incoming_def entryprice.1 = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG replaced with: $56return_value.1 = cast(value=entryprice.4)
2023-01-02 21:03 DEBUG on stmt: return $56return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=145)
           2	LOAD_FAST(arg=5, lineno=145)
           4	LOAD_CONST(arg=1, lineno=145)
           6	COMPARE_OP(arg=2, lineno=145)
           8	POP_JUMP_IF_FALSE(arg=62, lineno=145)
          10	LOAD_FAST(arg=2, lineno=146)
          12	LOAD_CONST(arg=2, lineno=146)
          14	COMPARE_OP(arg=2, lineno=146)
          16	POP_JUMP_IF_FALSE(arg=50, lineno=146)
          18	LOAD_FAST(arg=3, lineno=146)
          20	LOAD_CONST(arg=3, lineno=146)
          22	COMPARE_OP(arg=2, lineno=146)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=146)
          26	LOAD_FAST(arg=4, lineno=147)
          28	POP_JUMP_IF_FALSE(arg=44, lineno=147)
          30	LOAD_FAST(arg=1, lineno=148)
          32	LOAD_CONST(arg=3, lineno=148)
          34	LOAD_FAST(arg=4, lineno=148)
          36	BINARY_SUBTRACT(arg=None, lineno=148)
          38	BINARY_MULTIPLY(arg=None, lineno=148)
          40	STORE_FAST(arg=0, lineno=148)
          42	JUMP_ABSOLUTE(arg=62, lineno=148)
>         44	LOAD_FAST(arg=1, lineno=150)
          46	STORE_FAST(arg=0, lineno=150)
          48	JUMP_FORWARD(arg=12, lineno=150)
>         50	LOAD_FAST(arg=2, lineno=151)
          52	LOAD_CONST(arg=3, lineno=151)
          54	COMPARE_OP(arg=2, lineno=151)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=151)
          58	LOAD_CONST(arg=2, lineno=152)
          60	STORE_FAST(arg=0, lineno=152)
>         62	LOAD_FAST(arg=0, lineno=153)
          64	RETURN_VALUE(arg=None, lineno=153)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=145)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=5, lineno=145)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=145)
2023-01-02 21:03 DEBUG stack ['$direction2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=145)
2023-01-02 21:03 DEBUG stack ['$direction2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=62, lineno=145)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack ['$marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack ['$marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=50, lineno=146)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=153)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=153)
2023-01-02 21:03 DEBUG stack ['$exitsprice62.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=146)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=3, lineno=146)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=COMPARE_OP(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion18.0', '$const20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=146)
2023-01-02 21:03 DEBUG stack ['$22compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=151)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=151)
2023-01-02 21:03 DEBUG stack ['$marketpostion50.0']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=COMPARE_OP(arg=2, lineno=151)
2023-01-02 21:03 DEBUG stack ['$marketpostion50.0', '$const52.1']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=151)
2023-01-02 21:03 DEBUG stack ['$54compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=147)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=44, lineno=147)
2023-01-02 21:03 DEBUG stack ['$slippage26.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=152)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=60, inst=STORE_FAST(arg=0, lineno=152)
2023-01-02 21:03 DEBUG stack ['$const58.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=148)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0', '$const32.1']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0', '$const32.1', '$slippage34.2']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=BINARY_MULTIPLY(arg=None, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0', '$36binary_subtract.3']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=STORE_FAST(arg=0, lineno=148)
2023-01-02 21:03 DEBUG stack ['$38binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=JUMP_ABSOLUTE(arg=62, lineno=148)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=150)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=STORE_FAST(arg=0, lineno=150)
2023-01-02 21:03 DEBUG stack ['$target_price44.0']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=JUMP_FORWARD(arg=12, lineno=150)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$direction2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$direction2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 50: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$last_marketpostion18.0'}), (20, {'res': '$const20.1'}), (22, {'lhs': '$last_marketpostion18.0', 'rhs': '$const20.1', 'res': '$22compare_op.2'}), (24, {'pred': '$22compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 50: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$slippage26.0'}), (28, {'pred': '$slippage26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$target_price30.0'}), (32, {'res': '$const32.1'}), (34, {'res': '$slippage34.2'}), (36, {'lhs': '$const32.1', 'rhs': '$slippage34.2', 'res': '$36binary_subtract.3'}), (38, {'lhs': '$target_price30.0', 'rhs': '$36binary_subtract.3', 'res': '$38binary_multiply.4'}), (40, {'value': '$38binary_multiply.4'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$target_price44.0'}), (46, {'value': '$target_price44.0'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$marketpostion50.0'}), (52, {'res': '$const52.1'}), (54, {'lhs': '$marketpostion50.0', 'rhs': '$const52.1', 'res': '$54compare_op.2'}), (56, {'pred': '$54compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'value': '$const58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$exitsprice62.0'}), (64, {'retval': '$exitsprice62.0', 'castval': '$64return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    exitsprice = arg(0, name=exitsprice)     ['exitsprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(str, buyonly)          ['$const4.1']
    $6compare_op.2 = direction == $const4.1  ['$6compare_op.2', '$const4.1', 'direction']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 62                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 50                   ['$16pred']
label 18:
    $const20.1 = const(int, 1)               ['$const20.1']
    $22compare_op.2 = last_marketpostion == $const20.1 ['$22compare_op.2', '$const20.1', 'last_marketpostion']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.2', '$24pred', 'bool24']
    branch $24pred, 26, 50                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None) ['$28pred', 'bool28', 'slippage']
    branch $28pred, 30, 44                   ['$28pred']
label 30:
    $const32.1 = const(int, 1)               ['$const32.1']
    $36binary_subtract.3 = $const32.1 - slippage ['$36binary_subtract.3', '$const32.1', 'slippage']
    exitsprice = target_price * $36binary_subtract.3 ['$36binary_subtract.3', 'exitsprice', 'target_price']
    jump 62                                  []
label 44:
    exitsprice = target_price                ['exitsprice', 'target_price']
    jump 62                                  []
label 50:
    $const52.1 = const(int, 1)               ['$const52.1']
    $54compare_op.2 = marketpostion == $const52.1 ['$54compare_op.2', '$const52.1', 'marketpostion']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.2', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    exitsprice = const(int, 0)               ['exitsprice']
    jump 62                                  []
label 62:
    $64return_value.1 = cast(value=exitsprice) ['$64return_value.1', 'exitsprice']
    return $64return_value.1                 ['$64return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 50
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: $const20.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-01-02 21:03 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $24pred, 26, 50
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $28pred, 30, 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: $const32.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: $const52.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 62
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968be4c0>
2023-01-02 21:03 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG on stmt: return $64return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f019687d9d0>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f019687dc70>],
             '$22compare_op.2': [<numba.core.ir.Assign object at 0x7f0196888190>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f0196888430>],
             '$28pred': [<numba.core.ir.Assign object at 0x7f01968888b0>],
             '$36binary_subtract.3': [<numba.core.ir.Assign object at 0x7f0196888eb0>],
             '$54compare_op.2': [<numba.core.ir.Assign object at 0x7f019688a850>],
             '$56pred': [<numba.core.ir.Assign object at 0x7f019688aaf0>],
             '$64return_value.1': [<numba.core.ir.Assign object at 0x7f019688c130>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f019687d250>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f019687d4f0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f019687d850>],
             '$const20.1': [<numba.core.ir.Assign object at 0x7f019687dfd0>],
             '$const32.1': [<numba.core.ir.Assign object at 0x7f0196888c10>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f019687d070>],
             '$const52.1': [<numba.core.ir.Assign object at 0x7f019688a6d0>],
             'bool16': [<numba.core.ir.Assign object at 0x7f019687db50>],
             'bool24': [<numba.core.ir.Assign object at 0x7f0196888310>],
             'bool28': [<numba.core.ir.Assign object at 0x7f0196888790>],
             'bool56': [<numba.core.ir.Assign object at 0x7f019688a9d0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f019687d3d0>],
             'direction': [<numba.core.ir.Assign object at 0x7f01969669a0>],
             'exitsprice': [<numba.core.ir.Assign object at 0x7f019699ff40>,
                            <numba.core.ir.Assign object at 0x7f019688a070>,
                            <numba.core.ir.Assign object at 0x7f019688a310>,
                            <numba.core.ir.Assign object at 0x7f019688ad30>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196966eb0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196966820>],
             'slippage': [<numba.core.ir.Assign object at 0x7f0196966a90>],
             'target_price': [<numba.core.ir.Assign object at 0x7f0196962d30>]})
2023-01-02 21:03 DEBUG SSA violators {'exitsprice'}
2023-01-02 21:03 DEBUG Fix SSA violator on var exitsprice
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG first assign: exitsprice
2023-01-02 21:03 DEBUG replaced with: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const20.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-01-02 21:03 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $24pred, 26, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $28pred, 30, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const32.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG replaced with: exitsprice.1 = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price
2023-01-02 21:03 DEBUG replaced with: exitsprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const52.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: exitsprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 62
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG on stmt: return $64return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01969cc9a0>],
             30: [<numba.core.ir.Assign object at 0x7f019688c7f0>],
             44: [<numba.core.ir.Assign object at 0x7f019688ca30>],
             58: [<numba.core.ir.Assign object at 0x7f019688cbe0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const20.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-01-02 21:03 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $24pred, 26, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $28pred, 30, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const32.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $const52.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: exitsprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 62
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968be520>
2023-01-02 21:03 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG find_def var='exitsprice' stmt=$64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG find_def_from_top label 62
2023-01-02 21:03 DEBUG insert phi node exitsprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 62
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG find_def_from_bottom label 44
2023-01-02 21:03 DEBUG incoming_def exitsprice.2 = target_price
2023-01-02 21:03 DEBUG find_def_from_bottom label 50
2023-01-02 21:03 DEBUG find_def_from_top label 50
2023-01-02 21:03 DEBUG idom 10 from label 50
2023-01-02 21:03 DEBUG find_def_from_bottom label 10
2023-01-02 21:03 DEBUG find_def_from_top label 10
2023-01-02 21:03 DEBUG idom 0 from label 10
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG find_def_from_bottom label 58
2023-01-02 21:03 DEBUG incoming_def exitsprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 30
2023-01-02 21:03 DEBUG incoming_def exitsprice.1 = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG replaced with: $64return_value.1 = cast(value=exitsprice.4)
2023-01-02 21:03 DEBUG on stmt: return $64return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=171)
           2	LOAD_FAST(arg=4, lineno=171)
           4	LOAD_CONST(arg=1, lineno=171)
           6	COMPARE_OP(arg=2, lineno=171)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=171)
          10	LOAD_FAST(arg=5, lineno=171)
          12	LOAD_CONST(arg=2, lineno=171)
          14	COMPARE_OP(arg=2, lineno=171)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=171)
          18	LOAD_FAST(arg=3, lineno=172)
          20	LOAD_FAST(arg=1, lineno=172)
          22	BINARY_MULTIPLY(arg=None, lineno=172)
          24	LOAD_FAST(arg=2, lineno=172)
          26	BINARY_MULTIPLY(arg=None, lineno=172)
          28	STORE_FAST(arg=0, lineno=172)
          30	JUMP_FORWARD(arg=12, lineno=172)
>         32	LOAD_FAST(arg=4, lineno=173)
          34	LOAD_CONST(arg=2, lineno=173)
          36	COMPARE_OP(arg=2, lineno=173)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=173)
          40	LOAD_CONST(arg=2, lineno=174)
          42	STORE_FAST(arg=0, lineno=174)
>         44	LOAD_FAST(arg=0, lineno=175)
          46	RETURN_VALUE(arg=None, lineno=175)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=171)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=171)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=171)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=171)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=171)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=171)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=171)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=171)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=171)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=173)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=173)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=173)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=173)
2023-01-02 21:03 DEBUG stack ['$36compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=172)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=172)
2023-01-02 21:03 DEBUG stack ['$target_price18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=172)
2023-01-02 21:03 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=172)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=172)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=172)
2023-01-02 21:03 DEBUG stack ['$26binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=172)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=174)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=174)
2023-01-02 21:03 DEBUG stack ['$const40.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=175)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=175)
2023-01-02 21:03 DEBUG stack ['$buy_Fee44.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$buy_Fee44.0'}), (46, {'retval': '$buy_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    buy_Fee = arg(0, name=buy_Fee)           ['buy_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    buy_Fee = $22binary_multiply.2 * size    ['$22binary_multiply.2', 'buy_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    buy_Fee = const(int, 0)                  ['buy_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=buy_Fee)  ['$46return_value.1', 'buy_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196857df0>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196857df0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196857df0>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196857df0>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196857df0>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196857df0>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f01968563d0>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196856670>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x7f0196856af0>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x7f0196857250>],
             '$38pred': [<numba.core.ir.Assign object at 0x7f01968574f0>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x7f0196857af0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196a02c10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196a02eb0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196856250>],
             '$const34.1': [<numba.core.ir.Assign object at 0x7f01968570d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196a02a90>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196856550>],
             'bool38': [<numba.core.ir.Assign object at 0x7f01968573d0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196a02d90>],
             'buy_Fee': [<numba.core.ir.Assign object at 0x7f019688c3a0>,
                         <numba.core.ir.Assign object at 0x7f0196856d90>,
                         <numba.core.ir.Assign object at 0x7f0196857730>],
             'fee': [<numba.core.ir.Assign object at 0x7f019686c070>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196a027f0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196a026d0>],
             'size': [<numba.core.ir.Assign object at 0x7f0196a024f0>],
             'target_price': [<numba.core.ir.Assign object at 0x7f0196a025b0>]})
2023-01-02 21:03 DEBUG SSA violators {'buy_Fee'}
2023-01-02 21:03 DEBUG Fix SSA violator on var buy_Fee
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG first assign: buy_Fee
2023-01-02 21:03 DEBUG replaced with: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG replaced with: buy_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: buy_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196857fa0>],
             18: [<numba.core.ir.Assign object at 0x7f0196962700>],
             40: [<numba.core.ir.Assign object at 0x7f019688c880>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: buy_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: buy_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196857cd0>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG find_def var='buy_Fee' stmt=$46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG find_def_from_top label 44
2023-01-02 21:03 DEBUG insert phi node buy_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-01-02 21:03 DEBUG find_def_from_bottom label 32
2023-01-02 21:03 DEBUG find_def_from_top label 32
2023-01-02 21:03 DEBUG idom 0 from label 32
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def buy_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG incoming_def buy_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $46return_value.1 = cast(value=buy_Fee.3)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=192)
           2	LOAD_FAST(arg=4, lineno=192)
           4	LOAD_CONST(arg=1, lineno=192)
           6	COMPARE_OP(arg=2, lineno=192)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=192)
          10	LOAD_FAST(arg=5, lineno=192)
          12	LOAD_CONST(arg=2, lineno=192)
          14	COMPARE_OP(arg=2, lineno=192)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=192)
          18	LOAD_FAST(arg=3, lineno=193)
          20	LOAD_FAST(arg=1, lineno=193)
          22	BINARY_MULTIPLY(arg=None, lineno=193)
          24	LOAD_FAST(arg=2, lineno=193)
          26	BINARY_MULTIPLY(arg=None, lineno=193)
          28	STORE_FAST(arg=0, lineno=193)
          30	JUMP_FORWARD(arg=12, lineno=193)
>         32	LOAD_FAST(arg=4, lineno=194)
          34	LOAD_CONST(arg=1, lineno=194)
          36	COMPARE_OP(arg=2, lineno=194)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=194)
          40	LOAD_CONST(arg=1, lineno=195)
          42	STORE_FAST(arg=0, lineno=195)
>         44	LOAD_FAST(arg=0, lineno=196)
          46	RETURN_VALUE(arg=None, lineno=196)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=192)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=192)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=192)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=192)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=192)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=192)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=192)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=192)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=192)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=194)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=194)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=194)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=194)
2023-01-02 21:03 DEBUG stack ['$36compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=193)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=193)
2023-01-02 21:03 DEBUG stack ['$target_price18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=193)
2023-01-02 21:03 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=193)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=193)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=193)
2023-01-02 21:03 DEBUG stack ['$26binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=193)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=195)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=195)
2023-01-02 21:03 DEBUG stack ['$const40.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=196)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=196)
2023-01-02 21:03 DEBUG stack ['$sell_Fee44.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$sell_Fee44.0'}), (46, {'retval': '$sell_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    sell_Fee = arg(0, name=sell_Fee)         ['sell_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    sell_Fee = $22binary_multiply.2 * size   ['$22binary_multiply.2', 'sell_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    sell_Fee = const(int, 0)                 ['sell_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=sell_Fee) ['$46return_value.1', 'sell_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196877a60>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196877a60>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196877a60>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196877a60>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196877a60>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196877a60>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196805820>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196805ac0>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x7f0196805f40>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x7f01968076a0>],
             '$38pred': [<numba.core.ir.Assign object at 0x7f0196807940>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x7f0196807f40>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01968050a0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196805340>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f01968056a0>],
             '$const34.1': [<numba.core.ir.Assign object at 0x7f0196807520>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f01967fbee0>],
             'bool16': [<numba.core.ir.Assign object at 0x7f01968059a0>],
             'bool38': [<numba.core.ir.Assign object at 0x7f0196807820>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196805220>],
             'fee': [<numba.core.ir.Assign object at 0x7f01967fb7c0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f01967fbc40>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f01967fbb20>],
             'sell_Fee': [<numba.core.ir.Assign object at 0x7f01967fb6a0>,
                          <numba.core.ir.Assign object at 0x7f0196807220>,
                          <numba.core.ir.Assign object at 0x7f0196807b80>],
             'size': [<numba.core.ir.Assign object at 0x7f01967fb8e0>],
             'target_price': [<numba.core.ir.Assign object at 0x7f01967fba00>]})
2023-01-02 21:03 DEBUG SSA violators {'sell_Fee'}
2023-01-02 21:03 DEBUG Fix SSA violator on var sell_Fee
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG first assign: sell_Fee
2023-01-02 21:03 DEBUG replaced with: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG replaced with: sell_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: sell_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196807cd0>],
             18: [<numba.core.ir.Assign object at 0x7f0196857c10>],
             40: [<numba.core.ir.Assign object at 0x7f019689b1f0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: sell_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: sell_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196877f10>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG find_def var='sell_Fee' stmt=$46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG find_def_from_top label 44
2023-01-02 21:03 DEBUG insert phi node sell_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-01-02 21:03 DEBUG find_def_from_bottom label 32
2023-01-02 21:03 DEBUG find_def_from_top label 32
2023-01-02 21:03 DEBUG idom 0 from label 32
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def sell_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG incoming_def sell_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $46return_value.1 = cast(value=sell_Fee.3)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=201)
           2	LOAD_FAST(arg=1, lineno=201)
           4	LOAD_CONST(arg=1, lineno=201)
           6	COMPARE_OP(arg=2, lineno=201)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=201)
          10	LOAD_FAST(arg=4, lineno=202)
          12	LOAD_FAST(arg=5, lineno=202)
          14	BINARY_MULTIPLY(arg=None, lineno=202)
          16	LOAD_FAST(arg=6, lineno=202)
          18	LOAD_FAST(arg=5, lineno=202)
          20	BINARY_MULTIPLY(arg=None, lineno=202)
          22	BINARY_SUBTRACT(arg=None, lineno=202)
          24	STORE_FAST(arg=0, lineno=202)
          26	JUMP_FORWARD(arg=4, lineno=202)
>         28	LOAD_CONST(arg=2, lineno=204)
          30	STORE_FAST(arg=0, lineno=204)
>         32	LOAD_FAST(arg=0, lineno=205)
          34	RETURN_VALUE(arg=None, lineno=205)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=201)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=201)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=201)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=201)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=201)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=4, lineno=202)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=5, lineno=202)
2023-01-02 21:03 DEBUG stack ['$Close10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=202)
2023-01-02 21:03 DEBUG stack ['$Close10.0', '$buy_sizes12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=5, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3', '$buy_sizes18.4']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2', '$20binary_multiply.5']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=202)
2023-01-02 21:03 DEBUG stack ['$22binary_subtract.6']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=4, lineno=202)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=204)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=30, inst=STORE_FAST(arg=0, lineno=204)
2023-01-02 21:03 DEBUG stack ['$const28.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=205)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=205)
2023-01-02 21:03 DEBUG stack ['$OpenPostionprofit32.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$Close10.0'}), (12, {'res': '$buy_sizes12.1'}), (14, {'lhs': '$Close10.0', 'rhs': '$buy_sizes12.1', 'res': '$14binary_multiply.2'}), (16, {'res': '$entryprice16.3'}), (18, {'res': '$buy_sizes18.4'}), (20, {'lhs': '$entryprice16.3', 'rhs': '$buy_sizes18.4', 'res': '$20binary_multiply.5'}), (22, {'lhs': '$14binary_multiply.2', 'rhs': '$20binary_multiply.5', 'res': '$22binary_subtract.6'}), (24, {'value': '$22binary_subtract.6'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$const28.0'}), (30, {'value': '$const28.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$OpenPostionprofit32.0'}), (34, {'retval': '$OpenPostionprofit32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    OpenPostionprofit = arg(0, name=OpenPostionprofit) ['OpenPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    Close = arg(4, name=Close)               ['Close']
    buy_sizes = arg(5, name=buy_sizes)       ['buy_sizes']
    entryprice = arg(6, name=entryprice)     ['entryprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $14binary_multiply.2 = Close * buy_sizes ['$14binary_multiply.2', 'Close', 'buy_sizes']
    $20binary_multiply.5 = entryprice * buy_sizes ['$20binary_multiply.5', 'buy_sizes', 'entryprice']
    OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5 ['$14binary_multiply.2', '$20binary_multiply.5', 'OpenPostionprofit']
    jump 32                                  []
label 28:
    OpenPostionprofit = const(int, 0)        ['OpenPostionprofit']
    jump 32                                  []
label 32:
    $34return_value.1 = cast(value=OpenPostionprofit) ['$34return_value.1', 'OpenPostionprofit']
    return $34return_value.1                 ['$34return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019680f880>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: Close = arg(4, name=Close)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019680f880>
2023-01-02 21:03 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-01-02 21:03 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019680f880>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f019680f880>
2023-01-02 21:03 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $34return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14binary_multiply.2': [<numba.core.ir.Assign object at 0x7f019685d880>],
             '$20binary_multiply.5': [<numba.core.ir.Assign object at 0x7f019685b670>],
             '$34return_value.1': [<numba.core.ir.Assign object at 0x7f019685bbb0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f019685dbb0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f019685d2b0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f019685d7f0>],
             'Close': [<numba.core.ir.Assign object at 0x7f01968773d0>],
             'OpenPostionprofit': [<numba.core.ir.Assign object at 0x7f01968777c0>,
                                   <numba.core.ir.Assign object at 0x7f019685bb50>,
                                   <numba.core.ir.Assign object at 0x7f019685be50>],
             'bool8': [<numba.core.ir.Assign object at 0x7f019685d940>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x7f0196877430>],
             'buy_sizes': [<numba.core.ir.Assign object at 0x7f019685d310>],
             'entryprice': [<numba.core.ir.Assign object at 0x7f019685deb0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196877a00>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f01968778e0>]})
2023-01-02 21:03 DEBUG SSA violators {'OpenPostionprofit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var OpenPostionprofit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG first assign: OpenPostionprofit
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: Close = arg(4, name=Close)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-01-02 21:03 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $34return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f019680ce80>],
             10: [<numba.core.ir.Assign object at 0x7f01968be310>],
             28: [<numba.core.ir.Assign object at 0x7f01968be790>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: Close = arg(4, name=Close)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-01-02 21:03 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f019680fe50>
2023-01-02 21:03 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG find_def var='OpenPostionprofit' stmt=$34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_top label 32
2023-01-02 21:03 DEBUG insert phi node OpenPostionprofit.3 = phi(incoming_values=[], incoming_blocks=[]) at 32
2023-01-02 21:03 DEBUG find_def_from_bottom label 10
2023-01-02 21:03 DEBUG incoming_def OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG incoming_def OpenPostionprofit.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $34return_value.1 = cast(value=OpenPostionprofit.3)
2023-01-02 21:03 DEBUG on stmt: return $34return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=211)
           2	LOAD_FAST(arg=1, lineno=211)
           4	LOAD_CONST(arg=1, lineno=211)
           6	COMPARE_OP(arg=2, lineno=211)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=211)
          10	LOAD_FAST(arg=2, lineno=211)
          12	LOAD_CONST(arg=2, lineno=211)
          14	COMPARE_OP(arg=2, lineno=211)
          16	POP_JUMP_IF_FALSE(arg=28, lineno=211)
          18	LOAD_FAST(arg=0, lineno=212)
          20	LOAD_FAST(arg=3, lineno=212)
          22	BINARY_SUBTRACT(arg=None, lineno=212)
          24	STORE_FAST(arg=0, lineno=212)
          26	JUMP_FORWARD(arg=44, lineno=212)
>         28	LOAD_FAST(arg=1, lineno=213)
          30	LOAD_CONST(arg=2, lineno=213)
          32	COMPARE_OP(arg=2, lineno=213)
          34	POP_JUMP_IF_FALSE(arg=72, lineno=213)
          36	LOAD_FAST(arg=2, lineno=213)
          38	LOAD_CONST(arg=1, lineno=213)
          40	COMPARE_OP(arg=2, lineno=213)
          42	POP_JUMP_IF_FALSE(arg=72, lineno=213)
          44	LOAD_FAST(arg=0, lineno=214)
          46	LOAD_FAST(arg=4, lineno=214)
          48	BINARY_SUBTRACT(arg=None, lineno=214)
          50	STORE_FAST(arg=0, lineno=214)
          52	LOAD_FAST(arg=0, lineno=220)
          54	LOAD_FAST(arg=7, lineno=221)
          56	LOAD_FAST(arg=5, lineno=221)
          58	BINARY_MULTIPLY(arg=None, lineno=221)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=5, lineno=221)
          64	BINARY_MULTIPLY(arg=None, lineno=221)
          66	BINARY_SUBTRACT(arg=None, lineno=221)
          68	BINARY_ADD(arg=None, lineno=220)
          70	STORE_FAST(arg=0, lineno=220)
>         72	LOAD_FAST(arg=0, lineno=223)
          74	RETURN_VALUE(arg=None, lineno=223)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=211)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=211)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=211)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=211)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=28, lineno=211)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=213)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack ['$marketpostion28.0']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=COMPARE_OP(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack ['$marketpostion28.0', '$const30.1']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=72, lineno=213)
2023-01-02 21:03 DEBUG stack ['$32compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=212)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=212)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=212)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit18.0', '$buy_Fees20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=212)
2023-01-02 21:03 DEBUG stack ['$22binary_subtract.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=44, lineno=212)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=213)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion36.0']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=COMPARE_OP(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion36.0', '$const38.1']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=72, lineno=213)
2023-01-02 21:03 DEBUG stack ['$40compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=223)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=223)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit72.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=214)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=214)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit44.0']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=BINARY_SUBTRACT(arg=None, lineno=214)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit44.0', '$sell_Fees46.1']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=STORE_FAST(arg=0, lineno=214)
2023-01-02 21:03 DEBUG stack ['$48binary_subtract.2']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=220)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=7, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=5, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4', '$sizes56.5']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=BINARY_MULTIPLY(arg=None, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7', '$sizes62.8']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=BINARY_SUBTRACT(arg=None, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$64binary_multiply.9']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=220)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$66binary_subtract.10']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=STORE_FAST(arg=0, lineno=220)
2023-01-02 21:03 DEBUG stack ['$68binary_add.11']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 28: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$ClosedPostionprofit18.0'}), (20, {'res': '$buy_Fees20.1'}), (22, {'lhs': '$ClosedPostionprofit18.0', 'rhs': '$buy_Fees20.1', 'res': '$22binary_subtract.2'}), (24, {'value': '$22binary_subtract.2'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$marketpostion28.0'}), (30, {'res': '$const30.1'}), (32, {'lhs': '$marketpostion28.0', 'rhs': '$const30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$last_marketpostion36.0'}), (38, {'res': '$const38.1'}), (40, {'lhs': '$last_marketpostion36.0', 'rhs': '$const38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$ClosedPostionprofit44.0'}), (46, {'res': '$sell_Fees46.1'}), (48, {'lhs': '$ClosedPostionprofit44.0', 'rhs': '$sell_Fees46.1', 'res': '$48binary_subtract.2'}), (50, {'value': '$48binary_subtract.2'}), (52, {'res': '$ClosedPostionprofit52.3'}), (54, {'res': '$exitsprice54.4'}), (56, {'res': '$sizes56.5'}), (58, {'lhs': '$exitsprice54.4', 'rhs': '$sizes56.5', 'res': '$58binary_multiply.6'}), (60, {'res': '$last_entryprice60.7'}), (62, {'res': '$sizes62.8'}), (64, {'lhs': '$last_entryprice60.7', 'rhs': '$sizes62.8', 'res': '$64binary_multiply.9'}), (66, {'lhs': '$58binary_multiply.6', 'rhs': '$64binary_multiply.9', 'res': '$66binary_subtract.10'}), (68, {'lhs': '$ClosedPostionprofit52.3', 'rhs': '$66binary_subtract.10', 'res': '$68binary_add.11'}), (70, {'value': '$68binary_add.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$ClosedPostionprofit72.0'}), (74, {'retval': '$ClosedPostionprofit72.0', 'castval': '$74return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    ClosedPostionprofit = arg(0, name=ClosedPostionprofit) ['ClosedPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    sell_Fees = arg(4, name=sell_Fees)       ['sell_Fees']
    sizes = arg(5, name=sizes)               ['sizes']
    last_entryprice = arg(6, name=last_entryprice) ['last_entryprice']
    exitsprice = arg(7, name=exitsprice)     ['exitsprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 28                   ['$16pred']
label 18:
    $22binary_subtract.2 = ClosedPostionprofit - buy_Fees ['$22binary_subtract.2', 'ClosedPostionprofit', 'buy_Fees']
    ClosedPostionprofit = $22binary_subtract.2 ['$22binary_subtract.2', 'ClosedPostionprofit']
    jump 72                                  []
label 28:
    $const30.1 = const(int, 0)               ['$const30.1']
    $32compare_op.2 = marketpostion == $const30.1 ['$32compare_op.2', '$const30.1', 'marketpostion']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 72                   ['$34pred']
label 36:
    $const38.1 = const(int, 1)               ['$const38.1']
    $40compare_op.2 = last_marketpostion == $const38.1 ['$40compare_op.2', '$const38.1', 'last_marketpostion']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.2', '$42pred', 'bool42']
    branch $42pred, 44, 72                   ['$42pred']
label 44:
    $48binary_subtract.2 = ClosedPostionprofit - sell_Fees ['$48binary_subtract.2', 'ClosedPostionprofit', 'sell_Fees']
    ClosedPostionprofit = $48binary_subtract.2 ['$48binary_subtract.2', 'ClosedPostionprofit']
    $58binary_multiply.6 = exitsprice * sizes ['$58binary_multiply.6', 'exitsprice', 'sizes']
    $64binary_multiply.9 = last_entryprice * sizes ['$64binary_multiply.9', 'last_entryprice', 'sizes']
    $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9 ['$58binary_multiply.6', '$64binary_multiply.9', '$66binary_subtract.10']
    $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10 ['$66binary_subtract.10', '$68binary_add.11', 'ClosedPostionprofit']
    ClosedPostionprofit = $68binary_add.11   ['$68binary_add.11', 'ClosedPostionprofit']
    jump 72                                  []
label 72:
    $74return_value.1 = cast(value=ClosedPostionprofit) ['$74return_value.1', 'ClosedPostionprofit']
    return $74return_value.1                 ['$74return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968cefd0>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-01-02 21:03 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968cefd0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968cefd0>
2023-01-02 21:03 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968cefd0>
2023-01-02 21:03 DEBUG on stmt: $const30.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-01-02 21:03 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $34pred, 36, 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968cefd0>
2023-01-02 21:03 DEBUG on stmt: $const38.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-01-02 21:03 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $42pred, 44, 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968cefd0>
2023-01-02 21:03 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-01-02 21:03 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-01-02 21:03 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-01-02 21:03 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968cefd0>
2023-01-02 21:03 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $74return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196764e50>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196766130>],
             '$22binary_subtract.2': [<numba.core.ir.Assign object at 0x7f0196872130>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f0196766220>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f01967664c0>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7f01967669a0>],
             '$42pred': [<numba.core.ir.Assign object at 0x7f0196766c40>],
             '$48binary_subtract.2': [<numba.core.ir.Assign object at 0x7f0196768100>],
             '$58binary_multiply.6': [<numba.core.ir.Assign object at 0x7f01967686a0>],
             '$64binary_multiply.9': [<numba.core.ir.Assign object at 0x7f0196768a60>],
             '$66binary_subtract.10': [<numba.core.ir.Assign object at 0x7f0196768be0>],
             '$68binary_add.11': [<numba.core.ir.Assign object at 0x7f0196768d60>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01967646d0>],
             '$74return_value.1': [<numba.core.ir.Assign object at 0x7f0196768f40>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196764970>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196764cd0>],
             '$const30.1': [<numba.core.ir.Assign object at 0x7f0196857f70>],
             '$const38.1': [<numba.core.ir.Assign object at 0x7f0196766820>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196764550>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x7f01968c6a90>,
                                     <numba.core.ir.Assign object at 0x7f019685dcd0>,
                                     <numba.core.ir.Assign object at 0x7f01967681c0>,
                                     <numba.core.ir.Assign object at 0x7f0196768e20>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196764fd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7f01967663a0>],
             'bool42': [<numba.core.ir.Assign object at 0x7f0196766b20>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196764850>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x7f01968c6df0>],
             'exitsprice': [<numba.core.ir.Assign object at 0x7f01967642b0>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x7f0196764190>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f01968c6cd0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f01968c6bb0>],
             'sell_Fees': [<numba.core.ir.Assign object at 0x7f01968c6f10>],
             'sizes': [<numba.core.ir.Assign object at 0x7f0196764070>]})
2023-01-02 21:03 DEBUG SSA violators {'ClosedPostionprofit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var ClosedPostionprofit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG first assign: ClosedPostionprofit
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-01-02 21:03 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.1 = $22binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $const30.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-01-02 21:03 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $34pred, 36, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $const38.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-01-02 21:03 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $42pred, 44, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.2 = $48binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-01-02 21:03 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-01-02 21:03 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-01-02 21:03 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.3 = $68binary_add.11
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $74return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01968cefd0>],
             18: [<numba.core.ir.Assign object at 0x7f019676d0d0>],
             44: [<numba.core.ir.Assign object at 0x7f019676d2b0>,
                  <numba.core.ir.Assign object at 0x7f019676d3a0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-01-02 21:03 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 18
2023-01-02 21:03 DEBUG idom 10 from label 18
2023-01-02 21:03 DEBUG find_def_from_bottom label 10
2023-01-02 21:03 DEBUG find_def_from_top label 10
2023-01-02 21:03 DEBUG idom 0 from label 10
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.1 = $22binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $const30.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-01-02 21:03 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $34pred, 36, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $const38.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-01-02 21:03 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $42pred, 44, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 44
2023-01-02 21:03 DEBUG idom 36 from label 44
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG find_def_from_top label 36
2023-01-02 21:03 DEBUG idom 28 from label 36
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG find_def_from_top label 28
2023-01-02 21:03 DEBUG idom 0 from label 28
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.2 = $48binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-01-02 21:03 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-01-02 21:03 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-01-02 21:03 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG replaced with: $68binary_add.11 = ClosedPostionprofit.2 + $66binary_subtract.10
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.3 = $68binary_add.11
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196985880>
2023-01-02 21:03 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_top label 72
2023-01-02 21:03 DEBUG insert phi node ClosedPostionprofit.4 = phi(incoming_values=[], incoming_blocks=[]) at 72
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit.1 = $22binary_subtract.2
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG find_def_from_top label 28
2023-01-02 21:03 DEBUG idom 0 from label 28
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG find_def_from_top label 36
2023-01-02 21:03 DEBUG idom 28 from label 36
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG find_def_from_top label 28
2023-01-02 21:03 DEBUG idom 0 from label 28
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_bottom label 44
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit.3 = $68binary_add.11
2023-01-02 21:03 DEBUG replaced with: $74return_value.1 = cast(value=ClosedPostionprofit.4)
2023-01-02 21:03 DEBUG on stmt: return $74return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=241)
           2	LOAD_FAST(arg=1, lineno=241)
           4	LOAD_CONST(arg=1, lineno=241)
           6	COMPARE_OP(arg=2, lineno=241)
           8	POP_JUMP_IF_FALSE(arg=36, lineno=241)
          10	LOAD_FAST(arg=2, lineno=241)
          12	LOAD_CONST(arg=2, lineno=241)
          14	COMPARE_OP(arg=2, lineno=241)
          16	POP_JUMP_IF_FALSE(arg=36, lineno=241)
          18	LOAD_FAST(arg=3, lineno=242)
          20	LOAD_FAST(arg=4, lineno=242)
          22	BINARY_MULTIPLY(arg=None, lineno=242)
          24	LOAD_FAST(arg=5, lineno=242)
          26	LOAD_FAST(arg=4, lineno=242)
          28	BINARY_MULTIPLY(arg=None, lineno=242)
          30	BINARY_SUBTRACT(arg=None, lineno=242)
          32	STORE_FAST(arg=0, lineno=242)
          34	JUMP_FORWARD(arg=4, lineno=242)
>         36	LOAD_CONST(arg=1, lineno=244)
          38	STORE_FAST(arg=0, lineno=244)
>         40	LOAD_FAST(arg=0, lineno=245)
          42	RETURN_VALUE(arg=None, lineno=245)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=241)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=241)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=241)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=36, lineno=241)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=36, lineno=241)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=244)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=244)
2023-01-02 21:03 DEBUG stack ['$const36.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=242)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=242)
2023-01-02 21:03 DEBUG stack ['$target_price18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=242)
2023-01-02 21:03 DEBUG stack ['$target_price18.0', '$sell_sizes20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=5, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3', '$sell_sizes26.4']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=BINARY_SUBTRACT(arg=None, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$28binary_multiply.5']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=242)
2023-01-02 21:03 DEBUG stack ['$30binary_subtract.6']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=JUMP_FORWARD(arg=4, lineno=242)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=245)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=245)
2023-01-02 21:03 DEBUG stack ['$profit40.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 36: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 36: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$sell_sizes20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$sell_sizes20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$last_entryprice24.3'}), (26, {'res': '$sell_sizes26.4'}), (28, {'lhs': '$last_entryprice24.3', 'rhs': '$sell_sizes26.4', 'res': '$28binary_multiply.5'}), (30, {'lhs': '$22binary_multiply.2', 'rhs': '$28binary_multiply.5', 'res': '$30binary_subtract.6'}), (32, {'value': '$30binary_subtract.6'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$profit40.0'}), (42, {'retval': '$profit40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    profit = arg(0, name=profit)             ['profit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    target_price = arg(3, name=target_price) ['target_price']
    sell_sizes = arg(4, name=sell_sizes)     ['sell_sizes']
    last_entryprice = arg(5, name=last_entryprice) ['last_entryprice']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 36                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 36                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * sell_sizes ['$22binary_multiply.2', 'sell_sizes', 'target_price']
    $28binary_multiply.5 = last_entryprice * sell_sizes ['$28binary_multiply.5', 'last_entryprice', 'sell_sizes']
    profit = $22binary_multiply.2 - $28binary_multiply.5 ['$22binary_multiply.2', '$28binary_multiply.5', 'profit']
    jump 40                                  []
label 36:
    profit = const(int, 0)                   ['profit']
    jump 40                                  []
label 40:
    $42return_value.1 = cast(value=profit)   ['$42return_value.1', 'profit']
    return $42return_value.1                 ['$42return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968c6a00>
2023-01-02 21:03 DEBUG on stmt: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 36
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968c6a00>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 36
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968c6a00>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-01-02 21:03 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-01-02 21:03 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968c6a00>
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968c6a00>
2023-01-02 21:03 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG on stmt: return $42return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f01967c8a90>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f01967c8850>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x7f01967c8490>],
             '$28binary_multiply.5': [<numba.core.ir.Assign object at 0x7f019680fe80>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x7f0196851e80>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196782c10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196782df0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f01967828b0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f01968cff40>],
             'bool16': [<numba.core.ir.Assign object at 0x7f01967c8880>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196782a60>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x7f01968cf5b0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f01968cf6d0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f01968cf700>],
             'profit': [<numba.core.ir.Assign object at 0x7f01968cf160>,
                        <numba.core.ir.Assign object at 0x7f019680ff10>,
                        <numba.core.ir.Assign object at 0x7f019680f8b0>],
             'sell_sizes': [<numba.core.ir.Assign object at 0x7f01968cfd30>],
             'target_price': [<numba.core.ir.Assign object at 0x7f01968cff10>]})
2023-01-02 21:03 DEBUG SSA violators {'profit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var profit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG first assign: profit
2023-01-02 21:03 DEBUG replaced with: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-01-02 21:03 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-01-02 21:03 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG replaced with: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: profit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG on stmt: return $42return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196768d90>],
             18: [<numba.core.ir.Assign object at 0x7f01968cf850>],
             36: [<numba.core.ir.Assign object at 0x7f01968cf100>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-01-02 21:03 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-01-02 21:03 DEBUG on stmt: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: profit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01968c6550>
2023-01-02 21:03 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG find_def var='profit' stmt=$42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG insert phi node profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG incoming_def profit.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $42return_value.1 = cast(value=profit.3)
2023-01-02 21:03 DEBUG on stmt: return $42return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=294)
           2	LOAD_GLOBAL(arg=0, lineno=294)
           4	LOAD_ATTR(arg=1, lineno=294)
           6	LOAD_FAST(arg=0, lineno=294)
           8	LOAD_ATTR(arg=2, lineno=294)
          10	LOAD_CONST(arg=1, lineno=294)
          12	BINARY_SUBSCR(arg=None, lineno=294)
          14	LOAD_CONST(arg=2, lineno=294)
          16	CALL_FUNCTION_KW(arg=1, lineno=294)
          18	STORE_FAST(arg=1, lineno=294)
          20	LOAD_GLOBAL(arg=3, lineno=295)
          22	LOAD_GLOBAL(arg=4, lineno=295)
          24	LOAD_FAST(arg=0, lineno=295)
          26	CALL_FUNCTION(arg=1, lineno=295)
          28	CALL_FUNCTION(arg=1, lineno=295)
          30	GET_ITER(arg=None, lineno=295)
>         32	FOR_ITER(arg=104, lineno=295)
          34	STORE_FAST(arg=2, lineno=295)
          36	LOAD_FAST(arg=2, lineno=296)
          38	LOAD_CONST(arg=1, lineno=296)
          40	COMPARE_OP(arg=4, lineno=296)
          42	POP_JUMP_IF_FALSE(arg=124, lineno=296)
          44	LOAD_FAST(arg=0, lineno=299)
          46	LOAD_FAST(arg=2, lineno=299)
          48	BINARY_SUBSCR(arg=None, lineno=299)
          50	LOAD_FAST(arg=0, lineno=299)
          52	LOAD_FAST(arg=2, lineno=299)
          54	LOAD_CONST(arg=3, lineno=299)
          56	BINARY_SUBTRACT(arg=None, lineno=299)
          58	BINARY_SUBSCR(arg=None, lineno=299)
          60	COMPARE_OP(arg=2, lineno=299)
          62	POP_JUMP_IF_FALSE(arg=72, lineno=299)
          64	LOAD_CONST(arg=1, lineno=300)
          66	LOAD_FAST(arg=1, lineno=300)
          68	LOAD_FAST(arg=2, lineno=300)
          70	STORE_SUBSCR(arg=None, lineno=300)
>         72	LOAD_FAST(arg=0, lineno=303)
          74	LOAD_FAST(arg=2, lineno=303)
          76	BINARY_SUBSCR(arg=None, lineno=303)
          78	LOAD_FAST(arg=0, lineno=303)
          80	LOAD_FAST(arg=2, lineno=303)
          82	LOAD_CONST(arg=3, lineno=303)
          84	BINARY_SUBTRACT(arg=None, lineno=303)
          86	BINARY_SUBSCR(arg=None, lineno=303)
          88	COMPARE_OP(arg=3, lineno=303)
          90	POP_JUMP_IF_FALSE(arg=136, lineno=303)
          92	LOAD_FAST(arg=0, lineno=304)
          94	LOAD_FAST(arg=2, lineno=304)
          96	BINARY_SUBSCR(arg=None, lineno=304)
          98	LOAD_CONST(arg=3, lineno=304)
         100	COMPARE_OP(arg=2, lineno=304)
         102	POP_JUMP_IF_FALSE(arg=114, lineno=304)
         104	LOAD_CONST(arg=3, lineno=305)
         106	LOAD_FAST(arg=1, lineno=305)
         108	LOAD_FAST(arg=2, lineno=305)
         110	STORE_SUBSCR(arg=None, lineno=305)
         112	JUMP_ABSOLUTE(arg=136, lineno=305)
>        114	LOAD_CONST(arg=4, lineno=307)
         116	LOAD_FAST(arg=1, lineno=307)
         118	LOAD_FAST(arg=2, lineno=307)
         120	STORE_SUBSCR(arg=None, lineno=307)
         122	JUMP_ABSOLUTE(arg=32, lineno=307)
>        124	LOAD_FAST(arg=0, lineno=309)
         126	LOAD_FAST(arg=2, lineno=309)
         128	BINARY_SUBSCR(arg=None, lineno=309)
         130	LOAD_FAST(arg=1, lineno=309)
         132	LOAD_FAST(arg=2, lineno=309)
         134	STORE_SUBSCR(arg=None, lineno=309)
>        136	JUMP_ABSOLUTE(arg=32, lineno=309)
>        138	LOAD_FAST(arg=1, lineno=310)
         140	RETURN_VALUE(arg=None, lineno=310)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=294)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=294)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=294)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=294)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=294)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$marketpostion6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=294)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=294)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=294)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=CALL_FUNCTION_KW(arg=1, lineno=294)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5', '$const14.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=STORE_FAST(arg=1, lineno=294)
2023-01-02 21:03 DEBUG stack ['$16call_function_kw.7']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_GLOBAL(arg=3, lineno=295)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_GLOBAL(arg=4, lineno=295)
2023-01-02 21:03 DEBUG stack ['$20load_global.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=295)
2023-01-02 21:03 DEBUG stack ['$20load_global.8', '$22load_global.9']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=295)
2023-01-02 21:03 DEBUG stack ['$20load_global.8', '$22load_global.9', '$marketpostion24.10']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=295)
2023-01-02 21:03 DEBUG stack ['$20load_global.8', '$26call_function.11']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=295)
2023-01-02 21:03 DEBUG stack ['$28call_function.12']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.13',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi32.0']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=FOR_ITER(arg=104, lineno=295)
2023-01-02 21:03 DEBUG stack ['$phi32.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=138, inst=LOAD_FAST(arg=1, lineno=310)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=140, inst=RETURN_VALUE(arg=None, lineno=310)
2023-01-02 21:03 DEBUG stack ['$order_array138.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi34.0', '$phi34.1']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=STORE_FAST(arg=2, lineno=295)
2023-01-02 21:03 DEBUG stack ['$phi34.0', '$phi34.1']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=296)
2023-01-02 21:03 DEBUG stack ['$phi34.0']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=296)
2023-01-02 21:03 DEBUG stack ['$phi34.0', '$i36.2']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=COMPARE_OP(arg=4, lineno=296)
2023-01-02 21:03 DEBUG stack ['$phi34.0', '$i36.2', '$const38.3']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=124, lineno=296)
2023-01-02 21:03 DEBUG stack ['$phi34.0', '$40compare_op.4']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=('$phi34.0',), blockstack=(), npush=0), Edge(pc=124, stack=('$phi34.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=1), State(pc_initial=124 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi44.0']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$marketpostion44.1']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$marketpostion44.1', '$i46.2']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$48binary_subscr.3']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4', '$i52.5']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=BINARY_SUBTRACT(arg=None, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4', '$i52.5', '$const54.6']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$marketpostion50.4', '$56binary_subtract.7']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=COMPARE_OP(arg=2, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$48binary_subscr.3', '$58binary_subscr.8']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=72, lineno=299)
2023-01-02 21:03 DEBUG stack ['$phi44.0', '$60compare_op.9']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=64, stack=('$phi44.0',), blockstack=(), npush=0), Edge(pc=72, stack=('$phi44.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=124 nstack_initial=1), State(pc_initial=64 nstack_initial=1), State(pc_initial=72 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi124.0']
2023-01-02 21:03 DEBUG dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=309)
2023-01-02 21:03 DEBUG stack ['$phi124.0']
2023-01-02 21:03 DEBUG dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=309)
2023-01-02 21:03 DEBUG stack ['$phi124.0', '$marketpostion124.1']
2023-01-02 21:03 DEBUG dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=309)
2023-01-02 21:03 DEBUG stack ['$phi124.0', '$marketpostion124.1', '$i126.2']
2023-01-02 21:03 DEBUG dispatch pc=130, inst=LOAD_FAST(arg=1, lineno=309)
2023-01-02 21:03 DEBUG stack ['$phi124.0', '$128binary_subscr.3']
2023-01-02 21:03 DEBUG dispatch pc=132, inst=LOAD_FAST(arg=2, lineno=309)
2023-01-02 21:03 DEBUG stack ['$phi124.0', '$128binary_subscr.3', '$order_array130.4']
2023-01-02 21:03 DEBUG dispatch pc=134, inst=STORE_SUBSCR(arg=None, lineno=309)
2023-01-02 21:03 DEBUG stack ['$phi124.0', '$128binary_subscr.3', '$order_array130.4', '$i132.5']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=136, stack=('$phi124.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=72 nstack_initial=1), State(pc_initial=136 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi64.0']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=300)
2023-01-02 21:03 DEBUG stack ['$phi64.0']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=300)
2023-01-02 21:03 DEBUG stack ['$phi64.0', '$const64.1']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=LOAD_FAST(arg=2, lineno=300)
2023-01-02 21:03 DEBUG stack ['$phi64.0', '$const64.1', '$order_array66.2']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=STORE_SUBSCR(arg=None, lineno=300)
2023-01-02 21:03 DEBUG stack ['$phi64.0', '$const64.1', '$order_array66.2', '$i68.3']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=72, stack=('$phi64.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=136 nstack_initial=1), State(pc_initial=72 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi72.0']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0']
2023-01-02 21:03 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$marketpostion72.1']
2023-01-02 21:03 DEBUG dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$marketpostion72.1', '$i74.2']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=LOAD_FAST(arg=0, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3']
2023-01-02 21:03 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=2, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4']
2023-01-02 21:03 DEBUG dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4', '$i80.5']
2023-01-02 21:03 DEBUG dispatch pc=84, inst=BINARY_SUBTRACT(arg=None, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4', '$i80.5', '$const82.6']
2023-01-02 21:03 DEBUG dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$marketpostion78.4', '$84binary_subtract.7']
2023-01-02 21:03 DEBUG dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$86binary_subscr.8']
2023-01-02 21:03 DEBUG dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=136, lineno=303)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$88compare_op.9']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=92, stack=('$phi72.0',), blockstack=(), npush=0), Edge(pc=136, stack=('$phi72.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=72 nstack_initial=1), State(pc_initial=92 nstack_initial=1), State(pc_initial=136 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi136.0']
2023-01-02 21:03 DEBUG dispatch pc=136, inst=JUMP_ABSOLUTE(arg=32, lineno=309)
2023-01-02 21:03 DEBUG stack ['$phi136.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=32, stack=('$phi136.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=92 nstack_initial=1), State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=92 nstack_initial=1), State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi92.0']
2023-01-02 21:03 DEBUG dispatch pc=92, inst=LOAD_FAST(arg=0, lineno=304)
2023-01-02 21:03 DEBUG stack ['$phi92.0']
2023-01-02 21:03 DEBUG dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=304)
2023-01-02 21:03 DEBUG stack ['$phi92.0', '$marketpostion92.1']
2023-01-02 21:03 DEBUG dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=304)
2023-01-02 21:03 DEBUG stack ['$phi92.0', '$marketpostion92.1', '$i94.2']
2023-01-02 21:03 DEBUG dispatch pc=98, inst=LOAD_CONST(arg=3, lineno=304)
2023-01-02 21:03 DEBUG stack ['$phi92.0', '$96binary_subscr.3']
2023-01-02 21:03 DEBUG dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=304)
2023-01-02 21:03 DEBUG stack ['$phi92.0', '$96binary_subscr.3', '$const98.4']
2023-01-02 21:03 DEBUG dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=114, lineno=304)
2023-01-02 21:03 DEBUG stack ['$phi92.0', '$100compare_op.5']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=104, stack=('$phi92.0',), blockstack=(), npush=0), Edge(pc=114, stack=('$phi92.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1), State(pc_initial=104 nstack_initial=1), State(pc_initial=114 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=104 nstack_initial=1), State(pc_initial=114 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=104 nstack_initial=1), State(pc_initial=114 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi104.0']
2023-01-02 21:03 DEBUG dispatch pc=104, inst=LOAD_CONST(arg=3, lineno=305)
2023-01-02 21:03 DEBUG stack ['$phi104.0']
2023-01-02 21:03 DEBUG dispatch pc=106, inst=LOAD_FAST(arg=1, lineno=305)
2023-01-02 21:03 DEBUG stack ['$phi104.0', '$const104.1']
2023-01-02 21:03 DEBUG dispatch pc=108, inst=LOAD_FAST(arg=2, lineno=305)
2023-01-02 21:03 DEBUG stack ['$phi104.0', '$const104.1', '$order_array106.2']
2023-01-02 21:03 DEBUG dispatch pc=110, inst=STORE_SUBSCR(arg=None, lineno=305)
2023-01-02 21:03 DEBUG stack ['$phi104.0', '$const104.1', '$order_array106.2', '$i108.3']
2023-01-02 21:03 DEBUG dispatch pc=112, inst=JUMP_ABSOLUTE(arg=136, lineno=305)
2023-01-02 21:03 DEBUG stack ['$phi104.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=136, stack=('$phi104.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=114 nstack_initial=1), State(pc_initial=136 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi114.0']
2023-01-02 21:03 DEBUG dispatch pc=114, inst=LOAD_CONST(arg=4, lineno=307)
2023-01-02 21:03 DEBUG stack ['$phi114.0']
2023-01-02 21:03 DEBUG dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=307)
2023-01-02 21:03 DEBUG stack ['$phi114.0', '$const114.1']
2023-01-02 21:03 DEBUG dispatch pc=118, inst=LOAD_FAST(arg=2, lineno=307)
2023-01-02 21:03 DEBUG stack ['$phi114.0', '$const114.1', '$order_array116.2']
2023-01-02 21:03 DEBUG dispatch pc=120, inst=STORE_SUBSCR(arg=None, lineno=307)
2023-01-02 21:03 DEBUG stack ['$phi114.0', '$const114.1', '$order_array116.2', '$i118.3']
2023-01-02 21:03 DEBUG dispatch pc=122, inst=JUMP_ABSOLUTE(arg=32, lineno=307)
2023-01-02 21:03 DEBUG stack ['$phi114.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=32, stack=('$phi114.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=44 nstack_initial=1): set(),
             State(pc_initial=64 nstack_initial=1): set(),
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=92 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=1): set(),
             State(pc_initial=114 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=1): set(),
             State(pc_initial=136 nstack_initial=1): set(),
             State(pc_initial=138 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi92.0', State(pc_initial=92 nstack_initial=1))},
             '$phi114.0': {('$phi92.0', State(pc_initial=92 nstack_initial=1))},
             '$phi124.0': {('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi136.0': {('$phi104.0',
                            State(pc_initial=104 nstack_initial=1)),
                           ('$phi124.0',
                            State(pc_initial=124 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi114.0', State(pc_initial=114 nstack_initial=1)),
                          ('$phi136.0',
                           State(pc_initial=136 nstack_initial=1))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi64.0': {('$phi44.0', State(pc_initial=44 nstack_initial=1))},
             '$phi72.0': {('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi92.0': {('$phi72.0', State(pc_initial=72 nstack_initial=1))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi114.0': {('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi124.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi136.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1)),
                           ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                           ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi114.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi124.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi44.0', State(pc_initial=44 nstack_initial=1)),
                           ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi136.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi114.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi124.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi136.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi114.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi124.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi136.0': {('$30get_iter.13',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi44.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.0': {('$30get_iter.13',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi32.0': {('$30get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi32.0': '$30get_iter.13'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$marketpostion6.2'}), (8, {'item': '$marketpostion6.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$8load_attr.3', 'res': '$12binary_subscr.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$4load_attr.1', 'args': ['$12binary_subscr.5'], 'names': '$const14.6', 'res': '$16call_function_kw.7'}), (18, {'value': '$16call_function_kw.7'}), (20, {'res': '$20load_global.8'}), (22, {'res': '$22load_global.9'}), (24, {'res': '$marketpostion24.10'}), (26, {'func': '$22load_global.9', 'args': ['$marketpostion24.10'], 'res': '$26call_function.11'}), (28, {'func': '$20load_global.8', 'args': ['$26call_function.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12', 'res': '$30get_iter.13'})), outgoing_phis={'$phi32.0': '$30get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.13',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 34: ('$phi32.0', '$32for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$i36.2'}), (38, {'res': '$const38.3'}), (40, {'lhs': '$i36.2', 'rhs': '$const38.3', 'res': '$40compare_op.4'}), (42, {'pred': '$40compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ('$phi34.0',), 124: ('$phi34.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=1):
AdaptBlockInfo(insts=((44, {'res': '$marketpostion44.1'}), (46, {'res': '$i46.2'}), (48, {'index': '$i46.2', 'target': '$marketpostion44.1', 'res': '$48binary_subscr.3'}), (50, {'res': '$marketpostion50.4'}), (52, {'res': '$i52.5'}), (54, {'res': '$const54.6'}), (56, {'lhs': '$i52.5', 'rhs': '$const54.6', 'res': '$56binary_subtract.7'}), (58, {'index': '$56binary_subtract.7', 'target': '$marketpostion50.4', 'res': '$58binary_subscr.8'}), (60, {'lhs': '$48binary_subscr.3', 'rhs': '$58binary_subscr.8', 'res': '$60compare_op.9'}), (62, {'pred': '$60compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi44.0',), 72: ('$phi44.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'res': '$const64.1'}), (66, {'res': '$order_array66.2'}), (68, {'res': '$i68.3'}), (70, {'target': '$order_array66.2', 'index': '$i68.3', 'value': '$const64.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ('$phi64.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$marketpostion72.1'}), (74, {'res': '$i74.2'}), (76, {'index': '$i74.2', 'target': '$marketpostion72.1', 'res': '$76binary_subscr.3'}), (78, {'res': '$marketpostion78.4'}), (80, {'res': '$i80.5'}), (82, {'res': '$const82.6'}), (84, {'lhs': '$i80.5', 'rhs': '$const82.6', 'res': '$84binary_subtract.7'}), (86, {'index': '$84binary_subtract.7', 'target': '$marketpostion78.4', 'res': '$86binary_subscr.8'}), (88, {'lhs': '$76binary_subscr.3', 'rhs': '$86binary_subscr.8', 'res': '$88compare_op.9'}), (90, {'pred': '$88compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: ('$phi72.0',), 136: ('$phi72.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=92 nstack_initial=1):
AdaptBlockInfo(insts=((92, {'res': '$marketpostion92.1'}), (94, {'res': '$i94.2'}), (96, {'index': '$i94.2', 'target': '$marketpostion92.1', 'res': '$96binary_subscr.3'}), (98, {'res': '$const98.4'}), (100, {'lhs': '$96binary_subscr.3', 'rhs': '$const98.4', 'res': '$100compare_op.5'}), (102, {'pred': '$100compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: ('$phi92.0',), 114: ('$phi92.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=104 nstack_initial=1):
AdaptBlockInfo(insts=((104, {'res': '$const104.1'}), (106, {'res': '$order_array106.2'}), (108, {'res': '$i108.3'}), (110, {'target': '$order_array106.2', 'index': '$i108.3', 'value': '$const104.1'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ('$phi104.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'res': '$const114.1'}), (116, {'res': '$order_array116.2'}), (118, {'res': '$i118.3'}), (120, {'target': '$order_array116.2', 'index': '$i118.3', 'value': '$const114.1'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi114.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=124 nstack_initial=1):
AdaptBlockInfo(insts=((124, {'res': '$marketpostion124.1'}), (126, {'res': '$i126.2'}), (128, {'index': '$i126.2', 'target': '$marketpostion124.1', 'res': '$128binary_subscr.3'}), (130, {'res': '$order_array130.4'}), (132, {'res': '$i132.5'}), (134, {'target': '$order_array130.4', 'index': '$i132.5', 'value': '$128binary_subscr.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ('$phi124.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=136 nstack_initial=1):
AdaptBlockInfo(insts=((136, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi136.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$order_array138.0'}), (140, {'retval': '$order_array138.0', 'castval': '$140return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    marketpostion = arg(0, name=marketpostion) ['marketpostion']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=marketpostion, attr=shape) ['$8load_attr.3', 'marketpostion']
    $const10.4 = const(int, 0)               ['$const10.4']
    $12binary_subscr.5 = getitem(value=$8load_attr.3, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$8load_attr.3', '$const10.4']
    order_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:294))], vararg=None, varkwarg=None, target=None) ['$12binary_subscr.5', '$4load_attr.1', 'order_array']
    $20load_global.8 = global(range: <class 'range'>) ['$20load_global.8']
    $22load_global.9 = global(len: <built-in function len>) ['$22load_global.9']
    $26call_function.11 = call $22load_global.9(marketpostion, func=$22load_global.9, args=[Var(marketpostion, nb.py:294)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_global.9', '$26call_function.11', 'marketpostion']
    $28call_function.12 = call $20load_global.8($26call_function.11, func=$20load_global.8, args=[Var($26call_function.11, nb.py:295)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.8', '$26call_function.11', '$28call_function.12']
    $30get_iter.13 = getiter(value=$28call_function.12) ['$28call_function.12', '$30get_iter.13']
    $phi32.0 = $30get_iter.13                ['$30get_iter.13', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 138            ['$32for_iter.3']
label 34:
    i = $phi34.1                             ['$phi34.1', 'i']
    $const38.3 = const(int, 0)               ['$const38.3']
    $40compare_op.4 = i > $const38.3         ['$40compare_op.4', '$const38.3', 'i']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.4, func=bool42, args=(Var($40compare_op.4, nb.py:296),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.4', '$42pred', 'bool42']
    branch $42pred, 44, 124                  ['$42pred']
label 44:
    $48binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$48binary_subscr.3', 'i', 'marketpostion']
    $const54.6 = const(int, 1)               ['$const54.6']
    $56binary_subtract.7 = i - $const54.6    ['$56binary_subtract.7', '$const54.6', 'i']
    $58binary_subscr.8 = getitem(value=marketpostion, index=$56binary_subtract.7, fn=<built-in function getitem>) ['$56binary_subtract.7', '$58binary_subscr.8', 'marketpostion']
    $60compare_op.9 = $48binary_subscr.3 == $58binary_subscr.8 ['$48binary_subscr.3', '$58binary_subscr.8', '$60compare_op.9']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60compare_op.9, func=bool62, args=(Var($60compare_op.9, nb.py:299),), kws=(), vararg=None, varkwarg=None, target=None) ['$60compare_op.9', '$62pred', 'bool62']
    branch $62pred, 64, 72                   ['$62pred']
label 64:
    $const64.1 = const(int, 0)               ['$const64.1']
    order_array[i] = $const64.1              ['$const64.1', 'i', 'order_array']
    jump 72                                  []
label 72:
    $76binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$76binary_subscr.3', 'i', 'marketpostion']
    $const82.6 = const(int, 1)               ['$const82.6']
    $84binary_subtract.7 = i - $const82.6    ['$84binary_subtract.7', '$const82.6', 'i']
    $86binary_subscr.8 = getitem(value=marketpostion, index=$84binary_subtract.7, fn=<built-in function getitem>) ['$84binary_subtract.7', '$86binary_subscr.8', 'marketpostion']
    $88compare_op.9 = $76binary_subscr.3 != $86binary_subscr.8 ['$76binary_subscr.3', '$86binary_subscr.8', '$88compare_op.9']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.9, func=bool90, args=(Var($88compare_op.9, nb.py:303),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.9', '$90pred', 'bool90']
    branch $90pred, 92, 136                  ['$90pred']
label 92:
    $96binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$96binary_subscr.3', 'i', 'marketpostion']
    $const98.4 = const(int, 1)               ['$const98.4']
    $100compare_op.5 = $96binary_subscr.3 == $const98.4 ['$100compare_op.5', '$96binary_subscr.3', '$const98.4']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.5, func=bool102, args=(Var($100compare_op.5, nb.py:304),), kws=(), vararg=None, varkwarg=None, target=None) ['$100compare_op.5', '$102pred', 'bool102']
    branch $102pred, 104, 114                ['$102pred']
label 104:
    $const104.1 = const(int, 1)              ['$const104.1']
    order_array[i] = $const104.1             ['$const104.1', 'i', 'order_array']
    jump 136                                 []
label 114:
    $const114.1 = const(int, -1)             ['$const114.1']
    order_array[i] = $const114.1             ['$const114.1', 'i', 'order_array']
    jump 32                                  []
label 124:
    $128binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>) ['$128binary_subscr.3', 'i', 'marketpostion']
    order_array[i] = $128binary_subscr.3     ['$128binary_subscr.3', 'i', 'order_array']
    jump 136                                 []
label 136:
    jump 32                                  []
label 138:
    $140return_value.1 = cast(value=order_array) ['$140return_value.1', 'order_array']
    return $140return_value.1                ['$140return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(0, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=marketpostion, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: order_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:294))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $20load_global.8 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $22load_global.9 = global(len: <built-in function len>)
2023-01-02 21:03 DEBUG on stmt: $26call_function.11 = call $22load_global.9(marketpostion, func=$22load_global.9, args=[Var(marketpostion, nb.py:294)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $28call_function.12 = call $20load_global.8($26call_function.11, func=$20load_global.8, args=[Var($26call_function.11, nb.py:295)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $30get_iter.13 = getiter(value=$28call_function.12)
2023-01-02 21:03 DEBUG on stmt: $phi32.0 = $30get_iter.13
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $32for_iter.1 = iternext(value=$phi32.0)
2023-01-02 21:03 DEBUG on stmt: $32for_iter.2 = pair_first(value=$32for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $32for_iter.3 = pair_second(value=$32for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi34.1 = $32for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $32for_iter.3, 34, 138
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 34
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: i = $phi34.1
2023-01-02 21:03 DEBUG on stmt: $const38.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $40compare_op.4 = i > $const38.3
2023-01-02 21:03 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $42pred = call bool42($40compare_op.4, func=bool42, args=(Var($40compare_op.4, nb.py:296),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $42pred, 44, 124
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $48binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const54.6 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $56binary_subtract.7 = i - $const54.6
2023-01-02 21:03 DEBUG on stmt: $58binary_subscr.8 = getitem(value=marketpostion, index=$56binary_subtract.7, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $60compare_op.9 = $48binary_subscr.3 == $58binary_subscr.8
2023-01-02 21:03 DEBUG on stmt: bool62 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $62pred = call bool62($60compare_op.9, func=bool62, args=(Var($60compare_op.9, nb.py:299),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $62pred, 64, 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 64
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $const64.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: order_array[i] = $const64.1
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $76binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const82.6 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $84binary_subtract.7 = i - $const82.6
2023-01-02 21:03 DEBUG on stmt: $86binary_subscr.8 = getitem(value=marketpostion, index=$84binary_subtract.7, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $88compare_op.9 = $76binary_subscr.3 != $86binary_subscr.8
2023-01-02 21:03 DEBUG on stmt: bool90 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $90pred = call bool90($88compare_op.9, func=bool90, args=(Var($88compare_op.9, nb.py:303),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $90pred, 92, 136
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 92
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $96binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const98.4 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $100compare_op.5 = $96binary_subscr.3 == $const98.4
2023-01-02 21:03 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $102pred = call bool102($100compare_op.5, func=bool102, args=(Var($100compare_op.5, nb.py:304),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $102pred, 104, 114
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 104
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: order_array[i] = $const104.1
2023-01-02 21:03 DEBUG on stmt: jump 136
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 114
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $const114.1 = const(int, -1)
2023-01-02 21:03 DEBUG on stmt: order_array[i] = $const114.1
2023-01-02 21:03 DEBUG on stmt: jump 139
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 124
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $128binary_subscr.3 = getitem(value=marketpostion, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: order_array[i] = $128binary_subscr.3
2023-01-02 21:03 DEBUG on stmt: jump 136
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 136
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: jump 139
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 138
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: $140return_value.1 = cast(value=order_array)
2023-01-02 21:03 DEBUG on stmt: return $140return_value.1
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 139
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92040>
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$100compare_op.5': [<numba.core.ir.Assign object at 0x7f0196b11e50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f0196b11c70>],
             '$128binary_subscr.3': [<numba.core.ir.Assign object at 0x7f0196a92fd0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7f01969b3fa0>],
             '$140return_value.1': [<numba.core.ir.Assign object at 0x7f0196a890a0>],
             '$20load_global.8': [<numba.core.ir.Assign object at 0x7f01969a50d0>],
             '$22load_global.9': [<numba.core.ir.Assign object at 0x7f01969a5b20>],
             '$26call_function.11': [<numba.core.ir.Assign object at 0x7f01969a5250>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x7f01969d0160>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f01969ce910>],
             '$30get_iter.13': [<numba.core.ir.Assign object at 0x7f01969d0400>],
             '$32for_iter.1': [<numba.core.ir.Assign object at 0x7f019699f340>],
             '$32for_iter.2': [<numba.core.ir.Assign object at 0x7f019699f9a0>],
             '$32for_iter.3': [<numba.core.ir.Assign object at 0x7f019699f970>],
             '$40compare_op.4': [<numba.core.ir.Assign object at 0x7f01969a1d30>],
             '$42pred': [<numba.core.ir.Assign object at 0x7f01969a12e0>],
             '$48binary_subscr.3': [<numba.core.ir.Assign object at 0x7f01969a19d0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f01969ce760>],
             '$56binary_subtract.7': [<numba.core.ir.Assign object at 0x7f0196adc550>],
             '$58binary_subscr.8': [<numba.core.ir.Assign object at 0x7f0196adc9d0>],
             '$60compare_op.9': [<numba.core.ir.Assign object at 0x7f0196adcee0>],
             '$62pred': [<numba.core.ir.Assign object at 0x7f0196adcd30>],
             '$76binary_subscr.3': [<numba.core.ir.Assign object at 0x7f0196ac3cd0>],
             '$84binary_subtract.7': [<numba.core.ir.Assign object at 0x7f0196ac3820>],
             '$86binary_subscr.8': [<numba.core.ir.Assign object at 0x7f0196ac3580>],
             '$88compare_op.9': [<numba.core.ir.Assign object at 0x7f0196ac3460>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f01969d5940>],
             '$90pred': [<numba.core.ir.Assign object at 0x7f0196ac33d0>],
             '$96binary_subscr.3': [<numba.core.ir.Assign object at 0x7f0196ac1d30>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7f01969d5fa0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x7f0196a92310>],
             '$const114.1': [<numba.core.ir.Assign object at 0x7f0196a92e50>],
             '$const38.3': [<numba.core.ir.Assign object at 0x7f01969a1fd0>],
             '$const54.6': [<numba.core.ir.Assign object at 0x7f01969a1340>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f0196adcc10>],
             '$const82.6': [<numba.core.ir.Assign object at 0x7f0196ac3f10>],
             '$const98.4': [<numba.core.ir.Assign object at 0x7f0196ac1d00>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x7f01969a50a0>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x7f019699f580>],
             'bool102': [<numba.core.ir.Assign object at 0x7f0196b118b0>],
             'bool42': [<numba.core.ir.Assign object at 0x7f01969a1580>],
             'bool62': [<numba.core.ir.Assign object at 0x7f0196adce50>],
             'bool90': [<numba.core.ir.Assign object at 0x7f0196ac3d90>],
             'i': [<numba.core.ir.Assign object at 0x7f019699f100>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f01969ce5b0>],
             'order_array': [<numba.core.ir.Assign object at 0x7f01969d5520>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=115)
           2	LOAD_FAST(arg=2, lineno=115)
           4	LOAD_CONST(arg=1, lineno=115)
           6	COMPARE_OP(arg=2, lineno=115)
           8	POP_JUMP_IF_FALSE(arg=42, lineno=115)
          10	LOAD_FAST(arg=3, lineno=115)
          12	LOAD_CONST(arg=2, lineno=115)
          14	COMPARE_OP(arg=2, lineno=115)
          16	POP_JUMP_IF_FALSE(arg=42, lineno=115)
          18	LOAD_FAST(arg=4, lineno=116)
          20	POP_JUMP_IF_FALSE(arg=36, lineno=116)
          22	LOAD_FAST(arg=1, lineno=117)
          24	LOAD_CONST(arg=1, lineno=117)
          26	LOAD_FAST(arg=4, lineno=117)
          28	BINARY_ADD(arg=None, lineno=117)
          30	BINARY_MULTIPLY(arg=None, lineno=117)
          32	STORE_FAST(arg=0, lineno=117)
          34	JUMP_ABSOLUTE(arg=54, lineno=117)
>         36	LOAD_FAST(arg=1, lineno=119)
          38	STORE_FAST(arg=0, lineno=119)
          40	JUMP_FORWARD(arg=12, lineno=119)
>         42	LOAD_FAST(arg=2, lineno=120)
          44	LOAD_CONST(arg=2, lineno=120)
          46	COMPARE_OP(arg=2, lineno=120)
          48	POP_JUMP_IF_FALSE(arg=54, lineno=120)
          50	LOAD_CONST(arg=2, lineno=121)
          52	STORE_FAST(arg=0, lineno=121)
>         54	LOAD_FAST(arg=0, lineno=122)
          56	RETURN_VALUE(arg=None, lineno=122)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=115)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=115)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=42, lineno=115)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=115)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=115)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=42, lineno=115)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=120)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=120)
2023-01-02 21:03 DEBUG stack ['$marketpostion42.0']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=COMPARE_OP(arg=2, lineno=120)
2023-01-02 21:03 DEBUG stack ['$marketpostion42.0', '$const44.1']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=54, lineno=120)
2023-01-02 21:03 DEBUG stack ['$46compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=4, lineno=116)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=36, lineno=116)
2023-01-02 21:03 DEBUG stack ['$slippage18.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=121)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=52, inst=STORE_FAST(arg=0, lineno=121)
2023-01-02 21:03 DEBUG stack ['$const50.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=122)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=122)
2023-01-02 21:03 DEBUG stack ['$entryprice54.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=117)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0', '$const24.1']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=BINARY_ADD(arg=None, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0', '$const24.1', '$slippage26.2']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=BINARY_MULTIPLY(arg=None, lineno=117)
2023-01-02 21:03 DEBUG stack ['$target_price22.0', '$28binary_add.3']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=117)
2023-01-02 21:03 DEBUG stack ['$30binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=JUMP_ABSOLUTE(arg=54, lineno=117)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=119)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=119)
2023-01-02 21:03 DEBUG stack ['$target_price36.0']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=JUMP_FORWARD(arg=12, lineno=119)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 42: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 42: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$slippage18.0'}), (20, {'pred': '$slippage18.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 36: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$target_price22.0'}), (24, {'res': '$const24.1'}), (26, {'res': '$slippage26.2'}), (28, {'lhs': '$const24.1', 'rhs': '$slippage26.2', 'res': '$28binary_add.3'}), (30, {'lhs': '$target_price22.0', 'rhs': '$28binary_add.3', 'res': '$30binary_multiply.4'}), (32, {'value': '$30binary_multiply.4'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$target_price36.0'}), (38, {'value': '$target_price36.0'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$marketpostion42.0'}), (44, {'res': '$const44.1'}), (46, {'lhs': '$marketpostion42.0', 'rhs': '$const44.1', 'res': '$46compare_op.2'}), (48, {'pred': '$46compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'value': '$const50.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$entryprice54.0'}), (56, {'retval': '$entryprice54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    entryprice = arg(0, name=entryprice)     ['entryprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 42                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 42                   ['$16pred']
label 18:
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$20pred', 'bool20', 'slippage']
    branch $20pred, 22, 36                   ['$20pred']
label 22:
    $const24.1 = const(int, 1)               ['$const24.1']
    $28binary_add.3 = $const24.1 + slippage  ['$28binary_add.3', '$const24.1', 'slippage']
    entryprice = target_price * $28binary_add.3 ['$28binary_add.3', 'entryprice', 'target_price']
    jump 54                                  []
label 36:
    entryprice = target_price                ['entryprice', 'target_price']
    jump 54                                  []
label 42:
    $const44.1 = const(int, 0)               ['$const44.1']
    $46compare_op.2 = marketpostion == $const44.1 ['$46compare_op.2', '$const44.1', 'marketpostion']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.2', '$48pred', 'bool48']
    branch $48pred, 50, 54                   ['$48pred']
label 50:
    entryprice = const(int, 0)               ['entryprice']
    jump 54                                  []
label 54:
    $56return_value.1 = cast(value=entryprice) ['$56return_value.1', 'entryprice']
    return $56return_value.1                 ['$56return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 42
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 42
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $20pred, 22, 36
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 22
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: $const24.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: $const44.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-01-02 21:03 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $48pred, 50, 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196a92ca0>
2023-01-02 21:03 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG on stmt: return $56return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196dc49a0>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196dc4be0>],
             '$20pred': [<numba.core.ir.Assign object at 0x7f0196dd5a60>],
             '$28binary_add.3': [<numba.core.ir.Assign object at 0x7f0196a87550>],
             '$46compare_op.2': [<numba.core.ir.Assign object at 0x7f0196dc4430>],
             '$48pred': [<numba.core.ir.Assign object at 0x7f0196c1f160>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x7f0196c1f310>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d815e0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196d811f0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196dc4e80>],
             '$const24.1': [<numba.core.ir.Assign object at 0x7f0196832b80>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196d817f0>],
             '$const44.1': [<numba.core.ir.Assign object at 0x7f0196dc40d0>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196dc4ac0>],
             'bool20': [<numba.core.ir.Assign object at 0x7f0196d2bbe0>],
             'bool48': [<numba.core.ir.Assign object at 0x7f0196c1fb50>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196d81730>],
             'direction': [<numba.core.ir.Assign object at 0x7f0196d943d0>],
             'entryprice': [<numba.core.ir.Assign object at 0x7f0196d2beb0>,
                            <numba.core.ir.Assign object at 0x7f01969d03d0>,
                            <numba.core.ir.Assign object at 0x7f0196dc4df0>,
                            <numba.core.ir.Assign object at 0x7f0196c1f3a0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196d2b880>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196d2b9d0>],
             'slippage': [<numba.core.ir.Assign object at 0x7f0196d947f0>],
             'target_price': [<numba.core.ir.Assign object at 0x7f0196d2bfd0>]})
2023-01-02 21:03 DEBUG SSA violators {'entryprice'}
2023-01-02 21:03 DEBUG Fix SSA violator on var entryprice
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG first assign: entryprice
2023-01-02 21:03 DEBUG replaced with: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $20pred, 22, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 22
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $const24.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG replaced with: entryprice.1 = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: entryprice = target_price
2023-01-02 21:03 DEBUG replaced with: entryprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $const44.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-01-02 21:03 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $48pred, 50, 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: entryprice = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: entryprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG on stmt: return $56return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196c1f910>],
             22: [<numba.core.ir.Assign object at 0x7f0196c1ffa0>],
             36: [<numba.core.ir.Assign object at 0x7f0196c1fdf0>],
             50: [<numba.core.ir.Assign object at 0x7f0196c1f340>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 42
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $20pred = call bool20(slippage, func=bool20, args=(Var(slippage, nb.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $20pred, 22, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 22
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $const24.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $28binary_add.3 = $const24.1 + slippage
2023-01-02 21:03 DEBUG on stmt: entryprice.1 = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: entryprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 42
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $const44.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $46compare_op.2 = marketpostion == $const44.1
2023-01-02 21:03 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, nb.py:120),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $48pred, 50, 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: entryprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 54
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f01969b3bb0>
2023-01-02 21:03 DEBUG on stmt: $56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG find_def var='entryprice' stmt=$56return_value.1 = cast(value=entryprice)
2023-01-02 21:03 DEBUG find_def_from_top label 54
2023-01-02 21:03 DEBUG insert phi node entryprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 54
2023-01-02 21:03 DEBUG find_def_from_bottom label 42
2023-01-02 21:03 DEBUG find_def_from_top label 42
2023-01-02 21:03 DEBUG idom 0 from label 42
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def entryprice = arg(0, name=entryprice)
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG incoming_def entryprice.2 = target_price
2023-01-02 21:03 DEBUG find_def_from_bottom label 50
2023-01-02 21:03 DEBUG incoming_def entryprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 22
2023-01-02 21:03 DEBUG incoming_def entryprice.1 = target_price * $28binary_add.3
2023-01-02 21:03 DEBUG replaced with: $56return_value.1 = cast(value=entryprice.4)
2023-01-02 21:03 DEBUG on stmt: return $56return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=145)
           2	LOAD_FAST(arg=5, lineno=145)
           4	LOAD_CONST(arg=1, lineno=145)
           6	COMPARE_OP(arg=2, lineno=145)
           8	POP_JUMP_IF_FALSE(arg=62, lineno=145)
          10	LOAD_FAST(arg=2, lineno=146)
          12	LOAD_CONST(arg=2, lineno=146)
          14	COMPARE_OP(arg=2, lineno=146)
          16	POP_JUMP_IF_FALSE(arg=50, lineno=146)
          18	LOAD_FAST(arg=3, lineno=146)
          20	LOAD_CONST(arg=3, lineno=146)
          22	COMPARE_OP(arg=2, lineno=146)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=146)
          26	LOAD_FAST(arg=4, lineno=147)
          28	POP_JUMP_IF_FALSE(arg=44, lineno=147)
          30	LOAD_FAST(arg=1, lineno=148)
          32	LOAD_CONST(arg=3, lineno=148)
          34	LOAD_FAST(arg=4, lineno=148)
          36	BINARY_SUBTRACT(arg=None, lineno=148)
          38	BINARY_MULTIPLY(arg=None, lineno=148)
          40	STORE_FAST(arg=0, lineno=148)
          42	JUMP_ABSOLUTE(arg=62, lineno=148)
>         44	LOAD_FAST(arg=1, lineno=150)
          46	STORE_FAST(arg=0, lineno=150)
          48	JUMP_FORWARD(arg=12, lineno=150)
>         50	LOAD_FAST(arg=2, lineno=151)
          52	LOAD_CONST(arg=3, lineno=151)
          54	COMPARE_OP(arg=2, lineno=151)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=151)
          58	LOAD_CONST(arg=2, lineno=152)
          60	STORE_FAST(arg=0, lineno=152)
>         62	LOAD_FAST(arg=0, lineno=153)
          64	RETURN_VALUE(arg=None, lineno=153)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=145)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=5, lineno=145)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=145)
2023-01-02 21:03 DEBUG stack ['$direction2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=145)
2023-01-02 21:03 DEBUG stack ['$direction2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=62, lineno=145)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack ['$marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack ['$marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=50, lineno=146)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=153)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=153)
2023-01-02 21:03 DEBUG stack ['$exitsprice62.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=146)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=3, lineno=146)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=COMPARE_OP(arg=2, lineno=146)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion18.0', '$const20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=146)
2023-01-02 21:03 DEBUG stack ['$22compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=151)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=151)
2023-01-02 21:03 DEBUG stack ['$marketpostion50.0']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=COMPARE_OP(arg=2, lineno=151)
2023-01-02 21:03 DEBUG stack ['$marketpostion50.0', '$const52.1']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=151)
2023-01-02 21:03 DEBUG stack ['$54compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=147)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=44, lineno=147)
2023-01-02 21:03 DEBUG stack ['$slippage26.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=152)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=60, inst=STORE_FAST(arg=0, lineno=152)
2023-01-02 21:03 DEBUG stack ['$const58.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=148)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0', '$const32.1']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0', '$const32.1', '$slippage34.2']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=BINARY_MULTIPLY(arg=None, lineno=148)
2023-01-02 21:03 DEBUG stack ['$target_price30.0', '$36binary_subtract.3']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=STORE_FAST(arg=0, lineno=148)
2023-01-02 21:03 DEBUG stack ['$38binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=JUMP_ABSOLUTE(arg=62, lineno=148)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=150)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=STORE_FAST(arg=0, lineno=150)
2023-01-02 21:03 DEBUG stack ['$target_price44.0']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=JUMP_FORWARD(arg=12, lineno=150)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=62 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$direction2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$direction2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 50: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$last_marketpostion18.0'}), (20, {'res': '$const20.1'}), (22, {'lhs': '$last_marketpostion18.0', 'rhs': '$const20.1', 'res': '$22compare_op.2'}), (24, {'pred': '$22compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 50: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$slippage26.0'}), (28, {'pred': '$slippage26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$target_price30.0'}), (32, {'res': '$const32.1'}), (34, {'res': '$slippage34.2'}), (36, {'lhs': '$const32.1', 'rhs': '$slippage34.2', 'res': '$36binary_subtract.3'}), (38, {'lhs': '$target_price30.0', 'rhs': '$36binary_subtract.3', 'res': '$38binary_multiply.4'}), (40, {'value': '$38binary_multiply.4'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$target_price44.0'}), (46, {'value': '$target_price44.0'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$marketpostion50.0'}), (52, {'res': '$const52.1'}), (54, {'lhs': '$marketpostion50.0', 'rhs': '$const52.1', 'res': '$54compare_op.2'}), (56, {'pred': '$54compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'value': '$const58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$exitsprice62.0'}), (64, {'retval': '$exitsprice62.0', 'castval': '$64return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    exitsprice = arg(0, name=exitsprice)     ['exitsprice']
    target_price = arg(1, name=target_price) ['target_price']
    marketpostion = arg(2, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(3, name=last_marketpostion) ['last_marketpostion']
    slippage = arg(4, name=slippage)         ['slippage']
    direction = arg(5, name=direction)       ['direction']
    $const4.1 = const(str, buyonly)          ['$const4.1']
    $6compare_op.2 = direction == $const4.1  ['$6compare_op.2', '$const4.1', 'direction']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 62                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 50                   ['$16pred']
label 18:
    $const20.1 = const(int, 1)               ['$const20.1']
    $22compare_op.2 = last_marketpostion == $const20.1 ['$22compare_op.2', '$const20.1', 'last_marketpostion']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.2', '$24pred', 'bool24']
    branch $24pred, 26, 50                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None) ['$28pred', 'bool28', 'slippage']
    branch $28pred, 30, 44                   ['$28pred']
label 30:
    $const32.1 = const(int, 1)               ['$const32.1']
    $36binary_subtract.3 = $const32.1 - slippage ['$36binary_subtract.3', '$const32.1', 'slippage']
    exitsprice = target_price * $36binary_subtract.3 ['$36binary_subtract.3', 'exitsprice', 'target_price']
    jump 62                                  []
label 44:
    exitsprice = target_price                ['exitsprice', 'target_price']
    jump 62                                  []
label 50:
    $const52.1 = const(int, 1)               ['$const52.1']
    $54compare_op.2 = marketpostion == $const52.1 ['$54compare_op.2', '$const52.1', 'marketpostion']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.2', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    exitsprice = const(int, 0)               ['exitsprice']
    jump 62                                  []
label 62:
    $64return_value.1 = cast(value=exitsprice) ['$64return_value.1', 'exitsprice']
    return $64return_value.1                 ['$64return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 50
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: $const20.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-01-02 21:03 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $24pred, 26, 50
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $28pred, 30, 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: $const32.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: $const52.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 62
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d7ed30>
2023-01-02 21:03 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG on stmt: return $64return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196f37d00>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196f37130>],
             '$22compare_op.2': [<numba.core.ir.Assign object at 0x7f0196e55790>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f0196e55ee0>],
             '$28pred': [<numba.core.ir.Assign object at 0x7f0196e55e80>],
             '$36binary_subtract.3': [<numba.core.ir.Assign object at 0x7f0196e58c70>],
             '$54compare_op.2': [<numba.core.ir.Assign object at 0x7f0196e58820>],
             '$56pred': [<numba.core.ir.Assign object at 0x7f0196d79340>],
             '$64return_value.1': [<numba.core.ir.Assign object at 0x7f01969dec70>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196851250>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196dfc1c0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196f37580>],
             '$const20.1': [<numba.core.ir.Assign object at 0x7f0196e55be0>],
             '$const32.1': [<numba.core.ir.Assign object at 0x7f0196e58640>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196851040>],
             '$const52.1': [<numba.core.ir.Assign object at 0x7f0196e58ee0>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196f373d0>],
             'bool24': [<numba.core.ir.Assign object at 0x7f0196e55a00>],
             'bool28': [<numba.core.ir.Assign object at 0x7f0196e55760>],
             'bool56': [<numba.core.ir.Assign object at 0x7f0196d797c0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f01968515e0>],
             'direction': [<numba.core.ir.Assign object at 0x7f0196851b50>],
             'exitsprice': [<numba.core.ir.Assign object at 0x7f0196e36850>,
                            <numba.core.ir.Assign object at 0x7f0196e58df0>,
                            <numba.core.ir.Assign object at 0x7f0196e58880>,
                            <numba.core.ir.Assign object at 0x7f0196dd16d0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f01968c6520>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196776370>],
             'slippage': [<numba.core.ir.Assign object at 0x7f0196851820>],
             'target_price': [<numba.core.ir.Assign object at 0x7f019678db50>]})
2023-01-02 21:03 DEBUG SSA violators {'exitsprice'}
2023-01-02 21:03 DEBUG Fix SSA violator on var exitsprice
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG first assign: exitsprice
2023-01-02 21:03 DEBUG replaced with: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const20.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-01-02 21:03 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $24pred, 26, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $28pred, 30, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const32.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG replaced with: exitsprice.1 = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: exitsprice = target_price
2023-01-02 21:03 DEBUG replaced with: exitsprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const52.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: exitsprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 62
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG on stmt: return $64return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196c1f5b0>],
             30: [<numba.core.ir.Assign object at 0x7f0196dcb190>],
             44: [<numba.core.ir.Assign object at 0x7f0196c7f130>],
             58: [<numba.core.ir.Assign object at 0x7f0196c7f520>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(1, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(2, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(3, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: slippage = arg(4, name=slippage)
2023-01-02 21:03 DEBUG on stmt: direction = arg(5, name=direction)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(str, buyonly)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = direction == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const20.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $22compare_op.2 = last_marketpostion == $const20.1
2023-01-02 21:03 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, nb.py:146),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $24pred, 26, 50
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 26
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: bool28 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $28pred = call bool28(slippage, func=bool28, args=(Var(slippage, nb.py:145),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $28pred, 30, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 30
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const32.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $36binary_subtract.3 = $const32.1 - slippage
2023-01-02 21:03 DEBUG on stmt: exitsprice.1 = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: exitsprice.2 = target_price
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 50
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $const52.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $54compare_op.2 = marketpostion == $const52.1
2023-01-02 21:03 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $56pred = call bool56($54compare_op.2, func=bool56, args=(Var($54compare_op.2, nb.py:151),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $56pred, 58, 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 58
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: exitsprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 62
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 62
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d7e2b0>
2023-01-02 21:03 DEBUG on stmt: $64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG find_def var='exitsprice' stmt=$64return_value.1 = cast(value=exitsprice)
2023-01-02 21:03 DEBUG find_def_from_top label 62
2023-01-02 21:03 DEBUG insert phi node exitsprice.4 = phi(incoming_values=[], incoming_blocks=[]) at 62
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG find_def_from_bottom label 44
2023-01-02 21:03 DEBUG incoming_def exitsprice.2 = target_price
2023-01-02 21:03 DEBUG find_def_from_bottom label 50
2023-01-02 21:03 DEBUG find_def_from_top label 50
2023-01-02 21:03 DEBUG idom 10 from label 50
2023-01-02 21:03 DEBUG find_def_from_bottom label 10
2023-01-02 21:03 DEBUG find_def_from_top label 10
2023-01-02 21:03 DEBUG idom 0 from label 10
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def exitsprice = arg(0, name=exitsprice)
2023-01-02 21:03 DEBUG find_def_from_bottom label 58
2023-01-02 21:03 DEBUG incoming_def exitsprice.3 = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 30
2023-01-02 21:03 DEBUG incoming_def exitsprice.1 = target_price * $36binary_subtract.3
2023-01-02 21:03 DEBUG replaced with: $64return_value.1 = cast(value=exitsprice.4)
2023-01-02 21:03 DEBUG on stmt: return $64return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=171)
           2	LOAD_FAST(arg=4, lineno=171)
           4	LOAD_CONST(arg=1, lineno=171)
           6	COMPARE_OP(arg=2, lineno=171)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=171)
          10	LOAD_FAST(arg=5, lineno=171)
          12	LOAD_CONST(arg=2, lineno=171)
          14	COMPARE_OP(arg=2, lineno=171)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=171)
          18	LOAD_FAST(arg=3, lineno=172)
          20	LOAD_FAST(arg=1, lineno=172)
          22	BINARY_MULTIPLY(arg=None, lineno=172)
          24	LOAD_FAST(arg=2, lineno=172)
          26	BINARY_MULTIPLY(arg=None, lineno=172)
          28	STORE_FAST(arg=0, lineno=172)
          30	JUMP_FORWARD(arg=12, lineno=172)
>         32	LOAD_FAST(arg=4, lineno=173)
          34	LOAD_CONST(arg=2, lineno=173)
          36	COMPARE_OP(arg=2, lineno=173)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=173)
          40	LOAD_CONST(arg=2, lineno=174)
          42	STORE_FAST(arg=0, lineno=174)
>         44	LOAD_FAST(arg=0, lineno=175)
          46	RETURN_VALUE(arg=None, lineno=175)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=171)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=171)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=171)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=171)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=171)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=171)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=171)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=171)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=171)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=173)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=173)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=173)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=173)
2023-01-02 21:03 DEBUG stack ['$36compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=172)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=172)
2023-01-02 21:03 DEBUG stack ['$target_price18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=172)
2023-01-02 21:03 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=172)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=172)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=172)
2023-01-02 21:03 DEBUG stack ['$26binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=172)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=174)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=174)
2023-01-02 21:03 DEBUG stack ['$const40.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=175)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=175)
2023-01-02 21:03 DEBUG stack ['$buy_Fee44.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$buy_Fee44.0'}), (46, {'retval': '$buy_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    buy_Fee = arg(0, name=buy_Fee)           ['buy_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    buy_Fee = $22binary_multiply.2 * size    ['$22binary_multiply.2', 'buy_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    buy_Fee = const(int, 0)                  ['buy_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=buy_Fee)  ['$46return_value.1', 'buy_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196e58490>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196e58490>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196e58490>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196e58490>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196e58490>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196e58490>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196ea93a0>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196e588b0>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x7f0196d52130>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x7f0196ce5a30>],
             '$38pred': [<numba.core.ir.Assign object at 0x7f0196ce5130>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x7f0196ce5a90>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d52880>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196e47640>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196c7f580>],
             '$const34.1': [<numba.core.ir.Assign object at 0x7f0196ce5b80>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196d52760>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196c1f8b0>],
             'bool38': [<numba.core.ir.Assign object at 0x7f0196ce5520>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196d523d0>],
             'buy_Fee': [<numba.core.ir.Assign object at 0x7f0196d54f70>,
                         <numba.core.ir.Assign object at 0x7f0196d52dc0>,
                         <numba.core.ir.Assign object at 0x7f0196ce5430>],
             'fee': [<numba.core.ir.Assign object at 0x7f0196d54dc0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196d52f70>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196d529a0>],
             'size': [<numba.core.ir.Assign object at 0x7f0196d54460>],
             'target_price': [<numba.core.ir.Assign object at 0x7f0196d52f10>]})
2023-01-02 21:03 DEBUG SSA violators {'buy_Fee'}
2023-01-02 21:03 DEBUG Fix SSA violator on var buy_Fee
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG first assign: buy_Fee
2023-01-02 21:03 DEBUG replaced with: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: buy_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG replaced with: buy_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: buy_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196ce5f70>],
             18: [<numba.core.ir.Assign object at 0x7f0196ce55b0>],
             40: [<numba.core.ir.Assign object at 0x7f0196cc30a0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:171),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: buy_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:173),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: buy_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196e58d30>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG find_def var='buy_Fee' stmt=$46return_value.1 = cast(value=buy_Fee)
2023-01-02 21:03 DEBUG find_def_from_top label 44
2023-01-02 21:03 DEBUG insert phi node buy_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-01-02 21:03 DEBUG find_def_from_bottom label 32
2023-01-02 21:03 DEBUG find_def_from_top label 32
2023-01-02 21:03 DEBUG idom 0 from label 32
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def buy_Fee = arg(0, name=buy_Fee)
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def buy_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG incoming_def buy_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $46return_value.1 = cast(value=buy_Fee.3)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=192)
           2	LOAD_FAST(arg=4, lineno=192)
           4	LOAD_CONST(arg=1, lineno=192)
           6	COMPARE_OP(arg=2, lineno=192)
           8	POP_JUMP_IF_FALSE(arg=32, lineno=192)
          10	LOAD_FAST(arg=5, lineno=192)
          12	LOAD_CONST(arg=2, lineno=192)
          14	COMPARE_OP(arg=2, lineno=192)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=192)
          18	LOAD_FAST(arg=3, lineno=193)
          20	LOAD_FAST(arg=1, lineno=193)
          22	BINARY_MULTIPLY(arg=None, lineno=193)
          24	LOAD_FAST(arg=2, lineno=193)
          26	BINARY_MULTIPLY(arg=None, lineno=193)
          28	STORE_FAST(arg=0, lineno=193)
          30	JUMP_FORWARD(arg=12, lineno=193)
>         32	LOAD_FAST(arg=4, lineno=194)
          34	LOAD_CONST(arg=1, lineno=194)
          36	COMPARE_OP(arg=2, lineno=194)
          38	POP_JUMP_IF_FALSE(arg=44, lineno=194)
          40	LOAD_CONST(arg=1, lineno=195)
          42	STORE_FAST(arg=0, lineno=195)
>         44	LOAD_FAST(arg=0, lineno=196)
          46	RETURN_VALUE(arg=None, lineno=196)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=192)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=192)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=192)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=192)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=32, lineno=192)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=192)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=192)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=192)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=192)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=194)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=194)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=COMPARE_OP(arg=2, lineno=194)
2023-01-02 21:03 DEBUG stack ['$marketpostion32.0', '$const34.1']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=44, lineno=194)
2023-01-02 21:03 DEBUG stack ['$36compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=193)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=193)
2023-01-02 21:03 DEBUG stack ['$target_price18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=193)
2023-01-02 21:03 DEBUG stack ['$target_price18.0', '$fee20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=193)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=193)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$size24.3']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=STORE_FAST(arg=0, lineno=193)
2023-01-02 21:03 DEBUG stack ['$26binary_multiply.4']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=12, lineno=193)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=195)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=STORE_FAST(arg=0, lineno=195)
2023-01-02 21:03 DEBUG stack ['$const40.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=196)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=196)
2023-01-02 21:03 DEBUG stack ['$sell_Fee44.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$fee20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$fee20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$size24.3'}), (26, {'lhs': '$22binary_multiply.2', 'rhs': '$size24.3', 'res': '$26binary_multiply.4'}), (28, {'value': '$26binary_multiply.4'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$marketpostion32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$marketpostion32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$const40.0'}), (42, {'value': '$const40.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$sell_Fee44.0'}), (46, {'retval': '$sell_Fee44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    sell_Fee = arg(0, name=sell_Fee)         ['sell_Fee']
    fee = arg(1, name=fee)                   ['fee']
    size = arg(2, name=size)                 ['size']
    target_price = arg(3, name=target_price) ['target_price']
    marketpostion = arg(4, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(5, name=last_marketpostion) ['last_marketpostion']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 32                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * fee ['$22binary_multiply.2', 'fee', 'target_price']
    sell_Fee = $22binary_multiply.2 * size   ['$22binary_multiply.2', 'sell_Fee', 'size']
    jump 44                                  []
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = marketpostion == $const34.1 ['$36compare_op.2', '$const34.1', 'marketpostion']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 44                   ['$38pred']
label 40:
    sell_Fee = const(int, 0)                 ['sell_Fee']
    jump 44                                  []
label 44:
    $46return_value.1 = cast(value=sell_Fee) ['$46return_value.1', 'sell_Fee']
    return $46return_value.1                 ['$46return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196c864f0>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196c864f0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196c864f0>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196c864f0>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196c864f0>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196c864f0>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196c7ad00>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196f41070>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x7f0196f41400>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x7f0196cc2760>],
             '$38pred': [<numba.core.ir.Assign object at 0x7f0196cc2ee0>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x7f0196cc2250>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196c7a850>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196c7a160>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196c7a3d0>],
             '$const34.1': [<numba.core.ir.Assign object at 0x7f0196cc20a0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196c7aa60>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196f41790>],
             'bool38': [<numba.core.ir.Assign object at 0x7f0196cc2dc0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196c7a640>],
             'fee': [<numba.core.ir.Assign object at 0x7f0196c609a0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196c7aeb0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196c7aa30>],
             'sell_Fee': [<numba.core.ir.Assign object at 0x7f0196c60d30>,
                          <numba.core.ir.Assign object at 0x7f0196cc2850>,
                          <numba.core.ir.Assign object at 0x7f0196cc24c0>],
             'size': [<numba.core.ir.Assign object at 0x7f0196c60100>],
             'target_price': [<numba.core.ir.Assign object at 0x7f0196c7a760>]})
2023-01-02 21:03 DEBUG SSA violators {'sell_Fee'}
2023-01-02 21:03 DEBUG Fix SSA violator on var sell_Fee
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG first assign: sell_Fee
2023-01-02 21:03 DEBUG replaced with: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: sell_Fee = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG replaced with: sell_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: sell_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196cc2940>],
             18: [<numba.core.ir.Assign object at 0x7f0196c60eb0>],
             40: [<numba.core.ir.Assign object at 0x7f0196c60f70>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG on stmt: fee = arg(1, name=fee)
2023-01-02 21:03 DEBUG on stmt: size = arg(2, name=size)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(4, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(5, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:192),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * fee
2023-01-02 21:03 DEBUG on stmt: sell_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $const34.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $36compare_op.2 = marketpostion == $const34.1
2023-01-02 21:03 DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, nb.py:194),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $38pred, 40, 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: sell_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 44
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196bf5d90>
2023-01-02 21:03 DEBUG on stmt: $46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG find_def var='sell_Fee' stmt=$46return_value.1 = cast(value=sell_Fee)
2023-01-02 21:03 DEBUG find_def_from_top label 44
2023-01-02 21:03 DEBUG insert phi node sell_Fee.3 = phi(incoming_values=[], incoming_blocks=[]) at 44
2023-01-02 21:03 DEBUG find_def_from_bottom label 32
2023-01-02 21:03 DEBUG find_def_from_top label 32
2023-01-02 21:03 DEBUG idom 0 from label 32
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def sell_Fee = arg(0, name=sell_Fee)
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def sell_Fee.1 = $22binary_multiply.2 * size
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG incoming_def sell_Fee.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $46return_value.1 = cast(value=sell_Fee.3)
2023-01-02 21:03 DEBUG on stmt: return $46return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=201)
           2	LOAD_FAST(arg=1, lineno=201)
           4	LOAD_CONST(arg=1, lineno=201)
           6	COMPARE_OP(arg=2, lineno=201)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=201)
          10	LOAD_FAST(arg=4, lineno=202)
          12	LOAD_FAST(arg=5, lineno=202)
          14	BINARY_MULTIPLY(arg=None, lineno=202)
          16	LOAD_FAST(arg=6, lineno=202)
          18	LOAD_FAST(arg=5, lineno=202)
          20	BINARY_MULTIPLY(arg=None, lineno=202)
          22	BINARY_SUBTRACT(arg=None, lineno=202)
          24	STORE_FAST(arg=0, lineno=202)
          26	JUMP_FORWARD(arg=4, lineno=202)
>         28	LOAD_CONST(arg=2, lineno=204)
          30	STORE_FAST(arg=0, lineno=204)
>         32	LOAD_FAST(arg=0, lineno=205)
          34	RETURN_VALUE(arg=None, lineno=205)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=201)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=201)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=201)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=201)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=201)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=4, lineno=202)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=5, lineno=202)
2023-01-02 21:03 DEBUG stack ['$Close10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=202)
2023-01-02 21:03 DEBUG stack ['$Close10.0', '$buy_sizes12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=5, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2', '$entryprice16.3', '$buy_sizes18.4']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=202)
2023-01-02 21:03 DEBUG stack ['$14binary_multiply.2', '$20binary_multiply.5']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=202)
2023-01-02 21:03 DEBUG stack ['$22binary_subtract.6']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=4, lineno=202)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=204)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=30, inst=STORE_FAST(arg=0, lineno=204)
2023-01-02 21:03 DEBUG stack ['$const28.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=205)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=205)
2023-01-02 21:03 DEBUG stack ['$OpenPostionprofit32.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=32 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$Close10.0'}), (12, {'res': '$buy_sizes12.1'}), (14, {'lhs': '$Close10.0', 'rhs': '$buy_sizes12.1', 'res': '$14binary_multiply.2'}), (16, {'res': '$entryprice16.3'}), (18, {'res': '$buy_sizes18.4'}), (20, {'lhs': '$entryprice16.3', 'rhs': '$buy_sizes18.4', 'res': '$20binary_multiply.5'}), (22, {'lhs': '$14binary_multiply.2', 'rhs': '$20binary_multiply.5', 'res': '$22binary_subtract.6'}), (24, {'value': '$22binary_subtract.6'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$const28.0'}), (30, {'value': '$const28.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$OpenPostionprofit32.0'}), (34, {'retval': '$OpenPostionprofit32.0', 'castval': '$34return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    OpenPostionprofit = arg(0, name=OpenPostionprofit) ['OpenPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    Close = arg(4, name=Close)               ['Close']
    buy_sizes = arg(5, name=buy_sizes)       ['buy_sizes']
    entryprice = arg(6, name=entryprice)     ['entryprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $14binary_multiply.2 = Close * buy_sizes ['$14binary_multiply.2', 'Close', 'buy_sizes']
    $20binary_multiply.5 = entryprice * buy_sizes ['$20binary_multiply.5', 'buy_sizes', 'entryprice']
    OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5 ['$14binary_multiply.2', '$20binary_multiply.5', 'OpenPostionprofit']
    jump 32                                  []
label 28:
    OpenPostionprofit = const(int, 0)        ['OpenPostionprofit']
    jump 32                                  []
label 32:
    $34return_value.1 = cast(value=OpenPostionprofit) ['$34return_value.1', 'OpenPostionprofit']
    return $34return_value.1                 ['$34return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968940d0>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: Close = arg(4, name=Close)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968940d0>
2023-01-02 21:03 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-01-02 21:03 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968940d0>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968940d0>
2023-01-02 21:03 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $34return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14binary_multiply.2': [<numba.core.ir.Assign object at 0x7f0196a1ba90>],
             '$20binary_multiply.5': [<numba.core.ir.Assign object at 0x7f0196894130>],
             '$34return_value.1': [<numba.core.ir.Assign object at 0x7f0196894d00>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f019688a580>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196a1b460>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f019688ad30>],
             'Close': [<numba.core.ir.Assign object at 0x7f0196985df0>],
             'OpenPostionprofit': [<numba.core.ir.Assign object at 0x7f0196985d90>,
                                   <numba.core.ir.Assign object at 0x7f0196894250>,
                                   <numba.core.ir.Assign object at 0x7f0196894820>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196a1b1c0>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x7f0196985c70>],
             'buy_sizes': [<numba.core.ir.Assign object at 0x7f01969852e0>],
             'entryprice': [<numba.core.ir.Assign object at 0x7f0196985730>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196985af0>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196985760>]})
2023-01-02 21:03 DEBUG SSA violators {'OpenPostionprofit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var OpenPostionprofit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG first assign: OpenPostionprofit
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: Close = arg(4, name=Close)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-01-02 21:03 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: OpenPostionprofit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $34return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196cc7c70>],
             10: [<numba.core.ir.Assign object at 0x7f01969f8c70>],
             28: [<numba.core.ir.Assign object at 0x7f01969f8a30>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit = arg(0, name=OpenPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: Close = arg(4, name=Close)
2023-01-02 21:03 DEBUG on stmt: buy_sizes = arg(5, name=buy_sizes)
2023-01-02 21:03 DEBUG on stmt: entryprice = arg(6, name=entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:201),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: $14binary_multiply.2 = Close * buy_sizes
2023-01-02 21:03 DEBUG on stmt: $20binary_multiply.5 = entryprice * buy_sizes
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: OpenPostionprofit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 32
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 32
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196894070>
2023-01-02 21:03 DEBUG on stmt: $34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG find_def var='OpenPostionprofit' stmt=$34return_value.1 = cast(value=OpenPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_top label 32
2023-01-02 21:03 DEBUG insert phi node OpenPostionprofit.3 = phi(incoming_values=[], incoming_blocks=[]) at 32
2023-01-02 21:03 DEBUG find_def_from_bottom label 10
2023-01-02 21:03 DEBUG incoming_def OpenPostionprofit.1 = $14binary_multiply.2 - $20binary_multiply.5
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG incoming_def OpenPostionprofit.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $34return_value.1 = cast(value=OpenPostionprofit.3)
2023-01-02 21:03 DEBUG on stmt: return $34return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=211)
           2	LOAD_FAST(arg=1, lineno=211)
           4	LOAD_CONST(arg=1, lineno=211)
           6	COMPARE_OP(arg=2, lineno=211)
           8	POP_JUMP_IF_FALSE(arg=28, lineno=211)
          10	LOAD_FAST(arg=2, lineno=211)
          12	LOAD_CONST(arg=2, lineno=211)
          14	COMPARE_OP(arg=2, lineno=211)
          16	POP_JUMP_IF_FALSE(arg=28, lineno=211)
          18	LOAD_FAST(arg=0, lineno=212)
          20	LOAD_FAST(arg=3, lineno=212)
          22	BINARY_SUBTRACT(arg=None, lineno=212)
          24	STORE_FAST(arg=0, lineno=212)
          26	JUMP_FORWARD(arg=44, lineno=212)
>         28	LOAD_FAST(arg=1, lineno=213)
          30	LOAD_CONST(arg=2, lineno=213)
          32	COMPARE_OP(arg=2, lineno=213)
          34	POP_JUMP_IF_FALSE(arg=72, lineno=213)
          36	LOAD_FAST(arg=2, lineno=213)
          38	LOAD_CONST(arg=1, lineno=213)
          40	COMPARE_OP(arg=2, lineno=213)
          42	POP_JUMP_IF_FALSE(arg=72, lineno=213)
          44	LOAD_FAST(arg=0, lineno=214)
          46	LOAD_FAST(arg=4, lineno=214)
          48	BINARY_SUBTRACT(arg=None, lineno=214)
          50	STORE_FAST(arg=0, lineno=214)
          52	LOAD_FAST(arg=0, lineno=220)
          54	LOAD_FAST(arg=7, lineno=221)
          56	LOAD_FAST(arg=5, lineno=221)
          58	BINARY_MULTIPLY(arg=None, lineno=221)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=5, lineno=221)
          64	BINARY_MULTIPLY(arg=None, lineno=221)
          66	BINARY_SUBTRACT(arg=None, lineno=221)
          68	BINARY_ADD(arg=None, lineno=220)
          70	STORE_FAST(arg=0, lineno=220)
>         72	LOAD_FAST(arg=0, lineno=223)
          74	RETURN_VALUE(arg=None, lineno=223)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=211)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=211)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=211)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=28, lineno=211)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=211)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=28, lineno=211)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=213)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack ['$marketpostion28.0']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=COMPARE_OP(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack ['$marketpostion28.0', '$const30.1']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=72, lineno=213)
2023-01-02 21:03 DEBUG stack ['$32compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=212)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=212)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=212)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit18.0', '$buy_Fees20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=STORE_FAST(arg=0, lineno=212)
2023-01-02 21:03 DEBUG stack ['$22binary_subtract.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=44, lineno=212)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=213)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion36.0']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=COMPARE_OP(arg=2, lineno=213)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion36.0', '$const38.1']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=72, lineno=213)
2023-01-02 21:03 DEBUG stack ['$40compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=223)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=223)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit72.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=214)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=214)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit44.0']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=BINARY_SUBTRACT(arg=None, lineno=214)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit44.0', '$sell_Fees46.1']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=STORE_FAST(arg=0, lineno=214)
2023-01-02 21:03 DEBUG stack ['$48binary_subtract.2']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=220)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=7, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=5, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$exitsprice54.4', '$sizes56.5']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=BINARY_MULTIPLY(arg=None, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$last_entryprice60.7', '$sizes62.8']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=BINARY_SUBTRACT(arg=None, lineno=221)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$58binary_multiply.6', '$64binary_multiply.9']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=220)
2023-01-02 21:03 DEBUG stack ['$ClosedPostionprofit52.3', '$66binary_subtract.10']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=STORE_FAST(arg=0, lineno=220)
2023-01-02 21:03 DEBUG stack ['$68binary_add.11']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 28: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 28: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$ClosedPostionprofit18.0'}), (20, {'res': '$buy_Fees20.1'}), (22, {'lhs': '$ClosedPostionprofit18.0', 'rhs': '$buy_Fees20.1', 'res': '$22binary_subtract.2'}), (24, {'value': '$22binary_subtract.2'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$marketpostion28.0'}), (30, {'res': '$const30.1'}), (32, {'lhs': '$marketpostion28.0', 'rhs': '$const30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$last_marketpostion36.0'}), (38, {'res': '$const38.1'}), (40, {'lhs': '$last_marketpostion36.0', 'rhs': '$const38.1', 'res': '$40compare_op.2'}), (42, {'pred': '$40compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$ClosedPostionprofit44.0'}), (46, {'res': '$sell_Fees46.1'}), (48, {'lhs': '$ClosedPostionprofit44.0', 'rhs': '$sell_Fees46.1', 'res': '$48binary_subtract.2'}), (50, {'value': '$48binary_subtract.2'}), (52, {'res': '$ClosedPostionprofit52.3'}), (54, {'res': '$exitsprice54.4'}), (56, {'res': '$sizes56.5'}), (58, {'lhs': '$exitsprice54.4', 'rhs': '$sizes56.5', 'res': '$58binary_multiply.6'}), (60, {'res': '$last_entryprice60.7'}), (62, {'res': '$sizes62.8'}), (64, {'lhs': '$last_entryprice60.7', 'rhs': '$sizes62.8', 'res': '$64binary_multiply.9'}), (66, {'lhs': '$58binary_multiply.6', 'rhs': '$64binary_multiply.9', 'res': '$66binary_subtract.10'}), (68, {'lhs': '$ClosedPostionprofit52.3', 'rhs': '$66binary_subtract.10', 'res': '$68binary_add.11'}), (70, {'value': '$68binary_add.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$ClosedPostionprofit72.0'}), (74, {'retval': '$ClosedPostionprofit72.0', 'castval': '$74return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    ClosedPostionprofit = arg(0, name=ClosedPostionprofit) ['ClosedPostionprofit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    buy_Fees = arg(3, name=buy_Fees)         ['buy_Fees']
    sell_Fees = arg(4, name=sell_Fees)       ['sell_Fees']
    sizes = arg(5, name=sizes)               ['sizes']
    last_entryprice = arg(6, name=last_entryprice) ['last_entryprice']
    exitsprice = arg(7, name=exitsprice)     ['exitsprice']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 28                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 28                   ['$16pred']
label 18:
    $22binary_subtract.2 = ClosedPostionprofit - buy_Fees ['$22binary_subtract.2', 'ClosedPostionprofit', 'buy_Fees']
    ClosedPostionprofit = $22binary_subtract.2 ['$22binary_subtract.2', 'ClosedPostionprofit']
    jump 72                                  []
label 28:
    $const30.1 = const(int, 0)               ['$const30.1']
    $32compare_op.2 = marketpostion == $const30.1 ['$32compare_op.2', '$const30.1', 'marketpostion']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 72                   ['$34pred']
label 36:
    $const38.1 = const(int, 1)               ['$const38.1']
    $40compare_op.2 = last_marketpostion == $const38.1 ['$40compare_op.2', '$const38.1', 'last_marketpostion']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.2', '$42pred', 'bool42']
    branch $42pred, 44, 72                   ['$42pred']
label 44:
    $48binary_subtract.2 = ClosedPostionprofit - sell_Fees ['$48binary_subtract.2', 'ClosedPostionprofit', 'sell_Fees']
    ClosedPostionprofit = $48binary_subtract.2 ['$48binary_subtract.2', 'ClosedPostionprofit']
    $58binary_multiply.6 = exitsprice * sizes ['$58binary_multiply.6', 'exitsprice', 'sizes']
    $64binary_multiply.9 = last_entryprice * sizes ['$64binary_multiply.9', 'last_entryprice', 'sizes']
    $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9 ['$58binary_multiply.6', '$64binary_multiply.9', '$66binary_subtract.10']
    $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10 ['$66binary_subtract.10', '$68binary_add.11', 'ClosedPostionprofit']
    ClosedPostionprofit = $68binary_add.11   ['$68binary_add.11', 'ClosedPostionprofit']
    jump 72                                  []
label 72:
    $74return_value.1 = cast(value=ClosedPostionprofit) ['$74return_value.1', 'ClosedPostionprofit']
    return $74return_value.1                 ['$74return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196821bb0>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-01-02 21:03 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196821bb0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 28
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196821bb0>
2023-01-02 21:03 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196821bb0>
2023-01-02 21:03 DEBUG on stmt: $const30.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-01-02 21:03 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $34pred, 36, 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196821bb0>
2023-01-02 21:03 DEBUG on stmt: $const38.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-01-02 21:03 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $42pred, 44, 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196821bb0>
2023-01-02 21:03 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-01-02 21:03 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-01-02 21:03 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-01-02 21:03 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196821bb0>
2023-01-02 21:03 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $74return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196e36550>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196f114f0>],
             '$22binary_subtract.2': [<numba.core.ir.Assign object at 0x7f0196e1af40>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f0196de39a0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f0196e9e3a0>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x7f0196d3e610>],
             '$42pred': [<numba.core.ir.Assign object at 0x7f0196d70cd0>],
             '$48binary_subtract.2': [<numba.core.ir.Assign object at 0x7f0196e9ec70>],
             '$58binary_multiply.6': [<numba.core.ir.Assign object at 0x7f0196e9e8b0>],
             '$64binary_multiply.9': [<numba.core.ir.Assign object at 0x7f0196d01670>],
             '$66binary_subtract.10': [<numba.core.ir.Assign object at 0x7f0196d01040>],
             '$68binary_add.11': [<numba.core.ir.Assign object at 0x7f0196d01bb0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f01967681f0>],
             '$74return_value.1': [<numba.core.ir.Assign object at 0x7f0196d01580>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196e361c0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196e36610>],
             '$const30.1': [<numba.core.ir.Assign object at 0x7f0196de3760>],
             '$const38.1': [<numba.core.ir.Assign object at 0x7f0196f1ebb0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0197014be0>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x7f019700ea90>,
                                     <numba.core.ir.Assign object at 0x7f0196e1a160>,
                                     <numba.core.ir.Assign object at 0x7f0196e9ef70>,
                                     <numba.core.ir.Assign object at 0x7f0196d018b0>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196e36280>],
             'bool34': [<numba.core.ir.Assign object at 0x7f0196de30d0>],
             'bool42': [<numba.core.ir.Assign object at 0x7f0196985d60>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196e366a0>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x7f019700e0d0>],
             'exitsprice': [<numba.core.ir.Assign object at 0x7f0197014880>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x7f01970148e0>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f019700e280>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f019700ee80>],
             'sell_Fees': [<numba.core.ir.Assign object at 0x7f019700e790>],
             'sizes': [<numba.core.ir.Assign object at 0x7f019700ed00>]})
2023-01-02 21:03 DEBUG SSA violators {'ClosedPostionprofit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var ClosedPostionprofit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG first assign: ClosedPostionprofit
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-01-02 21:03 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $22binary_subtract.2
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.1 = $22binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $const30.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-01-02 21:03 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $34pred, 36, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $const38.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-01-02 21:03 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $42pred, 44, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $48binary_subtract.2
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.2 = $48binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-01-02 21:03 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-01-02 21:03 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-01-02 21:03 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = $68binary_add.11
2023-01-02 21:03 DEBUG replaced with: ClosedPostionprofit.3 = $68binary_add.11
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: return $74return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196d017c0>],
             18: [<numba.core.ir.Assign object at 0x7f0196d01490>],
             44: [<numba.core.ir.Assign object at 0x7f0196efc5e0>,
                  <numba.core.ir.Assign object at 0x7f0196efc7c0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: buy_Fees = arg(3, name=buy_Fees)
2023-01-02 21:03 DEBUG on stmt: sell_Fees = arg(4, name=sell_Fees)
2023-01-02 21:03 DEBUG on stmt: sizes = arg(5, name=sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(6, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: exitsprice = arg(7, name=exitsprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 28
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$22binary_subtract.2 = ClosedPostionprofit - buy_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 18
2023-01-02 21:03 DEBUG idom 10 from label 18
2023-01-02 21:03 DEBUG find_def_from_bottom label 10
2023-01-02 21:03 DEBUG find_def_from_top label 10
2023-01-02 21:03 DEBUG idom 0 from label 10
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.1 = $22binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 28
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $const30.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32compare_op.2 = marketpostion == $const30.1
2023-01-02 21:03 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $34pred, 36, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $const38.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $40compare_op.2 = last_marketpostion == $const38.1
2023-01-02 21:03 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $42pred = call bool42($40compare_op.2, func=bool42, args=(Var($40compare_op.2, nb.py:213),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $42pred, 44, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 44
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$48binary_subtract.2 = ClosedPostionprofit - sell_Fees
2023-01-02 21:03 DEBUG find_def_from_top label 44
2023-01-02 21:03 DEBUG idom 36 from label 44
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG find_def_from_top label 36
2023-01-02 21:03 DEBUG idom 28 from label 36
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG find_def_from_top label 28
2023-01-02 21:03 DEBUG idom 0 from label 28
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.2 = $48binary_subtract.2
2023-01-02 21:03 DEBUG on stmt: $58binary_multiply.6 = exitsprice * sizes
2023-01-02 21:03 DEBUG on stmt: $64binary_multiply.9 = last_entryprice * sizes
2023-01-02 21:03 DEBUG on stmt: $66binary_subtract.10 = $58binary_multiply.6 - $64binary_multiply.9
2023-01-02 21:03 DEBUG on stmt: $68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$68binary_add.11 = ClosedPostionprofit + $66binary_subtract.10
2023-01-02 21:03 DEBUG replaced with: $68binary_add.11 = ClosedPostionprofit.2 + $66binary_subtract.10
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit.3 = $68binary_add.11
2023-01-02 21:03 DEBUG on stmt: jump 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d019a0>
2023-01-02 21:03 DEBUG on stmt: $74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def var='ClosedPostionprofit' stmt=$74return_value.1 = cast(value=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_top label 72
2023-01-02 21:03 DEBUG insert phi node ClosedPostionprofit.4 = phi(incoming_values=[], incoming_blocks=[]) at 72
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit.1 = $22binary_subtract.2
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG find_def_from_top label 28
2023-01-02 21:03 DEBUG idom 0 from label 28
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG find_def_from_top label 36
2023-01-02 21:03 DEBUG idom 28 from label 36
2023-01-02 21:03 DEBUG find_def_from_bottom label 28
2023-01-02 21:03 DEBUG find_def_from_top label 28
2023-01-02 21:03 DEBUG idom 0 from label 28
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG find_def_from_bottom label 44
2023-01-02 21:03 DEBUG incoming_def ClosedPostionprofit.3 = $68binary_add.11
2023-01-02 21:03 DEBUG replaced with: $74return_value.1 = cast(value=ClosedPostionprofit.4)
2023-01-02 21:03 DEBUG on stmt: return $74return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=241)
           2	LOAD_FAST(arg=1, lineno=241)
           4	LOAD_CONST(arg=1, lineno=241)
           6	COMPARE_OP(arg=2, lineno=241)
           8	POP_JUMP_IF_FALSE(arg=36, lineno=241)
          10	LOAD_FAST(arg=2, lineno=241)
          12	LOAD_CONST(arg=2, lineno=241)
          14	COMPARE_OP(arg=2, lineno=241)
          16	POP_JUMP_IF_FALSE(arg=36, lineno=241)
          18	LOAD_FAST(arg=3, lineno=242)
          20	LOAD_FAST(arg=4, lineno=242)
          22	BINARY_MULTIPLY(arg=None, lineno=242)
          24	LOAD_FAST(arg=5, lineno=242)
          26	LOAD_FAST(arg=4, lineno=242)
          28	BINARY_MULTIPLY(arg=None, lineno=242)
          30	BINARY_SUBTRACT(arg=None, lineno=242)
          32	STORE_FAST(arg=0, lineno=242)
          34	JUMP_FORWARD(arg=4, lineno=242)
>         36	LOAD_CONST(arg=1, lineno=244)
          38	STORE_FAST(arg=0, lineno=244)
>         40	LOAD_FAST(arg=0, lineno=245)
          42	RETURN_VALUE(arg=None, lineno=245)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=241)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=241)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=241)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack ['$marketpostion2.0', '$const4.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=36, lineno=241)
2023-01-02 21:03 DEBUG stack ['$6compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=241)
2023-01-02 21:03 DEBUG stack ['$last_marketpostion10.0', '$const12.1']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=36, lineno=241)
2023-01-02 21:03 DEBUG stack ['$14compare_op.2']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=244)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=38, inst=STORE_FAST(arg=0, lineno=244)
2023-01-02 21:03 DEBUG stack ['$const36.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=242)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=4, lineno=242)
2023-01-02 21:03 DEBUG stack ['$target_price18.0']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=242)
2023-01-02 21:03 DEBUG stack ['$target_price18.0', '$sell_sizes20.1']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=5, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2']
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$last_entryprice24.3', '$sell_sizes26.4']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=BINARY_SUBTRACT(arg=None, lineno=242)
2023-01-02 21:03 DEBUG stack ['$22binary_multiply.2', '$28binary_multiply.5']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=STORE_FAST(arg=0, lineno=242)
2023-01-02 21:03 DEBUG stack ['$30binary_subtract.6']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=JUMP_FORWARD(arg=4, lineno=242)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=245)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=245)
2023-01-02 21:03 DEBUG stack ['$profit40.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=0)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$marketpostion2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 36: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$last_marketpostion10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$last_marketpostion10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 36: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$target_price18.0'}), (20, {'res': '$sell_sizes20.1'}), (22, {'lhs': '$target_price18.0', 'rhs': '$sell_sizes20.1', 'res': '$22binary_multiply.2'}), (24, {'res': '$last_entryprice24.3'}), (26, {'res': '$sell_sizes26.4'}), (28, {'lhs': '$last_entryprice24.3', 'rhs': '$sell_sizes26.4', 'res': '$28binary_multiply.5'}), (30, {'lhs': '$22binary_multiply.2', 'rhs': '$28binary_multiply.5', 'res': '$30binary_subtract.6'}), (32, {'value': '$30binary_subtract.6'}), (34, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$profit40.0'}), (42, {'retval': '$profit40.0', 'castval': '$42return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    profit = arg(0, name=profit)             ['profit']
    marketpostion = arg(1, name=marketpostion) ['marketpostion']
    last_marketpostion = arg(2, name=last_marketpostion) ['last_marketpostion']
    target_price = arg(3, name=target_price) ['target_price']
    sell_sizes = arg(4, name=sell_sizes)     ['sell_sizes']
    last_entryprice = arg(5, name=last_entryprice) ['last_entryprice']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = marketpostion == $const4.1 ['$6compare_op.2', '$const4.1', 'marketpostion']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 36                    ['$8pred']
label 10:
    $const12.1 = const(int, 1)               ['$const12.1']
    $14compare_op.2 = last_marketpostion == $const12.1 ['$14compare_op.2', '$const12.1', 'last_marketpostion']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 36                   ['$16pred']
label 18:
    $22binary_multiply.2 = target_price * sell_sizes ['$22binary_multiply.2', 'sell_sizes', 'target_price']
    $28binary_multiply.5 = last_entryprice * sell_sizes ['$28binary_multiply.5', 'last_entryprice', 'sell_sizes']
    profit = $22binary_multiply.2 - $28binary_multiply.5 ['$22binary_multiply.2', '$28binary_multiply.5', 'profit']
    jump 40                                  []
label 36:
    profit = const(int, 0)                   ['profit']
    jump 40                                  []
label 40:
    $42return_value.1 = cast(value=profit)   ['$42return_value.1', 'profit']
    return $42return_value.1                 ['$42return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d017f0>
2023-01-02 21:03 DEBUG on stmt: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 36
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d017f0>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 36
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d017f0>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-01-02 21:03 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-01-02 21:03 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d017f0>
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d017f0>
2023-01-02 21:03 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG on stmt: return $42return_value.1
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x7f0196e38940>],
             '$16pred': [<numba.core.ir.Assign object at 0x7f0196e38be0>],
             '$22binary_multiply.2': [<numba.core.ir.Assign object at 0x7f01969320a0>],
             '$28binary_multiply.5': [<numba.core.ir.Assign object at 0x7f0196932460>],
             '$42return_value.1': [<numba.core.ir.Assign object at 0x7f0196932b20>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0196e381c0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0196e38460>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7f0196e387c0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0196e38040>],
             'bool16': [<numba.core.ir.Assign object at 0x7f0196e38ac0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0196e38340>],
             'last_entryprice': [<numba.core.ir.Assign object at 0x7f0196e4ad60>],
             'last_marketpostion': [<numba.core.ir.Assign object at 0x7f0196e4aa00>],
             'marketpostion': [<numba.core.ir.Assign object at 0x7f0196e4a8e0>],
             'profit': [<numba.core.ir.Assign object at 0x7f0196e4a7c0>,
                        <numba.core.ir.Assign object at 0x7f01969325e0>,
                        <numba.core.ir.Assign object at 0x7f0196932640>],
             'sell_sizes': [<numba.core.ir.Assign object at 0x7f0196e4ac40>],
             'target_price': [<numba.core.ir.Assign object at 0x7f0196e4ab20>]})
2023-01-02 21:03 DEBUG SSA violators {'profit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var profit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG first assign: profit
2023-01-02 21:03 DEBUG replaced with: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-01-02 21:03 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-01-02 21:03 DEBUG on stmt: profit = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG replaced with: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: profit = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: profit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG on stmt: return $42return_value.1
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196c1fe50>],
             18: [<numba.core.ir.Assign object at 0x7f019700e5e0>],
             36: [<numba.core.ir.Assign object at 0x7f0196f112e0>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: profit = arg(0, name=profit)
2023-01-02 21:03 DEBUG on stmt: marketpostion = arg(1, name=marketpostion)
2023-01-02 21:03 DEBUG on stmt: last_marketpostion = arg(2, name=last_marketpostion)
2023-01-02 21:03 DEBUG on stmt: target_price = arg(3, name=target_price)
2023-01-02 21:03 DEBUG on stmt: sell_sizes = arg(4, name=sell_sizes)
2023-01-02 21:03 DEBUG on stmt: last_entryprice = arg(5, name=last_entryprice)
2023-01-02 21:03 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $6compare_op.2 = marketpostion == $const4.1
2023-01-02 21:03 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $8pred, 10, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 10
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: $const12.1 = const(int, 1)
2023-01-02 21:03 DEBUG on stmt: $14compare_op.2 = last_marketpostion == $const12.1
2023-01-02 21:03 DEBUG on stmt: bool16 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, nb.py:241),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $16pred, 18, 36
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 18
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: $22binary_multiply.2 = target_price * sell_sizes
2023-01-02 21:03 DEBUG on stmt: $28binary_multiply.5 = last_entryprice * sell_sizes
2023-01-02 21:03 DEBUG on stmt: profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 36
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: profit.2 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: jump 40
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196d01f10>
2023-01-02 21:03 DEBUG on stmt: $42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG find_def var='profit' stmt=$42return_value.1 = cast(value=profit)
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG insert phi node profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 18
2023-01-02 21:03 DEBUG incoming_def profit.1 = $22binary_multiply.2 - $28binary_multiply.5
2023-01-02 21:03 DEBUG find_def_from_bottom label 36
2023-01-02 21:03 DEBUG incoming_def profit.2 = const(int, 0)
2023-01-02 21:03 DEBUG replaced with: $42return_value.1 = cast(value=profit.3)
2023-01-02 21:03 DEBUG on stmt: return $42return_value.1
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=438)
           2	LOAD_FAST(arg=2, lineno=438)
           4	LOAD_FAST(arg=3, lineno=438)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=4, lineno=1)
          12	LOAD_FAST(arg=1, lineno=472)
          14	LOAD_FAST(arg=0, lineno=475)
          16	BINARY_SUBTRACT(arg=None, lineno=1)
          18	LOAD_CONST(arg=1, lineno=1)
          20	COMPARE_OP(arg=4, lineno=1)
          22	BINARY_AND(arg=None, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=438)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=438)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=3, lineno=438)
2023-01-02 21:03 DEBUG stack ['$high_array_12.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$high_array_12.0', '$highestarr_14.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-02 21:03 DEBUG stack ['$6binary_subtract.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-02 21:03 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=472)
2023-01-02 21:03 DEBUG stack ['$10compare_op.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=475)
2023-01-02 21:03 DEBUG stack ['$10compare_op.4', '$ATR_short_112.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$10compare_op.4', '$ATR_short_112.5', '$ATR_long_114.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-02 21:03 DEBUG stack ['$10compare_op.4', '$16binary_subtract.7']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-02 21:03 DEBUG stack ['$10compare_op.4', '$16binary_subtract.7', '$const18.8']
2023-01-02 21:03 DEBUG dispatch pc=22, inst=BINARY_AND(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$10compare_op.4', '$20compare_op.9']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$22binary_and.10']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$high_array_12.0'}), (4, {'res': '$highestarr_14.1'}), (6, {'lhs': '$high_array_12.0', 'rhs': '$highestarr_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'res': '$ATR_short_112.5'}), (14, {'res': '$ATR_long_114.6'}), (16, {'lhs': '$ATR_short_112.5', 'rhs': '$ATR_long_114.6', 'res': '$16binary_subtract.7'}), (18, {'res': '$const18.8'}), (20, {'lhs': '$16binary_subtract.7', 'rhs': '$const18.8', 'res': '$20compare_op.9'}), (22, {'lhs': '$10compare_op.4', 'rhs': '$20compare_op.9', 'res': '$22binary_and.10'}), (24, {'retval': '$22binary_and.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    ATR_long_1 = arg(0, name=ATR_long_1)     ['ATR_long_1']
    ATR_short_1 = arg(1, name=ATR_short_1)   ['ATR_short_1']
    high_array_1 = arg(2, name=high_array_1) ['high_array_1']
    highestarr_1 = arg(3, name=highestarr_1) ['highestarr_1']
    $6binary_subtract.2 = high_array_1 - highestarr_1 ['$6binary_subtract.2', 'high_array_1', 'highestarr_1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 > $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $16binary_subtract.7 = ATR_short_1 - ATR_long_1 ['$16binary_subtract.7', 'ATR_long_1', 'ATR_short_1']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20compare_op.9 = $16binary_subtract.7 > $const18.8 ['$16binary_subtract.7', '$20compare_op.9', '$const18.8']
    $22binary_and.10 = $10compare_op.4 & $20compare_op.9 ['$10compare_op.4', '$20compare_op.9', '$22binary_and.10']
    $24return_value.11 = cast(value=$22binary_and.10) ['$22binary_and.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196c86eb0>
2023-01-02 21:03 DEBUG on stmt: ATR_long_1 = arg(0, name=ATR_long_1)
2023-01-02 21:03 DEBUG on stmt: ATR_short_1 = arg(1, name=ATR_short_1)
2023-01-02 21:03 DEBUG on stmt: high_array_1 = arg(2, name=high_array_1)
2023-01-02 21:03 DEBUG on stmt: highestarr_1 = arg(3, name=highestarr_1)
2023-01-02 21:03 DEBUG on stmt: $6binary_subtract.2 = high_array_1 - highestarr_1
2023-01-02 21:03 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 > $const8.3
2023-01-02 21:03 DEBUG on stmt: $16binary_subtract.7 = ATR_short_1 - ATR_long_1
2023-01-02 21:03 DEBUG on stmt: $const18.8 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $20compare_op.9 = $16binary_subtract.7 > $const18.8
2023-01-02 21:03 DEBUG on stmt: $22binary_and.10 = $10compare_op.4 & $20compare_op.9
2023-01-02 21:03 DEBUG on stmt: $24return_value.11 = cast(value=$22binary_and.10)
2023-01-02 21:03 DEBUG on stmt: return $24return_value.11
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x7f019681f970>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x7f019681fd30>],
             '$20compare_op.9': [<numba.core.ir.Assign object at 0x7f0196d46070>],
             '$22binary_and.10': [<numba.core.ir.Assign object at 0x7f0196d461f0>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x7f0196d46370>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f019681f670>],
             '$const18.8': [<numba.core.ir.Assign object at 0x7f019681feb0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7f019681f7f0>],
             'ATR_long_1': [<numba.core.ir.Assign object at 0x7f0196cf35b0>],
             'ATR_short_1': [<numba.core.ir.Assign object at 0x7f0196cf31f0>],
             'high_array_1': [<numba.core.ir.Assign object at 0x7f019681f190>],
             'highestarr_1': [<numba.core.ir.Assign object at 0x7f019681f2b0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=438)
           2	LOAD_FAST(arg=0, lineno=438)
           4	LOAD_FAST(arg=1, lineno=438)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=0, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=438)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=438)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=438)
2023-01-02 21:03 DEBUG stack ['$low_array_12.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$low_array_12.0', '$lowestarr_14.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-02 21:03 DEBUG stack ['$6binary_subtract.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=0, lineno=1)
2023-01-02 21:03 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-02 21:03 DEBUG stack ['$10compare_op.4']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-02 21:03 DEBUG keep phismap: {}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$low_array_12.0'}), (4, {'res': '$lowestarr_14.1'}), (6, {'lhs': '$low_array_12.0', 'rhs': '$lowestarr_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'retval': '$10compare_op.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    low_array_1 = arg(0, name=low_array_1)   ['low_array_1']
    lowestarr_1 = arg(1, name=lowestarr_1)   ['lowestarr_1']
    $6binary_subtract.2 = low_array_1 - lowestarr_1 ['$6binary_subtract.2', 'low_array_1', 'lowestarr_1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 < $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10compare_op.4) ['$10compare_op.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1c70>
2023-01-02 21:03 DEBUG on stmt: low_array_1 = arg(0, name=low_array_1)
2023-01-02 21:03 DEBUG on stmt: lowestarr_1 = arg(1, name=lowestarr_1)
2023-01-02 21:03 DEBUG on stmt: $6binary_subtract.2 = low_array_1 - lowestarr_1
2023-01-02 21:03 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 < $const8.3
2023-01-02 21:03 DEBUG on stmt: $12return_value.5 = cast(value=$10compare_op.4)
2023-01-02 21:03 DEBUG on stmt: return $12return_value.5
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x7f01968ab4f0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f01968ab670>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f01968ab1f0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7f01968ab370>],
             'low_array_1': [<numba.core.ir.Assign object at 0x7f01968b17c0>],
             'lowestarr_1': [<numba.core.ir.Assign object at 0x7f01968b1df0>]})
2023-01-02 21:03 DEBUG SSA violators set()
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=88)
           2	LOAD_GLOBAL(arg=0, lineno=88)
           4	LOAD_ATTR(arg=1, lineno=88)
           6	LOAD_FAST(arg=0, lineno=88)
           8	LOAD_ATTR(arg=2, lineno=88)
          10	LOAD_CONST(arg=1, lineno=88)
          12	BINARY_SUBSCR(arg=None, lineno=88)
          14	LOAD_CONST(arg=2, lineno=88)
          16	CALL_FUNCTION_KW(arg=1, lineno=88)
          18	STORE_FAST(arg=1, lineno=88)
          20	LOAD_CONST(arg=1, lineno=89)
          22	STORE_FAST(arg=2, lineno=89)
          24	LOAD_GLOBAL(arg=3, lineno=90)
          26	LOAD_FAST(arg=0, lineno=90)
          28	LOAD_ATTR(arg=2, lineno=90)
          30	LOAD_CONST(arg=1, lineno=90)
          32	BINARY_SUBSCR(arg=None, lineno=90)
          34	CALL_FUNCTION(arg=1, lineno=90)
          36	GET_ITER(arg=None, lineno=90)
>         38	FOR_ITER(arg=50, lineno=90)
          40	STORE_FAST(arg=3, lineno=90)
          42	LOAD_FAST(arg=0, lineno=91)
          44	LOAD_FAST(arg=3, lineno=91)
          46	BINARY_SUBSCR(arg=None, lineno=91)
          48	LOAD_FAST(arg=2, lineno=91)
          50	COMPARE_OP(arg=4, lineno=91)
          52	POP_JUMP_IF_FALSE(arg=72, lineno=91)
          54	LOAD_FAST(arg=0, lineno=92)
          56	LOAD_FAST(arg=3, lineno=92)
          58	BINARY_SUBSCR(arg=None, lineno=92)
          60	STORE_FAST(arg=2, lineno=92)
          62	LOAD_CONST(arg=1, lineno=93)
          64	LOAD_FAST(arg=1, lineno=93)
          66	LOAD_FAST(arg=3, lineno=93)
          68	STORE_SUBSCR(arg=None, lineno=93)
          70	JUMP_ABSOLUTE(arg=38, lineno=93)
>         72	LOAD_FAST(arg=0, lineno=95)
          74	LOAD_FAST(arg=3, lineno=95)
          76	BINARY_SUBSCR(arg=None, lineno=95)
          78	LOAD_FAST(arg=2, lineno=95)
          80	BINARY_SUBTRACT(arg=None, lineno=95)
          82	LOAD_FAST(arg=1, lineno=95)
          84	LOAD_FAST(arg=3, lineno=95)
          86	STORE_SUBSCR(arg=None, lineno=95)
          88	JUMP_ABSOLUTE(arg=38, lineno=95)
>         90	LOAD_FAST(arg=1, lineno=96)
          92	RETURN_VALUE(arg=None, lineno=96)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=88)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=88)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=88)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=88)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=88)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$ClosedPostionprofit6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=88)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=88)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=88)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=CALL_FUNCTION_KW(arg=1, lineno=88)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5', '$const14.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=STORE_FAST(arg=1, lineno=88)
2023-01-02 21:03 DEBUG stack ['$16call_function_kw.7']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=89)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=22, inst=STORE_FAST(arg=2, lineno=89)
2023-01-02 21:03 DEBUG stack ['$const20.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_GLOBAL(arg=3, lineno=90)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=90)
2023-01-02 21:03 DEBUG stack ['$24load_global.9']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_ATTR(arg=2, lineno=90)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$ClosedPostionprofit26.10']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=90)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$28load_attr.11']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=90)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$28load_attr.11', '$const30.12']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=90)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$32binary_subscr.13']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=GET_ITER(arg=None, lineno=90)
2023-01-02 21:03 DEBUG stack ['$34call_function.14']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=38, stack=('$36get_iter.15',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi38.0']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=FOR_ITER(arg=50, lineno=90)
2023-01-02 21:03 DEBUG stack ['$phi38.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=96)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=96)
2023-01-02 21:03 DEBUG stack ['$DD_array90.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi40.0', '$phi40.1']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=STORE_FAST(arg=3, lineno=90)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$phi40.1']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=91)
2023-01-02 21:03 DEBUG stack ['$phi40.0']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=91)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$ClosedPostionprofit42.2']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=91)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$ClosedPostionprofit42.2', '$i44.3']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=91)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$46binary_subscr.4']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=COMPARE_OP(arg=4, lineno=91)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$46binary_subscr.4', '$max_profit48.5']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=72, lineno=91)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$50compare_op.6']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=('$phi40.0',), blockstack=(), npush=0), Edge(pc=72, stack=('$phi40.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=1), State(pc_initial=72 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi54.0']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=92)
2023-01-02 21:03 DEBUG stack ['$phi54.0']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=3, lineno=92)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$ClosedPostionprofit54.1']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=92)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$ClosedPostionprofit54.1', '$i56.2']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=STORE_FAST(arg=2, lineno=92)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$58binary_subscr.3']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=93)
2023-01-02 21:03 DEBUG stack ['$phi54.0']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=93)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$const62.4']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=93)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$const62.4', '$DD_array64.5']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=93)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$const62.4', '$DD_array64.5', '$i66.6']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=JUMP_ABSOLUTE(arg=38, lineno=93)
2023-01-02 21:03 DEBUG stack ['$phi54.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=38, stack=('$phi54.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi72.0']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0']
2023-01-02 21:03 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=3, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$ClosedPostionprofit72.1']
2023-01-02 21:03 DEBUG dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$ClosedPostionprofit72.1', '$i74.2']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3']
2023-01-02 21:03 DEBUG dispatch pc=80, inst=BINARY_SUBTRACT(arg=None, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$76binary_subscr.3', '$max_profit78.4']
2023-01-02 21:03 DEBUG dispatch pc=82, inst=LOAD_FAST(arg=1, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$80binary_subtract.5']
2023-01-02 21:03 DEBUG dispatch pc=84, inst=LOAD_FAST(arg=3, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$80binary_subtract.5', '$DD_array82.6']
2023-01-02 21:03 DEBUG dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$80binary_subtract.5', '$DD_array82.6', '$i84.7']
2023-01-02 21:03 DEBUG dispatch pc=88, inst=JUMP_ABSOLUTE(arg=38, lineno=95)
2023-01-02 21:03 DEBUG stack ['$phi72.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=38, stack=('$phi72.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1), State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=54 nstack_initial=1): set(),
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi54.0', State(pc_initial=54 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi72.0': {('$phi40.0', State(pc_initial=40 nstack_initial=2))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi38.0': {('$36get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.15'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$ClosedPostionprofit6.2'}), (8, {'item': '$ClosedPostionprofit6.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$8load_attr.3', 'res': '$12binary_subscr.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$4load_attr.1', 'args': ['$12binary_subscr.5'], 'names': '$const14.6', 'res': '$16call_function_kw.7'}), (18, {'value': '$16call_function_kw.7'}), (20, {'res': '$const20.8'}), (22, {'value': '$const20.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$ClosedPostionprofit26.10'}), (28, {'item': '$ClosedPostionprofit26.10', 'res': '$28load_attr.11'}), (30, {'res': '$const30.12'}), (32, {'index': '$const30.12', 'target': '$28load_attr.11', 'res': '$32binary_subscr.13'}), (34, {'func': '$24load_global.9', 'args': ['$32binary_subscr.13'], 'res': '$34call_function.14'}), (36, {'value': '$34call_function.14', 'res': '$36get_iter.15'})), outgoing_phis={'$phi38.0': '$36get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.15',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 40: ('$phi38.0', '$38for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$ClosedPostionprofit42.2'}), (44, {'res': '$i44.3'}), (46, {'index': '$i44.3', 'target': '$ClosedPostionprofit42.2', 'res': '$46binary_subscr.4'}), (48, {'res': '$max_profit48.5'}), (50, {'lhs': '$46binary_subscr.4', 'rhs': '$max_profit48.5', 'res': '$50compare_op.6'}), (52, {'pred': '$50compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ('$phi40.0',), 72: ('$phi40.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=54 nstack_initial=1):
AdaptBlockInfo(insts=((54, {'res': '$ClosedPostionprofit54.1'}), (56, {'res': '$i56.2'}), (58, {'index': '$i56.2', 'target': '$ClosedPostionprofit54.1', 'res': '$58binary_subscr.3'}), (60, {'value': '$58binary_subscr.3'}), (62, {'res': '$const62.4'}), (64, {'res': '$DD_array64.5'}), (66, {'res': '$i66.6'}), (68, {'target': '$DD_array64.5', 'index': '$i66.6', 'value': '$const62.4'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi54.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$ClosedPostionprofit72.1'}), (74, {'res': '$i74.2'}), (76, {'index': '$i74.2', 'target': '$ClosedPostionprofit72.1', 'res': '$76binary_subscr.3'}), (78, {'res': '$max_profit78.4'}), (80, {'lhs': '$76binary_subscr.3', 'rhs': '$max_profit78.4', 'res': '$80binary_subtract.5'}), (82, {'res': '$DD_array82.6'}), (84, {'res': '$i84.7'}), (86, {'target': '$DD_array82.6', 'index': '$i84.7', 'value': '$80binary_subtract.5'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi72.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$DD_array90.0'}), (92, {'retval': '$DD_array90.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    ClosedPostionprofit = arg(0, name=ClosedPostionprofit) ['ClosedPostionprofit']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape) ['$8load_attr.3', 'ClosedPostionprofit']
    $const10.4 = const(int, 0)               ['$const10.4']
    $12binary_subscr.5 = getitem(value=$8load_attr.3, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$8load_attr.3', '$const10.4']
    DD_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:88))], vararg=None, varkwarg=None, target=None) ['$12binary_subscr.5', '$4load_attr.1', 'DD_array']
    max_profit = const(int, 0)               ['max_profit']
    $24load_global.9 = global(range: <class 'range'>) ['$24load_global.9']
    $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape) ['$28load_attr.11', 'ClosedPostionprofit']
    $const30.12 = const(int, 0)              ['$const30.12']
    $32binary_subscr.13 = getitem(value=$28load_attr.11, index=$const30.12, fn=<built-in function getitem>) ['$28load_attr.11', '$32binary_subscr.13', '$const30.12']
    $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_global.9', '$32binary_subscr.13', '$34call_function.14']
    $36get_iter.15 = getiter(value=$34call_function.14) ['$34call_function.14', '$36get_iter.15']
    $phi38.0 = $36get_iter.15                ['$36get_iter.15', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 90             ['$38for_iter.3']
label 40:
    i = $phi40.1                             ['$phi40.1', 'i']
    $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['$46binary_subscr.4', 'ClosedPostionprofit', 'i']
    $50compare_op.6 = $46binary_subscr.4 > max_profit ['$46binary_subscr.4', '$50compare_op.6', 'max_profit']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:91),), kws=(), vararg=None, varkwarg=None, target=None) ['$50compare_op.6', '$52pred', 'bool52']
    branch $52pred, 54, 72                   ['$52pred']
label 54:
    max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['ClosedPostionprofit', 'i', 'max_profit']
    $const62.4 = const(int, 0)               ['$const62.4']
    DD_array[i] = $const62.4                 ['$const62.4', 'DD_array', 'i']
    jump 38                                  []
label 72:
    $76binary_subscr.3 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['$76binary_subscr.3', 'ClosedPostionprofit', 'i']
    $80binary_subtract.5 = $76binary_subscr.3 - max_profit ['$76binary_subscr.3', '$80binary_subtract.5', 'max_profit']
    DD_array[i] = $80binary_subtract.5       ['$80binary_subtract.5', 'DD_array', 'i']
    jump 38                                  []
label 90:
    $92return_value.1 = cast(value=DD_array) ['$92return_value.1', 'DD_array']
    return $92return_value.1                 ['$92return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1f40>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: DD_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:88))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: max_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-02 21:03 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1f40>
2023-01-02 21:03 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $38for_iter.3, 40, 90
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1f40>
2023-01-02 21:03 DEBUG on stmt: i = $phi40.1
2023-01-02 21:03 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $52pred, 54, 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1f40>
2023-01-02 21:03 DEBUG on stmt: max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: DD_array[i] = $const62.4
2023-01-02 21:03 DEBUG on stmt: jump 91
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1f40>
2023-01-02 21:03 DEBUG on stmt: $76binary_subscr.3 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $80binary_subtract.5 = $76binary_subscr.3 - max_profit
2023-01-02 21:03 DEBUG on stmt: DD_array[i] = $80binary_subtract.5
2023-01-02 21:03 DEBUG on stmt: jump 91
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 90
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1f40>
2023-01-02 21:03 DEBUG on stmt: $92return_value.1 = cast(value=DD_array)
2023-01-02 21:03 DEBUG on stmt: return $92return_value.1
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 91
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f01968b1f40>
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7f01968b1ac0>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0x7f019701d550>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0x7f019701d2e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196d46a00>],
             '$32binary_subscr.13': [<numba.core.ir.Assign object at 0x7f01968b1520>],
             '$34call_function.14': [<numba.core.ir.Assign object at 0x7f0196ea7eb0>],
             '$36get_iter.15': [<numba.core.ir.Assign object at 0x7f0196d91490>],
             '$38for_iter.1': [<numba.core.ir.Assign object at 0x7f0196d91d00>],
             '$38for_iter.2': [<numba.core.ir.Assign object at 0x7f0196d9ba60>],
             '$38for_iter.3': [<numba.core.ir.Assign object at 0x7f0196d9bee0>],
             '$46binary_subscr.4': [<numba.core.ir.Assign object at 0x7f0196c60ee0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f0196d46d30>],
             '$50compare_op.6': [<numba.core.ir.Assign object at 0x7f0196c60760>],
             '$52pred': [<numba.core.ir.Assign object at 0x7f0196c607c0>],
             '$76binary_subscr.3': [<numba.core.ir.Assign object at 0x7f0196d17730>],
             '$80binary_subtract.5': [<numba.core.ir.Assign object at 0x7f0196d17ac0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f0197043430>],
             '$92return_value.1': [<numba.core.ir.Assign object at 0x7f01968b1220>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7f0196efca00>],
             '$const30.12': [<numba.core.ir.Assign object at 0x7f0196ea70a0>],
             '$const62.4': [<numba.core.ir.Assign object at 0x7f0196d17b20>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x7f0196efc220>],
             '$phi40.1': [<numba.core.ir.Assign object at 0x7f0196d91c10>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x7f0196a422e0>],
             'DD_array': [<numba.core.ir.Assign object at 0x7f019695c940>],
             'bool52': [<numba.core.ir.Assign object at 0x7f0196c60f10>],
             'i': [<numba.core.ir.Assign object at 0x7f0196d9beb0>],
             'max_profit': [<numba.core.ir.Assign object at 0x7f019695cd30>,
                            <numba.core.ir.Assign object at 0x7f0196d173a0>]})
2023-01-02 21:03 DEBUG SSA violators {'max_profit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var max_profit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: DD_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:88))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: max_profit = const(int, 0)
2023-01-02 21:03 DEBUG first assign: max_profit
2023-01-02 21:03 DEBUG replaced with: max_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-02 21:03 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $38for_iter.3, 40, 90
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: i = $phi40.1
2023-01-02 21:03 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $52pred, 54, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG replaced with: max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: DD_array[i] = $const62.4
2023-01-02 21:03 DEBUG on stmt: jump 91
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: $76binary_subscr.3 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $80binary_subtract.5 = $76binary_subscr.3 - max_profit
2023-01-02 21:03 DEBUG on stmt: DD_array[i] = $80binary_subtract.5
2023-01-02 21:03 DEBUG on stmt: jump 91
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 90
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: $92return_value.1 = cast(value=DD_array)
2023-01-02 21:03 DEBUG on stmt: return $92return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 91
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f01968b1c10>],
             54: [<numba.core.ir.Assign object at 0x7f01968b1a30>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: DD_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:88))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: max_profit = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-02 21:03 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $38for_iter.3, 40, 90
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: i = $phi40.1
2023-01-02 21:03 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG find_def var='max_profit' stmt=$50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG idom 38 from label 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 38
2023-01-02 21:03 DEBUG find_def_from_top label 38
2023-01-02 21:03 DEBUG insert phi node max_profit.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def max_profit = const(int, 0)
2023-01-02 21:03 DEBUG find_def_from_bottom label 91
2023-01-02 21:03 DEBUG find_def_from_top label 91
2023-01-02 21:03 DEBUG insert phi node max_profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 91
2023-01-02 21:03 DEBUG find_def_from_bottom label 72
2023-01-02 21:03 DEBUG find_def_from_top label 72
2023-01-02 21:03 DEBUG idom 40 from label 72
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG idom 38 from label 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 38
2023-01-02 21:03 DEBUG incoming_def max_profit.2 = phi(incoming_values=[Var(max_profit, nb.py:89)], incoming_blocks=[0])
2023-01-02 21:03 DEBUG find_def_from_bottom label 54
2023-01-02 21:03 DEBUG incoming_def max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG incoming_def max_profit.3 = phi(incoming_values=[Var(max_profit.2, nb.py:90), Var(max_profit.1, nb.py:92)], incoming_blocks=[72, 54])
2023-01-02 21:03 DEBUG replaced with: $50compare_op.6 = $46binary_subscr.4 > max_profit.2
2023-01-02 21:03 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $52pred, 54, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: DD_array[i] = $const62.4
2023-01-02 21:03 DEBUG on stmt: jump 91
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: $76binary_subscr.3 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $80binary_subtract.5 = $76binary_subscr.3 - max_profit
2023-01-02 21:03 DEBUG find_def var='max_profit' stmt=$80binary_subtract.5 = $76binary_subscr.3 - max_profit
2023-01-02 21:03 DEBUG find_def_from_top label 72
2023-01-02 21:03 DEBUG idom 40 from label 72
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG idom 38 from label 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 38
2023-01-02 21:03 DEBUG replaced with: $80binary_subtract.5 = $76binary_subscr.3 - max_profit.2
2023-01-02 21:03 DEBUG on stmt: DD_array[i] = $80binary_subtract.5
2023-01-02 21:03 DEBUG on stmt: jump 91
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 90
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: $92return_value.1 = cast(value=DD_array)
2023-01-02 21:03 DEBUG on stmt: return $92return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 91
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196a42af0>
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=74)
           2	LOAD_GLOBAL(arg=0, lineno=74)
           4	LOAD_ATTR(arg=1, lineno=74)
           6	LOAD_FAST(arg=0, lineno=74)
           8	LOAD_ATTR(arg=2, lineno=74)
          10	LOAD_CONST(arg=1, lineno=74)
          12	BINARY_SUBSCR(arg=None, lineno=74)
          14	LOAD_CONST(arg=2, lineno=74)
          16	CALL_FUNCTION_KW(arg=1, lineno=74)
          18	STORE_FAST(arg=2, lineno=74)
          20	LOAD_FAST(arg=1, lineno=75)
          22	STORE_FAST(arg=3, lineno=75)
          24	LOAD_GLOBAL(arg=3, lineno=76)
          26	LOAD_FAST(arg=0, lineno=76)
          28	LOAD_ATTR(arg=2, lineno=76)
          30	LOAD_CONST(arg=1, lineno=76)
          32	BINARY_SUBSCR(arg=None, lineno=76)
          34	CALL_FUNCTION(arg=1, lineno=76)
          36	GET_ITER(arg=None, lineno=76)
>         38	FOR_ITER(arg=58, lineno=76)
          40	STORE_FAST(arg=4, lineno=76)
          42	LOAD_FAST(arg=0, lineno=77)
          44	LOAD_FAST(arg=4, lineno=77)
          46	BINARY_SUBSCR(arg=None, lineno=77)
          48	LOAD_FAST(arg=3, lineno=77)
          50	COMPARE_OP(arg=4, lineno=77)
          52	POP_JUMP_IF_FALSE(arg=72, lineno=77)
          54	LOAD_FAST(arg=0, lineno=78)
          56	LOAD_FAST(arg=4, lineno=78)
          58	BINARY_SUBSCR(arg=None, lineno=78)
          60	STORE_FAST(arg=3, lineno=78)
          62	LOAD_CONST(arg=1, lineno=79)
          64	LOAD_FAST(arg=2, lineno=79)
          66	LOAD_FAST(arg=4, lineno=79)
          68	STORE_SUBSCR(arg=None, lineno=79)
          70	JUMP_ABSOLUTE(arg=38, lineno=79)
>         72	LOAD_CONST(arg=3, lineno=81)
          74	LOAD_FAST(arg=0, lineno=81)
          76	LOAD_FAST(arg=4, lineno=81)
          78	BINARY_SUBSCR(arg=None, lineno=81)
          80	LOAD_FAST(arg=3, lineno=82)
          82	BINARY_SUBTRACT(arg=None, lineno=81)
          84	BINARY_MULTIPLY(arg=None, lineno=81)
          86	LOAD_FAST(arg=3, lineno=82)
          88	BINARY_TRUE_DIVIDE(arg=None, lineno=81)
          90	LOAD_FAST(arg=2, lineno=81)
          92	LOAD_FAST(arg=4, lineno=81)
          94	STORE_SUBSCR(arg=None, lineno=81)
          96	JUMP_ABSOLUTE(arg=38, lineno=81)
>         98	LOAD_FAST(arg=2, lineno=83)
         100	RETURN_VALUE(arg=None, lineno=83)
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=74)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=74)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=74)
2023-01-02 21:03 DEBUG stack ['$2load_global.0']
2023-01-02 21:03 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=74)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1']
2023-01-02 21:03 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=74)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$ClosedPostionprofit6.2']
2023-01-02 21:03 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=74)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-02 21:03 DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=74)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
2023-01-02 21:03 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=74)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5']
2023-01-02 21:03 DEBUG dispatch pc=16, inst=CALL_FUNCTION_KW(arg=1, lineno=74)
2023-01-02 21:03 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5', '$const14.6']
2023-01-02 21:03 DEBUG dispatch pc=18, inst=STORE_FAST(arg=2, lineno=74)
2023-01-02 21:03 DEBUG stack ['$16call_function_kw.7']
2023-01-02 21:03 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=75)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=22, inst=STORE_FAST(arg=3, lineno=75)
2023-01-02 21:03 DEBUG stack ['$init_cash20.8']
2023-01-02 21:03 DEBUG dispatch pc=24, inst=LOAD_GLOBAL(arg=3, lineno=76)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=76)
2023-01-02 21:03 DEBUG stack ['$24load_global.9']
2023-01-02 21:03 DEBUG dispatch pc=28, inst=LOAD_ATTR(arg=2, lineno=76)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$ClosedPostionprofit26.10']
2023-01-02 21:03 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=76)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$28load_attr.11']
2023-01-02 21:03 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=76)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$28load_attr.11', '$const30.12']
2023-01-02 21:03 DEBUG dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=76)
2023-01-02 21:03 DEBUG stack ['$24load_global.9', '$32binary_subscr.13']
2023-01-02 21:03 DEBUG dispatch pc=36, inst=GET_ITER(arg=None, lineno=76)
2023-01-02 21:03 DEBUG stack ['$34call_function.14']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=38, stack=('$36get_iter.15',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi38.0']
2023-01-02 21:03 DEBUG dispatch pc=38, inst=FOR_ITER(arg=58, lineno=76)
2023-01-02 21:03 DEBUG stack ['$phi38.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: []
2023-01-02 21:03 DEBUG dispatch pc=98, inst=LOAD_FAST(arg=2, lineno=83)
2023-01-02 21:03 DEBUG stack []
2023-01-02 21:03 DEBUG dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=83)
2023-01-02 21:03 DEBUG stack ['$DD_per_array98.0']
2023-01-02 21:03 DEBUG end state. edges=[]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=40 nstack_initial=2)])
2023-01-02 21:03 DEBUG stack: ['$phi40.0', '$phi40.1']
2023-01-02 21:03 DEBUG dispatch pc=40, inst=STORE_FAST(arg=4, lineno=76)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$phi40.1']
2023-01-02 21:03 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=77)
2023-01-02 21:03 DEBUG stack ['$phi40.0']
2023-01-02 21:03 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=77)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$ClosedPostionprofit42.2']
2023-01-02 21:03 DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=77)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$ClosedPostionprofit42.2', '$i44.3']
2023-01-02 21:03 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=77)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$46binary_subscr.4']
2023-01-02 21:03 DEBUG dispatch pc=50, inst=COMPARE_OP(arg=4, lineno=77)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$46binary_subscr.4', '$max_profit48.5']
2023-01-02 21:03 DEBUG dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=72, lineno=77)
2023-01-02 21:03 DEBUG stack ['$phi40.0', '$50compare_op.6']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=54, stack=('$phi40.0',), blockstack=(), npush=0), Edge(pc=72, stack=('$phi40.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=54 nstack_initial=1), State(pc_initial=72 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi54.0']
2023-01-02 21:03 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=78)
2023-01-02 21:03 DEBUG stack ['$phi54.0']
2023-01-02 21:03 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=78)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$ClosedPostionprofit54.1']
2023-01-02 21:03 DEBUG dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=78)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$ClosedPostionprofit54.1', '$i56.2']
2023-01-02 21:03 DEBUG dispatch pc=60, inst=STORE_FAST(arg=3, lineno=78)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$58binary_subscr.3']
2023-01-02 21:03 DEBUG dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=79)
2023-01-02 21:03 DEBUG stack ['$phi54.0']
2023-01-02 21:03 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=79)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$const62.4']
2023-01-02 21:03 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=79)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$const62.4', '$DD_per_array64.5']
2023-01-02 21:03 DEBUG dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=79)
2023-01-02 21:03 DEBUG stack ['$phi54.0', '$const62.4', '$DD_per_array64.5', '$i66.6']
2023-01-02 21:03 DEBUG dispatch pc=70, inst=JUMP_ABSOLUTE(arg=38, lineno=79)
2023-01-02 21:03 DEBUG stack ['$phi54.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=38, stack=('$phi54.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG stack: ['$phi72.0']
2023-01-02 21:03 DEBUG dispatch pc=72, inst=LOAD_CONST(arg=3, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0']
2023-01-02 21:03 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=0, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$const72.1']
2023-01-02 21:03 DEBUG dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$const72.1', '$ClosedPostionprofit74.2']
2023-01-02 21:03 DEBUG dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$const72.1', '$ClosedPostionprofit74.2', '$i76.3']
2023-01-02 21:03 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=82)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$const72.1', '$78binary_subscr.4']
2023-01-02 21:03 DEBUG dispatch pc=82, inst=BINARY_SUBTRACT(arg=None, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$const72.1', '$78binary_subscr.4', '$max_profit80.5']
2023-01-02 21:03 DEBUG dispatch pc=84, inst=BINARY_MULTIPLY(arg=None, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$const72.1', '$82binary_subtract.6']
2023-01-02 21:03 DEBUG dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=82)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$84binary_multiply.7']
2023-01-02 21:03 DEBUG dispatch pc=88, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$84binary_multiply.7', '$max_profit86.8']
2023-01-02 21:03 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$88binary_true_divide.9']
2023-01-02 21:03 DEBUG dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$88binary_true_divide.9', '$DD_per_array90.10']
2023-01-02 21:03 DEBUG dispatch pc=94, inst=STORE_SUBSCR(arg=None, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0', '$88binary_true_divide.9', '$DD_per_array90.10', '$i92.11']
2023-01-02 21:03 DEBUG dispatch pc=96, inst=JUMP_ABSOLUTE(arg=38, lineno=81)
2023-01-02 21:03 DEBUG stack ['$phi72.0']
2023-01-02 21:03 DEBUG end state. edges=[Edge(pc=38, stack=('$phi72.0',), blockstack=(), npush=0)]
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1), State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1)])
2023-01-02 21:03 DEBUG -------------------------Prune PHIs-------------------------
2023-01-02 21:03 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=54 nstack_initial=1): set(),
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=0): set()})
2023-01-02 21:03 DEBUG defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
2023-01-02 21:03 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi54.0', State(pc_initial=54 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi72.0': {('$phi40.0', State(pc_initial=40 nstack_initial=2))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-02 21:03 DEBUG keep phismap: {'$phi38.0': {('$36get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
2023-01-02 21:03 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.15'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
2023-01-02 21:03 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-02 21:03 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$ClosedPostionprofit6.2'}), (8, {'item': '$ClosedPostionprofit6.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$8load_attr.3', 'res': '$12binary_subscr.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$4load_attr.1', 'args': ['$12binary_subscr.5'], 'names': '$const14.6', 'res': '$16call_function_kw.7'}), (18, {'value': '$16call_function_kw.7'}), (20, {'res': '$init_cash20.8'}), (22, {'value': '$init_cash20.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$ClosedPostionprofit26.10'}), (28, {'item': '$ClosedPostionprofit26.10', 'res': '$28load_attr.11'}), (30, {'res': '$const30.12'}), (32, {'index': '$const30.12', 'target': '$28load_attr.11', 'res': '$32binary_subscr.13'}), (34, {'func': '$24load_global.9', 'args': ['$32binary_subscr.13'], 'res': '$34call_function.14'}), (36, {'value': '$34call_function.14', 'res': '$36get_iter.15'})), outgoing_phis={'$phi38.0': '$36get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.15',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 40: ('$phi38.0', '$38for_iter.2')})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$ClosedPostionprofit42.2'}), (44, {'res': '$i44.3'}), (46, {'index': '$i44.3', 'target': '$ClosedPostionprofit42.2', 'res': '$46binary_subscr.4'}), (48, {'res': '$max_profit48.5'}), (50, {'lhs': '$46binary_subscr.4', 'rhs': '$max_profit48.5', 'res': '$50compare_op.6'}), (52, {'pred': '$50compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ('$phi40.0',), 72: ('$phi40.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=54 nstack_initial=1):
AdaptBlockInfo(insts=((54, {'res': '$ClosedPostionprofit54.1'}), (56, {'res': '$i56.2'}), (58, {'index': '$i56.2', 'target': '$ClosedPostionprofit54.1', 'res': '$58binary_subscr.3'}), (60, {'value': '$58binary_subscr.3'}), (62, {'res': '$const62.4'}), (64, {'res': '$DD_per_array64.5'}), (66, {'res': '$i66.6'}), (68, {'target': '$DD_per_array64.5', 'index': '$i66.6', 'value': '$const62.4'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi54.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$const72.1'}), (74, {'res': '$ClosedPostionprofit74.2'}), (76, {'res': '$i76.3'}), (78, {'index': '$i76.3', 'target': '$ClosedPostionprofit74.2', 'res': '$78binary_subscr.4'}), (80, {'res': '$max_profit80.5'}), (82, {'lhs': '$78binary_subscr.4', 'rhs': '$max_profit80.5', 'res': '$82binary_subtract.6'}), (84, {'lhs': '$const72.1', 'rhs': '$82binary_subtract.6', 'res': '$84binary_multiply.7'}), (86, {'res': '$max_profit86.8'}), (88, {'lhs': '$84binary_multiply.7', 'rhs': '$max_profit86.8', 'res': '$88binary_true_divide.9'}), (90, {'res': '$DD_per_array90.10'}), (92, {'res': '$i92.11'}), (94, {'target': '$DD_per_array90.10', 'index': '$i92.11', 'value': '$88binary_true_divide.9'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi72.0',)})
2023-01-02 21:03 DEBUG block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$DD_per_array98.0'}), (100, {'retval': '$DD_per_array98.0', 'castval': '$100return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-02 21:03 DEBUG label 0:
    ClosedPostionprofit = arg(0, name=ClosedPostionprofit) ['ClosedPostionprofit']
    init_cash = arg(1, name=init_cash)       ['init_cash']
    $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape) ['$8load_attr.3', 'ClosedPostionprofit']
    $const10.4 = const(int, 0)               ['$const10.4']
    $12binary_subscr.5 = getitem(value=$8load_attr.3, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$8load_attr.3', '$const10.4']
    DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None) ['$12binary_subscr.5', '$4load_attr.1', 'DD_per_array']
    max_profit = init_cash                   ['init_cash', 'max_profit']
    $24load_global.9 = global(range: <class 'range'>) ['$24load_global.9']
    $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape) ['$28load_attr.11', 'ClosedPostionprofit']
    $const30.12 = const(int, 0)              ['$const30.12']
    $32binary_subscr.13 = getitem(value=$28load_attr.11, index=$const30.12, fn=<built-in function getitem>) ['$28load_attr.11', '$32binary_subscr.13', '$const30.12']
    $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_global.9', '$32binary_subscr.13', '$34call_function.14']
    $36get_iter.15 = getiter(value=$34call_function.14) ['$34call_function.14', '$36get_iter.15']
    $phi38.0 = $36get_iter.15                ['$36get_iter.15', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 98             ['$38for_iter.3']
label 40:
    i = $phi40.1                             ['$phi40.1', 'i']
    $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['$46binary_subscr.4', 'ClosedPostionprofit', 'i']
    $50compare_op.6 = $46binary_subscr.4 > max_profit ['$46binary_subscr.4', '$50compare_op.6', 'max_profit']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None) ['$50compare_op.6', '$52pred', 'bool52']
    branch $52pred, 54, 72                   ['$52pred']
label 54:
    max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['ClosedPostionprofit', 'i', 'max_profit']
    $const62.4 = const(int, 0)               ['$const62.4']
    DD_per_array[i] = $const62.4             ['$const62.4', 'DD_per_array', 'i']
    jump 38                                  []
label 72:
    $const72.1 = const(int, 100)             ['$const72.1']
    $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['$78binary_subscr.4', 'ClosedPostionprofit', 'i']
    $82binary_subtract.6 = $78binary_subscr.4 - max_profit ['$78binary_subscr.4', '$82binary_subtract.6', 'max_profit']
    $84binary_multiply.7 = $const72.1 * $82binary_subtract.6 ['$82binary_subtract.6', '$84binary_multiply.7', '$const72.1']
    $88binary_true_divide.9 = $84binary_multiply.7 / max_profit ['$84binary_multiply.7', '$88binary_true_divide.9', 'max_profit']
    DD_per_array[i] = $88binary_true_divide.9 ['$88binary_true_divide.9', 'DD_per_array', 'i']
    jump 38                                  []
label 98:
    $100return_value.1 = cast(value=DD_per_array) ['$100return_value.1', 'DD_per_array']
    return $100return_value.1                ['$100return_value.1']

2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d42250>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(1, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: max_profit = init_cash
2023-01-02 21:03 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-02 21:03 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d42250>
2023-01-02 21:03 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $38for_iter.3, 40, 98
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d42250>
2023-01-02 21:03 DEBUG on stmt: i = $phi40.1
2023-01-02 21:03 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $52pred, 54, 72
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d42250>
2023-01-02 21:03 DEBUG on stmt: max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: DD_per_array[i] = $const62.4
2023-01-02 21:03 DEBUG on stmt: jump 99
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d42250>
2023-01-02 21:03 DEBUG on stmt: $const72.1 = const(int, 100)
2023-01-02 21:03 DEBUG on stmt: $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-02 21:03 DEBUG on stmt: $84binary_multiply.7 = $const72.1 * $82binary_subtract.6
2023-01-02 21:03 DEBUG on stmt: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-02 21:03 DEBUG on stmt: DD_per_array[i] = $88binary_true_divide.9
2023-01-02 21:03 DEBUG on stmt: jump 99
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 98
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d42250>
2023-01-02 21:03 DEBUG on stmt: $100return_value.1 = cast(value=DD_per_array)
2023-01-02 21:03 DEBUG on stmt: return $100return_value.1
2023-01-02 21:03 DEBUG ==== SSA block analysis pass on 99
2023-01-02 21:03 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7f0196d42250>
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG defs defaultdict(<class 'list'>,
            {'$100return_value.1': [<numba.core.ir.Assign object at 0x7f0196d42e20>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x7f0196d42e80>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0x7f0196dec730>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0x7f0196decaf0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0196beb220>],
             '$32binary_subscr.13': [<numba.core.ir.Assign object at 0x7f0196d42490>],
             '$34call_function.14': [<numba.core.ir.Assign object at 0x7f0196ebf700>],
             '$36get_iter.15': [<numba.core.ir.Assign object at 0x7f0197049ee0>],
             '$38for_iter.1': [<numba.core.ir.Assign object at 0x7f01970492e0>],
             '$38for_iter.2': [<numba.core.ir.Assign object at 0x7f0196eb9130>],
             '$38for_iter.3': [<numba.core.ir.Assign object at 0x7f0196eb91f0>],
             '$46binary_subscr.4': [<numba.core.ir.Assign object at 0x7f0196e270d0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f0196ce59d0>],
             '$50compare_op.6': [<numba.core.ir.Assign object at 0x7f0196e273a0>],
             '$52pred': [<numba.core.ir.Assign object at 0x7f01968c8f40>],
             '$78binary_subscr.4': [<numba.core.ir.Assign object at 0x7f0196de5ee0>],
             '$82binary_subtract.6': [<numba.core.ir.Assign object at 0x7f0196f22be0>],
             '$84binary_multiply.7': [<numba.core.ir.Assign object at 0x7f0196f22910>],
             '$88binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f0196d423d0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7f0196cc3c70>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7f0196cc35b0>],
             '$const30.12': [<numba.core.ir.Assign object at 0x7f0196f2f250>],
             '$const62.4': [<numba.core.ir.Assign object at 0x7f0196d46c40>],
             '$const72.1': [<numba.core.ir.Assign object at 0x7f0196e27b20>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x7f0196dec9a0>],
             '$phi40.1': [<numba.core.ir.Assign object at 0x7f0197049580>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x7f0196bebb50>],
             'DD_per_array': [<numba.core.ir.Assign object at 0x7f0196dec580>],
             'bool52': [<numba.core.ir.Assign object at 0x7f01968b12b0>],
             'i': [<numba.core.ir.Assign object at 0x7f0196eb94f0>],
             'init_cash': [<numba.core.ir.Assign object at 0x7f0196beb970>],
             'max_profit': [<numba.core.ir.Assign object at 0x7f0196dec340>,
                            <numba.core.ir.Assign object at 0x7f019683ca90>]})
2023-01-02 21:03 DEBUG SSA violators {'max_profit'}
2023-01-02 21:03 DEBUG Fix SSA violator on var max_profit
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(1, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: max_profit = init_cash
2023-01-02 21:03 DEBUG first assign: max_profit
2023-01-02 21:03 DEBUG replaced with: max_profit = init_cash
2023-01-02 21:03 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-02 21:03 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $38for_iter.3, 40, 98
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: i = $phi40.1
2023-01-02 21:03 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $52pred, 54, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG replaced with: max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: DD_per_array[i] = $const62.4
2023-01-02 21:03 DEBUG on stmt: jump 99
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: $const72.1 = const(int, 100)
2023-01-02 21:03 DEBUG on stmt: $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-02 21:03 DEBUG on stmt: $84binary_multiply.7 = $const72.1 * $82binary_subtract.6
2023-01-02 21:03 DEBUG on stmt: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-02 21:03 DEBUG on stmt: DD_per_array[i] = $88binary_true_divide.9
2023-01-02 21:03 DEBUG on stmt: jump 99
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 98
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: $100return_value.1 = cast(value=DD_per_array)
2023-01-02 21:03 DEBUG on stmt: return $100return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 99
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0196f3d250>],
             54: [<numba.core.ir.Assign object at 0x7f0196f3d850>]})
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 0
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-02 21:03 DEBUG on stmt: init_cash = arg(1, name=init_cash)
2023-01-02 21:03 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/numpy/__init__.py'>)
2023-01-02 21:03 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-02 21:03 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: max_profit = init_cash
2023-01-02 21:03 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-02 21:03 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-02 21:03 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-02 21:03 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 38
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-02 21:03 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-02 21:03 DEBUG on stmt: branch $38for_iter.3, 40, 98
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 40
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: i = $phi40.1
2023-01-02 21:03 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG find_def var='max_profit' stmt=$50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG idom 38 from label 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 38
2023-01-02 21:03 DEBUG find_def_from_top label 38
2023-01-02 21:03 DEBUG insert phi node max_profit.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
2023-01-02 21:03 DEBUG find_def_from_bottom label 0
2023-01-02 21:03 DEBUG incoming_def max_profit = init_cash
2023-01-02 21:03 DEBUG find_def_from_bottom label 99
2023-01-02 21:03 DEBUG find_def_from_top label 99
2023-01-02 21:03 DEBUG insert phi node max_profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 99
2023-01-02 21:03 DEBUG find_def_from_bottom label 72
2023-01-02 21:03 DEBUG find_def_from_top label 72
2023-01-02 21:03 DEBUG idom 40 from label 72
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG idom 38 from label 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 38
2023-01-02 21:03 DEBUG incoming_def max_profit.2 = phi(incoming_values=[Var(max_profit, nb.py:75)], incoming_blocks=[0])
2023-01-02 21:03 DEBUG find_def_from_bottom label 54
2023-01-02 21:03 DEBUG incoming_def max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG incoming_def max_profit.3 = phi(incoming_values=[Var(max_profit.2, nb.py:76), Var(max_profit.1, nb.py:78)], incoming_blocks=[72, 54])
2023-01-02 21:03 DEBUG replaced with: $50compare_op.6 = $46binary_subscr.4 > max_profit.2
2023-01-02 21:03 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-02 21:03 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-02 21:03 DEBUG on stmt: branch $52pred, 54, 72
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 54
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-02 21:03 DEBUG on stmt: DD_per_array[i] = $const62.4
2023-01-02 21:03 DEBUG on stmt: jump 99
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 72
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: $const72.1 = const(int, 100)
2023-01-02 21:03 DEBUG on stmt: $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-02 21:03 DEBUG on stmt: $82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-02 21:03 DEBUG find_def var='max_profit' stmt=$82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-02 21:03 DEBUG find_def_from_top label 72
2023-01-02 21:03 DEBUG idom 40 from label 72
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG idom 38 from label 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 38
2023-01-02 21:03 DEBUG replaced with: $82binary_subtract.6 = $78binary_subscr.4 - max_profit.2
2023-01-02 21:03 DEBUG on stmt: $84binary_multiply.7 = $const72.1 * $82binary_subtract.6
2023-01-02 21:03 DEBUG on stmt: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-02 21:03 DEBUG find_def var='max_profit' stmt=$88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-02 21:03 DEBUG find_def_from_top label 72
2023-01-02 21:03 DEBUG idom 40 from label 72
2023-01-02 21:03 DEBUG find_def_from_bottom label 40
2023-01-02 21:03 DEBUG find_def_from_top label 40
2023-01-02 21:03 DEBUG idom 38 from label 40
2023-01-02 21:03 DEBUG find_def_from_bottom label 38
2023-01-02 21:03 DEBUG replaced with: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit.2
2023-01-02 21:03 DEBUG on stmt: DD_per_array[i] = $88binary_true_divide.9
2023-01-02 21:03 DEBUG on stmt: jump 99
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 98
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: $100return_value.1 = cast(value=DD_per_array)
2023-01-02 21:03 DEBUG on stmt: return $100return_value.1
2023-01-02 21:03 DEBUG ==== SSA block rewrite pass on 99
2023-01-02 21:03 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7f0196f3da00>
2023-01-02 21:03 DEBUG on stmt: jump 38
2023-01-02 21:03 DEBUG Loaded backend tkagg version unknown.
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 1189
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 2994
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 696
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 526
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 499
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 673
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 922
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 568
2023-01-02 21:03 DEBUG STREAM b'IHDR' 16 13
2023-01-02 21:03 DEBUG STREAM b'sBIT' 41 4
2023-01-02 21:03 DEBUG b'sBIT' 41 4 (unknown)
2023-01-02 21:03 DEBUG STREAM b'pHYs' 57 9
2023-01-02 21:03 DEBUG STREAM b'IDAT' 78 626
2023-01-02 21:03 DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari.ttf', name='Kinnari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi.ttf', name='Norasi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerifItalic.ttf', name='FreeSerif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Medium.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-SemiBold.ttf', name='Rasa', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter-BoldOblique.ttf', name='Tlwg Typewriter', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/JamrulNormal.ttf', name='Jamrul', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-RI.ttf', name='Ubuntu Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/padmaa.ttf', name='padmaa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda.ttf', name='Garuda', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda-BoldOblique.ttf', name='Garuda', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Meera-Regular.ttf', name='Meera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Navilu/Navilu.ttf', name='Navilu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf', name='Ubuntu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerif.ttf', name='FreeSerif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstBook.ttf', name='KacstBook', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-telugu/Lohit-Telugu.ttf', name='Lohit Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-telu-extra/Pothana2000.ttf', name='Pothana2000', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak-fonts/Samyak-Malayalam.ttf', name='Samyak Malayalam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMono.ttf', name='FreeMono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Gayathri-Regular.otf', name='Gayathri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSansBoldOblique.ttf', name='FreeSans', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-BoldOblique.otf', name='Nimbus Sans Narrow', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-MI.ttf', name='Ubuntu', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/padmaa-Medium-0.5.ttf', name='padmaa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-Oblique.ttf', name='Umpush', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Sarai/Sarai.ttf', name='Sarai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree-BoldOblique.ttf', name='Waree', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-BdIta.otf', name='C059', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-Light.otf', name='URW Bookman', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman-BoldItalic.ttf', name='Laksaman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMonoBoldOblique.ttf', name='FreeMono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Gubbi/Gubbi.ttf', name='Gubbi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter-Oblique.ttf', name='Tlwg Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstOffice.ttf', name='KacstOffice', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa-Bold.ttf', name='Purisa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Bold.ttf', name='Yrsa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree-Oblique.ttf', name='Waree', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist-Bold.ttf', name='Tlwg Typist', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-B.ttf', name='Ubuntu', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak-fonts/Samyak-Gujarati.ttf', name='Samyak Gujarati', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-B.ttf', name='Ubuntu Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-M.ttf', name='Ubuntu', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-DemiLight.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-Italic.otf', name='P052', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/StandardSymbolsPS.otf', name='Standard Symbols PS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak/Samyak-Devanagari.ttf', name='Samyak Devanagari', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/aakar-medium.ttf', name='aakar', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono-Bold.ttf', name='Tlwg Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tibetan-machine/TibetanMachineUni.ttf', name='Tibetan Machine Uni', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo-BoldOblique.ttf', name='Tlwg Typo', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/D050000L.otf', name='D050000L', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Keraleeyam-Regular.ttf', name='Keraleeyam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMonoOblique.ttf', name='FreeMono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-Bold.otf', name='Nimbus Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstQurn.ttf', name='KacstQurn', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSans.ttf', name='FreeSans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo-Bold.ttf', name='Tlwg Typo', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ttf-khmeros-core/KhmerOSsys.ttf', name='Khmer OS System', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-BoldItalic.otf', name='P052', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/mry_KacstQurn.ttf', name='mry_KacstQurn', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-Italic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Karumbi-Regular.ttf', name='Karumbi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Medium.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono.ttf', name='Tlwg Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstNaskh.ttf', name='KacstNaskh', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma.ttf', name='Loma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstLetter.ttf', name='KacstLetter', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Bold.otf', name='Nimbus Mono PS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-BI.ttf', name='Ubuntu', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono-Oblique.ttf', name='Tlwg Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/AnjaliOldLipi-Regular.ttf', name='AnjaliOldLipi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/Rekha.ttf', name='Rekha', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-BoldItalic.otf', name='Nimbus Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ttf-khmeros-core/KhmerOS.ttf', name='Khmer OS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-BoldItalic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/RaghuMalayalamSans-Regular.ttf', name='RaghuMalayalamSans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lao/Phetsarath_OT.ttf', name='Phetsarath OT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-tamil-classical/Lohit-Tamil-Classical.ttf', name='Lohit Tamil Classical', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Italic.otf', name='Nimbus Mono PS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-devanagari/Lohit-Devanagari.ttf', name='Lohit Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-kalapi/Kalapi.ttf', name='Kalapi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-Roman.otf', name='P052', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-DemiOblique.otf', name='URW Gothic', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-BI.ttf', name='Ubuntu Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Chilanka-Regular.otf', name='Chilanka', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-BoldItalic.otf', name='Nimbus Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-BoldItalic.ttf', name='Norasi', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Black.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/Z003-MediumItalic.otf', name='Z003', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman.ttf', name='Laksaman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-C.ttf', name='Ubuntu Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Thin.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Rachana-Regular.ttf', name='Rachana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/noto/NotoMono-Regular.ttf', name='Noto Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-L.ttf', name='Ubuntu', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-Regular.otf', name='Nimbus Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Manjari-Thin.otf', name='Manjari', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Light.ttf', name='Rasa', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree-Bold.ttf', name='Waree', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-Oblique.ttf', name='Norasi', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-Book.otf', name='URW Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/MuktiNarrow.ttf', name='Mukti Narrow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf', name='Nimbus Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/Padauk-Bold.ttf', name='Padauk', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-Oblique.ttf', name='Kinnari', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Sahadeva/sahadeva.ttf', name='Sahadeva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-Roman.otf', name='C059', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma-Oblique.ttf', name='Loma', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/mitra.ttf', name='Mitra Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-Regular.otf', name='Nimbus Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/ani.ttf', name='Ani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-BookOblique.otf', name='URW Gothic', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstArt.ttf', name='KacstArt', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter-Bold.ttf', name='Tlwg Typewriter', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Regular.ttf', name='Rasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/arphic/ukai.ttc', name='AR PL UKai CN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Dyuthi-Regular.ttf', name='Dyuthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstPoster.ttf', name='KacstPoster', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Regular.otf', name='Nimbus Mono PS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter.ttf', name='Tlwg Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-Bold.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Bold.ttf', name='Rasa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-kannada/Lohit-Kannada.ttf', name='Lohit Kannada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/abyssinica/AbyssinicaSIL-Regular.ttf', name='Abyssinica SIL', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/droid/DroidSansFallbackFull.ttf', name='Droid Sans Fallback', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstPen.ttf', name='KacstPen', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/arphic/uming.ttc', name='AR PL UMing CN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-LightOblique.ttf', name='Umpush', style='oblique', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Gargi/Gargi.ttf', name='Gargi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Manjari-Bold.otf', name='Manjari', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSansBold.ttf', name='FreeSans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman-Bold.ttf', name='Laksaman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-assamese/Lohit-Assamese.ttf', name='Lohit Assamese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-orya-extra/utkal.ttf', name='ori1Uni', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-Demi.otf', name='URW Bookman', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-Regular.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-Italic.ttf', name='Kinnari', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-Th.ttf', name='Ubuntu', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee.ttf', name='Sawasdee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist-BoldOblique.ttf', name='Tlwg Typist', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstTitleL.ttf', name='KacstTitleL', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-ExtraLight.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Gayathri-Thin.otf', name='Gayathri', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/PadaukBook-Regular.ttf', name='Padauk Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa.ttf', name='Purisa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono-BoldOblique.ttf', name='Tlwg Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/PadaukBook-Bold.ttf', name='Padauk Book', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-malayalam/Lohit-Malayalam.ttf', name='Lohit Malayalam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee-Oblique.ttf', name='Sawasdee', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-Italic.otf', name='C059', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda-Bold.ttf', name='Garuda', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-Bold.otf', name='Nimbus Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-BoldOblique.ttf', name='Kinnari', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-Light.ttf', name='Umpush', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Medium.ttf', name='Rasa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-oriya/Lohit-Odia.ttf', name='Lohit Odia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/MuktiNarrowBold.ttf', name='Mukti Narrow', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda-Oblique.ttf', name='Garuda', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/openoffice/opens___.ttf', name='OpenSymbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist-Oblique.ttf', name='Tlwg Typist', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-SemiBold.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-Italic.ttf', name='Norasi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-BoldOblique.ttf', name='Umpush', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma-BoldOblique.ttf', name='Loma', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa-Oblique.ttf', name='Purisa', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-BoldItalic.otf', name='Nimbus Mono PS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-deva-extra/chandas1-2.ttf', name='Chandas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Black.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush.ttf', name='Umpush', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst-one/KacstOne.ttf', name='KacstOne', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/padmaa-Bold.1.1.ttf', name='padmaa-Bold.1.1', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Medium.ttf', name='Yrsa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Uroob-Regular.ttf', name='Uroob', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-deva-extra/samanata.ttf', name='Samanata', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/LikhanNormal.ttf', name='Likhan', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-R.ttf', name='Ubuntu Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstScreen.ttf', name='KacstScreen', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf', name='FreeMono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-telu-extra/vemana2000.ttf', name='Vemana2000', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-bengali/Lohit-Bengali.ttf', name='Lohit Bengali', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Light.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman-Italic.ttf', name='Laksaman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-Bold.ttf', name='Kinnari', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerifBold.ttf', name='FreeSerif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Regular.ttf', name='Yrsa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-RI.ttf', name='Ubuntu', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-DemiItalic.otf', name='URW Bookman', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Light.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/Padauk-Regular.ttf', name='Padauk', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-BoldOblique.ttf', name='Norasi', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-punjabi/Lohit-Gurmukhi.ttf', name='Lohit Gurmukhi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-Italic.otf', name='Nimbus Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstTitle.ttf', name='KacstTitle', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-guru-extra/Saab.ttf', name='Saab', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-Bold.otf', name='C059', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-gujarati/Lohit-Gujarati.ttf', name='Lohit Gujarati', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Regular.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-Bold.otf', name='P052', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-SemiBold.ttf', name='Yrsa', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstDigital.ttf', name='KacstDigital', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-LI.ttf', name='Ubuntu', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-Oblique.otf', name='Nimbus Sans Narrow', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist.ttf', name='Tlwg Typist', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-Bold.ttf', name='Umpush', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-Demi.otf', name='URW Gothic', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa-BoldOblique.ttf', name='Purisa', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstDecorative.ttf', name='KacstDecorative', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma-Bold.ttf', name='Loma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstFarsi.ttf', name='KacstFarsi', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Light.ttf', name='Yrsa', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/pagul/Pagul.ttf', name='Pagul', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Gayathri-Bold.otf', name='Gayathri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Bold.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak-fonts/Samyak-Tamil.ttf', name='Samyak Tamil', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-tamil/Lohit-Tamil.ttf', name='Lohit Tamil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo-Oblique.ttf', name='Tlwg Typo', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-deva-extra/kalimati.ttf', name='Kalimati', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/sinhala/lklug.ttf', name='LKLUG', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree.ttf', name='Waree', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-LightItalic.otf', name='URW Bookman', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerifBoldItalic.ttf', name='FreeSerif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee-BoldOblique.ttf', name='Sawasdee', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-BoldItalic.ttf', name='Kinnari', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Rachana-Bold.ttf', name='Rachana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Suruma.ttf', name='Suruma', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Manjari-Regular.otf', name='Manjari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst-one/KacstOne-Bold.ttf', name='KacstOne', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee-Bold.ttf', name='Sawasdee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSansOblique.ttf', name='FreeSans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-Bold.otf', name='Nimbus Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo.ttf', name='Tlwg Typo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-Bold.ttf', name='Norasi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-Italic.otf', name='Nimbus Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Nakula/nakula.ttf', name='Nakula', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-02 21:03 DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari.ttf', name='Kinnari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi.ttf', name='Norasi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerifItalic.ttf', name='FreeSerif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Medium.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-SemiBold.ttf', name='Rasa', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter-BoldOblique.ttf', name='Tlwg Typewriter', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/JamrulNormal.ttf', name='Jamrul', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-RI.ttf', name='Ubuntu Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/padmaa.ttf', name='padmaa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda.ttf', name='Garuda', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda-BoldOblique.ttf', name='Garuda', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Meera-Regular.ttf', name='Meera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Navilu/Navilu.ttf', name='Navilu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf', name='Ubuntu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerif.ttf', name='FreeSerif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstBook.ttf', name='KacstBook', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-telugu/Lohit-Telugu.ttf', name='Lohit Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-telu-extra/Pothana2000.ttf', name='Pothana2000', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak-fonts/Samyak-Malayalam.ttf', name='Samyak Malayalam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMono.ttf', name='FreeMono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Gayathri-Regular.otf', name='Gayathri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSansBoldOblique.ttf', name='FreeSans', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-BoldOblique.otf', name='Nimbus Sans Narrow', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-MI.ttf', name='Ubuntu', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/padmaa-Medium-0.5.ttf', name='padmaa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-Oblique.ttf', name='Umpush', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Sarai/Sarai.ttf', name='Sarai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree-BoldOblique.ttf', name='Waree', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-BdIta.otf', name='C059', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-Light.otf', name='URW Bookman', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman-BoldItalic.ttf', name='Laksaman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMonoBoldOblique.ttf', name='FreeMono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Gubbi/Gubbi.ttf', name='Gubbi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter-Oblique.ttf', name='Tlwg Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstOffice.ttf', name='KacstOffice', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa-Bold.ttf', name='Purisa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Bold.ttf', name='Yrsa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree-Oblique.ttf', name='Waree', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist-Bold.ttf', name='Tlwg Typist', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-B.ttf', name='Ubuntu', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak-fonts/Samyak-Gujarati.ttf', name='Samyak Gujarati', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-B.ttf', name='Ubuntu Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-M.ttf', name='Ubuntu', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-DemiLight.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-Italic.otf', name='P052', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/StandardSymbolsPS.otf', name='Standard Symbols PS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak/Samyak-Devanagari.ttf', name='Samyak Devanagari', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/aakar-medium.ttf', name='aakar', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono-Bold.ttf', name='Tlwg Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tibetan-machine/TibetanMachineUni.ttf', name='Tibetan Machine Uni', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo-BoldOblique.ttf', name='Tlwg Typo', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/D050000L.otf', name='D050000L', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Keraleeyam-Regular.ttf', name='Keraleeyam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMonoOblique.ttf', name='FreeMono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-Bold.otf', name='Nimbus Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstQurn.ttf', name='KacstQurn', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSans.ttf', name='FreeSans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo-Bold.ttf', name='Tlwg Typo', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ttf-khmeros-core/KhmerOSsys.ttf', name='Khmer OS System', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-BoldItalic.otf', name='P052', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/mry_KacstQurn.ttf', name='mry_KacstQurn', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-Italic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Karumbi-Regular.ttf', name='Karumbi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Medium.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono.ttf', name='Tlwg Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstNaskh.ttf', name='KacstNaskh', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma.ttf', name='Loma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstLetter.ttf', name='KacstLetter', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Bold.otf', name='Nimbus Mono PS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-BI.ttf', name='Ubuntu', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono-Oblique.ttf', name='Tlwg Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/AnjaliOldLipi-Regular.ttf', name='AnjaliOldLipi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/Rekha.ttf', name='Rekha', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-BoldItalic.otf', name='Nimbus Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ttf-khmeros-core/KhmerOS.ttf', name='Khmer OS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-BoldItalic.ttf', name='Liberation Sans Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/RaghuMalayalamSans-Regular.ttf', name='RaghuMalayalamSans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lao/Phetsarath_OT.ttf', name='Phetsarath OT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-tamil-classical/Lohit-Tamil-Classical.ttf', name='Lohit Tamil Classical', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Italic.otf', name='Nimbus Mono PS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-devanagari/Lohit-Devanagari.ttf', name='Lohit Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-kalapi/Kalapi.ttf', name='Kalapi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-Roman.otf', name='P052', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-DemiOblique.otf', name='URW Gothic', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-BI.ttf', name='Ubuntu Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Chilanka-Regular.otf', name='Chilanka', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-BoldItalic.otf', name='Nimbus Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-BoldItalic.ttf', name='Norasi', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Black.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/Z003-MediumItalic.otf', name='Z003', style='italic', variant='normal', weight=500, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman.ttf', name='Laksaman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-C.ttf', name='Ubuntu Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Thin.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Rachana-Regular.ttf', name='Rachana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/noto/NotoMono-Regular.ttf', name='Noto Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-L.ttf', name='Ubuntu', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-Regular.otf', name='Nimbus Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Manjari-Thin.otf', name='Manjari', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Light.ttf', name='Rasa', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree-Bold.ttf', name='Waree', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-Oblique.ttf', name='Norasi', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-Book.otf', name='URW Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/MuktiNarrow.ttf', name='Mukti Narrow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf', name='Nimbus Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/Padauk-Bold.ttf', name='Padauk', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-Oblique.ttf', name='Kinnari', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Sahadeva/sahadeva.ttf', name='Sahadeva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-Roman.otf', name='C059', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-Bold.ttf', name='Liberation Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma-Oblique.ttf', name='Loma', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/mitra.ttf', name='Mitra Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-Regular.otf', name='Nimbus Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/ani.ttf', name='Ani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-BookOblique.otf', name='URW Gothic', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstArt.ttf', name='KacstArt', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter-Bold.ttf', name='Tlwg Typewriter', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Regular.ttf', name='Rasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/arphic/ukai.ttc', name='AR PL UKai CN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Dyuthi-Regular.ttf', name='Dyuthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstPoster.ttf', name='KacstPoster', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Regular.otf', name='Nimbus Mono PS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypewriter.ttf', name='Tlwg Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-Bold.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Bold.ttf', name='Rasa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-kannada/Lohit-Kannada.ttf', name='Lohit Kannada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/abyssinica/AbyssinicaSIL-Regular.ttf', name='Abyssinica SIL', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/droid/DroidSansFallbackFull.ttf', name='Droid Sans Fallback', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstPen.ttf', name='KacstPen', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/arphic/uming.ttc', name='AR PL UMing CN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-LightOblique.ttf', name='Umpush', style='oblique', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Gargi/Gargi.ttf', name='Gargi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Manjari-Bold.otf', name='Manjari', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSansBold.ttf', name='FreeSans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman-Bold.ttf', name='Laksaman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-assamese/Lohit-Assamese.ttf', name='Lohit Assamese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-orya-extra/utkal.ttf', name='ori1Uni', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-Demi.otf', name='URW Bookman', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSansNarrow-Regular.ttf', name='Liberation Sans Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-Italic.ttf', name='Kinnari', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-Th.ttf', name='Ubuntu', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-BoldItalic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee.ttf', name='Sawasdee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist-BoldOblique.ttf', name='Tlwg Typist', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstTitleL.ttf', name='KacstTitleL', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-ExtraLight.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Gayathri-Thin.otf', name='Gayathri', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/PadaukBook-Regular.ttf', name='Padauk Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa.ttf', name='Purisa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgMono-BoldOblique.ttf', name='Tlwg Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/PadaukBook-Bold.ttf', name='Padauk Book', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-malayalam/Lohit-Malayalam.ttf', name='Lohit Malayalam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee-Oblique.ttf', name='Sawasdee', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-Italic.otf', name='C059', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda-Bold.ttf', name='Garuda', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-Bold.otf', name='Nimbus Sans Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-BoldOblique.ttf', name='Kinnari', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-Light.ttf', name='Umpush', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Rasa-Medium.ttf', name='Rasa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-oriya/Lohit-Odia.ttf', name='Lohit Odia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/MuktiNarrowBold.ttf', name='Mukti Narrow', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Garuda-Oblique.ttf', name='Garuda', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/openoffice/opens___.ttf', name='OpenSymbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationSerif-Bold.ttf', name='Liberation Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist-Oblique.ttf', name='Tlwg Typist', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-SemiBold.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-Italic.ttf', name='Norasi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-BoldOblique.ttf', name='Umpush', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma-BoldOblique.ttf', name='Loma', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa-Oblique.ttf', name='Purisa', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusMonoPS-BoldItalic.otf', name='Nimbus Mono PS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-deva-extra/chandas1-2.ttf', name='Chandas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Black.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush.ttf', name='Umpush', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst-one/KacstOne.ttf', name='KacstOne', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-gujr-extra/padmaa-Bold.1.1.ttf', name='padmaa-Bold.1.1', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Medium.ttf', name='Yrsa', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Uroob-Regular.ttf', name='Uroob', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-deva-extra/samanata.ttf', name='Samanata', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation/LiberationMono-Italic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-BoldItalic.ttf', name='Liberation Mono', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-beng-extra/LikhanNormal.ttf', name='Likhan', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/UbuntuMono-R.ttf', name='Ubuntu Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstScreen.ttf', name='KacstScreen', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf', name='FreeMono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-telu-extra/vemana2000.ttf', name='Vemana2000', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-bengali/Lohit-Bengali.ttf', name='Lohit Bengali', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Light.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Laksaman-Italic.ttf', name='Laksaman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-Bold.ttf', name='Kinnari', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerifBold.ttf', name='FreeSerif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Regular.ttf', name='Yrsa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-RI.ttf', name='Ubuntu', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-DemiItalic.otf', name='URW Bookman', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Light.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/padauk/Padauk-Regular.ttf', name='Padauk', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-BoldOblique.ttf', name='Norasi', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-punjabi/Lohit-Gurmukhi.ttf', name='Lohit Gurmukhi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusRoman-Italic.otf', name='Nimbus Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstTitle.ttf', name='KacstTitle', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-Regular.ttf', name='Liberation Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-guru-extra/Saab.ttf', name='Saab', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/C059-Bold.otf', name='C059', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-gujarati/Lohit-Gujarati.ttf', name='Lohit Gujarati', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Regular.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/P052-Bold.otf', name='P052', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-SemiBold.ttf', name='Yrsa', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstDigital.ttf', name='KacstDigital', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/ubuntu/Ubuntu-LI.ttf', name='Ubuntu', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSansNarrow-Oblique.otf', name='Nimbus Sans Narrow', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypist.ttf', name='Tlwg Typist', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Umpush-Bold.ttf', name='Umpush', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWGothic-Demi.otf', name='URW Gothic', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-BoldItalic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Purisa-BoldOblique.ttf', name='Purisa', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstDecorative.ttf', name='KacstDecorative', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Loma-Bold.ttf', name='Loma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst/KacstFarsi.ttf', name='KacstFarsi', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-yrsa-rasa/Yrsa-Light.ttf', name='Yrsa', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/pagul/Pagul.ttf', name='Pagul', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Gayathri-Bold.otf', name='Gayathri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSerifCJK-Bold.ttc', name='Noto Serif CJK JP', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc', name='Noto Sans CJK JP', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/samyak-fonts/Samyak-Tamil.ttf', name='Samyak Tamil', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/lohit-tamil/Lohit-Tamil.ttf', name='Lohit Tamil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo-Oblique.ttf', name='Tlwg Typo', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/fonts-deva-extra/kalimati.ttf', name='Kalimati', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/sinhala/lklug.ttf', name='LKLUG', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Waree.ttf', name='Waree', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/URWBookman-LightItalic.otf', name='URW Bookman', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSerifBoldItalic.ttf', name='FreeSerif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee-BoldOblique.ttf', name='Sawasdee', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Kinnari-BoldItalic.ttf', name='Kinnari', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationMono-Regular.ttf', name='Liberation Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Rachana-Bold.ttf', name='Rachana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-Italic.ttf', name='Liberation Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/malayalam/Suruma.ttf', name='Suruma', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/malayalam/Manjari-Regular.otf', name='Manjari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSerif-Italic.ttf', name='Liberation Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/kacst-one/KacstOne-Bold.ttf', name='KacstOne', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-Bold.ttf', name='Liberation Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Sawasdee-Bold.ttf', name='Sawasdee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/liberation2/LiberationSans-Regular.ttf', name='Liberation Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/freefont/FreeSansOblique.ttf', name='FreeSans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-Bold.otf', name='Nimbus Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/TlwgTypo.ttf', name='Tlwg Typo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/tlwg/Norasi-Bold.ttf', name='Norasi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/opentype/urw-base35/NimbusSans-Italic.otf', name='Nimbus Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-01-02 21:03 DEBUG findfont: score(FontEntry(fname='/usr/share/fonts/truetype/Nakula/nakula.ttf', name='Nakula', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-01-02 21:03 DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/abcd/桌面/mydir/backtesting/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
