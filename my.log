2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_GLOBAL(arg=0, lineno=329)
           4	LOAD_ATTR(arg=1, lineno=329)
           6	LOAD_FAST(arg=6, lineno=329)
           8	LOAD_CONST(arg=1, lineno=329)
          10	LOAD_GLOBAL(arg=0, lineno=329)
          12	LOAD_ATTR(arg=2, lineno=329)
          14	LOAD_CONST(arg=2, lineno=329)
          16	CALL_FUNCTION_KW(arg=3, lineno=329)
          18	STORE_FAST(arg=13, lineno=329)
          20	LOAD_CONST(arg=1, lineno=332)
          22	STORE_FAST(arg=14, lineno=332)
          24	LOAD_CONST(arg=1, lineno=333)
          26	STORE_FAST(arg=15, lineno=333)
          28	LOAD_CONST(arg=1, lineno=334)
          30	STORE_FAST(arg=16, lineno=334)
          32	LOAD_CONST(arg=1, lineno=335)
          34	STORE_FAST(arg=17, lineno=335)
          36	LOAD_CONST(arg=1, lineno=336)
          38	STORE_FAST(arg=18, lineno=336)
          40	LOAD_FAST(arg=9, lineno=338)
          42	STORE_FAST(arg=19, lineno=338)
          44	LOAD_FAST(arg=9, lineno=339)
          46	STORE_FAST(arg=20, lineno=339)
          48	LOAD_FAST(arg=8, lineno=342)
          50	STORE_FAST(arg=8, lineno=342)
          52	LOAD_FAST(arg=10, lineno=343)
          54	STORE_FAST(arg=10, lineno=343)
          56	LOAD_CONST(arg=3, lineno=344)
          58	STORE_FAST(arg=21, lineno=344)
          60	LOAD_GLOBAL(arg=3, lineno=347)
          62	LOAD_FAST(arg=6, lineno=348)
          64	LOAD_FAST(arg=1, lineno=348)
          66	LOAD_FAST(arg=2, lineno=348)
          68	LOAD_FAST(arg=3, lineno=348)
          70	LOAD_FAST(arg=11, lineno=348)
          72	CALL_FUNCTION(arg=5, lineno=347)
          74	STORE_FAST(arg=22, lineno=347)
          76	LOAD_GLOBAL(arg=3, lineno=350)
          78	LOAD_FAST(arg=6, lineno=351)
          80	LOAD_FAST(arg=1, lineno=351)
          82	LOAD_FAST(arg=2, lineno=351)
          84	LOAD_FAST(arg=3, lineno=351)
          86	LOAD_FAST(arg=12, lineno=351)
          88	CALL_FUNCTION(arg=5, lineno=350)
          90	STORE_FAST(arg=23, lineno=350)
          92	LOAD_GLOBAL(arg=0, lineno=354)
          94	LOAD_METHOD(arg=4, lineno=354)
          96	LOAD_FAST(arg=1, lineno=354)
          98	LOAD_FAST(arg=4, lineno=354)
         100	BINARY_SUBTRACT(arg=None, lineno=354)
         102	LOAD_CONST(arg=1, lineno=354)
         104	COMPARE_OP(arg=4, lineno=354)
         106	LOAD_FAST(arg=22, lineno=355)
         108	LOAD_FAST(arg=23, lineno=355)
         110	BINARY_SUBTRACT(arg=None, lineno=355)
         112	LOAD_CONST(arg=1, lineno=355)
         114	COMPARE_OP(arg=4, lineno=355)
         116	BINARY_AND(arg=None, lineno=354)
         118	LOAD_CONST(arg=4, lineno=355)
         120	LOAD_CONST(arg=1, lineno=355)
         122	CALL_METHOD(arg=3, lineno=354)
         124	STORE_FAST(arg=24, lineno=354)
         126	LOAD_GLOBAL(arg=0, lineno=356)
         128	LOAD_METHOD(arg=4, lineno=356)
         130	LOAD_FAST(arg=2, lineno=356)
         132	LOAD_FAST(arg=5, lineno=356)
         134	BINARY_SUBTRACT(arg=None, lineno=356)
         136	LOAD_CONST(arg=1, lineno=356)
         138	COMPARE_OP(arg=0, lineno=356)
         140	LOAD_CONST(arg=5, lineno=356)
         142	LOAD_FAST(arg=24, lineno=356)
         144	CALL_METHOD(arg=3, lineno=356)
         146	STORE_FAST(arg=25, lineno=356)
         148	LOAD_GLOBAL(arg=0, lineno=357)
         150	LOAD_METHOD(arg=5, lineno=357)
         152	LOAD_FAST(arg=25, lineno=357)
         154	LOAD_CONST(arg=4, lineno=357)
         156	CALL_METHOD(arg=2, lineno=357)
         158	STORE_FAST(arg=26, lineno=357)
         160	LOAD_CONST(arg=1, lineno=358)
         162	LOAD_FAST(arg=26, lineno=358)
         164	LOAD_CONST(arg=1, lineno=358)
         166	STORE_SUBSCR(arg=None, lineno=358)
         168	LOAD_GLOBAL(arg=6, lineno=361)
         170	LOAD_FAST(arg=6, lineno=361)
         172	CALL_FUNCTION(arg=1, lineno=361)
         174	GET_ITER(arg=None, lineno=361)
>        176	FOR_ITER(arg=44, lineno=361)
         178	STORE_FAST(arg=27, lineno=361)
         180	LOAD_FAST(arg=26, lineno=362)
         182	LOAD_FAST(arg=27, lineno=362)
         184	BINARY_SUBSCR(arg=None, lineno=362)
         186	STORE_FAST(arg=28, lineno=362)
         188	LOAD_FAST(arg=28, lineno=365)
         190	LOAD_CONST(arg=4, lineno=365)
         192	COMPARE_OP(arg=2, lineno=365)
         194	POP_JUMP_IF_FALSE(arg=200, lineno=365)
         196	LOAD_CONST(arg=4, lineno=366)
         198	STORE_FAST(arg=14, lineno=366)
>        200	LOAD_FAST(arg=28, lineno=367)
         202	LOAD_CONST(arg=5, lineno=367)
         204	COMPARE_OP(arg=2, lineno=367)
         206	POP_JUMP_IF_FALSE(arg=212, lineno=367)
         208	LOAD_CONST(arg=1, lineno=368)
         210	STORE_FAST(arg=14, lineno=368)
>        212	LOAD_FAST(arg=14, lineno=370)
         214	LOAD_FAST(arg=13, lineno=370)
         216	LOAD_FAST(arg=27, lineno=370)
         218	STORE_SUBSCR(arg=None, lineno=370)
         220	JUMP_ABSOLUTE(arg=176, lineno=370)
>        222	LOAD_GLOBAL(arg=0, lineno=373)
         224	LOAD_METHOD(arg=5, lineno=373)
         226	LOAD_FAST(arg=13, lineno=373)
         228	LOAD_CONST(arg=4, lineno=373)
         230	CALL_METHOD(arg=2, lineno=373)
         232	STORE_FAST(arg=29, lineno=373)
         234	LOAD_CONST(arg=1, lineno=374)
         236	LOAD_FAST(arg=29, lineno=374)
         238	LOAD_CONST(arg=1, lineno=374)
         240	STORE_SUBSCR(arg=None, lineno=374)
         242	LOAD_GLOBAL(arg=0, lineno=376)
         244	LOAD_METHOD(arg=4, lineno=376)
         246	LOAD_FAST(arg=13, lineno=377)
         248	LOAD_FAST(arg=29, lineno=377)
         250	BINARY_SUBTRACT(arg=None, lineno=377)
         252	LOAD_CONST(arg=1, lineno=377)
         254	COMPARE_OP(arg=4, lineno=377)
         256	LOAD_FAST(arg=0, lineno=377)
         258	LOAD_CONST(arg=4, lineno=377)
         260	LOAD_FAST(arg=8, lineno=377)
         262	BINARY_ADD(arg=None, lineno=377)
         264	BINARY_MULTIPLY(arg=None, lineno=377)
         266	LOAD_CONST(arg=1, lineno=377)
         268	CALL_METHOD(arg=3, lineno=376)
         270	STORE_FAST(arg=30, lineno=376)
         272	LOAD_FAST(arg=30, lineno=379)
         274	LOAD_GLOBAL(arg=0, lineno=379)
         276	LOAD_METHOD(arg=4, lineno=379)
         278	LOAD_FAST(arg=30, lineno=379)
         280	LOAD_CONST(arg=1, lineno=379)
         282	COMPARE_OP(arg=4, lineno=379)
         284	CALL_METHOD(arg=1, lineno=379)
         286	BINARY_SUBSCR(arg=None, lineno=379)
         288	STORE_FAST(arg=30, lineno=379)
         290	LOAD_FAST(arg=30, lineno=383)
         292	LOAD_ATTR(arg=7, lineno=383)
         294	LOAD_CONST(arg=1, lineno=383)
         296	BINARY_SUBSCR(arg=None, lineno=383)
         298	LOAD_CONST(arg=1, lineno=383)
         300	COMPARE_OP(arg=2, lineno=383)
         302	POP_JUMP_IF_FALSE(arg=310, lineno=383)
         306	LOAD_CONST(arg=1, lineno=384)
         308	RETURN_VALUE(arg=None, lineno=384)
>        310	LOAD_GLOBAL(arg=0, lineno=386)
         312	LOAD_METHOD(arg=4, lineno=386)
         314	LOAD_FAST(arg=13, lineno=387)
         316	LOAD_FAST(arg=29, lineno=387)
         318	BINARY_SUBTRACT(arg=None, lineno=387)
         320	LOAD_CONST(arg=1, lineno=387)
         322	COMPARE_OP(arg=0, lineno=387)
         324	LOAD_FAST(arg=0, lineno=387)
         326	LOAD_CONST(arg=4, lineno=387)
         328	LOAD_FAST(arg=8, lineno=387)
         330	BINARY_SUBTRACT(arg=None, lineno=387)
         332	BINARY_MULTIPLY(arg=None, lineno=387)
         334	LOAD_CONST(arg=1, lineno=387)
         336	CALL_METHOD(arg=3, lineno=386)
         338	STORE_FAST(arg=31, lineno=386)
         340	LOAD_FAST(arg=31, lineno=388)
         342	LOAD_GLOBAL(arg=0, lineno=388)
         344	LOAD_METHOD(arg=4, lineno=388)
         346	LOAD_FAST(arg=31, lineno=388)
         348	LOAD_CONST(arg=1, lineno=388)
         350	COMPARE_OP(arg=4, lineno=388)
         352	CALL_METHOD(arg=1, lineno=388)
         354	BINARY_SUBSCR(arg=None, lineno=388)
         356	STORE_FAST(arg=31, lineno=388)
         358	LOAD_FAST(arg=30, lineno=391)
         360	LOAD_CONST(arg=0, lineno=391)
         362	LOAD_FAST(arg=31, lineno=391)
         364	LOAD_ATTR(arg=7, lineno=391)
         366	LOAD_CONST(arg=1, lineno=391)
         368	BINARY_SUBSCR(arg=None, lineno=391)
         370	BUILD_SLICE(arg=2, lineno=391)
         372	BINARY_SUBSCR(arg=None, lineno=391)
         374	STORE_FAST(arg=30, lineno=391)
         376	LOAD_FAST(arg=31, lineno=393)
         378	LOAD_FAST(arg=30, lineno=393)
         380	BINARY_SUBTRACT(arg=None, lineno=393)
         382	STORE_FAST(arg=32, lineno=393)
         384	LOAD_GLOBAL(arg=0, lineno=395)
         386	LOAD_METHOD(arg=4, lineno=395)
         388	LOAD_FAST(arg=13, lineno=396)
         390	LOAD_FAST(arg=29, lineno=396)
         392	BINARY_SUBTRACT(arg=None, lineno=396)
         394	LOAD_CONST(arg=1, lineno=396)
         396	COMPARE_OP(arg=4, lineno=396)
         398	LOAD_FAST(arg=0, lineno=396)
         400	LOAD_FAST(arg=10, lineno=396)
         402	BINARY_MULTIPLY(arg=None, lineno=396)
         404	LOAD_FAST(arg=9, lineno=396)
         406	BINARY_MULTIPLY(arg=None, lineno=396)
         408	LOAD_CONST(arg=1, lineno=396)
         410	CALL_METHOD(arg=3, lineno=395)
         412	STORE_FAST(arg=33, lineno=395)
         414	LOAD_FAST(arg=33, lineno=397)
         416	LOAD_GLOBAL(arg=0, lineno=397)
         418	LOAD_METHOD(arg=4, lineno=397)
         420	LOAD_FAST(arg=33, lineno=397)
         422	LOAD_CONST(arg=1, lineno=397)
         424	COMPARE_OP(arg=4, lineno=397)
         426	CALL_METHOD(arg=1, lineno=397)
         428	BINARY_SUBSCR(arg=None, lineno=397)
         430	STORE_FAST(arg=33, lineno=397)
         432	LOAD_FAST(arg=33, lineno=398)
         434	LOAD_CONST(arg=0, lineno=398)
         436	LOAD_FAST(arg=31, lineno=398)
         438	LOAD_ATTR(arg=7, lineno=398)
         440	LOAD_CONST(arg=1, lineno=398)
         442	BINARY_SUBSCR(arg=None, lineno=398)
         444	BUILD_SLICE(arg=2, lineno=398)
         446	BINARY_SUBSCR(arg=None, lineno=398)
         448	STORE_FAST(arg=33, lineno=398)
         450	LOAD_GLOBAL(arg=0, lineno=400)
         452	LOAD_METHOD(arg=4, lineno=400)
         454	LOAD_FAST(arg=13, lineno=401)
         456	LOAD_FAST(arg=29, lineno=401)
         458	BINARY_SUBTRACT(arg=None, lineno=401)
         460	LOAD_CONST(arg=1, lineno=401)
         462	COMPARE_OP(arg=0, lineno=401)
         464	LOAD_FAST(arg=0, lineno=401)
         466	LOAD_FAST(arg=10, lineno=401)
         468	BINARY_MULTIPLY(arg=None, lineno=401)
         470	LOAD_FAST(arg=9, lineno=401)
         472	BINARY_MULTIPLY(arg=None, lineno=401)
         474	LOAD_CONST(arg=1, lineno=401)
         476	CALL_METHOD(arg=3, lineno=400)
         478	STORE_FAST(arg=34, lineno=400)
         480	LOAD_FAST(arg=34, lineno=402)
         482	LOAD_GLOBAL(arg=0, lineno=402)
         484	LOAD_METHOD(arg=4, lineno=402)
         486	LOAD_FAST(arg=34, lineno=402)
         488	LOAD_CONST(arg=1, lineno=402)
         490	COMPARE_OP(arg=4, lineno=402)
         492	CALL_METHOD(arg=1, lineno=402)
         494	BINARY_SUBSCR(arg=None, lineno=402)
         496	STORE_FAST(arg=34, lineno=402)
         498	LOAD_FAST(arg=32, lineno=404)
         500	LOAD_FAST(arg=33, lineno=404)
         502	BINARY_SUBTRACT(arg=None, lineno=404)
         504	LOAD_FAST(arg=34, lineno=404)
         506	BINARY_SUBTRACT(arg=None, lineno=404)
         508	STORE_FAST(arg=35, lineno=404)
         510	LOAD_GLOBAL(arg=0, lineno=406)
         512	LOAD_METHOD(arg=8, lineno=406)
         514	LOAD_FAST(arg=35, lineno=407)
         516	CALL_METHOD(arg=1, lineno=406)
         518	LOAD_FAST(arg=7, lineno=407)
         520	BINARY_ADD(arg=None, lineno=406)
         522	STORE_FAST(arg=35, lineno=406)
         524	LOAD_GLOBAL(arg=9, lineno=409)
         526	LOAD_FAST(arg=35, lineno=409)
         528	LOAD_FAST(arg=7, lineno=409)
         530	CALL_FUNCTION(arg=2, lineno=409)
         532	STORE_FAST(arg=36, lineno=409)
         534	LOAD_GLOBAL(arg=0, lineno=410)
         536	LOAD_METHOD(arg=10, lineno=410)
         538	LOAD_FAST(arg=36, lineno=410)
         540	LOAD_CONST(arg=6, lineno=410)
         542	BINARY_POWER(arg=None, lineno=410)
         544	CALL_METHOD(arg=1, lineno=410)
         546	STORE_FAST(arg=37, lineno=410)
         548	LOAD_FAST(arg=35, lineno=411)
         550	LOAD_CONST(arg=5, lineno=411)
         552	BINARY_SUBSCR(arg=None, lineno=411)
         554	LOAD_FAST(arg=7, lineno=411)
         556	BINARY_TRUE_DIVIDE(arg=None, lineno=411)
         558	LOAD_CONST(arg=4, lineno=411)
         560	BINARY_SUBTRACT(arg=None, lineno=411)
         562	STORE_FAST(arg=38, lineno=411)
         564	LOAD_FAST(arg=38, lineno=412)
         566	LOAD_CONST(arg=7, lineno=412)
         568	BINARY_MULTIPLY(arg=None, lineno=412)
         570	LOAD_FAST(arg=37, lineno=412)
         572	LOAD_FAST(arg=31, lineno=412)
         574	LOAD_ATTR(arg=7, lineno=412)
         576	LOAD_CONST(arg=1, lineno=412)
         578	BINARY_SUBSCR(arg=None, lineno=412)
         580	BINARY_TRUE_DIVIDE(arg=None, lineno=412)
         582	LOAD_CONST(arg=8, lineno=412)
         584	BINARY_POWER(arg=None, lineno=412)
         586	BINARY_TRUE_DIVIDE(arg=None, lineno=412)
         588	STORE_FAST(arg=39, lineno=412)
         590	LOAD_FAST(arg=39, lineno=413)
         592	RETURN_VALUE(arg=None, lineno=413)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=6, lineno=329)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$Length6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=329)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$Length6.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=329)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$Length6.2', '$const8.3', '$10load_global.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=329)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$Length6.2', '$const8.3', '$12load_attr.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=CALL_FUNCTION_KW(arg=3, lineno=329)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$Length6.2', '$const8.3', '$12load_attr.5', '$const14.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=13, lineno=329)
2023-01-03 17:17 DEBUG stack ['$16call_function_kw.7']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=332)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=22, inst=STORE_FAST(arg=14, lineno=332)
2023-01-03 17:17 DEBUG stack ['$const20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=333)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=26, inst=STORE_FAST(arg=15, lineno=333)
2023-01-03 17:17 DEBUG stack ['$const24.9']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=334)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=30, inst=STORE_FAST(arg=16, lineno=334)
2023-01-03 17:17 DEBUG stack ['$const28.10']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=335)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_FAST(arg=17, lineno=335)
2023-01-03 17:17 DEBUG stack ['$const32.11']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=336)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=38, inst=STORE_FAST(arg=18, lineno=336)
2023-01-03 17:17 DEBUG stack ['$const36.12']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=9, lineno=338)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=42, inst=STORE_FAST(arg=19, lineno=338)
2023-01-03 17:17 DEBUG stack ['$size40.13']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=9, lineno=339)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=46, inst=STORE_FAST(arg=20, lineno=339)
2023-01-03 17:17 DEBUG stack ['$size44.14']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=8, lineno=342)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=50, inst=STORE_FAST(arg=8, lineno=342)
2023-01-03 17:17 DEBUG stack ['$slippage48.15']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=10, lineno=343)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=54, inst=STORE_FAST(arg=10, lineno=343)
2023-01-03 17:17 DEBUG stack ['$fee52.16']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=LOAD_CONST(arg=3, lineno=344)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=58, inst=STORE_FAST(arg=21, lineno=344)
2023-01-03 17:17 DEBUG stack ['$const56.17']
2023-01-03 17:17 DEBUG dispatch pc=60, inst=LOAD_GLOBAL(arg=3, lineno=347)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=6, lineno=348)
2023-01-03 17:17 DEBUG stack ['$60load_global.18']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=348)
2023-01-03 17:17 DEBUG stack ['$60load_global.18', '$Length62.19']
2023-01-03 17:17 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=348)
2023-01-03 17:17 DEBUG stack ['$60load_global.18', '$Length62.19', '$high_array64.20']
2023-01-03 17:17 DEBUG dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=348)
2023-01-03 17:17 DEBUG stack ['$60load_global.18', '$Length62.19', '$high_array64.20', '$low_array66.21']
2023-01-03 17:17 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=11, lineno=348)
2023-01-03 17:17 DEBUG stack ['$60load_global.18', '$Length62.19', '$high_array64.20', '$low_array66.21', '$close_array68.22']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=5, lineno=347)
2023-01-03 17:17 DEBUG stack ['$60load_global.18', '$Length62.19', '$high_array64.20', '$low_array66.21', '$close_array68.22', '$ATR_short170.23']
2023-01-03 17:17 DEBUG dispatch pc=74, inst=STORE_FAST(arg=22, lineno=347)
2023-01-03 17:17 DEBUG stack ['$72call_function.24']
2023-01-03 17:17 DEBUG dispatch pc=76, inst=LOAD_GLOBAL(arg=3, lineno=350)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=78, inst=LOAD_FAST(arg=6, lineno=351)
2023-01-03 17:17 DEBUG stack ['$76load_global.25']
2023-01-03 17:17 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=351)
2023-01-03 17:17 DEBUG stack ['$76load_global.25', '$Length78.26']
2023-01-03 17:17 DEBUG dispatch pc=82, inst=LOAD_FAST(arg=2, lineno=351)
2023-01-03 17:17 DEBUG stack ['$76load_global.25', '$Length78.26', '$high_array80.27']
2023-01-03 17:17 DEBUG dispatch pc=84, inst=LOAD_FAST(arg=3, lineno=351)
2023-01-03 17:17 DEBUG stack ['$76load_global.25', '$Length78.26', '$high_array80.27', '$low_array82.28']
2023-01-03 17:17 DEBUG dispatch pc=86, inst=LOAD_FAST(arg=12, lineno=351)
2023-01-03 17:17 DEBUG stack ['$76load_global.25', '$Length78.26', '$high_array80.27', '$low_array82.28', '$close_array84.29']
2023-01-03 17:17 DEBUG dispatch pc=88, inst=CALL_FUNCTION(arg=5, lineno=350)
2023-01-03 17:17 DEBUG stack ['$76load_global.25', '$Length78.26', '$high_array80.27', '$low_array82.28', '$close_array84.29', '$ATR_long286.30']
2023-01-03 17:17 DEBUG dispatch pc=90, inst=STORE_FAST(arg=23, lineno=350)
2023-01-03 17:17 DEBUG stack ['$88call_function.31']
2023-01-03 17:17 DEBUG dispatch pc=92, inst=LOAD_GLOBAL(arg=0, lineno=354)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=94, inst=LOAD_METHOD(arg=4, lineno=354)
2023-01-03 17:17 DEBUG stack ['$92load_global.32']
2023-01-03 17:17 DEBUG dispatch pc=96, inst=LOAD_FAST(arg=1, lineno=354)
2023-01-03 17:17 DEBUG stack ['$94load_method.33']
2023-01-03 17:17 DEBUG dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=354)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$high_array96.34']
2023-01-03 17:17 DEBUG dispatch pc=100, inst=BINARY_SUBTRACT(arg=None, lineno=354)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$high_array96.34', '$highestarr98.35']
2023-01-03 17:17 DEBUG dispatch pc=102, inst=LOAD_CONST(arg=1, lineno=354)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$100binary_subtract.36']
2023-01-03 17:17 DEBUG dispatch pc=104, inst=COMPARE_OP(arg=4, lineno=354)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$100binary_subtract.36', '$const102.37']
2023-01-03 17:17 DEBUG dispatch pc=106, inst=LOAD_FAST(arg=22, lineno=355)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$104compare_op.38']
2023-01-03 17:17 DEBUG dispatch pc=108, inst=LOAD_FAST(arg=23, lineno=355)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$104compare_op.38', '$ATR_short106.39']
2023-01-03 17:17 DEBUG dispatch pc=110, inst=BINARY_SUBTRACT(arg=None, lineno=355)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$104compare_op.38', '$ATR_short106.39', '$ATR_long108.40']
2023-01-03 17:17 DEBUG dispatch pc=112, inst=LOAD_CONST(arg=1, lineno=355)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$104compare_op.38', '$110binary_subtract.41']
2023-01-03 17:17 DEBUG dispatch pc=114, inst=COMPARE_OP(arg=4, lineno=355)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$104compare_op.38', '$110binary_subtract.41', '$const112.42']
2023-01-03 17:17 DEBUG dispatch pc=116, inst=BINARY_AND(arg=None, lineno=354)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$104compare_op.38', '$114compare_op.43']
2023-01-03 17:17 DEBUG dispatch pc=118, inst=LOAD_CONST(arg=4, lineno=355)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$116binary_and.44']
2023-01-03 17:17 DEBUG dispatch pc=120, inst=LOAD_CONST(arg=1, lineno=355)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$116binary_and.44', '$const118.45']
2023-01-03 17:17 DEBUG dispatch pc=122, inst=CALL_METHOD(arg=3, lineno=354)
2023-01-03 17:17 DEBUG stack ['$94load_method.33', '$116binary_and.44', '$const118.45', '$const120.46']
2023-01-03 17:17 DEBUG dispatch pc=124, inst=STORE_FAST(arg=24, lineno=354)
2023-01-03 17:17 DEBUG stack ['$122call_method.47']
2023-01-03 17:17 DEBUG dispatch pc=126, inst=LOAD_GLOBAL(arg=0, lineno=356)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=128, inst=LOAD_METHOD(arg=4, lineno=356)
2023-01-03 17:17 DEBUG stack ['$126load_global.48']
2023-01-03 17:17 DEBUG dispatch pc=130, inst=LOAD_FAST(arg=2, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49']
2023-01-03 17:17 DEBUG dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49', '$low_array130.50']
2023-01-03 17:17 DEBUG dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49', '$low_array130.50', '$lowestarr132.51']
2023-01-03 17:17 DEBUG dispatch pc=136, inst=LOAD_CONST(arg=1, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49', '$134binary_subtract.52']
2023-01-03 17:17 DEBUG dispatch pc=138, inst=COMPARE_OP(arg=0, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49', '$134binary_subtract.52', '$const136.53']
2023-01-03 17:17 DEBUG dispatch pc=140, inst=LOAD_CONST(arg=5, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49', '$138compare_op.54']
2023-01-03 17:17 DEBUG dispatch pc=142, inst=LOAD_FAST(arg=24, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49', '$138compare_op.54', '$const140.55']
2023-01-03 17:17 DEBUG dispatch pc=144, inst=CALL_METHOD(arg=3, lineno=356)
2023-01-03 17:17 DEBUG stack ['$128load_method.49', '$138compare_op.54', '$const140.55', '$trends142.56']
2023-01-03 17:17 DEBUG dispatch pc=146, inst=STORE_FAST(arg=25, lineno=356)
2023-01-03 17:17 DEBUG stack ['$144call_method.57']
2023-01-03 17:17 DEBUG dispatch pc=148, inst=LOAD_GLOBAL(arg=0, lineno=357)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=150, inst=LOAD_METHOD(arg=5, lineno=357)
2023-01-03 17:17 DEBUG stack ['$148load_global.58']
2023-01-03 17:17 DEBUG dispatch pc=152, inst=LOAD_FAST(arg=25, lineno=357)
2023-01-03 17:17 DEBUG stack ['$150load_method.59']
2023-01-03 17:17 DEBUG dispatch pc=154, inst=LOAD_CONST(arg=4, lineno=357)
2023-01-03 17:17 DEBUG stack ['$150load_method.59', '$orders152.60']
2023-01-03 17:17 DEBUG dispatch pc=156, inst=CALL_METHOD(arg=2, lineno=357)
2023-01-03 17:17 DEBUG stack ['$150load_method.59', '$orders152.60', '$const154.61']
2023-01-03 17:17 DEBUG dispatch pc=158, inst=STORE_FAST(arg=26, lineno=357)
2023-01-03 17:17 DEBUG stack ['$156call_method.62']
2023-01-03 17:17 DEBUG dispatch pc=160, inst=LOAD_CONST(arg=1, lineno=358)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=162, inst=LOAD_FAST(arg=26, lineno=358)
2023-01-03 17:17 DEBUG stack ['$const160.63']
2023-01-03 17:17 DEBUG dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=358)
2023-01-03 17:17 DEBUG stack ['$const160.63', '$shiftorder162.64']
2023-01-03 17:17 DEBUG dispatch pc=166, inst=STORE_SUBSCR(arg=None, lineno=358)
2023-01-03 17:17 DEBUG stack ['$const160.63', '$shiftorder162.64', '$const164.65']
2023-01-03 17:17 DEBUG dispatch pc=168, inst=LOAD_GLOBAL(arg=6, lineno=361)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=170, inst=LOAD_FAST(arg=6, lineno=361)
2023-01-03 17:17 DEBUG stack ['$168load_global.66']
2023-01-03 17:17 DEBUG dispatch pc=172, inst=CALL_FUNCTION(arg=1, lineno=361)
2023-01-03 17:17 DEBUG stack ['$168load_global.66', '$Length170.67']
2023-01-03 17:17 DEBUG dispatch pc=174, inst=GET_ITER(arg=None, lineno=361)
2023-01-03 17:17 DEBUG stack ['$172call_function.68']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=176, stack=('$174get_iter.69',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=176 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi176.0']
2023-01-03 17:17 DEBUG dispatch pc=176, inst=FOR_ITER(arg=44, lineno=361)
2023-01-03 17:17 DEBUG stack ['$phi176.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=222, stack=(), blockstack=(), npush=0), Edge(pc=178, stack=('$phi176.0', '$176for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=222 nstack_initial=0), State(pc_initial=178 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=222, inst=LOAD_GLOBAL(arg=0, lineno=373)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=224, inst=LOAD_METHOD(arg=5, lineno=373)
2023-01-03 17:17 DEBUG stack ['$222load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=226, inst=LOAD_FAST(arg=13, lineno=373)
2023-01-03 17:17 DEBUG stack ['$224load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=228, inst=LOAD_CONST(arg=4, lineno=373)
2023-01-03 17:17 DEBUG stack ['$224load_method.1', '$marketpostion_array226.2']
2023-01-03 17:17 DEBUG dispatch pc=230, inst=CALL_METHOD(arg=2, lineno=373)
2023-01-03 17:17 DEBUG stack ['$224load_method.1', '$marketpostion_array226.2', '$const228.3']
2023-01-03 17:17 DEBUG dispatch pc=232, inst=STORE_FAST(arg=29, lineno=373)
2023-01-03 17:17 DEBUG stack ['$230call_method.4']
2023-01-03 17:17 DEBUG dispatch pc=234, inst=LOAD_CONST(arg=1, lineno=374)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=236, inst=LOAD_FAST(arg=29, lineno=374)
2023-01-03 17:17 DEBUG stack ['$const234.5']
2023-01-03 17:17 DEBUG dispatch pc=238, inst=LOAD_CONST(arg=1, lineno=374)
2023-01-03 17:17 DEBUG stack ['$const234.5', '$last_marketpostion_arr236.6']
2023-01-03 17:17 DEBUG dispatch pc=240, inst=STORE_SUBSCR(arg=None, lineno=374)
2023-01-03 17:17 DEBUG stack ['$const234.5', '$last_marketpostion_arr236.6', '$const238.7']
2023-01-03 17:17 DEBUG dispatch pc=242, inst=LOAD_GLOBAL(arg=0, lineno=376)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=244, inst=LOAD_METHOD(arg=4, lineno=376)
2023-01-03 17:17 DEBUG stack ['$242load_global.8']
2023-01-03 17:17 DEBUG dispatch pc=246, inst=LOAD_FAST(arg=13, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9']
2023-01-03 17:17 DEBUG dispatch pc=248, inst=LOAD_FAST(arg=29, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$marketpostion_array246.10']
2023-01-03 17:17 DEBUG dispatch pc=250, inst=BINARY_SUBTRACT(arg=None, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$marketpostion_array246.10', '$last_marketpostion_arr248.11']
2023-01-03 17:17 DEBUG dispatch pc=252, inst=LOAD_CONST(arg=1, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$250binary_subtract.12']
2023-01-03 17:17 DEBUG dispatch pc=254, inst=COMPARE_OP(arg=4, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$250binary_subtract.12', '$const252.13']
2023-01-03 17:17 DEBUG dispatch pc=256, inst=LOAD_FAST(arg=0, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$254compare_op.14']
2023-01-03 17:17 DEBUG dispatch pc=258, inst=LOAD_CONST(arg=4, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$254compare_op.14', '$open_array256.15']
2023-01-03 17:17 DEBUG dispatch pc=260, inst=LOAD_FAST(arg=8, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$254compare_op.14', '$open_array256.15', '$const258.16']
2023-01-03 17:17 DEBUG dispatch pc=262, inst=BINARY_ADD(arg=None, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$254compare_op.14', '$open_array256.15', '$const258.16', '$slippage260.17']
2023-01-03 17:17 DEBUG dispatch pc=264, inst=BINARY_MULTIPLY(arg=None, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$254compare_op.14', '$open_array256.15', '$262binary_add.18']
2023-01-03 17:17 DEBUG dispatch pc=266, inst=LOAD_CONST(arg=1, lineno=377)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$254compare_op.14', '$264binary_multiply.19']
2023-01-03 17:17 DEBUG dispatch pc=268, inst=CALL_METHOD(arg=3, lineno=376)
2023-01-03 17:17 DEBUG stack ['$244load_method.9', '$254compare_op.14', '$264binary_multiply.19', '$const266.20']
2023-01-03 17:17 DEBUG dispatch pc=270, inst=STORE_FAST(arg=30, lineno=376)
2023-01-03 17:17 DEBUG stack ['$268call_method.21']
2023-01-03 17:17 DEBUG dispatch pc=272, inst=LOAD_FAST(arg=30, lineno=379)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=274, inst=LOAD_GLOBAL(arg=0, lineno=379)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr272.22']
2023-01-03 17:17 DEBUG dispatch pc=276, inst=LOAD_METHOD(arg=4, lineno=379)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr272.22', '$274load_global.23']
2023-01-03 17:17 DEBUG dispatch pc=278, inst=LOAD_FAST(arg=30, lineno=379)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr272.22', '$276load_method.24']
2023-01-03 17:17 DEBUG dispatch pc=280, inst=LOAD_CONST(arg=1, lineno=379)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr272.22', '$276load_method.24', '$entryprice_arr278.25']
2023-01-03 17:17 DEBUG dispatch pc=282, inst=COMPARE_OP(arg=4, lineno=379)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr272.22', '$276load_method.24', '$entryprice_arr278.25', '$const280.26']
2023-01-03 17:17 DEBUG dispatch pc=284, inst=CALL_METHOD(arg=1, lineno=379)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr272.22', '$276load_method.24', '$282compare_op.27']
2023-01-03 17:17 DEBUG dispatch pc=286, inst=BINARY_SUBSCR(arg=None, lineno=379)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr272.22', '$284call_method.28']
2023-01-03 17:17 DEBUG dispatch pc=288, inst=STORE_FAST(arg=30, lineno=379)
2023-01-03 17:17 DEBUG stack ['$286binary_subscr.29']
2023-01-03 17:17 DEBUG dispatch pc=290, inst=LOAD_FAST(arg=30, lineno=383)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=292, inst=LOAD_ATTR(arg=7, lineno=383)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr290.30']
2023-01-03 17:17 DEBUG dispatch pc=294, inst=LOAD_CONST(arg=1, lineno=383)
2023-01-03 17:17 DEBUG stack ['$292load_attr.31']
2023-01-03 17:17 DEBUG dispatch pc=296, inst=BINARY_SUBSCR(arg=None, lineno=383)
2023-01-03 17:17 DEBUG stack ['$292load_attr.31', '$const294.32']
2023-01-03 17:17 DEBUG dispatch pc=298, inst=LOAD_CONST(arg=1, lineno=383)
2023-01-03 17:17 DEBUG stack ['$296binary_subscr.33']
2023-01-03 17:17 DEBUG dispatch pc=300, inst=COMPARE_OP(arg=2, lineno=383)
2023-01-03 17:17 DEBUG stack ['$296binary_subscr.33', '$const298.34']
2023-01-03 17:17 DEBUG dispatch pc=302, inst=POP_JUMP_IF_FALSE(arg=310, lineno=383)
2023-01-03 17:17 DEBUG stack ['$300compare_op.35']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=306, stack=(), blockstack=(), npush=0), Edge(pc=310, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=178 nstack_initial=2), State(pc_initial=306 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: ['$phi178.0', '$phi178.1']
2023-01-03 17:17 DEBUG dispatch pc=178, inst=STORE_FAST(arg=27, lineno=361)
2023-01-03 17:17 DEBUG stack ['$phi178.0', '$phi178.1']
2023-01-03 17:17 DEBUG dispatch pc=180, inst=LOAD_FAST(arg=26, lineno=362)
2023-01-03 17:17 DEBUG stack ['$phi178.0']
2023-01-03 17:17 DEBUG dispatch pc=182, inst=LOAD_FAST(arg=27, lineno=362)
2023-01-03 17:17 DEBUG stack ['$phi178.0', '$shiftorder180.2']
2023-01-03 17:17 DEBUG dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=362)
2023-01-03 17:17 DEBUG stack ['$phi178.0', '$shiftorder180.2', '$i182.3']
2023-01-03 17:17 DEBUG dispatch pc=186, inst=STORE_FAST(arg=28, lineno=362)
2023-01-03 17:17 DEBUG stack ['$phi178.0', '$184binary_subscr.4']
2023-01-03 17:17 DEBUG dispatch pc=188, inst=LOAD_FAST(arg=28, lineno=365)
2023-01-03 17:17 DEBUG stack ['$phi178.0']
2023-01-03 17:17 DEBUG dispatch pc=190, inst=LOAD_CONST(arg=4, lineno=365)
2023-01-03 17:17 DEBUG stack ['$phi178.0', '$current_order188.5']
2023-01-03 17:17 DEBUG dispatch pc=192, inst=COMPARE_OP(arg=2, lineno=365)
2023-01-03 17:17 DEBUG stack ['$phi178.0', '$current_order188.5', '$const190.6']
2023-01-03 17:17 DEBUG dispatch pc=194, inst=POP_JUMP_IF_FALSE(arg=200, lineno=365)
2023-01-03 17:17 DEBUG stack ['$phi178.0', '$192compare_op.7']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=196, stack=('$phi178.0',), blockstack=(), npush=0), Edge(pc=200, stack=('$phi178.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=306 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=196 nstack_initial=1), State(pc_initial=200 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=306, inst=LOAD_CONST(arg=1, lineno=384)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=308, inst=RETURN_VALUE(arg=None, lineno=384)
2023-01-03 17:17 DEBUG stack ['$const306.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=310 nstack_initial=0), State(pc_initial=196 nstack_initial=1), State(pc_initial=200 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=310, inst=LOAD_GLOBAL(arg=0, lineno=386)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=312, inst=LOAD_METHOD(arg=4, lineno=386)
2023-01-03 17:17 DEBUG stack ['$310load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=314, inst=LOAD_FAST(arg=13, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=316, inst=LOAD_FAST(arg=29, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$marketpostion_array314.2']
2023-01-03 17:17 DEBUG dispatch pc=318, inst=BINARY_SUBTRACT(arg=None, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$marketpostion_array314.2', '$last_marketpostion_arr316.3']
2023-01-03 17:17 DEBUG dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$318binary_subtract.4']
2023-01-03 17:17 DEBUG dispatch pc=322, inst=COMPARE_OP(arg=0, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$318binary_subtract.4', '$const320.5']
2023-01-03 17:17 DEBUG dispatch pc=324, inst=LOAD_FAST(arg=0, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$322compare_op.6']
2023-01-03 17:17 DEBUG dispatch pc=326, inst=LOAD_CONST(arg=4, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$322compare_op.6', '$open_array324.7']
2023-01-03 17:17 DEBUG dispatch pc=328, inst=LOAD_FAST(arg=8, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$322compare_op.6', '$open_array324.7', '$const326.8']
2023-01-03 17:17 DEBUG dispatch pc=330, inst=BINARY_SUBTRACT(arg=None, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$322compare_op.6', '$open_array324.7', '$const326.8', '$slippage328.9']
2023-01-03 17:17 DEBUG dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$322compare_op.6', '$open_array324.7', '$330binary_subtract.10']
2023-01-03 17:17 DEBUG dispatch pc=334, inst=LOAD_CONST(arg=1, lineno=387)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$322compare_op.6', '$332binary_multiply.11']
2023-01-03 17:17 DEBUG dispatch pc=336, inst=CALL_METHOD(arg=3, lineno=386)
2023-01-03 17:17 DEBUG stack ['$312load_method.1', '$322compare_op.6', '$332binary_multiply.11', '$const334.12']
2023-01-03 17:17 DEBUG dispatch pc=338, inst=STORE_FAST(arg=31, lineno=386)
2023-01-03 17:17 DEBUG stack ['$336call_method.13']
2023-01-03 17:17 DEBUG dispatch pc=340, inst=LOAD_FAST(arg=31, lineno=388)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=342, inst=LOAD_GLOBAL(arg=0, lineno=388)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr340.14']
2023-01-03 17:17 DEBUG dispatch pc=344, inst=LOAD_METHOD(arg=4, lineno=388)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr340.14', '$342load_global.15']
2023-01-03 17:17 DEBUG dispatch pc=346, inst=LOAD_FAST(arg=31, lineno=388)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr340.14', '$344load_method.16']
2023-01-03 17:17 DEBUG dispatch pc=348, inst=LOAD_CONST(arg=1, lineno=388)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr340.14', '$344load_method.16', '$exitsprice_arr346.17']
2023-01-03 17:17 DEBUG dispatch pc=350, inst=COMPARE_OP(arg=4, lineno=388)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr340.14', '$344load_method.16', '$exitsprice_arr346.17', '$const348.18']
2023-01-03 17:17 DEBUG dispatch pc=352, inst=CALL_METHOD(arg=1, lineno=388)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr340.14', '$344load_method.16', '$350compare_op.19']
2023-01-03 17:17 DEBUG dispatch pc=354, inst=BINARY_SUBSCR(arg=None, lineno=388)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr340.14', '$352call_method.20']
2023-01-03 17:17 DEBUG dispatch pc=356, inst=STORE_FAST(arg=31, lineno=388)
2023-01-03 17:17 DEBUG stack ['$354binary_subscr.21']
2023-01-03 17:17 DEBUG dispatch pc=358, inst=LOAD_FAST(arg=30, lineno=391)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=360, inst=LOAD_CONST(arg=0, lineno=391)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr358.22']
2023-01-03 17:17 DEBUG dispatch pc=362, inst=LOAD_FAST(arg=31, lineno=391)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr358.22', '$const360.23']
2023-01-03 17:17 DEBUG dispatch pc=364, inst=LOAD_ATTR(arg=7, lineno=391)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr358.22', '$const360.23', '$exitsprice_arr362.24']
2023-01-03 17:17 DEBUG dispatch pc=366, inst=LOAD_CONST(arg=1, lineno=391)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr358.22', '$const360.23', '$364load_attr.25']
2023-01-03 17:17 DEBUG dispatch pc=368, inst=BINARY_SUBSCR(arg=None, lineno=391)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr358.22', '$const360.23', '$364load_attr.25', '$const366.26']
2023-01-03 17:17 DEBUG dispatch pc=370, inst=BUILD_SLICE(arg=2, lineno=391)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr358.22', '$const360.23', '$368binary_subscr.27']
2023-01-03 17:17 DEBUG dispatch pc=372, inst=BINARY_SUBSCR(arg=None, lineno=391)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr358.22', '$370build_slice.29']
2023-01-03 17:17 DEBUG dispatch pc=374, inst=STORE_FAST(arg=30, lineno=391)
2023-01-03 17:17 DEBUG stack ['$372binary_subscr.30']
2023-01-03 17:17 DEBUG dispatch pc=376, inst=LOAD_FAST(arg=31, lineno=393)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=378, inst=LOAD_FAST(arg=30, lineno=393)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr376.31']
2023-01-03 17:17 DEBUG dispatch pc=380, inst=BINARY_SUBTRACT(arg=None, lineno=393)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr376.31', '$entryprice_arr378.32']
2023-01-03 17:17 DEBUG dispatch pc=382, inst=STORE_FAST(arg=32, lineno=393)
2023-01-03 17:17 DEBUG stack ['$380binary_subtract.33']
2023-01-03 17:17 DEBUG dispatch pc=384, inst=LOAD_GLOBAL(arg=0, lineno=395)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=386, inst=LOAD_METHOD(arg=4, lineno=395)
2023-01-03 17:17 DEBUG stack ['$384load_global.34']
2023-01-03 17:17 DEBUG dispatch pc=388, inst=LOAD_FAST(arg=13, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35']
2023-01-03 17:17 DEBUG dispatch pc=390, inst=LOAD_FAST(arg=29, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$marketpostion_array388.36']
2023-01-03 17:17 DEBUG dispatch pc=392, inst=BINARY_SUBTRACT(arg=None, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$marketpostion_array388.36', '$last_marketpostion_arr390.37']
2023-01-03 17:17 DEBUG dispatch pc=394, inst=LOAD_CONST(arg=1, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$392binary_subtract.38']
2023-01-03 17:17 DEBUG dispatch pc=396, inst=COMPARE_OP(arg=4, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$392binary_subtract.38', '$const394.39']
2023-01-03 17:17 DEBUG dispatch pc=398, inst=LOAD_FAST(arg=0, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$396compare_op.40']
2023-01-03 17:17 DEBUG dispatch pc=400, inst=LOAD_FAST(arg=10, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$396compare_op.40', '$open_array398.41']
2023-01-03 17:17 DEBUG dispatch pc=402, inst=BINARY_MULTIPLY(arg=None, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$396compare_op.40', '$open_array398.41', '$fee400.42']
2023-01-03 17:17 DEBUG dispatch pc=404, inst=LOAD_FAST(arg=9, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$396compare_op.40', '$402binary_multiply.43']
2023-01-03 17:17 DEBUG dispatch pc=406, inst=BINARY_MULTIPLY(arg=None, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$396compare_op.40', '$402binary_multiply.43', '$size404.44']
2023-01-03 17:17 DEBUG dispatch pc=408, inst=LOAD_CONST(arg=1, lineno=396)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$396compare_op.40', '$406binary_multiply.45']
2023-01-03 17:17 DEBUG dispatch pc=410, inst=CALL_METHOD(arg=3, lineno=395)
2023-01-03 17:17 DEBUG stack ['$386load_method.35', '$396compare_op.40', '$406binary_multiply.45', '$const408.46']
2023-01-03 17:17 DEBUG dispatch pc=412, inst=STORE_FAST(arg=33, lineno=395)
2023-01-03 17:17 DEBUG stack ['$410call_method.47']
2023-01-03 17:17 DEBUG dispatch pc=414, inst=LOAD_FAST(arg=33, lineno=397)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=416, inst=LOAD_GLOBAL(arg=0, lineno=397)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr414.48']
2023-01-03 17:17 DEBUG dispatch pc=418, inst=LOAD_METHOD(arg=4, lineno=397)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr414.48', '$416load_global.49']
2023-01-03 17:17 DEBUG dispatch pc=420, inst=LOAD_FAST(arg=33, lineno=397)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr414.48', '$418load_method.50']
2023-01-03 17:17 DEBUG dispatch pc=422, inst=LOAD_CONST(arg=1, lineno=397)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr414.48', '$418load_method.50', '$buy_Fees_arr420.51']
2023-01-03 17:17 DEBUG dispatch pc=424, inst=COMPARE_OP(arg=4, lineno=397)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr414.48', '$418load_method.50', '$buy_Fees_arr420.51', '$const422.52']
2023-01-03 17:17 DEBUG dispatch pc=426, inst=CALL_METHOD(arg=1, lineno=397)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr414.48', '$418load_method.50', '$424compare_op.53']
2023-01-03 17:17 DEBUG dispatch pc=428, inst=BINARY_SUBSCR(arg=None, lineno=397)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr414.48', '$426call_method.54']
2023-01-03 17:17 DEBUG dispatch pc=430, inst=STORE_FAST(arg=33, lineno=397)
2023-01-03 17:17 DEBUG stack ['$428binary_subscr.55']
2023-01-03 17:17 DEBUG dispatch pc=432, inst=LOAD_FAST(arg=33, lineno=398)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=434, inst=LOAD_CONST(arg=0, lineno=398)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr432.56']
2023-01-03 17:17 DEBUG dispatch pc=436, inst=LOAD_FAST(arg=31, lineno=398)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr432.56', '$const434.57']
2023-01-03 17:17 DEBUG dispatch pc=438, inst=LOAD_ATTR(arg=7, lineno=398)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr432.56', '$const434.57', '$exitsprice_arr436.58']
2023-01-03 17:17 DEBUG dispatch pc=440, inst=LOAD_CONST(arg=1, lineno=398)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr432.56', '$const434.57', '$438load_attr.59']
2023-01-03 17:17 DEBUG dispatch pc=442, inst=BINARY_SUBSCR(arg=None, lineno=398)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr432.56', '$const434.57', '$438load_attr.59', '$const440.60']
2023-01-03 17:17 DEBUG dispatch pc=444, inst=BUILD_SLICE(arg=2, lineno=398)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr432.56', '$const434.57', '$442binary_subscr.61']
2023-01-03 17:17 DEBUG dispatch pc=446, inst=BINARY_SUBSCR(arg=None, lineno=398)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr432.56', '$444build_slice.63']
2023-01-03 17:17 DEBUG dispatch pc=448, inst=STORE_FAST(arg=33, lineno=398)
2023-01-03 17:17 DEBUG stack ['$446binary_subscr.64']
2023-01-03 17:17 DEBUG dispatch pc=450, inst=LOAD_GLOBAL(arg=0, lineno=400)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=452, inst=LOAD_METHOD(arg=4, lineno=400)
2023-01-03 17:17 DEBUG stack ['$450load_global.65']
2023-01-03 17:17 DEBUG dispatch pc=454, inst=LOAD_FAST(arg=13, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66']
2023-01-03 17:17 DEBUG dispatch pc=456, inst=LOAD_FAST(arg=29, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$marketpostion_array454.67']
2023-01-03 17:17 DEBUG dispatch pc=458, inst=BINARY_SUBTRACT(arg=None, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$marketpostion_array454.67', '$last_marketpostion_arr456.68']
2023-01-03 17:17 DEBUG dispatch pc=460, inst=LOAD_CONST(arg=1, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$458binary_subtract.69']
2023-01-03 17:17 DEBUG dispatch pc=462, inst=COMPARE_OP(arg=0, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$458binary_subtract.69', '$const460.70']
2023-01-03 17:17 DEBUG dispatch pc=464, inst=LOAD_FAST(arg=0, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$462compare_op.71']
2023-01-03 17:17 DEBUG dispatch pc=466, inst=LOAD_FAST(arg=10, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$462compare_op.71', '$open_array464.72']
2023-01-03 17:17 DEBUG dispatch pc=468, inst=BINARY_MULTIPLY(arg=None, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$462compare_op.71', '$open_array464.72', '$fee466.73']
2023-01-03 17:17 DEBUG dispatch pc=470, inst=LOAD_FAST(arg=9, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$462compare_op.71', '$468binary_multiply.74']
2023-01-03 17:17 DEBUG dispatch pc=472, inst=BINARY_MULTIPLY(arg=None, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$462compare_op.71', '$468binary_multiply.74', '$size470.75']
2023-01-03 17:17 DEBUG dispatch pc=474, inst=LOAD_CONST(arg=1, lineno=401)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$462compare_op.71', '$472binary_multiply.76']
2023-01-03 17:17 DEBUG dispatch pc=476, inst=CALL_METHOD(arg=3, lineno=400)
2023-01-03 17:17 DEBUG stack ['$452load_method.66', '$462compare_op.71', '$472binary_multiply.76', '$const474.77']
2023-01-03 17:17 DEBUG dispatch pc=478, inst=STORE_FAST(arg=34, lineno=400)
2023-01-03 17:17 DEBUG stack ['$476call_method.78']
2023-01-03 17:17 DEBUG dispatch pc=480, inst=LOAD_FAST(arg=34, lineno=402)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=482, inst=LOAD_GLOBAL(arg=0, lineno=402)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr480.79']
2023-01-03 17:17 DEBUG dispatch pc=484, inst=LOAD_METHOD(arg=4, lineno=402)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr480.79', '$482load_global.80']
2023-01-03 17:17 DEBUG dispatch pc=486, inst=LOAD_FAST(arg=34, lineno=402)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr480.79', '$484load_method.81']
2023-01-03 17:17 DEBUG dispatch pc=488, inst=LOAD_CONST(arg=1, lineno=402)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr480.79', '$484load_method.81', '$sell_Fees_arr486.82']
2023-01-03 17:17 DEBUG dispatch pc=490, inst=COMPARE_OP(arg=4, lineno=402)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr480.79', '$484load_method.81', '$sell_Fees_arr486.82', '$const488.83']
2023-01-03 17:17 DEBUG dispatch pc=492, inst=CALL_METHOD(arg=1, lineno=402)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr480.79', '$484load_method.81', '$490compare_op.84']
2023-01-03 17:17 DEBUG dispatch pc=494, inst=BINARY_SUBSCR(arg=None, lineno=402)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr480.79', '$492call_method.85']
2023-01-03 17:17 DEBUG dispatch pc=496, inst=STORE_FAST(arg=34, lineno=402)
2023-01-03 17:17 DEBUG stack ['$494binary_subscr.86']
2023-01-03 17:17 DEBUG dispatch pc=498, inst=LOAD_FAST(arg=32, lineno=404)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=500, inst=LOAD_FAST(arg=33, lineno=404)
2023-01-03 17:17 DEBUG stack ['$diff_arr498.87']
2023-01-03 17:17 DEBUG dispatch pc=502, inst=BINARY_SUBTRACT(arg=None, lineno=404)
2023-01-03 17:17 DEBUG stack ['$diff_arr498.87', '$buy_Fees_arr500.88']
2023-01-03 17:17 DEBUG dispatch pc=504, inst=LOAD_FAST(arg=34, lineno=404)
2023-01-03 17:17 DEBUG stack ['$502binary_subtract.89']
2023-01-03 17:17 DEBUG dispatch pc=506, inst=BINARY_SUBTRACT(arg=None, lineno=404)
2023-01-03 17:17 DEBUG stack ['$502binary_subtract.89', '$sell_Fees_arr504.90']
2023-01-03 17:17 DEBUG dispatch pc=508, inst=STORE_FAST(arg=35, lineno=404)
2023-01-03 17:17 DEBUG stack ['$506binary_subtract.91']
2023-01-03 17:17 DEBUG dispatch pc=510, inst=LOAD_GLOBAL(arg=0, lineno=406)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=512, inst=LOAD_METHOD(arg=8, lineno=406)
2023-01-03 17:17 DEBUG stack ['$510load_global.92']
2023-01-03 17:17 DEBUG dispatch pc=514, inst=LOAD_FAST(arg=35, lineno=407)
2023-01-03 17:17 DEBUG stack ['$512load_method.93']
2023-01-03 17:17 DEBUG dispatch pc=516, inst=CALL_METHOD(arg=1, lineno=406)
2023-01-03 17:17 DEBUG stack ['$512load_method.93', '$ClosedPostionprofit_arr514.94']
2023-01-03 17:17 DEBUG dispatch pc=518, inst=LOAD_FAST(arg=7, lineno=407)
2023-01-03 17:17 DEBUG stack ['$516call_method.95']
2023-01-03 17:17 DEBUG dispatch pc=520, inst=BINARY_ADD(arg=None, lineno=406)
2023-01-03 17:17 DEBUG stack ['$516call_method.95', '$init_cash518.96']
2023-01-03 17:17 DEBUG dispatch pc=522, inst=STORE_FAST(arg=35, lineno=406)
2023-01-03 17:17 DEBUG stack ['$520binary_add.97']
2023-01-03 17:17 DEBUG dispatch pc=524, inst=LOAD_GLOBAL(arg=9, lineno=409)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=526, inst=LOAD_FAST(arg=35, lineno=409)
2023-01-03 17:17 DEBUG stack ['$524load_global.98']
2023-01-03 17:17 DEBUG dispatch pc=528, inst=LOAD_FAST(arg=7, lineno=409)
2023-01-03 17:17 DEBUG stack ['$524load_global.98', '$ClosedPostionprofit_arr526.99']
2023-01-03 17:17 DEBUG dispatch pc=530, inst=CALL_FUNCTION(arg=2, lineno=409)
2023-01-03 17:17 DEBUG stack ['$524load_global.98', '$ClosedPostionprofit_arr526.99', '$init_cash528.100']
2023-01-03 17:17 DEBUG dispatch pc=532, inst=STORE_FAST(arg=36, lineno=409)
2023-01-03 17:17 DEBUG stack ['$530call_function.101']
2023-01-03 17:17 DEBUG dispatch pc=534, inst=LOAD_GLOBAL(arg=0, lineno=410)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=536, inst=LOAD_METHOD(arg=10, lineno=410)
2023-01-03 17:17 DEBUG stack ['$534load_global.102']
2023-01-03 17:17 DEBUG dispatch pc=538, inst=LOAD_FAST(arg=36, lineno=410)
2023-01-03 17:17 DEBUG stack ['$536load_method.103']
2023-01-03 17:17 DEBUG dispatch pc=540, inst=LOAD_CONST(arg=6, lineno=410)
2023-01-03 17:17 DEBUG stack ['$536load_method.103', '$DD_per_array538.104']
2023-01-03 17:17 DEBUG dispatch pc=542, inst=BINARY_POWER(arg=None, lineno=410)
2023-01-03 17:17 DEBUG stack ['$536load_method.103', '$DD_per_array538.104', '$const540.105']
2023-01-03 17:17 DEBUG dispatch pc=544, inst=CALL_METHOD(arg=1, lineno=410)
2023-01-03 17:17 DEBUG stack ['$536load_method.103', '$542binary_power.106']
2023-01-03 17:17 DEBUG dispatch pc=546, inst=STORE_FAST(arg=37, lineno=410)
2023-01-03 17:17 DEBUG stack ['$544call_method.107']
2023-01-03 17:17 DEBUG dispatch pc=548, inst=LOAD_FAST(arg=35, lineno=411)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=550, inst=LOAD_CONST(arg=5, lineno=411)
2023-01-03 17:17 DEBUG stack ['$ClosedPostionprofit_arr548.108']
2023-01-03 17:17 DEBUG dispatch pc=552, inst=BINARY_SUBSCR(arg=None, lineno=411)
2023-01-03 17:17 DEBUG stack ['$ClosedPostionprofit_arr548.108', '$const550.109']
2023-01-03 17:17 DEBUG dispatch pc=554, inst=LOAD_FAST(arg=7, lineno=411)
2023-01-03 17:17 DEBUG stack ['$552binary_subscr.110']
2023-01-03 17:17 DEBUG dispatch pc=556, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=411)
2023-01-03 17:17 DEBUG stack ['$552binary_subscr.110', '$init_cash554.111']
2023-01-03 17:17 DEBUG dispatch pc=558, inst=LOAD_CONST(arg=4, lineno=411)
2023-01-03 17:17 DEBUG stack ['$556binary_true_divide.112']
2023-01-03 17:17 DEBUG dispatch pc=560, inst=BINARY_SUBTRACT(arg=None, lineno=411)
2023-01-03 17:17 DEBUG stack ['$556binary_true_divide.112', '$const558.113']
2023-01-03 17:17 DEBUG dispatch pc=562, inst=STORE_FAST(arg=38, lineno=411)
2023-01-03 17:17 DEBUG stack ['$560binary_subtract.114']
2023-01-03 17:17 DEBUG dispatch pc=564, inst=LOAD_FAST(arg=38, lineno=412)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=566, inst=LOAD_CONST(arg=7, lineno=412)
2023-01-03 17:17 DEBUG stack ['$ROI564.115']
2023-01-03 17:17 DEBUG dispatch pc=568, inst=BINARY_MULTIPLY(arg=None, lineno=412)
2023-01-03 17:17 DEBUG stack ['$ROI564.115', '$const566.116']
2023-01-03 17:17 DEBUG dispatch pc=570, inst=LOAD_FAST(arg=37, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117']
2023-01-03 17:17 DEBUG dispatch pc=572, inst=LOAD_FAST(arg=31, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$sumallDD570.118']
2023-01-03 17:17 DEBUG dispatch pc=574, inst=LOAD_ATTR(arg=7, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$sumallDD570.118', '$exitsprice_arr572.119']
2023-01-03 17:17 DEBUG dispatch pc=576, inst=LOAD_CONST(arg=1, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$sumallDD570.118', '$574load_attr.120']
2023-01-03 17:17 DEBUG dispatch pc=578, inst=BINARY_SUBSCR(arg=None, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$sumallDD570.118', '$574load_attr.120', '$const576.121']
2023-01-03 17:17 DEBUG dispatch pc=580, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$sumallDD570.118', '$578binary_subscr.122']
2023-01-03 17:17 DEBUG dispatch pc=582, inst=LOAD_CONST(arg=8, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$580binary_true_divide.123']
2023-01-03 17:17 DEBUG dispatch pc=584, inst=BINARY_POWER(arg=None, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$580binary_true_divide.123', '$const582.124']
2023-01-03 17:17 DEBUG dispatch pc=586, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=412)
2023-01-03 17:17 DEBUG stack ['$568binary_multiply.117', '$584binary_power.125']
2023-01-03 17:17 DEBUG dispatch pc=588, inst=STORE_FAST(arg=39, lineno=412)
2023-01-03 17:17 DEBUG stack ['$586binary_true_divide.126']
2023-01-03 17:17 DEBUG dispatch pc=590, inst=LOAD_FAST(arg=39, lineno=413)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=592, inst=RETURN_VALUE(arg=None, lineno=413)
2023-01-03 17:17 DEBUG stack ['$ui_590.127']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=196 nstack_initial=1), State(pc_initial=200 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi196.0']
2023-01-03 17:17 DEBUG dispatch pc=196, inst=LOAD_CONST(arg=4, lineno=366)
2023-01-03 17:17 DEBUG stack ['$phi196.0']
2023-01-03 17:17 DEBUG dispatch pc=198, inst=STORE_FAST(arg=14, lineno=366)
2023-01-03 17:17 DEBUG stack ['$phi196.0', '$const196.1']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=200, stack=('$phi196.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=200 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi200.0']
2023-01-03 17:17 DEBUG dispatch pc=200, inst=LOAD_FAST(arg=28, lineno=367)
2023-01-03 17:17 DEBUG stack ['$phi200.0']
2023-01-03 17:17 DEBUG dispatch pc=202, inst=LOAD_CONST(arg=5, lineno=367)
2023-01-03 17:17 DEBUG stack ['$phi200.0', '$current_order200.1']
2023-01-03 17:17 DEBUG dispatch pc=204, inst=COMPARE_OP(arg=2, lineno=367)
2023-01-03 17:17 DEBUG stack ['$phi200.0', '$current_order200.1', '$const202.2']
2023-01-03 17:17 DEBUG dispatch pc=206, inst=POP_JUMP_IF_FALSE(arg=212, lineno=367)
2023-01-03 17:17 DEBUG stack ['$phi200.0', '$204compare_op.3']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=208, stack=('$phi200.0',), blockstack=(), npush=0), Edge(pc=212, stack=('$phi200.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=200 nstack_initial=1), State(pc_initial=208 nstack_initial=1), State(pc_initial=212 nstack_initial=1)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=208 nstack_initial=1), State(pc_initial=212 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi208.0']
2023-01-03 17:17 DEBUG dispatch pc=208, inst=LOAD_CONST(arg=1, lineno=368)
2023-01-03 17:17 DEBUG stack ['$phi208.0']
2023-01-03 17:17 DEBUG dispatch pc=210, inst=STORE_FAST(arg=14, lineno=368)
2023-01-03 17:17 DEBUG stack ['$phi208.0', '$const208.1']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=212, stack=('$phi208.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=212 nstack_initial=1), State(pc_initial=212 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi212.0']
2023-01-03 17:17 DEBUG dispatch pc=212, inst=LOAD_FAST(arg=14, lineno=370)
2023-01-03 17:17 DEBUG stack ['$phi212.0']
2023-01-03 17:17 DEBUG dispatch pc=214, inst=LOAD_FAST(arg=13, lineno=370)
2023-01-03 17:17 DEBUG stack ['$phi212.0', '$marketpostion212.1']
2023-01-03 17:17 DEBUG dispatch pc=216, inst=LOAD_FAST(arg=27, lineno=370)
2023-01-03 17:17 DEBUG stack ['$phi212.0', '$marketpostion212.1', '$marketpostion_array214.2']
2023-01-03 17:17 DEBUG dispatch pc=218, inst=STORE_SUBSCR(arg=None, lineno=370)
2023-01-03 17:17 DEBUG stack ['$phi212.0', '$marketpostion212.1', '$marketpostion_array214.2', '$i216.3']
2023-01-03 17:17 DEBUG dispatch pc=220, inst=JUMP_ABSOLUTE(arg=176, lineno=370)
2023-01-03 17:17 DEBUG stack ['$phi212.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=176, stack=('$phi212.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=212 nstack_initial=1), State(pc_initial=176 nstack_initial=1)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=176 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=1): {'$phi176.0'},
             State(pc_initial=178 nstack_initial=2): {'$phi178.1'},
             State(pc_initial=196 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=1): set(),
             State(pc_initial=208 nstack_initial=1): set(),
             State(pc_initial=212 nstack_initial=1): set(),
             State(pc_initial=222 nstack_initial=0): set(),
             State(pc_initial=306 nstack_initial=0): set(),
             State(pc_initial=310 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi176.0': State(pc_initial=0 nstack_initial=0),
 '$phi178.1': State(pc_initial=176 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi176.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi212.0',
                            State(pc_initial=212 nstack_initial=1))},
             '$phi178.0': {('$phi176.0',
                            State(pc_initial=176 nstack_initial=1))},
             '$phi178.1': {('$176for_iter.2',
                            State(pc_initial=176 nstack_initial=1))},
             '$phi196.0': {('$phi178.0',
                            State(pc_initial=178 nstack_initial=2))},
             '$phi200.0': {('$phi178.0',
                            State(pc_initial=178 nstack_initial=2)),
                           ('$phi196.0',
                            State(pc_initial=196 nstack_initial=1))},
             '$phi208.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi208.0',
                            State(pc_initial=208 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi176.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi208.0',
                            State(pc_initial=208 nstack_initial=1))},
             '$phi178.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi208.0',
                            State(pc_initial=208 nstack_initial=1))},
             '$phi178.1': {('$176for_iter.2',
                            State(pc_initial=176 nstack_initial=1))},
             '$phi196.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi208.0',
                            State(pc_initial=208 nstack_initial=1))},
             '$phi200.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1)),
                           ('$phi208.0',
                            State(pc_initial=208 nstack_initial=1))},
             '$phi208.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi208.0',
                            State(pc_initial=208 nstack_initial=1))},
             '$phi212.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi176.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi178.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi178.1': {('$176for_iter.2',
                            State(pc_initial=176 nstack_initial=1))},
             '$phi196.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi200.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi208.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi176.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi178.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi178.1': {('$176for_iter.2',
                            State(pc_initial=176 nstack_initial=1))},
             '$phi196.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi200.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi208.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.0': {('$174get_iter.69',
                            State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi176.0': {('$174get_iter.69', State(pc_initial=0 nstack_initial=0))},
 '$phi178.1': {('$176for_iter.2', State(pc_initial=176 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi176.0': '$174get_iter.69'},
             State(pc_initial=176 nstack_initial=1): {'$phi178.1': '$176for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$Length6.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$4load_attr.1', 'args': ['$Length6.2', '$const8.3', '$12load_attr.5'], 'names': '$const14.6', 'res': '$16call_function_kw.7'}), (18, {'value': '$16call_function_kw.7'}), (20, {'res': '$const20.8'}), (22, {'value': '$const20.8'}), (24, {'res': '$const24.9'}), (26, {'value': '$const24.9'}), (28, {'res': '$const28.10'}), (30, {'value': '$const28.10'}), (32, {'res': '$const32.11'}), (34, {'value': '$const32.11'}), (36, {'res': '$const36.12'}), (38, {'value': '$const36.12'}), (40, {'res': '$size40.13'}), (42, {'value': '$size40.13'}), (44, {'res': '$size44.14'}), (46, {'value': '$size44.14'}), (48, {'res': '$slippage48.15'}), (50, {'value': '$slippage48.15'}), (52, {'res': '$fee52.16'}), (54, {'value': '$fee52.16'}), (56, {'res': '$const56.17'}), (58, {'value': '$const56.17'}), (60, {'res': '$60load_global.18'}), (62, {'res': '$Length62.19'}), (64, {'res': '$high_array64.20'}), (66, {'res': '$low_array66.21'}), (68, {'res': '$close_array68.22'}), (70, {'res': '$ATR_short170.23'}), (72, {'func': '$60load_global.18', 'args': ['$Length62.19', '$high_array64.20', '$low_array66.21', '$close_array68.22', '$ATR_short170.23'], 'res': '$72call_function.24'}), (74, {'value': '$72call_function.24'}), (76, {'res': '$76load_global.25'}), (78, {'res': '$Length78.26'}), (80, {'res': '$high_array80.27'}), (82, {'res': '$low_array82.28'}), (84, {'res': '$close_array84.29'}), (86, {'res': '$ATR_long286.30'}), (88, {'func': '$76load_global.25', 'args': ['$Length78.26', '$high_array80.27', '$low_array82.28', '$close_array84.29', '$ATR_long286.30'], 'res': '$88call_function.31'}), (90, {'value': '$88call_function.31'}), (92, {'res': '$92load_global.32'}), (94, {'item': '$92load_global.32', 'res': '$94load_method.33'}), (96, {'res': '$high_array96.34'}), (98, {'res': '$highestarr98.35'}), (100, {'lhs': '$high_array96.34', 'rhs': '$highestarr98.35', 'res': '$100binary_subtract.36'}), (102, {'res': '$const102.37'}), (104, {'lhs': '$100binary_subtract.36', 'rhs': '$const102.37', 'res': '$104compare_op.38'}), (106, {'res': '$ATR_short106.39'}), (108, {'res': '$ATR_long108.40'}), (110, {'lhs': '$ATR_short106.39', 'rhs': '$ATR_long108.40', 'res': '$110binary_subtract.41'}), (112, {'res': '$const112.42'}), (114, {'lhs': '$110binary_subtract.41', 'rhs': '$const112.42', 'res': '$114compare_op.43'}), (116, {'lhs': '$104compare_op.38', 'rhs': '$114compare_op.43', 'res': '$116binary_and.44'}), (118, {'res': '$const118.45'}), (120, {'res': '$const120.46'}), (122, {'func': '$94load_method.33', 'args': ['$116binary_and.44', '$const118.45', '$const120.46'], 'res': '$122call_method.47'}), (124, {'value': '$122call_method.47'}), (126, {'res': '$126load_global.48'}), (128, {'item': '$126load_global.48', 'res': '$128load_method.49'}), (130, {'res': '$low_array130.50'}), (132, {'res': '$lowestarr132.51'}), (134, {'lhs': '$low_array130.50', 'rhs': '$lowestarr132.51', 'res': '$134binary_subtract.52'}), (136, {'res': '$const136.53'}), (138, {'lhs': '$134binary_subtract.52', 'rhs': '$const136.53', 'res': '$138compare_op.54'}), (140, {'res': '$const140.55'}), (142, {'res': '$trends142.56'}), (144, {'func': '$128load_method.49', 'args': ['$138compare_op.54', '$const140.55', '$trends142.56'], 'res': '$144call_method.57'}), (146, {'value': '$144call_method.57'}), (148, {'res': '$148load_global.58'}), (150, {'item': '$148load_global.58', 'res': '$150load_method.59'}), (152, {'res': '$orders152.60'}), (154, {'res': '$const154.61'}), (156, {'func': '$150load_method.59', 'args': ['$orders152.60', '$const154.61'], 'res': '$156call_method.62'}), (158, {'value': '$156call_method.62'}), (160, {'res': '$const160.63'}), (162, {'res': '$shiftorder162.64'}), (164, {'res': '$const164.65'}), (166, {'target': '$shiftorder162.64', 'index': '$const164.65', 'value': '$const160.63'}), (168, {'res': '$168load_global.66'}), (170, {'res': '$Length170.67'}), (172, {'func': '$168load_global.66', 'args': ['$Length170.67'], 'res': '$172call_function.68'}), (174, {'value': '$172call_function.68', 'res': '$174get_iter.69'})), outgoing_phis={'$phi176.0': '$174get_iter.69'}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: ('$174get_iter.69',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=176 nstack_initial=1):
AdaptBlockInfo(insts=((176, {'iterator': '$phi176.0', 'pair': '$176for_iter.1', 'indval': '$176for_iter.2', 'pred': '$176for_iter.3'}),), outgoing_phis={'$phi178.1': '$176for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={222: (), 178: ('$phi176.0', '$176for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=178 nstack_initial=2):
AdaptBlockInfo(insts=((178, {'value': '$phi178.1'}), (180, {'res': '$shiftorder180.2'}), (182, {'res': '$i182.3'}), (184, {'index': '$i182.3', 'target': '$shiftorder180.2', 'res': '$184binary_subscr.4'}), (186, {'value': '$184binary_subscr.4'}), (188, {'res': '$current_order188.5'}), (190, {'res': '$const190.6'}), (192, {'lhs': '$current_order188.5', 'rhs': '$const190.6', 'res': '$192compare_op.7'}), (194, {'pred': '$192compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={196: ('$phi178.0',), 200: ('$phi178.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=196 nstack_initial=1):
AdaptBlockInfo(insts=((196, {'res': '$const196.1'}), (198, {'value': '$const196.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: ('$phi196.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'res': '$current_order200.1'}), (202, {'res': '$const202.2'}), (204, {'lhs': '$current_order200.1', 'rhs': '$const202.2', 'res': '$204compare_op.3'}), (206, {'pred': '$204compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={208: ('$phi200.0',), 212: ('$phi200.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=208 nstack_initial=1):
AdaptBlockInfo(insts=((208, {'res': '$const208.1'}), (210, {'value': '$const208.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={212: ('$phi208.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=212 nstack_initial=1):
AdaptBlockInfo(insts=((212, {'res': '$marketpostion212.1'}), (214, {'res': '$marketpostion_array214.2'}), (216, {'res': '$i216.3'}), (218, {'target': '$marketpostion_array214.2', 'index': '$i216.3', 'value': '$marketpostion212.1'}), (220, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: ('$phi212.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=222 nstack_initial=0):
AdaptBlockInfo(insts=((222, {'res': '$222load_global.0'}), (224, {'item': '$222load_global.0', 'res': '$224load_method.1'}), (226, {'res': '$marketpostion_array226.2'}), (228, {'res': '$const228.3'}), (230, {'func': '$224load_method.1', 'args': ['$marketpostion_array226.2', '$const228.3'], 'res': '$230call_method.4'}), (232, {'value': '$230call_method.4'}), (234, {'res': '$const234.5'}), (236, {'res': '$last_marketpostion_arr236.6'}), (238, {'res': '$const238.7'}), (240, {'target': '$last_marketpostion_arr236.6', 'index': '$const238.7', 'value': '$const234.5'}), (242, {'res': '$242load_global.8'}), (244, {'item': '$242load_global.8', 'res': '$244load_method.9'}), (246, {'res': '$marketpostion_array246.10'}), (248, {'res': '$last_marketpostion_arr248.11'}), (250, {'lhs': '$marketpostion_array246.10', 'rhs': '$last_marketpostion_arr248.11', 'res': '$250binary_subtract.12'}), (252, {'res': '$const252.13'}), (254, {'lhs': '$250binary_subtract.12', 'rhs': '$const252.13', 'res': '$254compare_op.14'}), (256, {'res': '$open_array256.15'}), (258, {'res': '$const258.16'}), (260, {'res': '$slippage260.17'}), (262, {'lhs': '$const258.16', 'rhs': '$slippage260.17', 'res': '$262binary_add.18'}), (264, {'lhs': '$open_array256.15', 'rhs': '$262binary_add.18', 'res': '$264binary_multiply.19'}), (266, {'res': '$const266.20'}), (268, {'func': '$244load_method.9', 'args': ['$254compare_op.14', '$264binary_multiply.19', '$const266.20'], 'res': '$268call_method.21'}), (270, {'value': '$268call_method.21'}), (272, {'res': '$entryprice_arr272.22'}), (274, {'res': '$274load_global.23'}), (276, {'item': '$274load_global.23', 'res': '$276load_method.24'}), (278, {'res': '$entryprice_arr278.25'}), (280, {'res': '$const280.26'}), (282, {'lhs': '$entryprice_arr278.25', 'rhs': '$const280.26', 'res': '$282compare_op.27'}), (284, {'func': '$276load_method.24', 'args': ['$282compare_op.27'], 'res': '$284call_method.28'}), (286, {'index': '$284call_method.28', 'target': '$entryprice_arr272.22', 'res': '$286binary_subscr.29'}), (288, {'value': '$286binary_subscr.29'}), (290, {'res': '$entryprice_arr290.30'}), (292, {'item': '$entryprice_arr290.30', 'res': '$292load_attr.31'}), (294, {'res': '$const294.32'}), (296, {'index': '$const294.32', 'target': '$292load_attr.31', 'res': '$296binary_subscr.33'}), (298, {'res': '$const298.34'}), (300, {'lhs': '$296binary_subscr.33', 'rhs': '$const298.34', 'res': '$300compare_op.35'}), (302, {'pred': '$300compare_op.35'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={306: (), 310: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=306 nstack_initial=0):
AdaptBlockInfo(insts=((306, {'res': '$const306.0'}), (308, {'retval': '$const306.0', 'castval': '$308return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=310 nstack_initial=0):
AdaptBlockInfo(insts=((310, {'res': '$310load_global.0'}), (312, {'item': '$310load_global.0', 'res': '$312load_method.1'}), (314, {'res': '$marketpostion_array314.2'}), (316, {'res': '$last_marketpostion_arr316.3'}), (318, {'lhs': '$marketpostion_array314.2', 'rhs': '$last_marketpostion_arr316.3', 'res': '$318binary_subtract.4'}), (320, {'res': '$const320.5'}), (322, {'lhs': '$318binary_subtract.4', 'rhs': '$const320.5', 'res': '$322compare_op.6'}), (324, {'res': '$open_array324.7'}), (326, {'res': '$const326.8'}), (328, {'res': '$slippage328.9'}), (330, {'lhs': '$const326.8', 'rhs': '$slippage328.9', 'res': '$330binary_subtract.10'}), (332, {'lhs': '$open_array324.7', 'rhs': '$330binary_subtract.10', 'res': '$332binary_multiply.11'}), (334, {'res': '$const334.12'}), (336, {'func': '$312load_method.1', 'args': ['$322compare_op.6', '$332binary_multiply.11', '$const334.12'], 'res': '$336call_method.13'}), (338, {'value': '$336call_method.13'}), (340, {'res': '$exitsprice_arr340.14'}), (342, {'res': '$342load_global.15'}), (344, {'item': '$342load_global.15', 'res': '$344load_method.16'}), (346, {'res': '$exitsprice_arr346.17'}), (348, {'res': '$const348.18'}), (350, {'lhs': '$exitsprice_arr346.17', 'rhs': '$const348.18', 'res': '$350compare_op.19'}), (352, {'func': '$344load_method.16', 'args': ['$350compare_op.19'], 'res': '$352call_method.20'}), (354, {'index': '$352call_method.20', 'target': '$exitsprice_arr340.14', 'res': '$354binary_subscr.21'}), (356, {'value': '$354binary_subscr.21'}), (358, {'res': '$entryprice_arr358.22'}), (360, {'res': '$const360.23'}), (362, {'res': '$exitsprice_arr362.24'}), (364, {'item': '$exitsprice_arr362.24', 'res': '$364load_attr.25'}), (366, {'res': '$const366.26'}), (368, {'index': '$const366.26', 'target': '$364load_attr.25', 'res': '$368binary_subscr.27'}), (370, {'start': '$const360.23', 'stop': '$368binary_subscr.27', 'step': None, 'res': '$370build_slice.29', 'slicevar': '$370build_slice.28'}), (372, {'index': '$370build_slice.29', 'target': '$entryprice_arr358.22', 'res': '$372binary_subscr.30'}), (374, {'value': '$372binary_subscr.30'}), (376, {'res': '$exitsprice_arr376.31'}), (378, {'res': '$entryprice_arr378.32'}), (380, {'lhs': '$exitsprice_arr376.31', 'rhs': '$entryprice_arr378.32', 'res': '$380binary_subtract.33'}), (382, {'value': '$380binary_subtract.33'}), (384, {'res': '$384load_global.34'}), (386, {'item': '$384load_global.34', 'res': '$386load_method.35'}), (388, {'res': '$marketpostion_array388.36'}), (390, {'res': '$last_marketpostion_arr390.37'}), (392, {'lhs': '$marketpostion_array388.36', 'rhs': '$last_marketpostion_arr390.37', 'res': '$392binary_subtract.38'}), (394, {'res': '$const394.39'}), (396, {'lhs': '$392binary_subtract.38', 'rhs': '$const394.39', 'res': '$396compare_op.40'}), (398, {'res': '$open_array398.41'}), (400, {'res': '$fee400.42'}), (402, {'lhs': '$open_array398.41', 'rhs': '$fee400.42', 'res': '$402binary_multiply.43'}), (404, {'res': '$size404.44'}), (406, {'lhs': '$402binary_multiply.43', 'rhs': '$size404.44', 'res': '$406binary_multiply.45'}), (408, {'res': '$const408.46'}), (410, {'func': '$386load_method.35', 'args': ['$396compare_op.40', '$406binary_multiply.45', '$const408.46'], 'res': '$410call_method.47'}), (412, {'value': '$410call_method.47'}), (414, {'res': '$buy_Fees_arr414.48'}), (416, {'res': '$416load_global.49'}), (418, {'item': '$416load_global.49', 'res': '$418load_method.50'}), (420, {'res': '$buy_Fees_arr420.51'}), (422, {'res': '$const422.52'}), (424, {'lhs': '$buy_Fees_arr420.51', 'rhs': '$const422.52', 'res': '$424compare_op.53'}), (426, {'func': '$418load_method.50', 'args': ['$424compare_op.53'], 'res': '$426call_method.54'}), (428, {'index': '$426call_method.54', 'target': '$buy_Fees_arr414.48', 'res': '$428binary_subscr.55'}), (430, {'value': '$428binary_subscr.55'}), (432, {'res': '$buy_Fees_arr432.56'}), (434, {'res': '$const434.57'}), (436, {'res': '$exitsprice_arr436.58'}), (438, {'item': '$exitsprice_arr436.58', 'res': '$438load_attr.59'}), (440, {'res': '$const440.60'}), (442, {'index': '$const440.60', 'target': '$438load_attr.59', 'res': '$442binary_subscr.61'}), (444, {'start': '$const434.57', 'stop': '$442binary_subscr.61', 'step': None, 'res': '$444build_slice.63', 'slicevar': '$444build_slice.62'}), (446, {'index': '$444build_slice.63', 'target': '$buy_Fees_arr432.56', 'res': '$446binary_subscr.64'}), (448, {'value': '$446binary_subscr.64'}), (450, {'res': '$450load_global.65'}), (452, {'item': '$450load_global.65', 'res': '$452load_method.66'}), (454, {'res': '$marketpostion_array454.67'}), (456, {'res': '$last_marketpostion_arr456.68'}), (458, {'lhs': '$marketpostion_array454.67', 'rhs': '$last_marketpostion_arr456.68', 'res': '$458binary_subtract.69'}), (460, {'res': '$const460.70'}), (462, {'lhs': '$458binary_subtract.69', 'rhs': '$const460.70', 'res': '$462compare_op.71'}), (464, {'res': '$open_array464.72'}), (466, {'res': '$fee466.73'}), (468, {'lhs': '$open_array464.72', 'rhs': '$fee466.73', 'res': '$468binary_multiply.74'}), (470, {'res': '$size470.75'}), (472, {'lhs': '$468binary_multiply.74', 'rhs': '$size470.75', 'res': '$472binary_multiply.76'}), (474, {'res': '$const474.77'}), (476, {'func': '$452load_method.66', 'args': ['$462compare_op.71', '$472binary_multiply.76', '$const474.77'], 'res': '$476call_method.78'}), (478, {'value': '$476call_method.78'}), (480, {'res': '$sell_Fees_arr480.79'}), (482, {'res': '$482load_global.80'}), (484, {'item': '$482load_global.80', 'res': '$484load_method.81'}), (486, {'res': '$sell_Fees_arr486.82'}), (488, {'res': '$const488.83'}), (490, {'lhs': '$sell_Fees_arr486.82', 'rhs': '$const488.83', 'res': '$490compare_op.84'}), (492, {'func': '$484load_method.81', 'args': ['$490compare_op.84'], 'res': '$492call_method.85'}), (494, {'index': '$492call_method.85', 'target': '$sell_Fees_arr480.79', 'res': '$494binary_subscr.86'}), (496, {'value': '$494binary_subscr.86'}), (498, {'res': '$diff_arr498.87'}), (500, {'res': '$buy_Fees_arr500.88'}), (502, {'lhs': '$diff_arr498.87', 'rhs': '$buy_Fees_arr500.88', 'res': '$502binary_subtract.89'}), (504, {'res': '$sell_Fees_arr504.90'}), (506, {'lhs': '$502binary_subtract.89', 'rhs': '$sell_Fees_arr504.90', 'res': '$506binary_subtract.91'}), (508, {'value': '$506binary_subtract.91'}), (510, {'res': '$510load_global.92'}), (512, {'item': '$510load_global.92', 'res': '$512load_method.93'}), (514, {'res': '$ClosedPostionprofit_arr514.94'}), (516, {'func': '$512load_method.93', 'args': ['$ClosedPostionprofit_arr514.94'], 'res': '$516call_method.95'}), (518, {'res': '$init_cash518.96'}), (520, {'lhs': '$516call_method.95', 'rhs': '$init_cash518.96', 'res': '$520binary_add.97'}), (522, {'value': '$520binary_add.97'}), (524, {'res': '$524load_global.98'}), (526, {'res': '$ClosedPostionprofit_arr526.99'}), (528, {'res': '$init_cash528.100'}), (530, {'func': '$524load_global.98', 'args': ['$ClosedPostionprofit_arr526.99', '$init_cash528.100'], 'res': '$530call_function.101'}), (532, {'value': '$530call_function.101'}), (534, {'res': '$534load_global.102'}), (536, {'item': '$534load_global.102', 'res': '$536load_method.103'}), (538, {'res': '$DD_per_array538.104'}), (540, {'res': '$const540.105'}), (542, {'lhs': '$DD_per_array538.104', 'rhs': '$const540.105', 'res': '$542binary_power.106'}), (544, {'func': '$536load_method.103', 'args': ['$542binary_power.106'], 'res': '$544call_method.107'}), (546, {'value': '$544call_method.107'}), (548, {'res': '$ClosedPostionprofit_arr548.108'}), (550, {'res': '$const550.109'}), (552, {'index': '$const550.109', 'target': '$ClosedPostionprofit_arr548.108', 'res': '$552binary_subscr.110'}), (554, {'res': '$init_cash554.111'}), (556, {'lhs': '$552binary_subscr.110', 'rhs': '$init_cash554.111', 'res': '$556binary_true_divide.112'}), (558, {'res': '$const558.113'}), (560, {'lhs': '$556binary_true_divide.112', 'rhs': '$const558.113', 'res': '$560binary_subtract.114'}), (562, {'value': '$560binary_subtract.114'}), (564, {'res': '$ROI564.115'}), (566, {'res': '$const566.116'}), (568, {'lhs': '$ROI564.115', 'rhs': '$const566.116', 'res': '$568binary_multiply.117'}), (570, {'res': '$sumallDD570.118'}), (572, {'res': '$exitsprice_arr572.119'}), (574, {'item': '$exitsprice_arr572.119', 'res': '$574load_attr.120'}), (576, {'res': '$const576.121'}), (578, {'index': '$const576.121', 'target': '$574load_attr.120', 'res': '$578binary_subscr.122'}), (580, {'lhs': '$sumallDD570.118', 'rhs': '$578binary_subscr.122', 'res': '$580binary_true_divide.123'}), (582, {'res': '$const582.124'}), (584, {'lhs': '$580binary_true_divide.123', 'rhs': '$const582.124', 'res': '$584binary_power.125'}), (586, {'lhs': '$568binary_multiply.117', 'rhs': '$584binary_power.125', 'res': '$586binary_true_divide.126'}), (588, {'value': '$586binary_true_divide.126'}), (590, {'res': '$ui_590.127'}), (592, {'retval': '$ui_590.127', 'castval': '$592return_value.128'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    open_array = arg(0, name=open_array)     ['open_array']
    high_array = arg(1, name=high_array)     ['high_array']
    low_array = arg(2, name=low_array)       ['low_array']
    close_array = arg(3, name=close_array)   ['close_array']
    highestarr = arg(4, name=highestarr)     ['highestarr']
    lowestarr = arg(5, name=lowestarr)       ['lowestarr']
    Length = arg(6, name=Length)             ['Length']
    init_cash = arg(7, name=init_cash)       ['init_cash']
    slippage = arg(8, name=slippage)         ['slippage']
    size = arg(9, name=size)                 ['size']
    fee = arg(10, name=fee)                  ['fee']
    ATR_short1 = arg(11, name=ATR_short1)    ['ATR_short1']
    ATR_long2 = arg(12, name=ATR_long2)      ['ATR_long2']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=full) ['$2load_global.0', '$4load_attr.1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int_) ['$10load_global.4', '$12load_attr.5']
    marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$4load_attr.1', '$const8.3', 'Length', 'marketpostion_array']
    marketpostion = const(int, 0)            ['marketpostion']
    entryprice = const(int, 0)               ['entryprice']
    exitsprice = const(int, 0)               ['exitsprice']
    buy_Fees = const(int, 0)                 ['buy_Fees']
    sell_Fees = const(int, 0)                ['sell_Fees']
    buy_sizes = size                         ['buy_sizes', 'size']
    sell_sizes = size                        ['sell_sizes', 'size']
    slippage.1 = slippage                    ['slippage', 'slippage.1']
    fee.1 = fee                              ['fee', 'fee.1']
    direction = const(str, buyonly)          ['direction']
    $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>)) ['$60load_global.18']
    ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_global.18', 'ATR_short', 'ATR_short1', 'Length', 'close_array', 'high_array', 'low_array']
    $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>)) ['$76load_global.25']
    ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None) ['$76load_global.25', 'ATR_long', 'ATR_long2', 'Length', 'close_array', 'high_array', 'low_array']
    $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$92load_global.32']
    $94load_method.33 = getattr(value=$92load_global.32, attr=where) ['$92load_global.32', '$94load_method.33']
    $100binary_subtract.36 = high_array - highestarr ['$100binary_subtract.36', 'high_array', 'highestarr']
    $const102.37 = const(int, 0)             ['$const102.37']
    $104compare_op.38 = $100binary_subtract.36 > $const102.37 ['$100binary_subtract.36', '$104compare_op.38', '$const102.37']
    $110binary_subtract.41 = ATR_short - ATR_long ['$110binary_subtract.41', 'ATR_long', 'ATR_short']
    $const112.42 = const(int, 0)             ['$const112.42']
    $114compare_op.43 = $110binary_subtract.41 > $const112.42 ['$110binary_subtract.41', '$114compare_op.43', '$const112.42']
    $116binary_and.44 = $104compare_op.38 & $114compare_op.43 ['$104compare_op.38', '$114compare_op.43', '$116binary_and.44']
    $const118.45 = const(int, 1)             ['$const118.45']
    $const120.46 = const(int, 0)             ['$const120.46']
    trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None) ['$116binary_and.44', '$94load_method.33', '$const118.45', '$const120.46', 'trends']
    $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$126load_global.48']
    $128load_method.49 = getattr(value=$126load_global.48, attr=where) ['$126load_global.48', '$128load_method.49']
    $134binary_subtract.52 = low_array - lowestarr ['$134binary_subtract.52', 'low_array', 'lowestarr']
    $const136.53 = const(int, 0)             ['$const136.53']
    $138compare_op.54 = $134binary_subtract.52 < $const136.53 ['$134binary_subtract.52', '$138compare_op.54', '$const136.53']
    $const140.55 = const(int, -1)            ['$const140.55']
    orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_method.49', '$138compare_op.54', '$const140.55', 'orders', 'trends']
    $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$148load_global.58']
    $150load_method.59 = getattr(value=$148load_global.58, attr=roll) ['$148load_global.58', '$150load_method.59']
    $const154.61 = const(int, 1)             ['$const154.61']
    shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None) ['$150load_method.59', '$const154.61', 'orders', 'shiftorder']
    $const160.63 = const(int, 0)             ['$const160.63']
    $const164.65 = const(int, 0)             ['$const164.65']
    shiftorder[$const164.65] = $const160.63  ['$const160.63', '$const164.65', 'shiftorder']
    $168load_global.66 = global(range: <class 'range'>) ['$168load_global.66']
    $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None) ['$168load_global.66', '$172call_function.68', 'Length']
    $174get_iter.69 = getiter(value=$172call_function.68) ['$172call_function.68', '$174get_iter.69']
    $phi176.0 = $174get_iter.69              ['$174get_iter.69', '$phi176.0']
    jump 176                                 []
label 176:
    $176for_iter.1 = iternext(value=$phi176.0) ['$176for_iter.1', '$phi176.0']
    $176for_iter.2 = pair_first(value=$176for_iter.1) ['$176for_iter.1', '$176for_iter.2']
    $176for_iter.3 = pair_second(value=$176for_iter.1) ['$176for_iter.1', '$176for_iter.3']
    $phi178.1 = $176for_iter.2               ['$176for_iter.2', '$phi178.1']
    branch $176for_iter.3, 178, 222          ['$176for_iter.3']
label 178:
    i = $phi178.1                            ['$phi178.1', 'i']
    current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>) ['current_order', 'i', 'shiftorder']
    $const190.6 = const(int, 1)              ['$const190.6']
    $192compare_op.7 = current_order == $const190.6 ['$192compare_op.7', '$const190.6', 'current_order']
    bool194 = global(bool: <class 'bool'>)   ['bool194']
    $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None) ['$192compare_op.7', '$194pred', 'bool194']
    branch $194pred, 196, 200                ['$194pred']
label 196:
    marketpostion = const(int, 1)            ['marketpostion']
    jump 200                                 []
label 200:
    $const202.2 = const(int, -1)             ['$const202.2']
    $204compare_op.3 = current_order == $const202.2 ['$204compare_op.3', '$const202.2', 'current_order']
    bool206 = global(bool: <class 'bool'>)   ['bool206']
    $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None) ['$204compare_op.3', '$206pred', 'bool206']
    branch $206pred, 208, 212                ['$206pred']
label 208:
    marketpostion = const(int, 0)            ['marketpostion']
    jump 212                                 []
label 212:
    marketpostion_array[i] = marketpostion   ['i', 'marketpostion', 'marketpostion_array']
    jump 176                                 []
label 222:
    $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$222load_global.0']
    $224load_method.1 = getattr(value=$222load_global.0, attr=roll) ['$222load_global.0', '$224load_method.1']
    $const228.3 = const(int, 1)              ['$const228.3']
    last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None) ['$224load_method.1', '$const228.3', 'last_marketpostion_arr', 'marketpostion_array']
    $const234.5 = const(int, 0)              ['$const234.5']
    $const238.7 = const(int, 0)              ['$const238.7']
    last_marketpostion_arr[$const238.7] = $const234.5 ['$const234.5', '$const238.7', 'last_marketpostion_arr']
    $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$242load_global.8']
    $244load_method.9 = getattr(value=$242load_global.8, attr=where) ['$242load_global.8', '$244load_method.9']
    $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr ['$250binary_subtract.12', 'last_marketpostion_arr', 'marketpostion_array']
    $const252.13 = const(int, 0)             ['$const252.13']
    $254compare_op.14 = $250binary_subtract.12 > $const252.13 ['$250binary_subtract.12', '$254compare_op.14', '$const252.13']
    $const258.16 = const(int, 1)             ['$const258.16']
    $262binary_add.18 = $const258.16 + slippage.1 ['$262binary_add.18', '$const258.16', 'slippage.1']
    $264binary_multiply.19 = open_array * $262binary_add.18 ['$262binary_add.18', '$264binary_multiply.19', 'open_array']
    $const266.20 = const(int, 0)             ['$const266.20']
    entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None) ['$244load_method.9', '$254compare_op.14', '$264binary_multiply.19', '$const266.20', 'entryprice_arr']
    $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$274load_global.23']
    $276load_method.24 = getattr(value=$274load_global.23, attr=where) ['$274load_global.23', '$276load_method.24']
    $const280.26 = const(int, 0)             ['$const280.26']
    $282compare_op.27 = entryprice_arr > $const280.26 ['$282compare_op.27', '$const280.26', 'entryprice_arr']
    $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None) ['$276load_method.24', '$282compare_op.27', '$284call_method.28']
    entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>) ['$284call_method.28', 'entryprice_arr', 'entryprice_arr.1']
    $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape) ['$292load_attr.31', 'entryprice_arr.1']
    $const294.32 = const(int, 0)             ['$const294.32']
    $296binary_subscr.33 = getitem(value=$292load_attr.31, index=$const294.32, fn=<built-in function getitem>) ['$292load_attr.31', '$296binary_subscr.33', '$const294.32']
    $const298.34 = const(int, 0)             ['$const298.34']
    $300compare_op.35 = $296binary_subscr.33 == $const298.34 ['$296binary_subscr.33', '$300compare_op.35', '$const298.34']
    bool302 = global(bool: <class 'bool'>)   ['bool302']
    $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None) ['$300compare_op.35', '$302pred', 'bool302']
    branch $302pred, 306, 310                ['$302pred']
label 306:
    $const306.0 = const(int, 0)              ['$const306.0']
    $308return_value.1 = cast(value=$const306.0) ['$308return_value.1', '$const306.0']
    return $308return_value.1                ['$308return_value.1']
label 310:
    $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$310load_global.0']
    $312load_method.1 = getattr(value=$310load_global.0, attr=where) ['$310load_global.0', '$312load_method.1']
    $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr ['$318binary_subtract.4', 'last_marketpostion_arr', 'marketpostion_array']
    $const320.5 = const(int, 0)              ['$const320.5']
    $322compare_op.6 = $318binary_subtract.4 < $const320.5 ['$318binary_subtract.4', '$322compare_op.6', '$const320.5']
    $const326.8 = const(int, 1)              ['$const326.8']
    $330binary_subtract.10 = $const326.8 - slippage.1 ['$330binary_subtract.10', '$const326.8', 'slippage.1']
    $332binary_multiply.11 = open_array * $330binary_subtract.10 ['$330binary_subtract.10', '$332binary_multiply.11', 'open_array']
    $const334.12 = const(int, 0)             ['$const334.12']
    exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None) ['$312load_method.1', '$322compare_op.6', '$332binary_multiply.11', '$const334.12', 'exitsprice_arr']
    $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$342load_global.15']
    $344load_method.16 = getattr(value=$342load_global.15, attr=where) ['$342load_global.15', '$344load_method.16']
    $const348.18 = const(int, 0)             ['$const348.18']
    $350compare_op.19 = exitsprice_arr > $const348.18 ['$350compare_op.19', '$const348.18', 'exitsprice_arr']
    $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None) ['$344load_method.16', '$350compare_op.19', '$352call_method.20']
    exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>) ['$352call_method.20', 'exitsprice_arr', 'exitsprice_arr']
    $const360.23 = const(NoneType, None)     ['$const360.23']
    $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape) ['$364load_attr.25', 'exitsprice_arr']
    $const366.26 = const(int, 0)             ['$const366.26']
    $368binary_subscr.27 = getitem(value=$364load_attr.25, index=$const366.26, fn=<built-in function getitem>) ['$364load_attr.25', '$368binary_subscr.27', '$const366.26']
    $370build_slice.28 = global(slice: <class 'slice'>) ['$370build_slice.28']
    $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None) ['$368binary_subscr.27', '$370build_slice.28', '$370build_slice.29', '$const360.23']
    entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>) ['$370build_slice.29', 'entryprice_arr.1', 'entryprice_arr.1']
    diff_arr = exitsprice_arr - entryprice_arr.1 ['diff_arr', 'entryprice_arr.1', 'exitsprice_arr']
    $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$384load_global.34']
    $386load_method.35 = getattr(value=$384load_global.34, attr=where) ['$384load_global.34', '$386load_method.35']
    $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr ['$392binary_subtract.38', 'last_marketpostion_arr', 'marketpostion_array']
    $const394.39 = const(int, 0)             ['$const394.39']
    $396compare_op.40 = $392binary_subtract.38 > $const394.39 ['$392binary_subtract.38', '$396compare_op.40', '$const394.39']
    $402binary_multiply.43 = open_array * fee.1 ['$402binary_multiply.43', 'fee.1', 'open_array']
    $406binary_multiply.45 = $402binary_multiply.43 * size ['$402binary_multiply.43', '$406binary_multiply.45', 'size']
    $const408.46 = const(int, 0)             ['$const408.46']
    buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None) ['$386load_method.35', '$396compare_op.40', '$406binary_multiply.45', '$const408.46', 'buy_Fees_arr']
    $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$416load_global.49']
    $418load_method.50 = getattr(value=$416load_global.49, attr=where) ['$416load_global.49', '$418load_method.50']
    $const422.52 = const(int, 0)             ['$const422.52']
    $424compare_op.53 = buy_Fees_arr > $const422.52 ['$424compare_op.53', '$const422.52', 'buy_Fees_arr']
    $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None) ['$418load_method.50', '$424compare_op.53', '$426call_method.54']
    buy_Fees_arr = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>) ['$426call_method.54', 'buy_Fees_arr', 'buy_Fees_arr']
    $const434.57 = const(NoneType, None)     ['$const434.57']
    $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape) ['$438load_attr.59', 'exitsprice_arr']
    $const440.60 = const(int, 0)             ['$const440.60']
    $442binary_subscr.61 = getitem(value=$438load_attr.59, index=$const440.60, fn=<built-in function getitem>) ['$438load_attr.59', '$442binary_subscr.61', '$const440.60']
    $444build_slice.62 = global(slice: <class 'slice'>) ['$444build_slice.62']
    $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None) ['$442binary_subscr.61', '$444build_slice.62', '$444build_slice.63', '$const434.57']
    buy_Fees_arr = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>) ['$444build_slice.63', 'buy_Fees_arr', 'buy_Fees_arr']
    $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$450load_global.65']
    $452load_method.66 = getattr(value=$450load_global.65, attr=where) ['$450load_global.65', '$452load_method.66']
    $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr ['$458binary_subtract.69', 'last_marketpostion_arr', 'marketpostion_array']
    $const460.70 = const(int, 0)             ['$const460.70']
    $462compare_op.71 = $458binary_subtract.69 < $const460.70 ['$458binary_subtract.69', '$462compare_op.71', '$const460.70']
    $468binary_multiply.74 = open_array * fee.1 ['$468binary_multiply.74', 'fee.1', 'open_array']
    $472binary_multiply.76 = $468binary_multiply.74 * size ['$468binary_multiply.74', '$472binary_multiply.76', 'size']
    $const474.77 = const(int, 0)             ['$const474.77']
    sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None) ['$452load_method.66', '$462compare_op.71', '$472binary_multiply.76', '$const474.77', 'sell_Fees_arr']
    $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$482load_global.80']
    $484load_method.81 = getattr(value=$482load_global.80, attr=where) ['$482load_global.80', '$484load_method.81']
    $const488.83 = const(int, 0)             ['$const488.83']
    $490compare_op.84 = sell_Fees_arr > $const488.83 ['$490compare_op.84', '$const488.83', 'sell_Fees_arr']
    $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None) ['$484load_method.81', '$490compare_op.84', '$492call_method.85']
    sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>) ['$492call_method.85', 'sell_Fees_arr', 'sell_Fees_arr']
    $502binary_subtract.89 = diff_arr - buy_Fees_arr ['$502binary_subtract.89', 'buy_Fees_arr', 'diff_arr']
    ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr ['$502binary_subtract.89', 'ClosedPostionprofit_arr', 'sell_Fees_arr']
    $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$510load_global.92']
    $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum) ['$510load_global.92', '$512load_method.93']
    $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None) ['$512load_method.93', '$516call_method.95', 'ClosedPostionprofit_arr']
    ClosedPostionprofit_arr = $516call_method.95 + init_cash ['$516call_method.95', 'ClosedPostionprofit_arr', 'init_cash']
    $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>)) ['$524load_global.98']
    DD_per_array = call $524load_global.98(ClosedPostionprofit_arr, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr, nb.py:404), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None) ['$524load_global.98', 'ClosedPostionprofit_arr', 'DD_per_array', 'init_cash']
    $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$534load_global.102']
    $536load_method.103 = getattr(value=$534load_global.102, attr=sum) ['$534load_global.102', '$536load_method.103']
    $const540.105 = const(int, 2)            ['$const540.105']
    $542binary_power.106 = DD_per_array ** $const540.105 ['$542binary_power.106', '$const540.105', 'DD_per_array']
    sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None) ['$536load_method.103', '$542binary_power.106', 'sumallDD']
    $const550.109 = const(int, -1)           ['$const550.109']
    $552binary_subscr.110 = getitem(value=ClosedPostionprofit_arr, index=$const550.109, fn=<built-in function getitem>) ['$552binary_subscr.110', '$const550.109', 'ClosedPostionprofit_arr']
    $556binary_true_divide.112 = $552binary_subscr.110 / init_cash ['$552binary_subscr.110', '$556binary_true_divide.112', 'init_cash']
    $const558.113 = const(int, 1)            ['$const558.113']
    ROI = $556binary_true_divide.112 - $const558.113 ['$556binary_true_divide.112', '$const558.113', 'ROI']
    $const566.116 = const(int, 100)          ['$const566.116']
    $568binary_multiply.117 = ROI * $const566.116 ['$568binary_multiply.117', '$const566.116', 'ROI']
    $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape) ['$574load_attr.120', 'exitsprice_arr']
    $const576.121 = const(int, 0)            ['$const576.121']
    $578binary_subscr.122 = getitem(value=$574load_attr.120, index=$const576.121, fn=<built-in function getitem>) ['$574load_attr.120', '$578binary_subscr.122', '$const576.121']
    $580binary_true_divide.123 = sumallDD / $578binary_subscr.122 ['$578binary_subscr.122', '$580binary_true_divide.123', 'sumallDD']
    $const582.124 = const(float, 0.5)        ['$const582.124']
    $584binary_power.125 = $580binary_true_divide.123 ** $const582.124 ['$580binary_true_divide.123', '$584binary_power.125', '$const582.124']
    ui_ = $568binary_multiply.117 / $584binary_power.125 ['$568binary_multiply.117', '$584binary_power.125', 'ui_']
    $592return_value.128 = cast(value=ui_)   ['$592return_value.128', 'ui_']
    return $592return_value.128              ['$592return_value.128']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CED180A0>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr, nb.py:404), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$100binary_subtract.36': [<numba.core.ir.Assign object at 0x000001C8CECF2340>],
             '$104compare_op.38': [<numba.core.ir.Assign object at 0x000001C8CECF2640>],
             '$10load_global.4': [<numba.core.ir.Assign object at 0x000001C8CECE6940>],
             '$110binary_subtract.41': [<numba.core.ir.Assign object at 0x000001C8CECF2A00>],
             '$114compare_op.43': [<numba.core.ir.Assign object at 0x000001C8CECF2D00>],
             '$116binary_and.44': [<numba.core.ir.Assign object at 0x000001C8CECF2E80>],
             '$126load_global.48': [<numba.core.ir.Assign object at 0x000001C8CECF55E0>],
             '$128load_method.49': [<numba.core.ir.Assign object at 0x000001C8CECF5760>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x000001C8CECE6AC0>],
             '$134binary_subtract.52': [<numba.core.ir.Assign object at 0x000001C8CECF5B20>],
             '$138compare_op.54': [<numba.core.ir.Assign object at 0x000001C8CECF5E20>],
             '$148load_global.58': [<numba.core.ir.Assign object at 0x000001C8CECF7520>],
             '$150load_method.59': [<numba.core.ir.Assign object at 0x000001C8CECF76A0>],
             '$168load_global.66': [<numba.core.ir.Assign object at 0x000001C8CECF9280>],
             '$172call_function.68': [<numba.core.ir.Assign object at 0x000001C8CECF9550>],
             '$174get_iter.69': [<numba.core.ir.Assign object at 0x000001C8CECF96A0>],
             '$176for_iter.1': [<numba.core.ir.Assign object at 0x000001C8CECEB4F0>],
             '$176for_iter.2': [<numba.core.ir.Assign object at 0x000001C8CECEBC70>],
             '$176for_iter.3': [<numba.core.ir.Assign object at 0x000001C8CECEBFD0>],
             '$192compare_op.7': [<numba.core.ir.Assign object at 0x000001C8CECF9A60>],
             '$194pred': [<numba.core.ir.Assign object at 0x000001C8CECF9D00>],
             '$204compare_op.3': [<numba.core.ir.Assign object at 0x000001C8CECFD3A0>],
             '$206pred': [<numba.core.ir.Assign object at 0x000001C8CECFD640>],
             '$222load_global.0': [<numba.core.ir.Assign object at 0x000001C8CECFDFA0>],
             '$224load_method.1': [<numba.core.ir.Assign object at 0x000001C8CECFF160>],
             '$242load_global.8': [<numba.core.ir.Assign object at 0x000001C8CECFFD00>],
             '$244load_method.9': [<numba.core.ir.Assign object at 0x000001C8CECFFE80>],
             '$250binary_subtract.12': [<numba.core.ir.Assign object at 0x000001C8CED01280>],
             '$254compare_op.14': [<numba.core.ir.Assign object at 0x000001C8CED01580>],
             '$262binary_add.18': [<numba.core.ir.Assign object at 0x000001C8CED01AC0>],
             '$264binary_multiply.19': [<numba.core.ir.Assign object at 0x000001C8CED01C40>],
             '$274load_global.23': [<numba.core.ir.Assign object at 0x000001C8CED04340>],
             '$276load_method.24': [<numba.core.ir.Assign object at 0x000001C8CED044C0>],
             '$282compare_op.27': [<numba.core.ir.Assign object at 0x000001C8CED048E0>],
             '$284call_method.28': [<numba.core.ir.Assign object at 0x000001C8CED04A90>],
             '$292load_attr.31': [<numba.core.ir.Assign object at 0x000001C8CED04FA0>],
             '$296binary_subscr.33': [<numba.core.ir.Assign object at 0x000001C8CED0F130>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CECE63A0>],
             '$300compare_op.35': [<numba.core.ir.Assign object at 0x000001C8CED055E0>],
             '$302pred': [<numba.core.ir.Assign object at 0x000001C8CED05880>],
             '$308return_value.1': [<numba.core.ir.Assign object at 0x000001C8CED04D30>],
             '$310load_global.0': [<numba.core.ir.Assign object at 0x000001C8CED05AC0>],
             '$312load_method.1': [<numba.core.ir.Assign object at 0x000001C8CED05C40>],
             '$318binary_subtract.4': [<numba.core.ir.Assign object at 0x000001C8CED08040>],
             '$322compare_op.6': [<numba.core.ir.Assign object at 0x000001C8CED08340>],
             '$330binary_subtract.10': [<numba.core.ir.Assign object at 0x000001C8CED08880>],
             '$332binary_multiply.11': [<numba.core.ir.Assign object at 0x000001C8CED08A00>],
             '$342load_global.15': [<numba.core.ir.Assign object at 0x000001C8CED0A100>],
             '$344load_method.16': [<numba.core.ir.Assign object at 0x000001C8CED0A280>],
             '$350compare_op.19': [<numba.core.ir.Assign object at 0x000001C8CED0A6A0>],
             '$352call_method.20': [<numba.core.ir.Assign object at 0x000001C8CED0A850>],
             '$364load_attr.25': [<numba.core.ir.Assign object at 0x000001C8CED0AFA0>],
             '$368binary_subscr.27': [<numba.core.ir.Assign object at 0x000001C8CED4B400>],
             '$370build_slice.28': [<numba.core.ir.Assign object at 0x000001C8CED0B490>],
             '$370build_slice.29': [<numba.core.ir.Assign object at 0x000001C8CED0B5B0>],
             '$384load_global.34': [<numba.core.ir.Assign object at 0x000001C8CED0BE20>],
             '$386load_method.35': [<numba.core.ir.Assign object at 0x000001C8CED0BFA0>],
             '$392binary_subtract.38': [<numba.core.ir.Assign object at 0x000001C8CED0F3A0>],
             '$396compare_op.40': [<numba.core.ir.Assign object at 0x000001C8CED0F6A0>],
             '$402binary_multiply.43': [<numba.core.ir.Assign object at 0x000001C8CED0FA60>],
             '$406binary_multiply.45': [<numba.core.ir.Assign object at 0x000001C8CED0FD00>],
             '$416load_global.49': [<numba.core.ir.Assign object at 0x000001C8CED11400>],
             '$418load_method.50': [<numba.core.ir.Assign object at 0x000001C8CED11580>],
             '$424compare_op.53': [<numba.core.ir.Assign object at 0x000001C8CED119A0>],
             '$426call_method.54': [<numba.core.ir.Assign object at 0x000001C8CED11B50>],
             '$438load_attr.59': [<numba.core.ir.Assign object at 0x000001C8CED142E0>],
             '$442binary_subscr.61': [<numba.core.ir.Assign object at 0x000001C8CED4B430>],
             '$444build_slice.62': [<numba.core.ir.Assign object at 0x000001C8CED14790>],
             '$444build_slice.63': [<numba.core.ir.Assign object at 0x000001C8CED148B0>],
             '$450load_global.65': [<numba.core.ir.Assign object at 0x000001C8CED14C40>],
             '$452load_method.66': [<numba.core.ir.Assign object at 0x000001C8CED14DC0>],
             '$458binary_subtract.69': [<numba.core.ir.Assign object at 0x000001C8CED161C0>],
             '$462compare_op.71': [<numba.core.ir.Assign object at 0x000001C8CED164C0>],
             '$468binary_multiply.74': [<numba.core.ir.Assign object at 0x000001C8CED16880>],
             '$472binary_multiply.76': [<numba.core.ir.Assign object at 0x000001C8CED16B20>],
             '$482load_global.80': [<numba.core.ir.Assign object at 0x000001C8CED18220>],
             '$484load_method.81': [<numba.core.ir.Assign object at 0x000001C8CED183A0>],
             '$490compare_op.84': [<numba.core.ir.Assign object at 0x000001C8CED187C0>],
             '$492call_method.85': [<numba.core.ir.Assign object at 0x000001C8CED18970>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001C8CECE6520>],
             '$502binary_subtract.89': [<numba.core.ir.Assign object at 0x000001C8CED18F40>],
             '$510load_global.92': [<numba.core.ir.Assign object at 0x000001C8CED1A4C0>],
             '$512load_method.93': [<numba.core.ir.Assign object at 0x000001C8CED1A640>],
             '$516call_method.95': [<numba.core.ir.Assign object at 0x000001C8CED1A910>],
             '$524load_global.98': [<numba.core.ir.Assign object at 0x000001C8CED1ADC0>],
             '$534load_global.102': [<numba.core.ir.Assign object at 0x000001C8CED1C460>],
             '$536load_method.103': [<numba.core.ir.Assign object at 0x000001C8CED1C5E0>],
             '$542binary_power.106': [<numba.core.ir.Assign object at 0x000001C8CED1CA00>],
             '$552binary_subscr.110': [<numba.core.ir.Assign object at 0x000001C8CED4B3D0>],
             '$556binary_true_divide.112': [<numba.core.ir.Assign object at 0x000001C8CED1D3A0>],
             '$568binary_multiply.117': [<numba.core.ir.Assign object at 0x000001C8CED1DBE0>],
             '$574load_attr.120': [<numba.core.ir.Assign object at 0x000001C8CED1DFA0>],
             '$578binary_subscr.122': [<numba.core.ir.Assign object at 0x000001C8CED4B190>],
             '$580binary_true_divide.123': [<numba.core.ir.Assign object at 0x000001C8CED1F460>],
             '$584binary_power.125': [<numba.core.ir.Assign object at 0x000001C8CED1F760>],
             '$592return_value.128': [<numba.core.ir.Assign object at 0x000001C8CED1FCA0>],
             '$60load_global.18': [<numba.core.ir.Assign object at 0x000001C8CECEBA00>],
             '$76load_global.25': [<numba.core.ir.Assign object at 0x000001C8CECF0400>],
             '$92load_global.32': [<numba.core.ir.Assign object at 0x000001C8CECF0DC0>],
             '$94load_method.33': [<numba.core.ir.Assign object at 0x000001C8CECF0F40>],
             '$const102.37': [<numba.core.ir.Assign object at 0x000001C8CECF24C0>],
             '$const112.42': [<numba.core.ir.Assign object at 0x000001C8CECF2B80>],
             '$const118.45': [<numba.core.ir.Assign object at 0x000001C8CECF5040>],
             '$const120.46': [<numba.core.ir.Assign object at 0x000001C8CECF51C0>],
             '$const136.53': [<numba.core.ir.Assign object at 0x000001C8CECF5CA0>],
             '$const140.55': [<numba.core.ir.Assign object at 0x000001C8CECF5FA0>],
             '$const154.61': [<numba.core.ir.Assign object at 0x000001C8CECF7940>],
             '$const160.63': [<numba.core.ir.Assign object at 0x000001C8CECF7D60>],
             '$const164.65': [<numba.core.ir.Assign object at 0x000001C8CECF9040>],
             '$const190.6': [<numba.core.ir.Assign object at 0x000001C8CECF98E0>],
             '$const202.2': [<numba.core.ir.Assign object at 0x000001C8CECFD220>],
             '$const228.3': [<numba.core.ir.Assign object at 0x000001C8CECFF400>],
             '$const234.5': [<numba.core.ir.Assign object at 0x000001C8CECFF820>],
             '$const238.7': [<numba.core.ir.Assign object at 0x000001C8CECFFAC0>],
             '$const252.13': [<numba.core.ir.Assign object at 0x000001C8CED01400>],
             '$const258.16': [<numba.core.ir.Assign object at 0x000001C8CED01820>],
             '$const266.20': [<numba.core.ir.Assign object at 0x000001C8CED01DC0>],
             '$const280.26': [<numba.core.ir.Assign object at 0x000001C8CED04760>],
             '$const294.32': [<numba.core.ir.Assign object at 0x000001C8CED05160>],
             '$const298.34': [<numba.core.ir.Assign object at 0x000001C8CED05460>],
             '$const306.0': [<numba.core.ir.Assign object at 0x000001C8CED01970>],
             '$const320.5': [<numba.core.ir.Assign object at 0x000001C8CED081C0>],
             '$const326.8': [<numba.core.ir.Assign object at 0x000001C8CED085E0>],
             '$const334.12': [<numba.core.ir.Assign object at 0x000001C8CED08B80>],
             '$const348.18': [<numba.core.ir.Assign object at 0x000001C8CED0A520>],
             '$const360.23': [<numba.core.ir.Assign object at 0x000001C8CED0AD00>],
             '$const366.26': [<numba.core.ir.Assign object at 0x000001C8CED0B160>],
             '$const394.39': [<numba.core.ir.Assign object at 0x000001C8CED0F520>],
             '$const408.46': [<numba.core.ir.Assign object at 0x000001C8CED0FE80>],
             '$const422.52': [<numba.core.ir.Assign object at 0x000001C8CED11820>],
             '$const434.57': [<numba.core.ir.Assign object at 0x000001C8CED14040>],
             '$const440.60': [<numba.core.ir.Assign object at 0x000001C8CED14460>],
             '$const460.70': [<numba.core.ir.Assign object at 0x000001C8CED16340>],
             '$const474.77': [<numba.core.ir.Assign object at 0x000001C8CED16CA0>],
             '$const488.83': [<numba.core.ir.Assign object at 0x000001C8CED18640>],
             '$const540.105': [<numba.core.ir.Assign object at 0x000001C8CED1C880>],
             '$const550.109': [<numba.core.ir.Assign object at 0x000001C8CED1CF40>],
             '$const558.113': [<numba.core.ir.Assign object at 0x000001C8CED1D520>],
             '$const566.116': [<numba.core.ir.Assign object at 0x000001C8CED1DA60>],
             '$const576.121': [<numba.core.ir.Assign object at 0x000001C8CED1F160>],
             '$const582.124': [<numba.core.ir.Assign object at 0x000001C8CED1F5E0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8CECE67C0>],
             '$phi176.0': [<numba.core.ir.Assign object at 0x000001C8CECE6CA0>],
             '$phi178.1': [<numba.core.ir.Assign object at 0x000001C8CECEB040>],
             'ATR_long': [<numba.core.ir.Assign object at 0x000001C8CECF0B50>],
             'ATR_long2': [<numba.core.ir.Assign object at 0x000001C8CECE6220>],
             'ATR_short': [<numba.core.ir.Assign object at 0x000001C8CECF0190>],
             'ATR_short1': [<numba.core.ir.Assign object at 0x000001C8CECE6100>],
             'ClosedPostionprofit_arr': [<numba.core.ir.Assign object at 0x000001C8CED1A220>,
                                         <numba.core.ir.Assign object at 0x000001C8CED1AB80>],
             'DD_per_array': [<numba.core.ir.Assign object at 0x000001C8CED1C1F0>],
             'Length': [<numba.core.ir.Assign object at 0x000001C8CECA5B20>],
             'ROI': [<numba.core.ir.Assign object at 0x000001C8CED1D6A0>],
             'bool194': [<numba.core.ir.Assign object at 0x000001C8CECF9BE0>],
             'bool206': [<numba.core.ir.Assign object at 0x000001C8CECFD520>],
             'bool302': [<numba.core.ir.Assign object at 0x000001C8CED05760>],
             'buy_Fees': [<numba.core.ir.Assign object at 0x000001C8CECEF8E0>],
             'buy_Fees_arr': [<numba.core.ir.Assign object at 0x000001C8CED11070>,
                              <numba.core.ir.Assign object at 0x000001C8CED11CA0>,
                              <numba.core.ir.Assign object at 0x000001C8CED14A00>],
             'buy_sizes': [<numba.core.ir.Assign object at 0x000001C8CECEFEE0>],
             'close_array': [<numba.core.ir.Assign object at 0x000001C8CECA50D0>],
             'current_order': [<numba.core.ir.Assign object at 0x000001C8CECF77F0>],
             'diff_arr': [<numba.core.ir.Assign object at 0x000001C8CED0BB80>],
             'direction': [<numba.core.ir.Assign object at 0x000001C8CECEB760>],
             'entryprice': [<numba.core.ir.Assign object at 0x000001C8CECEF3A0>],
             'entryprice_arr': [<numba.core.ir.Assign object at 0x000001C8CED01F70>],
             'entryprice_arr.1': [<numba.core.ir.Assign object at 0x000001C8CED04BE0>,
                                  <numba.core.ir.Assign object at 0x000001C8CED0B700>],
             'exitsprice': [<numba.core.ir.Assign object at 0x000001C8CECEF640>],
             'exitsprice_arr': [<numba.core.ir.Assign object at 0x000001C8CED08D30>,
                                <numba.core.ir.Assign object at 0x000001C8CED0A9A0>],
             'fee': [<numba.core.ir.Assign object at 0x000001C8CECA5FA0>],
             'fee.1': [<numba.core.ir.Assign object at 0x000001C8CECEB5E0>],
             'high_array': [<numba.core.ir.Assign object at 0x000001C8CECA5550>],
             'highestarr': [<numba.core.ir.Assign object at 0x000001C8CECA58E0>],
             'i': [<numba.core.ir.Assign object at 0x000001C8CECF0C70>],
             'init_cash': [<numba.core.ir.Assign object at 0x000001C8CECA5C40>],
             'last_marketpostion_arr': [<numba.core.ir.Assign object at 0x000001C8CECFF5B0>],
             'low_array': [<numba.core.ir.Assign object at 0x000001C8CECA5310>],
             'lowestarr': [<numba.core.ir.Assign object at 0x000001C8CECA5A00>],
             'marketpostion': [<numba.core.ir.Assign object at 0x000001C8CECEF100>,
                               <numba.core.ir.Assign object at 0x000001C8CECF9E20>,
                               <numba.core.ir.Assign object at 0x000001C8CECFD880>],
             'marketpostion_array': [<numba.core.ir.Assign object at 0x000001C8CECE6F70>],
             'open_array': [<numba.core.ir.Assign object at 0x000001C8CECA5790>],
             'orders': [<numba.core.ir.Assign object at 0x000001C8CECF72B0>],
             'sell_Fees': [<numba.core.ir.Assign object at 0x000001C8CECEFB80>],
             'sell_Fees_arr': [<numba.core.ir.Assign object at 0x000001C8CED16E50>,
                               <numba.core.ir.Assign object at 0x000001C8CED18AC0>],
             'sell_sizes': [<numba.core.ir.Assign object at 0x000001C8CECEB160>],
             'shiftorder': [<numba.core.ir.Assign object at 0x000001C8CECF7AF0>],
             'size': [<numba.core.ir.Assign object at 0x000001C8CECA5E80>],
             'slippage': [<numba.core.ir.Assign object at 0x000001C8CECA5D60>],
             'slippage.1': [<numba.core.ir.Assign object at 0x000001C8CECEB3A0>],
             'sumallDD': [<numba.core.ir.Assign object at 0x000001C8CED1CBB0>],
             'trends': [<numba.core.ir.Assign object at 0x000001C8CECF5370>],
             'ui_': [<numba.core.ir.Assign object at 0x000001C8CED1F8E0>]})
2023-01-03 17:17 DEBUG SSA violators {'ClosedPostionprofit_arr',
 'buy_Fees_arr',
 'entryprice_arr.1',
 'exitsprice_arr',
 'marketpostion',
 'sell_Fees_arr'}
2023-01-03 17:17 DEBUG Fix SSA violator on var ClosedPostionprofit_arr
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG first assign: ClosedPostionprofit_arr
2023-01-03 17:17 DEBUG replaced with: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG replaced with: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr, nb.py:404), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {310: [<numba.core.ir.Assign object at 0x000001C8CED0B790>,
                   <numba.core.ir.Assign object at 0x000001C8CED116D0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEC88D00>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def var='ClosedPostionprofit_arr' stmt=$516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr, nb.py:404), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def var='ClosedPostionprofit_arr' stmt=DD_per_array = call $524load_global.98(ClosedPostionprofit_arr, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr, nb.py:404), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG replaced with: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='ClosedPostionprofit_arr' stmt=$552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Fix SSA violator on var marketpostion
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG first assign: marketpostion
2023-01-03 17:17 DEBUG replaced with: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 1)
2023-01-03 17:17 DEBUG replaced with: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG replaced with: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001C8CED18DC0>],
             196: [<numba.core.ir.Assign object at 0x000001C8CEC88C10>],
             208: [<numba.core.ir.Assign object at 0x000001C8CED4B580>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion
2023-01-03 17:17 DEBUG find_def var='marketpostion' stmt=marketpostion_array[i] = marketpostion
2023-01-03 17:17 DEBUG find_def_from_top label 212
2023-01-03 17:17 DEBUG insert phi node marketpostion.3 = phi(incoming_values=[], incoming_blocks=[]) at 212
2023-01-03 17:17 DEBUG find_def_from_bottom label 200
2023-01-03 17:17 DEBUG find_def_from_top label 200
2023-01-03 17:17 DEBUG insert phi node marketpostion.4 = phi(incoming_values=[], incoming_blocks=[]) at 200
2023-01-03 17:17 DEBUG find_def_from_bottom label 178
2023-01-03 17:17 DEBUG find_def_from_top label 178
2023-01-03 17:17 DEBUG idom 176 from label 178
2023-01-03 17:17 DEBUG find_def_from_bottom label 176
2023-01-03 17:17 DEBUG find_def_from_top label 176
2023-01-03 17:17 DEBUG insert phi node marketpostion.5 = phi(incoming_values=[], incoming_blocks=[]) at 176
2023-01-03 17:17 DEBUG find_def_from_bottom label 0
2023-01-03 17:17 DEBUG incoming_def marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG find_def_from_bottom label 212
2023-01-03 17:17 DEBUG incoming_def marketpostion.3 = phi(incoming_values=[], incoming_blocks=[])
2023-01-03 17:17 DEBUG incoming_def marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG find_def_from_bottom label 196
2023-01-03 17:17 DEBUG incoming_def marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG incoming_def marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG find_def_from_bottom label 208
2023-01-03 17:17 DEBUG incoming_def marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG replaced with: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Fix SSA violator on var buy_Fees_arr
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0BA30>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG first assign: buy_Fees_arr
2023-01-03 17:17 DEBUG replaced with: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: buy_Fees_arr.2 = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {310: [<numba.core.ir.Assign object at 0x000001C8CED4B5E0>,
                   <numba.core.ir.Assign object at 0x000001C8CED4B2B0>,
                   <numba.core.ir.Assign object at 0x000001C8CED1FF10>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED05970>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG find_def var='buy_Fees_arr' stmt=$424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='buy_Fees_arr' stmt=buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.2 = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='buy_Fees_arr' stmt=buy_Fees_arr.2 = getitem(value=buy_Fees_arr, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: buy_Fees_arr.2 = getitem(value=buy_Fees_arr.1, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG find_def var='buy_Fees_arr' stmt=$502binary_subtract.89 = diff_arr - buy_Fees_arr
2023-01-03 17:17 DEBUG replaced with: $502binary_subtract.89 = diff_arr - buy_Fees_arr.2
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Fix SSA violator on var sell_Fees_arr
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4BE80>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.2 = getitem(value=buy_Fees_arr.1, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG first assign: sell_Fees_arr
2023-01-03 17:17 DEBUG replaced with: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: sell_Fees_arr.1 = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr.2
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {310: [<numba.core.ir.Assign object at 0x000001C8CED1FB20>,
                   <numba.core.ir.Assign object at 0x000001C8CED16F70>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED1FF10>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.2 = getitem(value=buy_Fees_arr.1, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG find_def var='sell_Fees_arr' stmt=$490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr.1 = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='sell_Fees_arr' stmt=sell_Fees_arr.1 = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr.2
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG find_def var='sell_Fees_arr' stmt=ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr
2023-01-03 17:17 DEBUG replaced with: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr.1
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Fix SSA violator on var exitsprice_arr
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG first assign: exitsprice_arr
2023-01-03 17:17 DEBUG replaced with: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: exitsprice_arr.1 = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.2 = getitem(value=buy_Fees_arr.1, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr.1 = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr.2
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr.1
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {310: [<numba.core.ir.Assign object at 0x000001C8CED1FFA0>,
                   <numba.core.ir.Assign object at 0x000001C8CED1DD30>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED11D30>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG find_def var='exitsprice_arr' stmt=$350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr.1 = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='exitsprice_arr' stmt=exitsprice_arr.1 = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG find_def var='exitsprice_arr' stmt=$364load_attr.25 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG replaced with: $364load_attr.25 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG find_def var='exitsprice_arr' stmt=diff_arr = exitsprice_arr - entryprice_arr.1
2023-01-03 17:17 DEBUG replaced with: diff_arr = exitsprice_arr.1 - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG find_def var='exitsprice_arr' stmt=$438load_attr.59 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG replaced with: $438load_attr.59 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.2 = getitem(value=buy_Fees_arr.1, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr.1 = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr.2
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr.1
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG find_def var='exitsprice_arr' stmt=$574load_attr.120 = getattr(value=exitsprice_arr, attr=shape)
2023-01-03 17:17 DEBUG replaced with: $574load_attr.120 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Fix SSA violator on var entryprice_arr.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG first assign: entryprice_arr.1
2023-01-03 17:17 DEBUG replaced with: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CED4B760>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr.1 = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: entryprice_arr.1.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr.1 - entryprice_arr.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.2 = getitem(value=buy_Fees_arr.1, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr.1 = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr.2
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr.1
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {222: [<numba.core.ir.Assign object at 0x000001C8CED05EB0>],
             310: [<numba.core.ir.Assign object at 0x000001C8CED14A90>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: open_array = arg(0, name=open_array)
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: highestarr = arg(4, name=highestarr)
2023-01-03 17:17 DEBUG on stmt: lowestarr = arg(5, name=lowestarr)
2023-01-03 17:17 DEBUG on stmt: Length = arg(6, name=Length)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(7, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: slippage = arg(8, name=slippage)
2023-01-03 17:17 DEBUG on stmt: size = arg(9, name=size)
2023-01-03 17:17 DEBUG on stmt: fee = arg(10, name=fee)
2023-01-03 17:17 DEBUG on stmt: ATR_short1 = arg(11, name=ATR_short1)
2023-01-03 17:17 DEBUG on stmt: ATR_long2 = arg(12, name=ATR_long2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=full)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int_)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array = call $4load_attr.1(Length, $const8.3, func=$4load_attr.1, args=[Var(Length, nb.py:329), Var($const8.3, nb.py:329)], kws=[('dtype', Var($12load_attr.5, nb.py:329))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: marketpostion = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_sizes = size
2023-01-03 17:17 DEBUG on stmt: sell_sizes = size
2023-01-03 17:17 DEBUG on stmt: slippage.1 = slippage
2023-01-03 17:17 DEBUG on stmt: fee.1 = fee
2023-01-03 17:17 DEBUG on stmt: direction = const(str, buyonly)
2023-01-03 17:17 DEBUG on stmt: $60load_global.18 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_short = call $60load_global.18(Length, high_array, low_array, close_array, ATR_short1, func=$60load_global.18, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_short1, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $76load_global.25 = global(get_ATR: CPUDispatcher(<function get_ATR at 0x000001C8B25E5940>))
2023-01-03 17:17 DEBUG on stmt: ATR_long = call $76load_global.25(Length, high_array, low_array, close_array, ATR_long2, func=$76load_global.25, args=[Var(Length, nb.py:329), Var(high_array, nb.py:329), Var(low_array, nb.py:329), Var(close_array, nb.py:329), Var(ATR_long2, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $92load_global.32 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $94load_method.33 = getattr(value=$92load_global.32, attr=where)
2023-01-03 17:17 DEBUG on stmt: $100binary_subtract.36 = high_array - highestarr
2023-01-03 17:17 DEBUG on stmt: $const102.37 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $104compare_op.38 = $100binary_subtract.36 > $const102.37
2023-01-03 17:17 DEBUG on stmt: $110binary_subtract.41 = ATR_short - ATR_long
2023-01-03 17:17 DEBUG on stmt: $const112.42 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $114compare_op.43 = $110binary_subtract.41 > $const112.42
2023-01-03 17:17 DEBUG on stmt: $116binary_and.44 = $104compare_op.38 & $114compare_op.43
2023-01-03 17:17 DEBUG on stmt: $const118.45 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $const120.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: trends = call $94load_method.33($116binary_and.44, $const118.45, $const120.46, func=$94load_method.33, args=[Var($116binary_and.44, nb.py:354), Var($const118.45, nb.py:355), Var($const120.46, nb.py:355)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $128load_method.49 = getattr(value=$126load_global.48, attr=where)
2023-01-03 17:17 DEBUG on stmt: $134binary_subtract.52 = low_array - lowestarr
2023-01-03 17:17 DEBUG on stmt: $const136.53 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $138compare_op.54 = $134binary_subtract.52 < $const136.53
2023-01-03 17:17 DEBUG on stmt: $const140.55 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: orders = call $128load_method.49($138compare_op.54, $const140.55, trends, func=$128load_method.49, args=[Var($138compare_op.54, nb.py:356), Var($const140.55, nb.py:356), Var(trends, nb.py:354)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $148load_global.58 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $150load_method.59 = getattr(value=$148load_global.58, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const154.61 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: shiftorder = call $150load_method.59(orders, $const154.61, func=$150load_method.59, args=[Var(orders, nb.py:356), Var($const154.61, nb.py:357)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const160.63 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const164.65 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: shiftorder[0] = $const160.63
2023-01-03 17:17 DEBUG on stmt: $168load_global.66 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $172call_function.68 = call $168load_global.66(Length, func=$168load_global.66, args=[Var(Length, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $174get_iter.69 = getiter(value=$172call_function.68)
2023-01-03 17:17 DEBUG on stmt: $phi176.0 = $174get_iter.69
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.5 = phi(incoming_values=[Var(marketpostion, nb.py:332), Var(marketpostion.3, nb.py:370)], incoming_blocks=[0, 212])
2023-01-03 17:17 DEBUG on stmt: $176for_iter.1 = iternext(value=$phi176.0)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.2 = pair_first(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $176for_iter.3 = pair_second(value=$176for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi178.1 = $176for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $176for_iter.3, 178, 222
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 178
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: i = $phi178.1
2023-01-03 17:17 DEBUG on stmt: current_order = getitem(value=shiftorder, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const190.6 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $192compare_op.7 = current_order == $const190.6
2023-01-03 17:17 DEBUG on stmt: bool194 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $194pred = call bool194($192compare_op.7, func=bool194, args=(Var($192compare_op.7, nb.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $194pred, 196, 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 196
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: jump 200
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 200
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.4 = phi(incoming_values=[Var(marketpostion.5, nb.py:370), Var(marketpostion.1, nb.py:366)], incoming_blocks=[178, 196])
2023-01-03 17:17 DEBUG on stmt: $const202.2 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $204compare_op.3 = current_order == $const202.2
2023-01-03 17:17 DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $206pred = call bool206($204compare_op.3, func=bool206, args=(Var($204compare_op.3, nb.py:367),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $206pred, 208, 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 208
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.2 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: jump 212
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 212
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: marketpostion.3 = phi(incoming_values=[Var(marketpostion.4, nb.py:370), Var(marketpostion.2, nb.py:368)], incoming_blocks=[200, 208])
2023-01-03 17:17 DEBUG on stmt: marketpostion_array[i] = marketpostion.3
2023-01-03 17:17 DEBUG on stmt: jump 176
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 222
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: $222load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $224load_method.1 = getattr(value=$222load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const228.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr = call $224load_method.1(marketpostion_array, $const228.3, func=$224load_method.1, args=[Var(marketpostion_array, nb.py:329), Var($const228.3, nb.py:373)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const234.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const238.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr[0] = $const234.5
2023-01-03 17:17 DEBUG on stmt: $242load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $244load_method.9 = getattr(value=$242load_global.8, attr=where)
2023-01-03 17:17 DEBUG on stmt: $250binary_subtract.12 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const252.13 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $254compare_op.14 = $250binary_subtract.12 > $const252.13
2023-01-03 17:17 DEBUG on stmt: $const258.16 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $262binary_add.18 = $const258.16 + slippage.1
2023-01-03 17:17 DEBUG on stmt: $264binary_multiply.19 = open_array * $262binary_add.18
2023-01-03 17:17 DEBUG on stmt: $const266.20 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr = call $244load_method.9($254compare_op.14, $264binary_multiply.19, $const266.20, func=$244load_method.9, args=[Var($254compare_op.14, nb.py:377), Var($264binary_multiply.19, nb.py:377), Var($const266.20, nb.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $274load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $276load_method.24 = getattr(value=$274load_global.23, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const280.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $282compare_op.27 = entryprice_arr > $const280.26
2023-01-03 17:17 DEBUG on stmt: $284call_method.28 = call $276load_method.24($282compare_op.27, func=$276load_method.24, args=[Var($282compare_op.27, nb.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1 = getitem(value=entryprice_arr, index=$284call_method.28, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG find_def var='entryprice_arr.1' stmt=$292load_attr.31 = getattr(value=entryprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const294.32 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $296binary_subscr.33 = static_getitem(value=$292load_attr.31, index=0, index_var=$const294.32, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const298.34 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $300compare_op.35 = $296binary_subscr.33 == $const298.34
2023-01-03 17:17 DEBUG on stmt: bool302 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $302pred = call bool302($300compare_op.35, func=bool302, args=(Var($300compare_op.35, nb.py:383),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $302pred, 306, 310
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 306
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: $const306.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $308return_value.1 = cast(value=$const306.0)
2023-01-03 17:17 DEBUG on stmt: return $308return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 310
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CED0B790>
2023-01-03 17:17 DEBUG on stmt: $310load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $312load_method.1 = getattr(value=$310load_global.0, attr=where)
2023-01-03 17:17 DEBUG on stmt: $318binary_subtract.4 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const320.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $322compare_op.6 = $318binary_subtract.4 < $const320.5
2023-01-03 17:17 DEBUG on stmt: $const326.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $330binary_subtract.10 = $const326.8 - slippage.1
2023-01-03 17:17 DEBUG on stmt: $332binary_multiply.11 = open_array * $330binary_subtract.10
2023-01-03 17:17 DEBUG on stmt: $const334.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr = call $312load_method.1($322compare_op.6, $332binary_multiply.11, $const334.12, func=$312load_method.1, args=[Var($322compare_op.6, nb.py:387), Var($332binary_multiply.11, nb.py:387), Var($const334.12, nb.py:387)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $342load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $344load_method.16 = getattr(value=$342load_global.15, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const348.18 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $350compare_op.19 = exitsprice_arr > $const348.18
2023-01-03 17:17 DEBUG on stmt: $352call_method.20 = call $344load_method.16($350compare_op.19, func=$344load_method.16, args=[Var($350compare_op.19, nb.py:388)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr.1 = getitem(value=exitsprice_arr, index=$352call_method.20, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const360.23 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $364load_attr.25 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const366.26 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $368binary_subscr.27 = static_getitem(value=$364load_attr.25, index=0, index_var=$const366.26, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $370build_slice.29 = call $370build_slice.28($const360.23, $368binary_subscr.27, func=$370build_slice.28, args=(Var($const360.23, nb.py:391), Var($368binary_subscr.27, nb.py:391)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: entryprice_arr.1.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='entryprice_arr.1' stmt=entryprice_arr.1.1 = getitem(value=entryprice_arr.1, index=$370build_slice.29, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def_from_top label 310
2023-01-03 17:17 DEBUG idom 222 from label 310
2023-01-03 17:17 DEBUG find_def_from_bottom label 222
2023-01-03 17:17 DEBUG on stmt: diff_arr = exitsprice_arr.1 - entryprice_arr.1
2023-01-03 17:17 DEBUG find_def var='entryprice_arr.1' stmt=diff_arr = exitsprice_arr.1 - entryprice_arr.1
2023-01-03 17:17 DEBUG replaced with: diff_arr = exitsprice_arr.1 - entryprice_arr.1.1
2023-01-03 17:17 DEBUG on stmt: $384load_global.34 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $386load_method.35 = getattr(value=$384load_global.34, attr=where)
2023-01-03 17:17 DEBUG on stmt: $392binary_subtract.38 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const394.39 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $396compare_op.40 = $392binary_subtract.38 > $const394.39
2023-01-03 17:17 DEBUG on stmt: $402binary_multiply.43 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $406binary_multiply.45 = $402binary_multiply.43 * size
2023-01-03 17:17 DEBUG on stmt: $const408.46 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr = call $386load_method.35($396compare_op.40, $406binary_multiply.45, $const408.46, func=$386load_method.35, args=[Var($396compare_op.40, nb.py:396), Var($406binary_multiply.45, nb.py:396), Var($const408.46, nb.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $416load_global.49 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $418load_method.50 = getattr(value=$416load_global.49, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const422.52 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $424compare_op.53 = buy_Fees_arr > $const422.52
2023-01-03 17:17 DEBUG on stmt: $426call_method.54 = call $418load_method.50($424compare_op.53, func=$418load_method.50, args=[Var($424compare_op.53, nb.py:397)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.1 = getitem(value=buy_Fees_arr, index=$426call_method.54, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const434.57 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $438load_attr.59 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const440.60 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $442binary_subscr.61 = static_getitem(value=$438load_attr.59, index=0, index_var=$const440.60, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.62 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $444build_slice.63 = call $444build_slice.62($const434.57, $442binary_subscr.61, func=$444build_slice.62, args=(Var($const434.57, nb.py:398), Var($442binary_subscr.61, nb.py:398)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr.2 = getitem(value=buy_Fees_arr.1, index=$444build_slice.63, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $450load_global.65 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $452load_method.66 = getattr(value=$450load_global.65, attr=where)
2023-01-03 17:17 DEBUG on stmt: $458binary_subtract.69 = marketpostion_array - last_marketpostion_arr
2023-01-03 17:17 DEBUG on stmt: $const460.70 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $462compare_op.71 = $458binary_subtract.69 < $const460.70
2023-01-03 17:17 DEBUG on stmt: $468binary_multiply.74 = open_array * fee.1
2023-01-03 17:17 DEBUG on stmt: $472binary_multiply.76 = $468binary_multiply.74 * size
2023-01-03 17:17 DEBUG on stmt: $const474.77 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr = call $452load_method.66($462compare_op.71, $472binary_multiply.76, $const474.77, func=$452load_method.66, args=[Var($462compare_op.71, nb.py:401), Var($472binary_multiply.76, nb.py:401), Var($const474.77, nb.py:401)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $482load_global.80 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $484load_method.81 = getattr(value=$482load_global.80, attr=where)
2023-01-03 17:17 DEBUG on stmt: $const488.83 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $490compare_op.84 = sell_Fees_arr > $const488.83
2023-01-03 17:17 DEBUG on stmt: $492call_method.85 = call $484load_method.81($490compare_op.84, func=$484load_method.81, args=[Var($490compare_op.84, nb.py:402)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr.1 = getitem(value=sell_Fees_arr, index=$492call_method.85, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $502binary_subtract.89 = diff_arr - buy_Fees_arr.2
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr = $502binary_subtract.89 - sell_Fees_arr.1
2023-01-03 17:17 DEBUG on stmt: $510load_global.92 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $512load_method.93 = getattr(value=$510load_global.92, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: $516call_method.95 = call $512load_method.93(ClosedPostionprofit_arr, func=$512load_method.93, args=[Var(ClosedPostionprofit_arr, nb.py:404)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit_arr.1 = $516call_method.95 + init_cash
2023-01-03 17:17 DEBUG on stmt: $524load_global.98 = global(get_drawdown_per: CPUDispatcher(<function get_drawdown_per at 0x000001C8B25E5B80>))
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $524load_global.98(ClosedPostionprofit_arr.1, init_cash, func=$524load_global.98, args=[Var(ClosedPostionprofit_arr.1, nb.py:406), Var(init_cash, nb.py:329)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $534load_global.102 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $536load_method.103 = getattr(value=$534load_global.102, attr=sum)
2023-01-03 17:17 DEBUG on stmt: $const540.105 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $542binary_power.106 = DD_per_array ** $const540.105
2023-01-03 17:17 DEBUG on stmt: sumallDD = call $536load_method.103($542binary_power.106, func=$536load_method.103, args=[Var($542binary_power.106, nb.py:410)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const550.109 = const(int, -1)
2023-01-03 17:17 DEBUG on stmt: $552binary_subscr.110 = static_getitem(value=ClosedPostionprofit_arr.1, index=-1, index_var=$const550.109, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $556binary_true_divide.112 = $552binary_subscr.110 / init_cash
2023-01-03 17:17 DEBUG on stmt: $const558.113 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: ROI = $556binary_true_divide.112 - $const558.113
2023-01-03 17:17 DEBUG on stmt: $const566.116 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $568binary_multiply.117 = ROI * $const566.116
2023-01-03 17:17 DEBUG on stmt: $574load_attr.120 = getattr(value=exitsprice_arr.1, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const576.121 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $578binary_subscr.122 = static_getitem(value=$574load_attr.120, index=0, index_var=$const576.121, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $580binary_true_divide.123 = sumallDD / $578binary_subscr.122
2023-01-03 17:17 DEBUG on stmt: $const582.124 = const(float, 0.5)
2023-01-03 17:17 DEBUG on stmt: $584binary_power.125 = $580binary_true_divide.123 ** $const582.124
2023-01-03 17:17 DEBUG on stmt: ui_ = $568binary_multiply.117 / $584binary_power.125
2023-01-03 17:17 DEBUG on stmt: $592return_value.128 = cast(value=ui_)
2023-01-03 17:17 DEBUG on stmt: return $592return_value.128
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$fill_value6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$fill_value6.2', '$dtype8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$fill_value6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$fill_value6.2', '$dtype8.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    fill_value = arg(1, name=fill_value)     ['fill_value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(shape, fill_value, dtype, func=$2load_global.0, args=[Var(shape, <string>:3), Var(fill_value, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'dtype', 'fill_value', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDBF5B0>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: fill_value = arg(1, name=fill_value)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(2, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, fill_value, dtype, func=$2load_global.0, args=[Var(shape, <string>:3), Var(fill_value, <string>:3), Var(dtype, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8CEDBE3A0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8CEDBE4F0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEDBF040>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8CEDBF310>],
             'fill_value': [<numba.core.ir.Assign object at 0x000001C8CEDBF550>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8CEDBF9A0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4220)
           2	LOAD_GLOBAL(arg=0, lineno=4220)
           4	LOAD_METHOD(arg=1, lineno=4220)
           6	LOAD_FAST(arg=0, lineno=4220)
           8	LOAD_FAST(arg=2, lineno=4220)
          10	CALL_METHOD(arg=2, lineno=4220)
          12	STORE_FAST(arg=3, lineno=4220)
          14	LOAD_FAST(arg=3, lineno=4221)
          16	LOAD_ATTR(arg=2, lineno=4221)
          18	STORE_FAST(arg=4, lineno=4221)
          20	LOAD_GLOBAL(arg=3, lineno=4222)
          22	LOAD_GLOBAL(arg=4, lineno=4222)
          24	LOAD_FAST(arg=4, lineno=4222)
          26	CALL_FUNCTION(arg=1, lineno=4222)
          28	CALL_FUNCTION(arg=1, lineno=4222)
          30	GET_ITER(arg=None, lineno=4222)
>         32	FOR_ITER(arg=12, lineno=4222)
          34	STORE_FAST(arg=5, lineno=4222)
          36	LOAD_FAST(arg=1, lineno=4223)
          38	LOAD_FAST(arg=4, lineno=4223)
          40	LOAD_FAST(arg=5, lineno=4223)
          42	STORE_SUBSCR(arg=None, lineno=4223)
          44	JUMP_ABSOLUTE(arg=32, lineno=4223)
>         46	LOAD_FAST(arg=3, lineno=4224)
          48	RETURN_VALUE(arg=None, lineno=4224)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4220)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4220)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=4220)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4220)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=4220)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$shape6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=4220)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$shape6.2', '$dtype8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=STORE_FAST(arg=3, lineno=4220)
2023-01-03 17:17 DEBUG stack ['$10call_method.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=4221)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=4221)
2023-01-03 17:17 DEBUG stack ['$arr14.5']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=4, lineno=4221)
2023-01-03 17:17 DEBUG stack ['$16load_attr.6']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_GLOBAL(arg=3, lineno=4222)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_GLOBAL(arg=4, lineno=4222)
2023-01-03 17:17 DEBUG stack ['$20load_global.7']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=4, lineno=4222)
2023-01-03 17:17 DEBUG stack ['$20load_global.7', '$22load_global.8']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=4222)
2023-01-03 17:17 DEBUG stack ['$20load_global.7', '$22load_global.8', '$arr_flat24.9']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=4222)
2023-01-03 17:17 DEBUG stack ['$20load_global.7', '$26call_function.10']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=4222)
2023-01-03 17:17 DEBUG stack ['$28call_function.11']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.12',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi32.0']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=FOR_ITER(arg=12, lineno=4222)
2023-01-03 17:17 DEBUG stack ['$phi32.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=3, lineno=4224)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=4224)
2023-01-03 17:17 DEBUG stack ['$arr46.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi34.0', '$phi34.1']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_FAST(arg=5, lineno=4222)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$phi34.1']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=4223)
2023-01-03 17:17 DEBUG stack ['$phi34.0']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=4223)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$value36.2']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=5, lineno=4223)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$value36.2', '$arr_flat38.3']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=4223)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$value36.2', '$arr_flat38.3', '$idx40.4']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=JUMP_ABSOLUTE(arg=32, lineno=4223)
2023-01-03 17:17 DEBUG stack ['$phi34.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=32, stack=('$phi34.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=46 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi32.0': {('$30get_iter.12', State(pc_initial=0 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi32.0': '$30get_iter.12'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'func': '$4load_method.1', 'args': ['$shape6.2', '$dtype8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$arr14.5'}), (16, {'item': '$arr14.5', 'res': '$16load_attr.6'}), (18, {'value': '$16load_attr.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$22load_global.8'}), (24, {'res': '$arr_flat24.9'}), (26, {'func': '$22load_global.8', 'args': ['$arr_flat24.9'], 'res': '$26call_function.10'}), (28, {'func': '$20load_global.7', 'args': ['$26call_function.10'], 'res': '$28call_function.11'}), (30, {'value': '$28call_function.11', 'res': '$30get_iter.12'})), outgoing_phis={'$phi32.0': '$30get_iter.12'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.12',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 34: ('$phi32.0', '$32for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$value36.2'}), (38, {'res': '$arr_flat38.3'}), (40, {'res': '$idx40.4'}), (42, {'target': '$arr_flat38.3', 'index': '$idx40.4', 'value': '$value36.2'}), (44, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi34.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$arr46.0'}), (48, {'retval': '$arr46.0', 'castval': '$48return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    dtype = arg(2, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:4220), Var(dtype, arrayobj.py:4220)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'arr', 'dtype', 'shape']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $20load_global.7 = global(range: <class 'range'>) ['$20load_global.7']
    $22load_global.8 = global(len: <built-in function len>) ['$22load_global.8']
    $26call_function.10 = call $22load_global.8(arr_flat, func=$22load_global.8, args=[Var(arr_flat, arrayobj.py:4221)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_global.8', '$26call_function.10', 'arr_flat']
    $28call_function.11 = call $20load_global.7($26call_function.10, func=$20load_global.7, args=[Var($26call_function.10, arrayobj.py:4222)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', '$26call_function.10', '$28call_function.11']
    $30get_iter.12 = getiter(value=$28call_function.11) ['$28call_function.11', '$30get_iter.12']
    $phi32.0 = $30get_iter.12                ['$30get_iter.12', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 46             ['$32for_iter.3']
label 34:
    idx = $phi34.1                           ['$phi34.1', 'idx']
    arr_flat[idx] = value                    ['arr_flat', 'idx', 'value']
    jump 32                                  []
label 46:
    $48return_value.1 = cast(value=arr)      ['$48return_value.1', 'arr']
    return $48return_value.1                 ['$48return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEE0AF70>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: value = arg(1, name=value)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(2, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: arr = call $4load_method.1(shape, dtype, func=$4load_method.1, args=[Var(shape, arrayobj.py:4220), Var(dtype, arrayobj.py:4220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $20load_global.7 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $22load_global.8 = global(len: <built-in function len>)
2023-01-03 17:17 DEBUG on stmt: $26call_function.10 = call $22load_global.8(arr_flat, func=$22load_global.8, args=[Var(arr_flat, arrayobj.py:4221)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $28call_function.11 = call $20load_global.7($26call_function.10, func=$20load_global.7, args=[Var($26call_function.10, arrayobj.py:4222)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $30get_iter.12 = getiter(value=$28call_function.11)
2023-01-03 17:17 DEBUG on stmt: $phi32.0 = $30get_iter.12
2023-01-03 17:17 DEBUG on stmt: jump 32
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 32
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEE0AF70>
2023-01-03 17:17 DEBUG on stmt: $32for_iter.1 = iternext(value=$phi32.0)
2023-01-03 17:17 DEBUG on stmt: $32for_iter.2 = pair_first(value=$32for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $32for_iter.3 = pair_second(value=$32for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = $32for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $32for_iter.3, 34, 46
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEE0AF70>
2023-01-03 17:17 DEBUG on stmt: idx = $phi34.1
2023-01-03 17:17 DEBUG on stmt: arr_flat[idx] = value
2023-01-03 17:17 DEBUG on stmt: jump 32
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 46
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEE0AF70>
2023-01-03 17:17 DEBUG on stmt: $48return_value.1 = cast(value=arr)
2023-01-03 17:17 DEBUG on stmt: return $48return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$20load_global.7': [<numba.core.ir.Assign object at 0x000001C8CEE03400>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x000001C8CEE03580>],
             '$26call_function.10': [<numba.core.ir.Assign object at 0x000001C8CEE03850>],
             '$28call_function.11': [<numba.core.ir.Assign object at 0x000001C8CEE039D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEE02820>],
             '$30get_iter.12': [<numba.core.ir.Assign object at 0x000001C8CEE03B20>],
             '$32for_iter.1': [<numba.core.ir.Assign object at 0x000001C8CEE03CA0>],
             '$32for_iter.2': [<numba.core.ir.Assign object at 0x000001C8CEE02190>],
             '$32for_iter.3': [<numba.core.ir.Assign object at 0x000001C8CEDFBFD0>],
             '$48return_value.1': [<numba.core.ir.Assign object at 0x000001C8CEE03FA0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8CEE029A0>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x000001C8CEE02BE0>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x000001C8CEDFBEE0>],
             'arr': [<numba.core.ir.Assign object at 0x000001C8CEE02D90>],
             'arr_flat': [<numba.core.ir.Assign object at 0x000001C8CEE03160>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8CEE026A0>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8CEDFB310>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8CEE02460>],
             'value': [<numba.core.ir.Assign object at 0x000001C8CEE02580>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int32, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEE8D340>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int32, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8CEE99130>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8CEE99280>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEE9AB80>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8CEE9AF40>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8CEE9AA00>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8CEE9A8E0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3979)
           2	LOAD_FAST(arg=0, lineno=3979)
           4	LOAD_METHOD(arg=0, lineno=3979)
           6	LOAD_FAST(arg=1, lineno=3979)
           8	LOAD_FAST(arg=2, lineno=3979)
          10	CALL_METHOD(arg=2, lineno=3979)
          12	RETURN_VALUE(arg=None, lineno=3979)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3979)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3979)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3979)
2023-01-03 17:17 DEBUG stack ['$arrtype2.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3979)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3979)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$size6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3979)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$size6.2', '$align8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3979)
2023-01-03 17:17 DEBUG stack ['$10call_method.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEECBE80>
2023-01-03 17:17 DEBUG on stmt: arrtype = arg(0, name=arrtype)
2023-01-03 17:17 DEBUG on stmt: size = arg(1, name=size)
2023-01-03 17:17 DEBUG on stmt: align = arg(2, name=align)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
2023-01-03 17:17 DEBUG on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_method.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x000001C8CEECB040>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8CEEC57C0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8CEEC5C10>],
             'align': [<numba.core.ir.Assign object at 0x000001C8CEEC5970>],
             'arrtype': [<numba.core.ir.Assign object at 0x000001C8CEEC50A0>],
             'size': [<numba.core.ir.Assign object at 0x000001C8CEEC5850>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3972)
           2	LOAD_GLOBAL(arg=0, lineno=3972)
           4	LOAD_FAST(arg=1, lineno=3972)
           6	LOAD_FAST(arg=2, lineno=3972)
           8	CALL_FUNCTION(arg=2, lineno=3972)
          10	RETURN_VALUE(arg=None, lineno=3972)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3972)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3972)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3972)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3972)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$allocsize4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3972)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3972)
2023-01-03 17:17 DEBUG stack ['$8call_function.3']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEECB550>
2023-01-03 17:17 DEBUG on stmt: cls = arg(0, name=cls)
2023-01-03 17:17 DEBUG on stmt: allocsize = arg(1, name=allocsize)
2023-01-03 17:17 DEBUG on stmt: align = arg(2, name=align)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2023-01-03 17:17 DEBUG on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10return_value.4 = cast(value=$8call_function.3)
2023-01-03 17:17 DEBUG on stmt: return $10return_value.4
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x000001C8CEED6A30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEEBEA00>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000001C8CEED6BE0>],
             'align': [<numba.core.ir.Assign object at 0x000001C8CEEBEC70>],
             'allocsize': [<numba.core.ir.Assign object at 0x000001C8CEEBE550>],
             'cls': [<numba.core.ir.Assign object at 0x000001C8CEECBC40>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=51)
           2	LOAD_GLOBAL(arg=0, lineno=51)
           4	LOAD_METHOD(arg=1, lineno=51)
           6	LOAD_FAST(arg=3, lineno=51)
           8	LOAD_CONST(arg=1, lineno=51)
          10	CALL_METHOD(arg=2, lineno=51)
          12	STORE_FAST(arg=5, lineno=51)
          14	LOAD_CONST(arg=2, lineno=52)
          16	LOAD_FAST(arg=5, lineno=52)
          18	LOAD_CONST(arg=2, lineno=52)
          20	STORE_SUBSCR(arg=None, lineno=52)
          22	LOAD_CONST(arg=6, lineno=54)
          24	LOAD_CONST(arg=4, lineno=54)
          26	LOAD_CONST(arg=5, lineno=54)
          28	MAKE_FUNCTION(arg=1, lineno=54)
          30	STORE_FAST(arg=6, lineno=54)
          32	LOAD_GLOBAL(arg=0, lineno=64)
          34	LOAD_METHOD(arg=2, lineno=64)
          36	LOAD_FAST(arg=3, lineno=64)
          38	LOAD_FAST(arg=2, lineno=64)
          40	BINARY_SUBTRACT(arg=None, lineno=64)
          42	LOAD_GLOBAL(arg=0, lineno=65)
          44	LOAD_METHOD(arg=3, lineno=65)
          46	LOAD_FAST(arg=1, lineno=65)
          48	LOAD_FAST(arg=5, lineno=65)
          50	BINARY_SUBTRACT(arg=None, lineno=65)
          52	CALL_METHOD(arg=1, lineno=65)
          54	CALL_METHOD(arg=2, lineno=64)
          56	STORE_FAST(arg=7, lineno=64)
          58	LOAD_GLOBAL(arg=0, lineno=66)
          60	LOAD_METHOD(arg=2, lineno=66)
          62	LOAD_FAST(arg=7, lineno=66)
          64	LOAD_GLOBAL(arg=0, lineno=66)
          66	LOAD_METHOD(arg=3, lineno=66)
          68	LOAD_FAST(arg=2, lineno=66)
          70	LOAD_FAST(arg=5, lineno=66)
          72	BINARY_SUBTRACT(arg=None, lineno=66)
          74	CALL_METHOD(arg=1, lineno=66)
          76	CALL_METHOD(arg=2, lineno=66)
          78	STORE_FAST(arg=8, lineno=66)
          80	LOAD_FAST(arg=6, lineno=67)
          82	LOAD_FAST(arg=8, lineno=67)
          84	LOAD_FAST(arg=4, lineno=67)
          86	CALL_FUNCTION(arg=2, lineno=67)
          88	STORE_FAST(arg=9, lineno=67)
          90	LOAD_FAST(arg=9, lineno=69)
          92	RETURN_VALUE(arg=None, lineno=69)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=51)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=51)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=51)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=51)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=51)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$close_array6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=51)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$close_array6.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=STORE_FAST(arg=5, lineno=51)
2023-01-03 17:17 DEBUG stack ['$10call_method.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=52)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=5, lineno=52)
2023-01-03 17:17 DEBUG stack ['$const14.5']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=52)
2023-01-03 17:17 DEBUG stack ['$const14.5', '$last_close_array16.6']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=STORE_SUBSCR(arg=None, lineno=52)
2023-01-03 17:17 DEBUG stack ['$const14.5', '$last_close_array16.6', '$const18.7']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_CONST(arg=6, lineno=54)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=4, lineno=54)
2023-01-03 17:17 DEBUG stack ['$const22.8']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_CONST(arg=5, lineno=54)
2023-01-03 17:17 DEBUG stack ['$const22.8', '$const24.9']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=MAKE_FUNCTION(arg=1, lineno=54)
2023-01-03 17:17 DEBUG stack ['$const22.8', '$const24.9', '$const26.10']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=STORE_FAST(arg=6, lineno=54)
2023-01-03 17:17 DEBUG stack ['$28make_function.11']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=64)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=34, inst=LOAD_METHOD(arg=2, lineno=64)
2023-01-03 17:17 DEBUG stack ['$32load_global.12']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=64)
2023-01-03 17:17 DEBUG stack ['$34load_method.13']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=64)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$close_array36.14']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=64)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$close_array36.14', '$low_array38.15']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=65)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$40binary_subtract.16']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=LOAD_METHOD(arg=3, lineno=65)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$42load_global.17']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=65)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=65)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$high_array46.19']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=BINARY_SUBTRACT(arg=None, lineno=65)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$high_array46.19', '$last_close_array48.20']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=65)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$44load_method.18', '$50binary_subtract.21']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=CALL_METHOD(arg=2, lineno=64)
2023-01-03 17:17 DEBUG stack ['$34load_method.13', '$40binary_subtract.16', '$52call_method.22']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=STORE_FAST(arg=7, lineno=64)
2023-01-03 17:17 DEBUG stack ['$54call_method.23']
2023-01-03 17:17 DEBUG dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=66)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=60, inst=LOAD_METHOD(arg=2, lineno=66)
2023-01-03 17:17 DEBUG stack ['$58load_global.24']
2023-01-03 17:17 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=LOAD_GLOBAL(arg=0, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25', '$each_num62.26']
2023-01-03 17:17 DEBUG dispatch pc=66, inst=LOAD_METHOD(arg=3, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25', '$each_num62.26', '$64load_global.27']
2023-01-03 17:17 DEBUG dispatch pc=68, inst=LOAD_FAST(arg=2, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28']
2023-01-03 17:17 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$low_array68.29']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=BINARY_SUBTRACT(arg=None, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$low_array68.29', '$last_close_array70.30']
2023-01-03 17:17 DEBUG dispatch pc=74, inst=CALL_METHOD(arg=1, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25', '$each_num62.26', '$66load_method.28', '$72binary_subtract.31']
2023-01-03 17:17 DEBUG dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=66)
2023-01-03 17:17 DEBUG stack ['$60load_method.25', '$each_num62.26', '$74call_method.32']
2023-01-03 17:17 DEBUG dispatch pc=78, inst=STORE_FAST(arg=8, lineno=66)
2023-01-03 17:17 DEBUG stack ['$76call_method.33']
2023-01-03 17:17 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=67)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=82, inst=LOAD_FAST(arg=8, lineno=67)
2023-01-03 17:17 DEBUG stack ['$moving_average80.34']
2023-01-03 17:17 DEBUG dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=67)
2023-01-03 17:17 DEBUG stack ['$moving_average80.34', '$TR82.35']
2023-01-03 17:17 DEBUG dispatch pc=86, inst=CALL_FUNCTION(arg=2, lineno=67)
2023-01-03 17:17 DEBUG stack ['$moving_average80.34', '$TR82.35', '$parameter_timeperiod84.36']
2023-01-03 17:17 DEBUG dispatch pc=88, inst=STORE_FAST(arg=9, lineno=67)
2023-01-03 17:17 DEBUG stack ['$86call_function.37']
2023-01-03 17:17 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=9, lineno=69)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=69)
2023-01-03 17:17 DEBUG stack ['$ATR90.38']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$close_array6.2'}), (8, {'res': '$const8.3'}), (10, {'func': '$4load_method.1', 'args': ['$close_array6.2', '$const8.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$last_close_array16.6'}), (18, {'res': '$const18.7'}), (20, {'target': '$last_close_array16.6', 'index': '$const18.7', 'value': '$const14.5'}), (22, {'res': '$const22.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$const26.10'}), (28, {'name': '$const26.10', 'code': '$const24.9', 'closure': None, 'annotations': None, 'kwdefaults': None, 'defaults': '$const22.8', 'res': '$28make_function.11'}), (30, {'value': '$28make_function.11'}), (32, {'res': '$32load_global.12'}), (34, {'item': '$32load_global.12', 'res': '$34load_method.13'}), (36, {'res': '$close_array36.14'}), (38, {'res': '$low_array38.15'}), (40, {'lhs': '$close_array36.14', 'rhs': '$low_array38.15', 'res': '$40binary_subtract.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_method.18'}), (46, {'res': '$high_array46.19'}), (48, {'res': '$last_close_array48.20'}), (50, {'lhs': '$high_array46.19', 'rhs': '$last_close_array48.20', 'res': '$50binary_subtract.21'}), (52, {'func': '$44load_method.18', 'args': ['$50binary_subtract.21'], 'res': '$52call_method.22'}), (54, {'func': '$34load_method.13', 'args': ['$40binary_subtract.16', '$52call_method.22'], 'res': '$54call_method.23'}), (56, {'value': '$54call_method.23'}), (58, {'res': '$58load_global.24'}), (60, {'item': '$58load_global.24', 'res': '$60load_method.25'}), (62, {'res': '$each_num62.26'}), (64, {'res': '$64load_global.27'}), (66, {'item': '$64load_global.27', 'res': '$66load_method.28'}), (68, {'res': '$low_array68.29'}), (70, {'res': '$last_close_array70.30'}), (72, {'lhs': '$low_array68.29', 'rhs': '$last_close_array70.30', 'res': '$72binary_subtract.31'}), (74, {'func': '$66load_method.28', 'args': ['$72binary_subtract.31'], 'res': '$74call_method.32'}), (76, {'func': '$60load_method.25', 'args': ['$each_num62.26', '$74call_method.32'], 'res': '$76call_method.33'}), (78, {'value': '$76call_method.33'}), (80, {'res': '$moving_average80.34'}), (82, {'res': '$TR82.35'}), (84, {'res': '$parameter_timeperiod84.36'}), (86, {'func': '$moving_average80.34', 'args': ['$TR82.35', '$parameter_timeperiod84.36'], 'res': '$86call_function.37'}), (88, {'value': '$86call_function.37'}), (90, {'res': '$ATR90.38'}), (92, {'retval': '$ATR90.38', 'castval': '$92return_value.39'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    Length = arg(0, name=Length)             ['Length']
    high_array = arg(1, name=high_array)     ['high_array']
    low_array = arg(2, name=low_array)       ['low_array']
    close_array = arg(3, name=close_array)   ['close_array']
    parameter_timeperiod = arg(4, name=parameter_timeperiod) ['parameter_timeperiod']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=roll) ['$2load_global.0', '$4load_method.1']
    $const8.3 = const(int, 1)                ['$const8.3']
    last_close_array = call $4load_method.1(close_array, $const8.3, func=$4load_method.1, args=[Var(close_array, nb.py:51), Var($const8.3, nb.py:51)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$const8.3', 'close_array', 'last_close_array']
    $const14.5 = const(int, 0)               ['$const14.5']
    $const18.7 = const(int, 0)               ['$const18.7']
    last_close_array[$const18.7] = $const14.5 ['$const14.5', '$const18.7', 'last_close_array']
    $const_3 = const(int, 3)                 ['$const_3']
    $const22.8 = build_tuple(items=[Var($const_3, nb.py:54)]) ['$const22.8', '$const_3']
    $const24.9 = const(code, <code object moving_average at 0x000001C8B1A6CA80, file "c:\Users\user\Desktop\程式專區\lab_vbt\Crypto_trading\Count\nb.py", line 54>) ['$const24.9']
    $const26.10 = const(str, get_ATR.<locals>.moving_average) ['$const26.10']
    moving_average = make_function(name=$const26.10, code=<code object moving_average at 0x000001C8B1A6CA80, file "c:\Users\user\Desktop\程式專區\lab_vbt\Crypto_trading\Count\nb.py", line 54>, closure=None, defaults=$const22.8) ['$const22.8', '$const26.10', 'moving_average']
    $32load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$32load_global.12']
    $34load_method.13 = getattr(value=$32load_global.12, attr=maximum) ['$32load_global.12', '$34load_method.13']
    $40binary_subtract.16 = close_array - low_array ['$40binary_subtract.16', 'close_array', 'low_array']
    $42load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$42load_global.17']
    $44load_method.18 = getattr(value=$42load_global.17, attr=abs) ['$42load_global.17', '$44load_method.18']
    $50binary_subtract.21 = high_array - last_close_array ['$50binary_subtract.21', 'high_array', 'last_close_array']
    $52call_method.22 = call $44load_method.18($50binary_subtract.21, func=$44load_method.18, args=[Var($50binary_subtract.21, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_method.18', '$50binary_subtract.21', '$52call_method.22']
    each_num = call $34load_method.13($40binary_subtract.16, $52call_method.22, func=$34load_method.13, args=[Var($40binary_subtract.16, nb.py:64), Var($52call_method.22, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_method.13', '$40binary_subtract.16', '$52call_method.22', 'each_num']
    $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.24']
    $60load_method.25 = getattr(value=$58load_global.24, attr=maximum) ['$58load_global.24', '$60load_method.25']
    $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$64load_global.27']
    $66load_method.28 = getattr(value=$64load_global.27, attr=abs) ['$64load_global.27', '$66load_method.28']
    $72binary_subtract.31 = low_array - last_close_array ['$72binary_subtract.31', 'last_close_array', 'low_array']
    $74call_method.32 = call $66load_method.28($72binary_subtract.31, func=$66load_method.28, args=[Var($72binary_subtract.31, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.28', '$72binary_subtract.31', '$74call_method.32']
    TR = call $60load_method.25(each_num, $74call_method.32, func=$60load_method.25, args=[Var(each_num, nb.py:64), Var($74call_method.32, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.25', '$74call_method.32', 'TR', 'each_num']
    ATR = call moving_average(TR, parameter_timeperiod, func=moving_average, args=[Var(TR, nb.py:66), Var(parameter_timeperiod, nb.py:51)], kws=(), vararg=None, varkwarg=None, target=None) ['ATR', 'TR', 'moving_average', 'parameter_timeperiod']
    $92return_value.39 = cast(value=ATR)     ['$92return_value.39', 'ATR']
    return $92return_value.39                ['$92return_value.39']

2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=58)
           2	LOAD_GLOBAL(arg=0, lineno=58)
           4	LOAD_METHOD(arg=1, lineno=58)
           6	LOAD_FAST(arg=0, lineno=58)
           8	CALL_METHOD(arg=1, lineno=58)
          10	STORE_FAST(arg=2, lineno=58)
          12	LOAD_FAST(arg=2, lineno=59)
          14	LOAD_FAST(arg=1, lineno=59)
          16	LOAD_CONST(arg=1, lineno=59)
          18	BUILD_SLICE(arg=2, lineno=59)
          20	BINARY_SUBSCR(arg=None, lineno=59)
          22	LOAD_FAST(arg=2, lineno=59)
          24	LOAD_CONST(arg=1, lineno=59)
          26	LOAD_FAST(arg=1, lineno=59)
          28	UNARY_NEGATIVE(arg=None, lineno=59)
          30	BUILD_SLICE(arg=2, lineno=59)
          32	BINARY_SUBSCR(arg=None, lineno=59)
          34	BINARY_SUBTRACT(arg=None, lineno=59)
          36	LOAD_FAST(arg=2, lineno=59)
          38	LOAD_FAST(arg=1, lineno=59)
          40	LOAD_CONST(arg=1, lineno=59)
          42	BUILD_SLICE(arg=2, lineno=59)
          44	STORE_SUBSCR(arg=None, lineno=59)
          46	LOAD_GLOBAL(arg=0, lineno=60)
          48	LOAD_ATTR(arg=2, lineno=60)
          50	LOAD_FAST(arg=2, lineno=60)
          52	LOAD_CONST(arg=1, lineno=60)
          54	LOAD_FAST(arg=1, lineno=60)
          56	BUILD_SLICE(arg=2, lineno=60)
          58	STORE_SUBSCR(arg=None, lineno=60)
          60	LOAD_FAST(arg=2, lineno=61)
          62	LOAD_FAST(arg=1, lineno=61)
          64	BINARY_TRUE_DIVIDE(arg=None, lineno=61)
          66	RETURN_VALUE(arg=None, lineno=61)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=58)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=58)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=58)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=58)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=58)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$a6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=58)
2023-01-03 17:17 DEBUG stack ['$8call_method.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=59)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-03 17:17 DEBUG stack ['$ret12.4']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=59)
2023-01-03 17:17 DEBUG stack ['$ret12.4', '$n14.5']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=59)
2023-01-03 17:17 DEBUG stack ['$ret12.4', '$n14.5', '$const16.6']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=59)
2023-01-03 17:17 DEBUG stack ['$ret12.4', '$18build_slice.8']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=59)
2023-01-03 17:17 DEBUG stack ['$20binary_subscr.9']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=59)
2023-01-03 17:17 DEBUG stack ['$20binary_subscr.9', '$ret22.10']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-03 17:17 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=UNARY_NEGATIVE(arg=None, lineno=59)
2023-01-03 17:17 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11', '$n26.12']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=59)
2023-01-03 17:17 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$const24.11', '$28unary_negative.13']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=59)
2023-01-03 17:17 DEBUG stack ['$20binary_subscr.9', '$ret22.10', '$30build_slice.15']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=BINARY_SUBTRACT(arg=None, lineno=59)
2023-01-03 17:17 DEBUG stack ['$20binary_subscr.9', '$32binary_subscr.16']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=59)
2023-01-03 17:17 DEBUG stack ['$34binary_subtract.17']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-03 17:17 DEBUG stack ['$34binary_subtract.17', '$ret36.18']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=59)
2023-01-03 17:17 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$n38.19']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=BUILD_SLICE(arg=2, lineno=59)
2023-01-03 17:17 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$n38.19', '$const40.20']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=STORE_SUBSCR(arg=None, lineno=59)
2023-01-03 17:17 DEBUG stack ['$34binary_subtract.17', '$ret36.18', '$42build_slice.22']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=60)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=48, inst=LOAD_ATTR(arg=2, lineno=60)
2023-01-03 17:17 DEBUG stack ['$46load_global.23']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=60)
2023-01-03 17:17 DEBUG stack ['$48load_attr.24']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=60)
2023-01-03 17:17 DEBUG stack ['$48load_attr.24', '$ret50.25']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=60)
2023-01-03 17:17 DEBUG stack ['$48load_attr.24', '$ret50.25', '$const52.26']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=BUILD_SLICE(arg=2, lineno=60)
2023-01-03 17:17 DEBUG stack ['$48load_attr.24', '$ret50.25', '$const52.26', '$n54.27']
2023-01-03 17:17 DEBUG dispatch pc=58, inst=STORE_SUBSCR(arg=None, lineno=60)
2023-01-03 17:17 DEBUG stack ['$48load_attr.24', '$ret50.25', '$56build_slice.29']
2023-01-03 17:17 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=61)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=61)
2023-01-03 17:17 DEBUG stack ['$ret60.30']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=61)
2023-01-03 17:17 DEBUG stack ['$ret60.30', '$n62.31']
2023-01-03 17:17 DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=61)
2023-01-03 17:17 DEBUG stack ['$64binary_true_divide.32']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$ret12.4'}), (14, {'res': '$n14.5'}), (16, {'res': '$const16.6'}), (18, {'start': '$n14.5', 'stop': '$const16.6', 'step': None, 'res': '$18build_slice.8', 'slicevar': '$18build_slice.7'}), (20, {'index': '$18build_slice.8', 'target': '$ret12.4', 'res': '$20binary_subscr.9'}), (22, {'res': '$ret22.10'}), (24, {'res': '$const24.11'}), (26, {'res': '$n26.12'}), (28, {'value': '$n26.12', 'res': '$28unary_negative.13'}), (30, {'start': '$const24.11', 'stop': '$28unary_negative.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$ret22.10', 'res': '$32binary_subscr.16'}), (34, {'lhs': '$20binary_subscr.9', 'rhs': '$32binary_subscr.16', 'res': '$34binary_subtract.17'}), (36, {'res': '$ret36.18'}), (38, {'res': '$n38.19'}), (40, {'res': '$const40.20'}), (42, {'start': '$n38.19', 'stop': '$const40.20', 'step': None, 'res': '$42build_slice.22', 'slicevar': '$42build_slice.21'}), (44, {'target': '$ret36.18', 'index': '$42build_slice.22', 'value': '$34binary_subtract.17'}), (46, {'res': '$46load_global.23'}), (48, {'item': '$46load_global.23', 'res': '$48load_attr.24'}), (50, {'res': '$ret50.25'}), (52, {'res': '$const52.26'}), (54, {'res': '$n54.27'}), (56, {'start': '$const52.26', 'stop': '$n54.27', 'step': None, 'res': '$56build_slice.29', 'slicevar': '$56build_slice.28'}), (58, {'target': '$ret50.25', 'index': '$56build_slice.29', 'value': '$48load_attr.24'}), (60, {'res': '$ret60.30'}), (62, {'res': '$n62.31'}), (64, {'lhs': '$ret60.30', 'rhs': '$n62.31', 'res': '$64binary_true_divide.32'}), (66, {'retval': '$64binary_true_divide.32', 'castval': '$66return_value.33'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    n = arg(1, name=n)                       ['n']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cumsum) ['$2load_global.0', '$4load_method.1']
    ret = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, nb.py:58)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'ret']
    $const16.6 = const(NoneType, None)       ['$const16.6']
    $18build_slice.7 = global(slice: <class 'slice'>) ['$18build_slice.7']
    $18build_slice.8 = call $18build_slice.7(n, $const16.6, func=$18build_slice.7, args=(Var(n, nb.py:58), Var($const16.6, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None) ['$18build_slice.7', '$18build_slice.8', '$const16.6', 'n']
    $20binary_subscr.9 = getitem(value=ret, index=$18build_slice.8, fn=<built-in function getitem>) ['$18build_slice.8', '$20binary_subscr.9', 'ret']
    $const24.11 = const(NoneType, None)      ['$const24.11']
    $28unary_negative.13 = unary(fn=<built-in function neg>, value=n) ['$28unary_negative.13', 'n']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const24.11, $28unary_negative.13, func=$30build_slice.14, args=(Var($const24.11, nb.py:59), Var($28unary_negative.13, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None) ['$28unary_negative.13', '$30build_slice.14', '$30build_slice.15', '$const24.11']
    $32binary_subscr.16 = getitem(value=ret, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'ret']
    $34binary_subtract.17 = $20binary_subscr.9 - $32binary_subscr.16 ['$20binary_subscr.9', '$32binary_subscr.16', '$34binary_subtract.17']
    $const40.20 = const(NoneType, None)      ['$const40.20']
    $42build_slice.21 = global(slice: <class 'slice'>) ['$42build_slice.21']
    $42build_slice.22 = call $42build_slice.21(n, $const40.20, func=$42build_slice.21, args=(Var(n, nb.py:58), Var($const40.20, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None) ['$42build_slice.21', '$42build_slice.22', '$const40.20', 'n']
    ret[$42build_slice.22] = $34binary_subtract.17 ['$34binary_subtract.17', '$42build_slice.22', 'ret']
    $46load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$46load_global.23']
    $48load_attr.24 = getattr(value=$46load_global.23, attr=nan) ['$46load_global.23', '$48load_attr.24']
    $const52.26 = const(NoneType, None)      ['$const52.26']
    $56build_slice.28 = global(slice: <class 'slice'>) ['$56build_slice.28']
    $56build_slice.29 = call $56build_slice.28($const52.26, n, func=$56build_slice.28, args=(Var($const52.26, nb.py:60), Var(n, nb.py:58)), kws=(), vararg=None, varkwarg=None, target=None) ['$56build_slice.28', '$56build_slice.29', '$const52.26', 'n']
    ret[$56build_slice.29] = $48load_attr.24 ['$48load_attr.24', '$56build_slice.29', 'ret']
    $64binary_true_divide.32 = ret / n       ['$64binary_true_divide.32', 'n', 'ret']
    $66return_value.33 = cast(value=$64binary_true_divide.32) ['$64binary_true_divide.32', '$66return_value.33']
    return $66return_value.33                ['$66return_value.33']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEF2DCA0>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: n = arg(1, name=n)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: ret = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, nb.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const16.6 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $18build_slice.7 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $18build_slice.8 = call $18build_slice.7(n, $const16.6, func=$18build_slice.7, args=(Var(n, nb.py:58), Var($const16.6, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $20binary_subscr.9 = getitem(value=ret, index=$18build_slice.8, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const24.11 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $28unary_negative.13 = unary(fn=<built-in function neg>, value=n)
2023-01-03 17:17 DEBUG on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $30build_slice.15 = call $30build_slice.14($const24.11, $28unary_negative.13, func=$30build_slice.14, args=(Var($const24.11, nb.py:59), Var($28unary_negative.13, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $32binary_subscr.16 = getitem(value=ret, index=$30build_slice.15, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $34binary_subtract.17 = $20binary_subscr.9 - $32binary_subscr.16
2023-01-03 17:17 DEBUG on stmt: $const40.20 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $42build_slice.21 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $42build_slice.22 = call $42build_slice.21(n, $const40.20, func=$42build_slice.21, args=(Var(n, nb.py:58), Var($const40.20, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ret[$42build_slice.22] = $34binary_subtract.17
2023-01-03 17:17 DEBUG on stmt: $46load_global.23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $48load_attr.24 = getattr(value=$46load_global.23, attr=nan)
2023-01-03 17:17 DEBUG on stmt: $const52.26 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $56build_slice.28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: $56build_slice.29 = call $56build_slice.28($const52.26, n, func=$56build_slice.28, args=(Var($const52.26, nb.py:60), Var(n, nb.py:58)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: ret[$56build_slice.29] = $48load_attr.24
2023-01-03 17:17 DEBUG on stmt: $64binary_true_divide.32 = ret / n
2023-01-03 17:17 DEBUG on stmt: $66return_value.33 = cast(value=$64binary_true_divide.32)
2023-01-03 17:17 DEBUG on stmt: return $66return_value.33
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$18build_slice.7': [<numba.core.ir.Assign object at 0x000001C8CEF3A100>],
             '$18build_slice.8': [<numba.core.ir.Assign object at 0x000001C8CEF3A220>],
             '$20binary_subscr.9': [<numba.core.ir.Assign object at 0x000001C8CEF3A370>],
             '$28unary_negative.13': [<numba.core.ir.Assign object at 0x000001C8CEF3A8B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEF45610>],
             '$30build_slice.14': [<numba.core.ir.Assign object at 0x000001C8CEF3AA60>],
             '$30build_slice.15': [<numba.core.ir.Assign object at 0x000001C8CEF3AB80>],
             '$32binary_subscr.16': [<numba.core.ir.Assign object at 0x000001C8CEF3ACD0>],
             '$34binary_subtract.17': [<numba.core.ir.Assign object at 0x000001C8CEF3AE50>],
             '$42build_slice.21': [<numba.core.ir.Assign object at 0x000001C8CEF2D400>],
             '$42build_slice.22': [<numba.core.ir.Assign object at 0x000001C8CEF2D520>],
             '$46load_global.23': [<numba.core.ir.Assign object at 0x000001C8CEF2D730>],
             '$48load_attr.24': [<numba.core.ir.Assign object at 0x000001C8CEF2D8B0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8CEF45790>],
             '$56build_slice.28': [<numba.core.ir.Assign object at 0x000001C8CEF2DE20>],
             '$56build_slice.29': [<numba.core.ir.Assign object at 0x000001C8CEF2DF40>],
             '$64binary_true_divide.32': [<numba.core.ir.Assign object at 0x000001C8CEF23DF0>],
             '$66return_value.33': [<numba.core.ir.Assign object at 0x000001C8CEF23A30>],
             '$const16.6': [<numba.core.ir.Assign object at 0x000001C8CEF45F10>],
             '$const24.11': [<numba.core.ir.Assign object at 0x000001C8CEF3A610>],
             '$const40.20': [<numba.core.ir.Assign object at 0x000001C8CEF2D250>],
             '$const52.26': [<numba.core.ir.Assign object at 0x000001C8CEF2DB50>],
             'a': [<numba.core.ir.Assign object at 0x000001C8CEF496D0>],
             'n': [<numba.core.ir.Assign object at 0x000001C8CEF85AF0>],
             'ret': [<numba.core.ir.Assign object at 0x000001C8CEF45A60>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEF96460>
2023-01-03 17:17 DEBUG on stmt: high_array = arg(1, name=high_array)
2023-01-03 17:17 DEBUG on stmt: low_array = arg(2, name=low_array)
2023-01-03 17:17 DEBUG on stmt: close_array = arg(3, name=close_array)
2023-01-03 17:17 DEBUG on stmt: parameter_timeperiod = arg(4, name=parameter_timeperiod)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=roll)
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: last_close_array = call $4load_method.1(close_array, $const8.3, func=$4load_method.1, args=[Var(close_array, nb.py:51), Var($const8.3, nb.py:51)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const14.5 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $const18.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: last_close_array[0] = $const14.5
2023-01-03 17:17 DEBUG on stmt: $32load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $34load_method.13 = getattr(value=$32load_global.12, attr=maximum)
2023-01-03 17:17 DEBUG on stmt: $40binary_subtract.16 = close_array - low_array
2023-01-03 17:17 DEBUG on stmt: $42load_global.17 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $44load_method.18 = getattr(value=$42load_global.17, attr=abs)
2023-01-03 17:17 DEBUG on stmt: $50binary_subtract.21 = high_array - last_close_array
2023-01-03 17:17 DEBUG on stmt: $52call_method.22 = call $44load_method.18($50binary_subtract.21, func=$44load_method.18, args=[Var($50binary_subtract.21, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: each_num = call $34load_method.13($40binary_subtract.16, $52call_method.22, func=$34load_method.13, args=[Var($40binary_subtract.16, nb.py:64), Var($52call_method.22, nb.py:65)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $60load_method.25 = getattr(value=$58load_global.24, attr=maximum)
2023-01-03 17:17 DEBUG on stmt: $64load_global.27 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $66load_method.28 = getattr(value=$64load_global.27, attr=abs)
2023-01-03 17:17 DEBUG on stmt: $72binary_subtract.31 = low_array - last_close_array
2023-01-03 17:17 DEBUG on stmt: $74call_method.32 = call $66load_method.28($72binary_subtract.31, func=$66load_method.28, args=[Var($72binary_subtract.31, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: TR = call $60load_method.25(each_num, $74call_method.32, func=$60load_method.25, args=[Var(each_num, nb.py:64), Var($74call_method.32, nb.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8_a = TR
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8_n = parameter_timeperiod
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v2load_global_0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v4load_method_1 = getattr(value=closure__locals__moving_average_v8__v2load_global_0, attr=cumsum)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8_ret = call closure__locals__moving_average_v8__v4load_method_1(closure__locals__moving_average_v8_a, func=closure__locals__moving_average_v8__v4load_method_1, args=[Var(closure__locals__moving_average_v8_a, nb.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__vconst16_6 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v18build_slice_7 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v18build_slice_8 = call closure__locals__moving_average_v8__v18build_slice_7(closure__locals__moving_average_v8_n, closure__locals__moving_average_v8__vconst16_6, func=closure__locals__moving_average_v8__v18build_slice_7, args=(Var(closure__locals__moving_average_v8_n, nb.py:58), Var(closure__locals__moving_average_v8__vconst16_6, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v20binary_subscr_9 = getitem(value=closure__locals__moving_average_v8_ret, index=closure__locals__moving_average_v8__v18build_slice_8, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__vconst24_11 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v28unary_negative_13 = unary(fn=<built-in function neg>, value=closure__locals__moving_average_v8_n)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v30build_slice_14 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v30build_slice_15 = call closure__locals__moving_average_v8__v30build_slice_14(closure__locals__moving_average_v8__vconst24_11, closure__locals__moving_average_v8__v28unary_negative_13, func=closure__locals__moving_average_v8__v30build_slice_14, args=(Var(closure__locals__moving_average_v8__vconst24_11, nb.py:59), Var(closure__locals__moving_average_v8__v28unary_negative_13, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v32binary_subscr_16 = getitem(value=closure__locals__moving_average_v8_ret, index=closure__locals__moving_average_v8__v30build_slice_15, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v34binary_subtract_17 = closure__locals__moving_average_v8__v20binary_subscr_9 - closure__locals__moving_average_v8__v32binary_subscr_16
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__vconst40_20 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v42build_slice_21 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v42build_slice_22 = call closure__locals__moving_average_v8__v42build_slice_21(closure__locals__moving_average_v8_n, closure__locals__moving_average_v8__vconst40_20, func=closure__locals__moving_average_v8__v42build_slice_21, args=(Var(closure__locals__moving_average_v8_n, nb.py:58), Var(closure__locals__moving_average_v8__vconst40_20, nb.py:59)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8_ret[closure__locals__moving_average_v8__v42build_slice_22] = closure__locals__moving_average_v8__v34binary_subtract_17
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v46load_global_23 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v48load_attr_24 = getattr(value=closure__locals__moving_average_v8__v46load_global_23, attr=nan)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__vconst52_26 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v56build_slice_28 = global(slice: <class 'slice'>)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v56build_slice_29 = call closure__locals__moving_average_v8__v56build_slice_28(closure__locals__moving_average_v8__vconst52_26, closure__locals__moving_average_v8_n, func=closure__locals__moving_average_v8__v56build_slice_28, args=(Var(closure__locals__moving_average_v8__vconst52_26, nb.py:60), Var(closure__locals__moving_average_v8_n, nb.py:58)), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8_ret[closure__locals__moving_average_v8__v56build_slice_29] = closure__locals__moving_average_v8__v48load_attr_24
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v64binary_true_divide_32 = closure__locals__moving_average_v8_ret / closure__locals__moving_average_v8_n
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v66return_value_33 = closure__locals__moving_average_v8__v64binary_true_divide_32
2023-01-03 17:17 DEBUG on stmt: ATR = closure__locals__moving_average_v8__v66return_value_33
2023-01-03 17:17 DEBUG on stmt: $92return_value.39 = cast(value=ATR)
2023-01-03 17:17 DEBUG on stmt: return $92return_value.39
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEF8D580>],
             '$32load_global.12': [<numba.core.ir.Assign object at 0x000001C8CEF48400>],
             '$34load_method.13': [<numba.core.ir.Assign object at 0x000001C8CEF48160>],
             '$40binary_subtract.16': [<numba.core.ir.Assign object at 0x000001C8CEF3E340>],
             '$42load_global.17': [<numba.core.ir.Assign object at 0x000001C8CEF3E4C0>],
             '$44load_method.18': [<numba.core.ir.Assign object at 0x000001C8CEF3E640>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8CEF8D9A0>],
             '$50binary_subtract.21': [<numba.core.ir.Assign object at 0x000001C8CEF3EA00>],
             '$52call_method.22': [<numba.core.ir.Assign object at 0x000001C8CEF3EBB0>],
             '$58load_global.24': [<numba.core.ir.Assign object at 0x000001C8CEF3EFA0>],
             '$60load_method.25': [<numba.core.ir.Assign object at 0x000001C8CEF49160>],
             '$64load_global.27': [<numba.core.ir.Assign object at 0x000001C8CEF49400>],
             '$66load_method.28': [<numba.core.ir.Assign object at 0x000001C8CEF49580>],
             '$72binary_subtract.31': [<numba.core.ir.Assign object at 0x000001C8CEF49940>],
             '$74call_method.32': [<numba.core.ir.Assign object at 0x000001C8CEF49AF0>],
             '$92return_value.39': [<numba.core.ir.Assign object at 0x000001C8CEF39640>],
             '$const14.5': [<numba.core.ir.Assign object at 0x000001C8CEF48F10>],
             '$const18.7': [<numba.core.ir.Assign object at 0x000001C8CEF48BB0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8CEF8DC40>],
             'ATR': [<numba.core.ir.Assign object at 0x000001C8CEF92B20>],
             'TR': [<numba.core.ir.Assign object at 0x000001C8CEF49C70>],
             'close_array': [<numba.core.ir.Assign object at 0x000001C8CEF8D070>],
             'closure__locals__moving_average_v8__v18build_slice_7': [<numba.core.ir.Assign object at 0x000001C8CEF3A100>],
             'closure__locals__moving_average_v8__v18build_slice_8': [<numba.core.ir.Assign object at 0x000001C8CEF3A220>],
             'closure__locals__moving_average_v8__v20binary_subscr_9': [<numba.core.ir.Assign object at 0x000001C8CEF3A370>],
             'closure__locals__moving_average_v8__v28unary_negative_13': [<numba.core.ir.Assign object at 0x000001C8CEF3A8B0>],
             'closure__locals__moving_average_v8__v2load_global_0': [<numba.core.ir.Assign object at 0x000001C8CEF45610>],
             'closure__locals__moving_average_v8__v30build_slice_14': [<numba.core.ir.Assign object at 0x000001C8CEF3AA60>],
             'closure__locals__moving_average_v8__v30build_slice_15': [<numba.core.ir.Assign object at 0x000001C8CEF3AB80>],
             'closure__locals__moving_average_v8__v32binary_subscr_16': [<numba.core.ir.Assign object at 0x000001C8CEF3ACD0>],
             'closure__locals__moving_average_v8__v34binary_subtract_17': [<numba.core.ir.Assign object at 0x000001C8CEF3AE50>],
             'closure__locals__moving_average_v8__v42build_slice_21': [<numba.core.ir.Assign object at 0x000001C8CEF2D400>],
             'closure__locals__moving_average_v8__v42build_slice_22': [<numba.core.ir.Assign object at 0x000001C8CEF2D520>],
             'closure__locals__moving_average_v8__v46load_global_23': [<numba.core.ir.Assign object at 0x000001C8CEF2D730>],
             'closure__locals__moving_average_v8__v48load_attr_24': [<numba.core.ir.Assign object at 0x000001C8CEF2D8B0>],
             'closure__locals__moving_average_v8__v4load_method_1': [<numba.core.ir.Assign object at 0x000001C8CEF45790>],
             'closure__locals__moving_average_v8__v56build_slice_28': [<numba.core.ir.Assign object at 0x000001C8CEF2DE20>],
             'closure__locals__moving_average_v8__v56build_slice_29': [<numba.core.ir.Assign object at 0x000001C8CEF2DF40>],
             'closure__locals__moving_average_v8__v64binary_true_divide_32': [<numba.core.ir.Assign object at 0x000001C8CEF23DF0>],
             'closure__locals__moving_average_v8__v66return_value_33': [<numba.core.ir.Assign object at 0x000001C8CEF23A30>],
             'closure__locals__moving_average_v8__vconst16_6': [<numba.core.ir.Assign object at 0x000001C8CEF45F10>],
             'closure__locals__moving_average_v8__vconst24_11': [<numba.core.ir.Assign object at 0x000001C8CEF3A610>],
             'closure__locals__moving_average_v8__vconst40_20': [<numba.core.ir.Assign object at 0x000001C8CEF2D250>],
             'closure__locals__moving_average_v8__vconst52_26': [<numba.core.ir.Assign object at 0x000001C8CEF2DB50>],
             'closure__locals__moving_average_v8_a': [<numba.core.ir.Assign object at 0x000001C8CEF496D0>],
             'closure__locals__moving_average_v8_n': [<numba.core.ir.Assign object at 0x000001C8CEF85AF0>],
             'closure__locals__moving_average_v8_ret': [<numba.core.ir.Assign object at 0x000001C8CEF45A60>],
             'each_num': [<numba.core.ir.Assign object at 0x000001C8CEF3ED30>],
             'high_array': [<numba.core.ir.Assign object at 0x000001C8CEF8D2B0>],
             'last_close_array': [<numba.core.ir.Assign object at 0x000001C8CEF8DDF0>],
             'low_array': [<numba.core.ir.Assign object at 0x000001C8CEF8D190>],
             'parameter_timeperiod': [<numba.core.ir.Assign object at 0x000001C8CEF8D700>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2226)
           2	LOAD_GLOBAL(arg=0, lineno=2226)
           4	LOAD_METHOD(arg=1, lineno=2226)
           6	LOAD_FAST(arg=0, lineno=2226)
           8	CALL_METHOD(arg=1, lineno=2226)
          10	STORE_FAST(arg=2, lineno=2226)
          12	LOAD_GLOBAL(arg=0, lineno=2227)
          14	LOAD_ATTR(arg=2, lineno=2227)
          16	LOAD_FAST(arg=2, lineno=2227)
          18	LOAD_ATTR(arg=3, lineno=2227)
          20	LOAD_FAST(arg=2, lineno=2227)
          22	LOAD_ATTR(arg=4, lineno=2227)
          24	LOAD_CONST(arg=1, lineno=2227)
          26	CALL_FUNCTION_KW(arg=2, lineno=2227)
          28	STORE_FAST(arg=3, lineno=2227)
          30	LOAD_FAST(arg=2, lineno=2230)
          32	LOAD_ATTR(arg=5, lineno=2230)
          34	STORE_FAST(arg=4, lineno=2230)
          36	LOAD_GLOBAL(arg=6, lineno=2231)
          38	LOAD_FAST(arg=2, lineno=2231)
          40	LOAD_ATTR(arg=7, lineno=2231)
          42	CALL_FUNCTION(arg=1, lineno=2231)
          44	GET_ITER(arg=None, lineno=2231)
>         46	FOR_ITER(arg=32, lineno=2231)
          48	STORE_FAST(arg=5, lineno=2231)
          50	LOAD_FAST(arg=5, lineno=2232)
          52	LOAD_FAST(arg=1, lineno=2232)
          54	BINARY_ADD(arg=None, lineno=2232)
          56	LOAD_FAST(arg=2, lineno=2232)
          58	LOAD_ATTR(arg=7, lineno=2232)
          60	BINARY_MODULO(arg=None, lineno=2232)
          62	STORE_FAST(arg=6, lineno=2232)
          64	LOAD_FAST(arg=4, lineno=2233)
          66	LOAD_FAST(arg=5, lineno=2233)
          68	BINARY_SUBSCR(arg=None, lineno=2233)
          70	LOAD_FAST(arg=3, lineno=2233)
          72	LOAD_ATTR(arg=5, lineno=2233)
          74	LOAD_FAST(arg=6, lineno=2233)
          76	STORE_SUBSCR(arg=None, lineno=2233)
          78	JUMP_ABSOLUTE(arg=46, lineno=2233)
>         80	LOAD_FAST(arg=3, lineno=2235)
          82	RETURN_VALUE(arg=None, lineno=2235)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$a6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$8call_method.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2227)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$12load_global.4']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=3, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$arr16.6']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$arr20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=CALL_FUNCTION_KW(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', '$const24.10']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$26call_function_kw.11']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2230)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=5, lineno=2230)
2023-01-03 17:17 DEBUG stack ['$arr30.12']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2230)
2023-01-03 17:17 DEBUG stack ['$32load_attr.13']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=6, lineno=2231)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=7, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14', '$arr38.15']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=1, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14', '$40load_attr.16']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$42call_function.17']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.18',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi46.0']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=FOR_ITER(arg=32, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$phi46.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2235)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=2235)
2023-01-03 17:17 DEBUG stack ['$out80.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=48 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi48.0', '$phi48.1']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=STORE_FAST(arg=5, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$phi48.1']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$i50.2']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$i50.2', '$shift52.3']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4']
2023-01-03 17:17 DEBUG dispatch pc=58, inst=LOAD_ATTR(arg=7, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4', '$arr56.5']
2023-01-03 17:17 DEBUG dispatch pc=60, inst=BINARY_MODULO(arg=None, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4', '$58load_attr.6']
2023-01-03 17:17 DEBUG dispatch pc=62, inst=STORE_FAST(arg=6, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$60binary_modulo.7']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$arr_flat64.8']
2023-01-03 17:17 DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$arr_flat64.8', '$i66.9']
2023-01-03 17:17 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=LOAD_ATTR(arg=5, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$out70.11']
2023-01-03 17:17 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=6, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12']
2023-01-03 17:17 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12', '$idx74.13']
2023-01-03 17:17 DEBUG dispatch pc=78, inst=JUMP_ABSOLUTE(arg=46, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=80 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi46.0': {('$44get_iter.18', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.18'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_attr.7'}), (20, {'res': '$arr20.8'}), (22, {'item': '$arr20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'func': '$14load_attr.5', 'args': ['$18load_attr.7', '$22load_attr.9'], 'names': '$const24.10', 'res': '$26call_function_kw.11'}), (28, {'value': '$26call_function_kw.11'}), (30, {'res': '$arr30.12'}), (32, {'item': '$arr30.12', 'res': '$32load_attr.13'}), (34, {'value': '$32load_attr.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$arr38.15'}), (40, {'item': '$arr38.15', 'res': '$40load_attr.16'}), (42, {'func': '$36load_global.14', 'args': ['$40load_attr.16'], 'res': '$42call_function.17'}), (44, {'value': '$42call_function.17', 'res': '$44get_iter.18'})), outgoing_phis={'$phi46.0': '$44get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.18',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 48: ('$phi46.0', '$46for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$i50.2'}), (52, {'res': '$shift52.3'}), (54, {'lhs': '$i50.2', 'rhs': '$shift52.3', 'res': '$54binary_add.4'}), (56, {'res': '$arr56.5'}), (58, {'item': '$arr56.5', 'res': '$58load_attr.6'}), (60, {'lhs': '$54binary_add.4', 'rhs': '$58load_attr.6', 'res': '$60binary_modulo.7'}), (62, {'value': '$60binary_modulo.7'}), (64, {'res': '$arr_flat64.8'}), (66, {'res': '$i66.9'}), (68, {'index': '$i66.9', 'target': '$arr_flat64.8', 'res': '$68binary_subscr.10'}), (70, {'res': '$out70.11'}), (72, {'item': '$out70.11', 'res': '$72load_attr.12'}), (74, {'res': '$idx74.13'}), (76, {'target': '$72load_attr.12', 'index': '$idx74.13', 'value': '$68binary_subscr.10'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$out80.0'}), (82, {'retval': '$out80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    shift = arg(1, name=shift)               ['shift']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'arr']
    $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.4']
    $14load_attr.5 = getattr(value=$12load_global.4, attr=empty) ['$12load_global.4', '$14load_attr.5']
    $18load_attr.7 = getattr(value=arr, attr=shape) ['$18load_attr.7', 'arr']
    $22load_attr.9 = getattr(value=arr, attr=dtype) ['$22load_attr.9', 'arr']
    out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', 'out']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $36load_global.14 = global(range: <class 'range'>) ['$36load_global.14']
    $40load_attr.16 = getattr(value=arr, attr=size) ['$40load_attr.16', 'arr']
    $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.14', '$40load_attr.16', '$42call_function.17']
    $44get_iter.18 = getiter(value=$42call_function.17) ['$42call_function.17', '$44get_iter.18']
    $phi46.0 = $44get_iter.18                ['$44get_iter.18', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 80             ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    $54binary_add.4 = i + shift              ['$54binary_add.4', 'i', 'shift']
    $58load_attr.6 = getattr(value=arr, attr=size) ['$58load_attr.6', 'arr']
    idx = $54binary_add.4 % $58load_attr.6   ['$54binary_add.4', '$58load_attr.6', 'idx']
    $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>) ['$68binary_subscr.10', 'arr_flat', 'i']
    $72load_attr.12 = getattr(value=out, attr=flat) ['$72load_attr.12', 'out']
    $72load_attr.12[idx] = $68binary_subscr.10 ['$68binary_subscr.10', '$72load_attr.12', 'idx']
    jump 46                                  []
label 80:
    $82return_value.1 = cast(value=out)      ['$82return_value.1', 'out']
    return $82return_value.1                 ['$82return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CF0058B0>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: shift = arg(1, name=shift)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
2023-01-03 17:17 DEBUG on stmt: arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $18load_attr.7 = getattr(value=arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $22load_attr.9 = getattr(value=arr, attr=dtype)
2023-01-03 17:17 DEBUG on stmt: out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $36load_global.14 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $40load_attr.16 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $44get_iter.18 = getiter(value=$42call_function.17)
2023-01-03 17:17 DEBUG on stmt: $phi46.0 = $44get_iter.18
2023-01-03 17:17 DEBUG on stmt: jump 46
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 46
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CF0058B0>
2023-01-03 17:17 DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
2023-01-03 17:17 DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi48.1 = $46for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $46for_iter.3, 48, 80
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CF0058B0>
2023-01-03 17:17 DEBUG on stmt: i = $phi48.1
2023-01-03 17:17 DEBUG on stmt: $54binary_add.4 = i + shift
2023-01-03 17:17 DEBUG on stmt: $58load_attr.6 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: idx = $54binary_add.4 % $58load_attr.6
2023-01-03 17:17 DEBUG on stmt: $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $72load_attr.12 = getattr(value=out, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $72load_attr.12[idx] = $68binary_subscr.10
2023-01-03 17:17 DEBUG on stmt: jump 46
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 80
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CF0058B0>
2023-01-03 17:17 DEBUG on stmt: $82return_value.1 = cast(value=out)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x000001C8CEF32DC0>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x000001C8CEF96850>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x000001C8CEF96F10>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x000001C8CEF951C0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEF32190>],
             '$36load_global.14': [<numba.core.ir.Assign object at 0x000001C8CEF95970>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x000001C8CEF95F10>],
             '$42call_function.17': [<numba.core.ir.Assign object at 0x000001C8CEF95BB0>],
             '$44get_iter.18': [<numba.core.ir.Assign object at 0x000001C8CEFA2130>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x000001C8CEFA21F0>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x000001C8CEFA2310>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x000001C8CEFA2430>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8CEF324C0>],
             '$54binary_add.4': [<numba.core.ir.Assign object at 0x000001C8CEFA2A90>],
             '$58load_attr.6': [<numba.core.ir.Assign object at 0x000001C8CEFA2D30>],
             '$68binary_subscr.10': [<numba.core.ir.Assign object at 0x000001C8CEFA43D0>],
             '$72load_attr.12': [<numba.core.ir.Assign object at 0x000001C8CEFA4670>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x000001C8CEFA4970>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x000001C8CEF32D60>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x000001C8CEF23CA0>],
             'a': [<numba.core.ir.Assign object at 0x000001C8CEF32DF0>],
             'arr': [<numba.core.ir.Assign object at 0x000001C8CEF32A90>],
             'arr_flat': [<numba.core.ir.Assign object at 0x000001C8CEF95820>],
             'i': [<numba.core.ir.Assign object at 0x000001C8CEFA26D0>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8CEFA2EB0>],
             'out': [<numba.core.ir.Assign object at 0x000001C8CEF953D0>],
             'shift': [<numba.core.ir.Assign object at 0x000001C8CEF320A0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4428)
           2	LOAD_FAST(arg=0, lineno=4428)
           4	RETURN_VALUE(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4428)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG stack ['$a2.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CF00DF40>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $4return_value.1 = cast(value=a)
2023-01-03 17:17 DEBUG on stmt: return $4return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x000001C8CF005FA0>],
             'a': [<numba.core.ir.Assign object at 0x000001C8CF00DA60>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8CF0097C0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CF005BB0>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8CEE8D340>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8CEE8DFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEF45A30>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8CEDFB970>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8CEF45EE0>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8CEF2D4F0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=51)
           6	LOAD_FAST(arg=3, lineno=51)
           8	BINARY_SUBTRACT(arg=None, lineno=1)
          10	LOAD_GLOBAL(arg=1, lineno=1)
          12	LOAD_FAST(arg=1, lineno=51)
          14	LOAD_FAST(arg=2, lineno=51)
          16	BINARY_SUBTRACT(arg=None, lineno=1)
          18	CALL_FUNCTION(arg=1, lineno=1)
          20	CALL_FUNCTION(arg=2, lineno=1)
          22	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=51)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=51)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$close_array_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$close_array_14.1', '$low_array_16.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$8binary_subtract.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=51)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=51)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$high_array_112.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$high_array_112.5', '$last_close_array_114.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$10load_global.4', '$16binary_subtract.7']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$8binary_subtract.3', '$18call_function.8']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$20call_function.9']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$close_array_14.1'}), (6, {'res': '$low_array_16.2'}), (8, {'lhs': '$close_array_14.1', 'rhs': '$low_array_16.2', 'res': '$8binary_subtract.3'}), (10, {'res': '$10load_global.4'}), (12, {'res': '$high_array_112.5'}), (14, {'res': '$last_close_array_114.6'}), (16, {'lhs': '$high_array_112.5', 'rhs': '$last_close_array_114.6', 'res': '$16binary_subtract.7'}), (18, {'func': '$10load_global.4', 'args': ['$16binary_subtract.7'], 'res': '$18call_function.8'}), (20, {'func': '$2load_global.0', 'args': ['$8binary_subtract.3', '$18call_function.8'], 'res': '$20call_function.9'}), (22, {'retval': '$20call_function.9', 'castval': '$22return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    close_array_1 = arg(0, name=close_array_1) ['close_array_1']
    high_array_1 = arg(1, name=high_array_1) ['high_array_1']
    last_close_array_1 = arg(2, name=last_close_array_1) ['last_close_array_1']
    low_array_1 = arg(3, name=low_array_1)   ['low_array_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x1c8af54584: <ufunc 'maximum'>) ['$2load_global.0']
    $8binary_subtract.3 = close_array_1 - low_array_1 ['$8binary_subtract.3', 'close_array_1', 'low_array_1']
    $10load_global.4 = global(__ufunc_or_dufunc_0x1c88fd6ae4: <ufunc 'absolute'>) ['$10load_global.4']
    $16binary_subtract.7 = high_array_1 - last_close_array_1 ['$16binary_subtract.7', 'high_array_1', 'last_close_array_1']
    $18call_function.8 = call $10load_global.4($16binary_subtract.7, func=$10load_global.4, args=[Var($16binary_subtract.7, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.4', '$16binary_subtract.7', '$18call_function.8']
    $20call_function.9 = call $2load_global.0($8binary_subtract.3, $18call_function.8, func=$2load_global.0, args=[Var($8binary_subtract.3, nb.py:1), Var($18call_function.8, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$20call_function.9', '$2load_global.0', '$8binary_subtract.3']
    $22return_value.10 = cast(value=$20call_function.9) ['$20call_function.9', '$22return_value.10']
    return $22return_value.10                ['$22return_value.10']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEA56A0>
2023-01-03 17:17 DEBUG on stmt: close_array_1 = arg(0, name=close_array_1)
2023-01-03 17:17 DEBUG on stmt: high_array_1 = arg(1, name=high_array_1)
2023-01-03 17:17 DEBUG on stmt: last_close_array_1 = arg(2, name=last_close_array_1)
2023-01-03 17:17 DEBUG on stmt: low_array_1 = arg(3, name=low_array_1)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x1c8af54584: <ufunc 'maximum'>)
2023-01-03 17:17 DEBUG on stmt: $8binary_subtract.3 = close_array_1 - low_array_1
2023-01-03 17:17 DEBUG on stmt: $10load_global.4 = global(__ufunc_or_dufunc_0x1c88fd6ae4: <ufunc 'absolute'>)
2023-01-03 17:17 DEBUG on stmt: $16binary_subtract.7 = high_array_1 - last_close_array_1
2023-01-03 17:17 DEBUG on stmt: $18call_function.8 = call $10load_global.4($16binary_subtract.7, func=$10load_global.4, args=[Var($16binary_subtract.7, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $20call_function.9 = call $2load_global.0($8binary_subtract.3, $18call_function.8, func=$2load_global.0, args=[Var($8binary_subtract.3, nb.py:1), Var($18call_function.8, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $22return_value.10 = cast(value=$20call_function.9)
2023-01-03 17:17 DEBUG on stmt: return $22return_value.10
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x000001C8CEF857F0>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x000001C8CEF85CA0>],
             '$18call_function.8': [<numba.core.ir.Assign object at 0x000001C8CEF853A0>],
             '$20call_function.9': [<numba.core.ir.Assign object at 0x000001C8CEF850A0>],
             '$22return_value.10': [<numba.core.ir.Assign object at 0x000001C8CEF850D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8CEEA5DF0>],
             '$8binary_subtract.3': [<numba.core.ir.Assign object at 0x000001C8CEEA5970>],
             'close_array_1': [<numba.core.ir.Assign object at 0x000001C8F2BD2E20>],
             'high_array_1': [<numba.core.ir.Assign object at 0x000001C8CEEA5B20>],
             'last_close_array_1': [<numba.core.ir.Assign object at 0x000001C8CEEA5D60>],
             'low_array_1': [<numba.core.ir.Assign object at 0x000001C8CEEA5310>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=205)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
2023-01-03 17:17 DEBUG stack ['$src_ndim2.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
2023-01-03 17:17 DEBUG stack ['$src_ndim2.0', '$dest_ndim4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
2023-01-03 17:17 DEBUG stack ['$6compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
2023-01-03 17:17 DEBUG stack ['$const10.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=14 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
2023-01-03 17:17 DEBUG stack ['$const14.0']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
2023-01-03 17:17 DEBUG stack ['$dest_ndim18.1']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
2023-01-03 17:17 DEBUG stack ['$dest_ndim18.1', '$src_ndim20.2']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
2023-01-03 17:17 DEBUG stack ['$22binary_subtract.3']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
2023-01-03 17:17 DEBUG stack ['$src_index26.0']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
2023-01-03 17:17 DEBUG stack ['$src_index26.0', '$src_ndim28.1']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
2023-01-03 17:17 DEBUG stack ['$30compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
2023-01-03 17:17 DEBUG stack ['$src_shape34.0']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
2023-01-03 17:17 DEBUG stack ['$src_shape34.0', '$src_index36.1']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
2023-01-03 17:17 DEBUG stack ['$38binary_subscr.2']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
2023-01-03 17:17 DEBUG stack ['$dest_shape42.3']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
2023-01-03 17:17 DEBUG stack ['$dest_shape42.3', '$dest_index44.4']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
2023-01-03 17:17 DEBUG stack ['$46binary_subscr.5']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
2023-01-03 17:17 DEBUG stack ['$dest_dim_size50.6']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
2023-01-03 17:17 DEBUG stack ['$dest_dim_size50.6', '$const52.7']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
2023-01-03 17:17 DEBUG stack ['$54compare_op.8']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
2023-01-03 17:17 DEBUG stack ['$dest_index120.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
2023-01-03 17:17 DEBUG stack ['$src_dim_size58.0']
2023-01-03 17:17 DEBUG dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
2023-01-03 17:17 DEBUG stack ['$src_dim_size58.0', '$dest_dim_size60.1']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
2023-01-03 17:17 DEBUG stack ['$62compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
2023-01-03 17:17 DEBUG stack ['$src_dim_size86.0']
2023-01-03 17:17 DEBUG dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
2023-01-03 17:17 DEBUG stack ['$src_dim_size86.0', '$const88.1']
2023-01-03 17:17 DEBUG dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
2023-01-03 17:17 DEBUG stack ['$90compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
2023-01-03 17:17 DEBUG stack ['$src_dim_size66.0']
2023-01-03 17:17 DEBUG dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
2023-01-03 17:17 DEBUG stack ['$src_dim_size66.0', '$const68.1']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
2023-01-03 17:17 DEBUG stack ['$70compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
2023-01-03 17:17 DEBUG stack ['$src_index102.0']
2023-01-03 17:17 DEBUG dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
2023-01-03 17:17 DEBUG stack ['$src_index102.0', '$const104.1']
2023-01-03 17:17 DEBUG dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
2023-01-03 17:17 DEBUG stack ['$106inplace_add.2']
2023-01-03 17:17 DEBUG dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
2023-01-03 17:17 DEBUG stack ['$dest_index110.3']
2023-01-03 17:17 DEBUG dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
2023-01-03 17:17 DEBUG stack ['$dest_index110.3', '$const112.4']
2023-01-03 17:17 DEBUG dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
2023-01-03 17:17 DEBUG stack ['$114inplace_add.5']
2023-01-03 17:17 DEBUG dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
2023-01-03 17:17 DEBUG stack ['$src_dim_size94.0']
2023-01-03 17:17 DEBUG dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
2023-01-03 17:17 DEBUG stack ['$src_dim_size94.0', '$dest_shape96.1']
2023-01-03 17:17 DEBUG dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
2023-01-03 17:17 DEBUG stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
2023-01-03 17:17 DEBUG stack ['$dest_index74.0']
2023-01-03 17:17 DEBUG dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
2023-01-03 17:17 DEBUG stack ['$dest_index74.0', '$const76.1']
2023-01-03 17:17 DEBUG dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
2023-01-03 17:17 DEBUG stack ['$78binary_add.2']
2023-01-03 17:17 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
2023-01-03 17:17 DEBUG stack ['$80unary_negative.3']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=102 nstack_initial=0)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-03 17:17 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-03 17:17 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-03 17:17 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-03 17:17 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $8pred, 10, 14
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 10
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.1
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: src_index = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-03 17:17 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $32pred, 34, 120
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-03 17:17 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $56pred, 58, 86
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 58
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-03 17:17 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $64pred, 66, 102
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 66
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-03 17:17 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $72pred, 74, 102
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 74
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-01-03 17:17 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-03 17:17 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.4
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 86
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-03 17:17 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $92pred, 94, 102
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 94
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-01-03 17:17 DEBUG on stmt: jump 102
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 102
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-03 17:17 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: dest_index = $114inplace_add.5
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 120
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE9D90>
2023-01-03 17:17 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-01-03 17:17 DEBUG on stmt: return $122return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x000001C8CF0056D0>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x000001C8CEF23100>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x000001C8CEF238E0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x000001C8CEF65850>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F2BC1640>],
             '$32pred': [<numba.core.ir.Assign object at 0x000001C8F2BC1EE0>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x000001C8CEDFBC70>],
             '$56pred': [<numba.core.ir.Assign object at 0x000001C8CEF452E0>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x000001C8CEEE9070>],
             '$64pred': [<numba.core.ir.Assign object at 0x000001C8CEEE9730>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000001C8CEF3AC40>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F2BD2AF0>],
             '$72pred': [<numba.core.ir.Assign object at 0x000001C8CEDBF6D0>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x000001C8CF00DBB0>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x000001C8CF00D070>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x000001C8CF00DF40>],
             '$8pred': [<numba.core.ir.Assign object at 0x000001C8CEF3A820>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x000001C8CF0053D0>],
             '$92pred': [<numba.core.ir.Assign object at 0x000001C8CF0058E0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x000001C8CEF65BB0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x000001C8CF0052E0>],
             '$const112.4': [<numba.core.ir.Assign object at 0x000001C8CEF23340>],
             '$const52.7': [<numba.core.ir.Assign object at 0x000001C8CEDFB820>],
             '$const68.1': [<numba.core.ir.Assign object at 0x000001C8F2BD20D0>],
             '$const76.1': [<numba.core.ir.Assign object at 0x000001C8CEDBF280>],
             '$const88.1': [<numba.core.ir.Assign object at 0x000001C8CF00DF10>],
             'bool32': [<numba.core.ir.Assign object at 0x000001C8F2BC1B80>],
             'bool56': [<numba.core.ir.Assign object at 0x000001C8CEF453A0>],
             'bool64': [<numba.core.ir.Assign object at 0x000001C8CEEE9D60>],
             'bool72': [<numba.core.ir.Assign object at 0x000001C8CEF45250>],
             'bool8': [<numba.core.ir.Assign object at 0x000001C8CEF3A5B0>],
             'bool92': [<numba.core.ir.Assign object at 0x000001C8CF005C70>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x000001C8F2BC1C70>],
             'dest_index': [<numba.core.ir.Assign object at 0x000001C8CEF65640>,
                            <numba.core.ir.Assign object at 0x000001C8CEF23550>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x000001C8CEEE9E80>],
             'dest_shape': [<numba.core.ir.Assign object at 0x000001C8CEEE9F10>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x000001C8F2BC17C0>],
             'src_index': [<numba.core.ir.Assign object at 0x000001C8CEF65250>,
                           <numba.core.ir.Assign object at 0x000001C8CF005790>],
             'src_ndim': [<numba.core.ir.Assign object at 0x000001C8CEEE93A0>],
             'src_shape': [<numba.core.ir.Assign object at 0x000001C8CEEE9BB0>]})
2023-01-03 17:17 DEBUG SSA violators {'dest_index', 'src_index'}
2023-01-03 17:17 DEBUG Fix SSA violator on var dest_index
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-03 17:17 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-03 17:17 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-03 17:17 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-03 17:17 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $8pred, 10, 14
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 10
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: src_index = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-03 17:17 DEBUG first assign: dest_index
2023-01-03 17:17 DEBUG replaced with: dest_index = dest_ndim - src_ndim
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-03 17:17 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $32pred, 34, 120
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-03 17:17 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $56pred, 58, 86
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 58
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-03 17:17 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $64pred, 66, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 66
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-03 17:17 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $72pred, 74, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 74
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-01-03 17:17 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-03 17:17 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.4
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 86
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-03 17:17 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $92pred, 94, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 94
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-01-03 17:17 DEBUG on stmt: jump 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 102
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-03 17:17 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: dest_index = $114inplace_add.5
2023-01-03 17:17 DEBUG replaced with: dest_index.1 = $114inplace_add.5
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 120
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-01-03 17:17 DEBUG on stmt: return $122return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x000001C8CEED03D0>],
             102: [<numba.core.ir.Assign object at 0x000001C8CEF237C0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-03 17:17 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-03 17:17 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-03 17:17 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-03 17:17 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $8pred, 10, 14
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 10
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: src_index = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-03 17:17 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $32pred, 34, 120
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG idom 26 from label 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG find_def_from_top label 26
2023-01-03 17:17 DEBUG insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2023-01-03 17:17 DEBUG find_def_from_bottom label 102
2023-01-03 17:17 DEBUG incoming_def dest_index.1 = $114inplace_add.5
2023-01-03 17:17 DEBUG find_def_from_bottom label 14
2023-01-03 17:17 DEBUG incoming_def dest_index = dest_ndim - src_ndim
2023-01-03 17:17 DEBUG replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-03 17:17 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $56pred, 58, 86
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 58
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-03 17:17 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $64pred, 66, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 66
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-03 17:17 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $72pred, 74, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 74
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $78binary_add.2 = dest_index + $const76.1
2023-01-03 17:17 DEBUG find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
2023-01-03 17:17 DEBUG find_def_from_top label 74
2023-01-03 17:17 DEBUG idom 66 from label 74
2023-01-03 17:17 DEBUG find_def_from_bottom label 66
2023-01-03 17:17 DEBUG find_def_from_top label 66
2023-01-03 17:17 DEBUG idom 58 from label 66
2023-01-03 17:17 DEBUG find_def_from_bottom label 58
2023-01-03 17:17 DEBUG find_def_from_top label 58
2023-01-03 17:17 DEBUG idom 34 from label 58
2023-01-03 17:17 DEBUG find_def_from_bottom label 34
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG idom 26 from label 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG replaced with: $78binary_add.2 = dest_index.2 + $const76.1
2023-01-03 17:17 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-03 17:17 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.4
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 86
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-03 17:17 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $92pred, 94, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 94
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: dest_shape[dest_index] = src_dim_size
2023-01-03 17:17 DEBUG find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
2023-01-03 17:17 DEBUG find_def_from_top label 94
2023-01-03 17:17 DEBUG idom 86 from label 94
2023-01-03 17:17 DEBUG find_def_from_bottom label 86
2023-01-03 17:17 DEBUG find_def_from_top label 86
2023-01-03 17:17 DEBUG idom 34 from label 86
2023-01-03 17:17 DEBUG find_def_from_bottom label 34
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG idom 26 from label 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG replaced with: dest_shape[dest_index.2] = src_dim_size
2023-01-03 17:17 DEBUG on stmt: jump 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 102
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-03 17:17 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 102
2023-01-03 17:17 DEBUG idom 34 from label 102
2023-01-03 17:17 DEBUG find_def_from_bottom label 34
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG idom 26 from label 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 120
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF85970>
2023-01-03 17:17 DEBUG on stmt: $122return_value.1 = cast(value=dest_index)
2023-01-03 17:17 DEBUG find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
2023-01-03 17:17 DEBUG find_def_from_top label 120
2023-01-03 17:17 DEBUG idom 26 from label 120
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG replaced with: $122return_value.1 = cast(value=dest_index.2)
2023-01-03 17:17 DEBUG on stmt: return $122return_value.1
2023-01-03 17:17 DEBUG Fix SSA violator on var src_index
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-03 17:17 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-03 17:17 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-03 17:17 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-03 17:17 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $8pred, 10, 14
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 10
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: src_index = const(int, 0)
2023-01-03 17:17 DEBUG first assign: src_index
2023-01-03 17:17 DEBUG replaced with: src_index = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
2023-01-03 17:17 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-03 17:17 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $32pred, 34, 120
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-03 17:17 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $56pred, 58, 86
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 58
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-03 17:17 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $64pred, 66, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 66
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-03 17:17 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $72pred, 74, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 74
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2023-01-03 17:17 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-03 17:17 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.4
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 86
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-03 17:17 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $92pred, 94, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 94
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: dest_shape[dest_index.2] = src_dim_size
2023-01-03 17:17 DEBUG on stmt: jump 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 102
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: src_index = $106inplace_add.2
2023-01-03 17:17 DEBUG replaced with: src_index.1 = $106inplace_add.2
2023-01-03 17:17 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 120
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEF232B0>
2023-01-03 17:17 DEBUG on stmt: $122return_value.1 = cast(value=dest_index.2)
2023-01-03 17:17 DEBUG on stmt: return $122return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x000001C8CEED0400>],
             102: [<numba.core.ir.Assign object at 0x000001C8CEEE10A0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: src_ndim = arg(0, name=src_ndim)
2023-01-03 17:17 DEBUG on stmt: src_shape = arg(1, name=src_shape)
2023-01-03 17:17 DEBUG on stmt: dest_ndim = arg(2, name=dest_ndim)
2023-01-03 17:17 DEBUG on stmt: dest_shape = arg(3, name=dest_shape)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = src_ndim > dest_ndim
2023-01-03 17:17 DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $8pred, 10, 14
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 10
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: $const10.0 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: src_index = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: dest_index = dest_ndim - src_ndim
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
2023-01-03 17:17 DEBUG on stmt: $30compare_op.2 = src_index < src_ndim
2023-01-03 17:17 DEBUG find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
2023-01-03 17:17 DEBUG find_def_from_top label 26
2023-01-03 17:17 DEBUG insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2023-01-03 17:17 DEBUG find_def_from_bottom label 102
2023-01-03 17:17 DEBUG incoming_def src_index.1 = $106inplace_add.2
2023-01-03 17:17 DEBUG find_def_from_bottom label 14
2023-01-03 17:17 DEBUG incoming_def src_index = const(int, 0)
2023-01-03 17:17 DEBUG replaced with: $30compare_op.2 = src_index.2 < src_ndim
2023-01-03 17:17 DEBUG on stmt: bool32 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $32pred, 34, 120
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG idom 26 from label 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const52.7 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2023-01-03 17:17 DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $56pred, 58, 86
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 58
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2023-01-03 17:17 DEBUG on stmt: bool64 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $64pred, 66, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 66
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: $const68.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $70compare_op.2 = src_dim_size != $const68.1
2023-01-03 17:17 DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $72pred, 74, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 74
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: $const76.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2023-01-03 17:17 DEBUG on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2023-01-03 17:17 DEBUG on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.4
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 86
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: $const88.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $90compare_op.2 = src_dim_size != $const88.1
2023-01-03 17:17 DEBUG on stmt: bool92 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $92pred, 94, 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 94
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: dest_shape[dest_index.2] = src_dim_size
2023-01-03 17:17 DEBUG on stmt: jump 102
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 102
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: $const104.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 102
2023-01-03 17:17 DEBUG idom 34 from label 102
2023-01-03 17:17 DEBUG find_def_from_bottom label 34
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG idom 26 from label 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: src_index.1 = $106inplace_add.2
2023-01-03 17:17 DEBUG on stmt: $const112.4 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: dest_index.1 = $114inplace_add.5
2023-01-03 17:17 DEBUG on stmt: jump 26
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 120
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF32940>
2023-01-03 17:17 DEBUG on stmt: $122return_value.1 = cast(value=dest_index.2)
2023-01-03 17:17 DEBUG on stmt: return $122return_value.1
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=64)
           6	LOAD_GLOBAL(arg=1, lineno=1)
           8	LOAD_FAST(arg=2, lineno=51)
          10	LOAD_FAST(arg=1, lineno=51)
          12	BINARY_SUBTRACT(arg=None, lineno=1)
          14	CALL_FUNCTION(arg=1, lineno=1)
          16	CALL_FUNCTION(arg=2, lineno=1)
          18	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=64)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$each_num_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=51)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=51)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$low_array_28.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$low_array_28.3', '$last_close_array_210.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$6load_global.2', '$12binary_subtract.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=1)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$each_num_14.1', '$14call_function.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$16call_function.7']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$each_num_14.1'}), (6, {'res': '$6load_global.2'}), (8, {'res': '$low_array_28.3'}), (10, {'res': '$last_close_array_210.4'}), (12, {'lhs': '$low_array_28.3', 'rhs': '$last_close_array_210.4', 'res': '$12binary_subtract.5'}), (14, {'func': '$6load_global.2', 'args': ['$12binary_subtract.5'], 'res': '$14call_function.6'}), (16, {'func': '$2load_global.0', 'args': ['$each_num_14.1', '$14call_function.6'], 'res': '$16call_function.7'}), (18, {'retval': '$16call_function.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    each_num_1 = arg(0, name=each_num_1)     ['each_num_1']
    last_close_array_2 = arg(1, name=last_close_array_2) ['last_close_array_2']
    low_array_2 = arg(2, name=low_array_2)   ['low_array_2']
    $2load_global.0 = global(__ufunc_or_dufunc_0x1c8af54584: <ufunc 'maximum'>) ['$2load_global.0']
    $6load_global.2 = global(__ufunc_or_dufunc_0x1c88fd6ae4: <ufunc 'absolute'>) ['$6load_global.2']
    $12binary_subtract.5 = low_array_2 - last_close_array_2 ['$12binary_subtract.5', 'last_close_array_2', 'low_array_2']
    $14call_function.6 = call $6load_global.2($12binary_subtract.5, func=$6load_global.2, args=[Var($12binary_subtract.5, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$12binary_subtract.5', '$14call_function.6', '$6load_global.2']
    $16call_function.7 = call $2load_global.0(each_num_1, $14call_function.6, func=$2load_global.0, args=[Var(each_num_1, nb.py:1), Var($14call_function.6, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$14call_function.6', '$16call_function.7', '$2load_global.0', 'each_num_1']
    $18return_value.8 = cast(value=$16call_function.7) ['$16call_function.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2BD4B20>
2023-01-03 17:17 DEBUG on stmt: each_num_1 = arg(0, name=each_num_1)
2023-01-03 17:17 DEBUG on stmt: last_close_array_2 = arg(1, name=last_close_array_2)
2023-01-03 17:17 DEBUG on stmt: low_array_2 = arg(2, name=low_array_2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x1c8af54584: <ufunc 'maximum'>)
2023-01-03 17:17 DEBUG on stmt: $6load_global.2 = global(__ufunc_or_dufunc_0x1c88fd6ae4: <ufunc 'absolute'>)
2023-01-03 17:17 DEBUG on stmt: $12binary_subtract.5 = low_array_2 - last_close_array_2
2023-01-03 17:17 DEBUG on stmt: $14call_function.6 = call $6load_global.2($12binary_subtract.5, func=$6load_global.2, args=[Var($12binary_subtract.5, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $16call_function.7 = call $2load_global.0(each_num_1, $14call_function.6, func=$2load_global.0, args=[Var(each_num_1, nb.py:1), Var($14call_function.6, nb.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $18return_value.8 = cast(value=$16call_function.7)
2023-01-03 17:17 DEBUG on stmt: return $18return_value.8
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$12binary_subtract.5': [<numba.core.ir.Assign object at 0x000001C8F2BE51F0>],
             '$14call_function.6': [<numba.core.ir.Assign object at 0x000001C8F2BE53A0>],
             '$16call_function.7': [<numba.core.ir.Assign object at 0x000001C8F2BE5520>],
             '$18return_value.8': [<numba.core.ir.Assign object at 0x000001C8F2BE5670>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F2BD4820>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x000001C8F2BD4DF0>],
             'each_num_1': [<numba.core.ir.Assign object at 0x000001C8F2BD4C40>],
             'last_close_array_2': [<numba.core.ir.Assign object at 0x000001C8F2BD4D30>],
             'low_array_2': [<numba.core.ir.Assign object at 0x000001C8F2BD44C0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=377)
           2	LOAD_GLOBAL(arg=0, lineno=377)
           4	LOAD_METHOD(arg=1, lineno=377)
           6	LOAD_FAST(arg=0, lineno=377)
           8	LOAD_ATTR(arg=2, lineno=377)
          10	LOAD_DEREF(arg=0, lineno=377)
          12	CALL_METHOD(arg=2, lineno=377)
          14	STORE_FAST(arg=1, lineno=377)
          16	LOAD_DEREF(arg=1, lineno=378)
          18	STORE_FAST(arg=2, lineno=378)
          20	LOAD_GLOBAL(arg=3, lineno=379)
          22	LOAD_FAST(arg=0, lineno=379)
          24	LOAD_ATTR(arg=4, lineno=379)
          26	CALL_FUNCTION(arg=1, lineno=379)
          28	GET_ITER(arg=None, lineno=379)
>         30	FOR_ITER(arg=24, lineno=379)
          32	UNPACK_SEQUENCE(arg=2, lineno=379)
          34	STORE_FAST(arg=3, lineno=379)
          36	STORE_FAST(arg=4, lineno=379)
          38	LOAD_FAST(arg=2, lineno=380)
          40	LOAD_FAST(arg=4, lineno=380)
          42	INPLACE_ADD(arg=None, lineno=380)
          44	STORE_FAST(arg=2, lineno=380)
          46	LOAD_FAST(arg=2, lineno=381)
          48	LOAD_FAST(arg=1, lineno=381)
          50	LOAD_FAST(arg=3, lineno=381)
          52	STORE_SUBSCR(arg=None, lineno=381)
          54	JUMP_ABSOLUTE(arg=30, lineno=381)
>         56	LOAD_FAST(arg=1, lineno=382)
          58	RETURN_VALUE(arg=None, lineno=382)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=377)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=377)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=377)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=377)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=377)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$arr6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=377)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$8load_attr.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=CALL_METHOD(arg=2, lineno=377)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$8load_attr.3', '$10load_deref.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=STORE_FAST(arg=1, lineno=377)
2023-01-03 17:17 DEBUG stack ['$12call_method.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=LOAD_DEREF(arg=1, lineno=378)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=2, lineno=378)
2023-01-03 17:17 DEBUG stack ['$16load_deref.6']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_GLOBAL(arg=3, lineno=379)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=379)
2023-01-03 17:17 DEBUG stack ['$20load_global.7']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_ATTR(arg=4, lineno=379)
2023-01-03 17:17 DEBUG stack ['$20load_global.7', '$arr22.8']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=379)
2023-01-03 17:17 DEBUG stack ['$20load_global.7', '$24load_attr.9']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=GET_ITER(arg=None, lineno=379)
2023-01-03 17:17 DEBUG stack ['$26call_function.10']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=30, stack=('$28get_iter.11',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=30 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi30.0']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=FOR_ITER(arg=24, lineno=379)
2023-01-03 17:17 DEBUG stack ['$phi30.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=382)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=58, inst=RETURN_VALUE(arg=None, lineno=382)
2023-01-03 17:17 DEBUG stack ['$out56.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=32 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi32.0', '$phi32.1']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=UNPACK_SEQUENCE(arg=2, lineno=379)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$phi32.1']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_FAST(arg=3, lineno=379)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$32unpack_sequence.3', '$32unpack_sequence.2']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=STORE_FAST(arg=4, lineno=379)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$32unpack_sequence.3']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=380)
2023-01-03 17:17 DEBUG stack ['$phi32.0']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=380)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$c38.5']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=INPLACE_ADD(arg=None, lineno=380)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$c38.5', '$v40.6']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=STORE_FAST(arg=2, lineno=380)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$42inplace_add.7']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=381)
2023-01-03 17:17 DEBUG stack ['$phi32.0']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=381)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$c46.8']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=381)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$c46.8', '$out48.9']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=STORE_SUBSCR(arg=None, lineno=381)
2023-01-03 17:17 DEBUG stack ['$phi32.0', '$c46.8', '$out48.9', '$idx50.10']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=JUMP_ABSOLUTE(arg=30, lineno=381)
2023-01-03 17:17 DEBUG stack ['$phi32.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=30 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=56 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.11',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi30.0': {('$28get_iter.11', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.11'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$arr6.2'}), (8, {'item': '$arr6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'func': '$4load_method.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_deref.6'}), (18, {'value': '$16load_deref.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$arr22.8'}), (24, {'item': '$arr22.8', 'res': '$24load_attr.9'}), (26, {'func': '$20load_global.7', 'args': ['$24load_attr.9'], 'res': '$26call_function.10'}), (28, {'value': '$26call_function.10', 'res': '$28get_iter.11'})), outgoing_phis={'$phi30.0': '$28get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.11',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 32: ('$phi30.0', '$30for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'iterable': '$phi32.1', 'stores': ['$32unpack_sequence.2', '$32unpack_sequence.3'], 'tupleobj': '$32unpack_sequence.4'}), (34, {'value': '$32unpack_sequence.2'}), (36, {'value': '$32unpack_sequence.3'}), (38, {'res': '$c38.5'}), (40, {'res': '$v40.6'}), (42, {'lhs': '$c38.5', 'rhs': '$v40.6', 'res': '$42inplace_add.7'}), (44, {'value': '$42inplace_add.7'}), (46, {'res': '$c46.8'}), (48, {'res': '$out48.9'}), (50, {'res': '$idx50.10'}), (52, {'target': '$out48.9', 'index': '$idx50.10', 'value': '$c46.8'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$out56.0'}), (58, {'retval': '$out56.0', 'castval': '$58return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=arr, attr=size) ['$8load_attr.3', 'arr']
    $10load_deref.4 = freevar(dtype: float64) ['$10load_deref.4']
    out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_method.1', '$8load_attr.3', 'out']
    c = freevar(zero: 0.0)                   ['c']
    $20load_global.7 = global(enumerate: <class 'enumerate'>) ['$20load_global.7']
    $24load_attr.9 = getattr(value=arr, attr=flat) ['$24load_attr.9', 'arr']
    $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', '$24load_attr.9', '$26call_function.10']
    $28get_iter.11 = getiter(value=$26call_function.10) ['$26call_function.10', '$28get_iter.11']
    $phi30.0 = $28get_iter.11                ['$28get_iter.11', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 56             ['$30for_iter.3']
label 32:
    $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2) ['$32unpack_sequence.4', '$phi32.1']
    $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.2', '$32unpack_sequence.4']
    $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.3', '$32unpack_sequence.4']
    idx = $32unpack_sequence.2               ['$32unpack_sequence.2', 'idx']
    v = $32unpack_sequence.3                 ['$32unpack_sequence.3', 'v']
    $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined) ['$42inplace_add.7', 'c', 'v']
    c = $42inplace_add.7                     ['$42inplace_add.7', 'c']
    out[idx] = c                             ['c', 'idx', 'out']
    jump 30                                  []
label 56:
    $58return_value.1 = cast(value=out)      ['$58return_value.1', 'out']
    return $58return_value.1                 ['$58return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C45AF0>
2023-01-03 17:17 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-01-03 17:17 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-01-03 17:17 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-01-03 17:17 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 30
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C45AF0>
2023-01-03 17:17 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-01-03 17:17 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 32
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C45AF0>
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $32unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: v = $32unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: c = $42inplace_add.7
2023-01-03 17:17 DEBUG on stmt: out[idx] = c
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 56
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C45AF0>
2023-01-03 17:17 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-01-03 17:17 DEBUG on stmt: return $58return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x000001C8F2C516A0>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x000001C8F2C51D60>],
             '$24load_attr.9': [<numba.core.ir.Assign object at 0x000001C8F2C53040>],
             '$26call_function.10': [<numba.core.ir.Assign object at 0x000001C8F2C531F0>],
             '$28get_iter.11': [<numba.core.ir.Assign object at 0x000001C8F2C53340>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F2C51100>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F2C53580>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F2C536A0>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F2C537C0>],
             '$32unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001C8F2C53C10>],
             '$32unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001C8F2C53D30>],
             '$32unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001C8F2C53AC0>],
             '$42inplace_add.7': [<numba.core.ir.Assign object at 0x000001C8F2C56340>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8F2C51280>],
             '$58return_value.1': [<numba.core.ir.Assign object at 0x000001C8F2C56A60>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001C8F2C51520>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x000001C8F2C51940>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x000001C8F2C53490>],
             'arr': [<numba.core.ir.Assign object at 0x000001C8F2C45F40>],
             'c': [<numba.core.ir.Assign object at 0x000001C8F2C51AC0>,
                   <numba.core.ir.Assign object at 0x000001C8F2C56400>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8F2C53E20>],
             'out': [<numba.core.ir.Assign object at 0x000001C8F2C51850>],
             'v': [<numba.core.ir.Assign object at 0x000001C8F2C53F40>]})
2023-01-03 17:17 DEBUG SSA violators {'c'}
2023-01-03 17:17 DEBUG Fix SSA violator on var c
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-01-03 17:17 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG first assign: c
2023-01-03 17:17 DEBUG replaced with: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-01-03 17:17 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-01-03 17:17 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 30
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-01-03 17:17 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 32
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $32unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: v = $32unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: c = $42inplace_add.7
2023-01-03 17:17 DEBUG replaced with: c.1 = $42inplace_add.7
2023-01-03 17:17 DEBUG on stmt: out[idx] = c
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 56
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-01-03 17:17 DEBUG on stmt: return $58return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001C8F2C5B040>],
             32: [<numba.core.ir.Assign object at 0x000001C8F2C5B1C0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.4 = freevar(dtype: float64)
2023-01-03 17:17 DEBUG on stmt: out = call $4load_method.1($8load_attr.3, $10load_deref.4, func=$4load_method.1, args=[Var($8load_attr.3, arraymath.py:377), Var($10load_deref.4, arraymath.py:377)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG on stmt: $20load_global.7 = global(enumerate: <class 'enumerate'>)
2023-01-03 17:17 DEBUG on stmt: $24load_attr.9 = getattr(value=arr, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $26call_function.10 = call $20load_global.7($24load_attr.9, func=$20load_global.7, args=[Var($24load_attr.9, arraymath.py:379)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $28get_iter.11 = getiter(value=$26call_function.10)
2023-01-03 17:17 DEBUG on stmt: $phi30.0 = $28get_iter.11
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 30
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2023-01-03 17:17 DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi32.1 = $30for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $30for_iter.3, 32, 56
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 32
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.4 = exhaust_iter(value=$phi32.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.2 = static_getitem(value=$32unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $32unpack_sequence.3 = static_getitem(value=$32unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $32unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: v = $32unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='c' stmt=$42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 32
2023-01-03 17:17 DEBUG idom 30 from label 32
2023-01-03 17:17 DEBUG find_def_from_bottom label 30
2023-01-03 17:17 DEBUG find_def_from_top label 30
2023-01-03 17:17 DEBUG insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
2023-01-03 17:17 DEBUG find_def_from_bottom label 0
2023-01-03 17:17 DEBUG incoming_def c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG find_def_from_bottom label 32
2023-01-03 17:17 DEBUG incoming_def c.1 = $42inplace_add.7
2023-01-03 17:17 DEBUG replaced with: $42inplace_add.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=v, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: c.1 = $42inplace_add.7
2023-01-03 17:17 DEBUG on stmt: out[idx] = c
2023-01-03 17:17 DEBUG find_def var='c' stmt=out[idx] = c
2023-01-03 17:17 DEBUG replaced with: out[idx] = c.1
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 56
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C45070>
2023-01-03 17:17 DEBUG on stmt: $58return_value.1 = cast(value=out)
2023-01-03 17:17 DEBUG on stmt: return $58return_value.1
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C70EB0>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F2C70C10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F2C70D60>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F2C706A0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8F2C70A60>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F2C70520>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8F2C69610>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=59)
           2	LOAD_FAST(arg=0, lineno=59)
           4	LOAD_FAST(arg=1, lineno=59)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=59)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=59)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=59)
2023-01-03 17:17 DEBUG stack ['$closure__locals__moving_average_v8__v20binary_subscr_9_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$closure__locals__moving_average_v8__v20binary_subscr_9_12.0', '$closure__locals__moving_average_v8__v32binary_subscr_16_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$closure__locals__moving_average_v8__v20binary_subscr_9_12.0'}), (4, {'res': '$closure__locals__moving_average_v8__v32binary_subscr_16_14.1'}), (6, {'lhs': '$closure__locals__moving_average_v8__v20binary_subscr_9_12.0', 'rhs': '$closure__locals__moving_average_v8__v32binary_subscr_16_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    closure__locals__moving_average_v8__v20binary_subscr_9_1 = arg(0, name=closure__locals__moving_average_v8__v20binary_subscr_9_1) ['closure__locals__moving_average_v8__v20binary_subscr_9_1']
    closure__locals__moving_average_v8__v32binary_subscr_16_1 = arg(1, name=closure__locals__moving_average_v8__v32binary_subscr_16_1) ['closure__locals__moving_average_v8__v32binary_subscr_16_1']
    $6binary_subtract.2 = closure__locals__moving_average_v8__v20binary_subscr_9_1 - closure__locals__moving_average_v8__v32binary_subscr_16_1 ['$6binary_subtract.2', 'closure__locals__moving_average_v8__v20binary_subscr_9_1', 'closure__locals__moving_average_v8__v32binary_subscr_16_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3C81790>
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v20binary_subscr_9_1 = arg(0, name=closure__locals__moving_average_v8__v20binary_subscr_9_1)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8__v32binary_subscr_16_1 = arg(1, name=closure__locals__moving_average_v8__v32binary_subscr_16_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = closure__locals__moving_average_v8__v20binary_subscr_9_1 - closure__locals__moving_average_v8__v32binary_subscr_16_1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F3C853A0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3C85A90>],
             'closure__locals__moving_average_v8__v20binary_subscr_9_1': [<numba.core.ir.Assign object at 0x000001C8F3C81F40>],
             'closure__locals__moving_average_v8__v32binary_subscr_16_1': [<numba.core.ir.Assign object at 0x000001C8F3C852B0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=58)
           2	LOAD_FAST(arg=1, lineno=58)
           4	LOAD_FAST(arg=0, lineno=58)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=58)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=58)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=58)
2023-01-03 17:17 DEBUG stack ['$closure__locals__moving_average_v8_ret_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$closure__locals__moving_average_v8_ret_12.0', '$closure__locals__moving_average_v8_n_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_true_divide.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$closure__locals__moving_average_v8_ret_12.0'}), (4, {'res': '$closure__locals__moving_average_v8_n_14.1'}), (6, {'lhs': '$closure__locals__moving_average_v8_ret_12.0', 'rhs': '$closure__locals__moving_average_v8_n_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    closure__locals__moving_average_v8_n_1 = arg(0, name=closure__locals__moving_average_v8_n_1) ['closure__locals__moving_average_v8_n_1']
    closure__locals__moving_average_v8_ret_1 = arg(1, name=closure__locals__moving_average_v8_ret_1) ['closure__locals__moving_average_v8_ret_1']
    $6binary_true_divide.2 = closure__locals__moving_average_v8_ret_1 / closure__locals__moving_average_v8_n_1 ['$6binary_true_divide.2', 'closure__locals__moving_average_v8_n_1', 'closure__locals__moving_average_v8_ret_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3D7CD60>
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8_n_1 = arg(0, name=closure__locals__moving_average_v8_n_1)
2023-01-03 17:17 DEBUG on stmt: closure__locals__moving_average_v8_ret_1 = arg(1, name=closure__locals__moving_average_v8_ret_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_true_divide.2 = closure__locals__moving_average_v8_ret_1 / closure__locals__moving_average_v8_n_1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x000001C8F3D81C10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3D81D90>],
             'closure__locals__moving_average_v8_n_1': [<numba.core.ir.Assign object at 0x000001C8F3D81070>],
             'closure__locals__moving_average_v8_ret_1': [<numba.core.ir.Assign object at 0x000001C8F3D81850>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEEE78E0>
2023-01-03 17:17 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-01-03 17:17 DEBUG on stmt: tmp1 = arg(1, name=tmp1)
2023-01-03 17:17 DEBUG on stmt: tmp2 = arg(2, name=tmp2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F3F0F220>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3F0F370>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3F00CD0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001C8CEEE7370>],
             'tmp1': [<numba.core.ir.Assign object at 0x000001C8F3E83580>],
             'tmp2': [<numba.core.ir.Assign object at 0x000001C8F3EEA220>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_ATTR(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_ATTR(arg=2, lineno=3538)
          10	LOAD_DEREF(arg=1, lineno=3538)
          12	LOAD_CONST(arg=1, lineno=3538)
          14	CALL_FUNCTION_KW(arg=2, lineno=3538)
          16	STORE_FAST(arg=3, lineno=3538)
          18	LOAD_DEREF(arg=0, lineno=3539)
          20	LOAD_FAST(arg=0, lineno=3539)
          22	LOAD_FAST(arg=1, lineno=3539)
          24	LOAD_FAST(arg=2, lineno=3539)
          26	LOAD_FAST(arg=3, lineno=3539)
          28	CALL_FUNCTION(arg=4, lineno=3539)
          30	RETURN_VALUE(arg=None, lineno=3539)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$cond6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4', '$const12.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=3, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$14call_function_kw.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=3539)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=4, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10', '$res26.11']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$28call_function.12']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$cond6.2'}), (8, {'item': '$cond6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'value': '$14call_function_kw.6'}), (18, {'res': '$18load_deref.7'}), (20, {'res': '$cond20.8'}), (22, {'res': '$x22.9'}), (24, {'res': '$y24.10'}), (26, {'res': '$res26.11'}), (28, {'func': '$18load_deref.7', 'args': ['$cond20.8', '$x22.9', '$y24.10', '$res26.11'], 'res': '$28call_function.12'}), (30, {'retval': '$28call_function.12', 'castval': '$30return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=cond, attr=shape) ['$8load_attr.3', 'cond']
    $10load_deref.4 = freevar(npty: int64)   ['$10load_deref.4']
    res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_attr.1', '$8load_attr.3', 'res']
    $18load_deref.7 = freevar(impl: <function _where_x_y_scalar at 0x000001C8CE6B3310>) ['$18load_deref.7']
    $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.7', '$28call_function.12', 'cond', 'res', 'x', 'y']
    $30return_value.13 = cast(value=$28call_function.12) ['$28call_function.12', '$30return_value.13']
    return $30return_value.13                ['$30return_value.13']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EF4580>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=cond, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.4 = freevar(npty: int64)
2023-01-03 17:17 DEBUG on stmt: res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $18load_deref.7 = freevar(impl: <function _where_x_y_scalar at 0x000001C8CE6B3310>)
2023-01-03 17:17 DEBUG on stmt: $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $30return_value.13 = cast(value=$28call_function.12)
2023-01-03 17:17 DEBUG on stmt: return $30return_value.13
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x000001C8F3E83A60>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x000001C8F3EEA400>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x000001C8F3F00070>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3E9FBB0>],
             '$30return_value.13': [<numba.core.ir.Assign object at 0x000001C8F3F0F5E0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001C8F3E9FF40>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001C8F3E83940>],
             'cond': [<numba.core.ir.Assign object at 0x000001C8F3EEAC40>],
             'res': [<numba.core.ir.Assign object at 0x000001C8F3EEA1C0>],
             'x': [<numba.core.ir.Assign object at 0x000001C8F3E9FEB0>],
             'y': [<numba.core.ir.Assign object at 0x000001C8F3E9FE80>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3F0FEB0>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F3E98BE0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3E98D30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3E98670>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8F3E98A30>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F3E984F0>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8F3E837F0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3506)
           2	LOAD_GLOBAL(arg=0, lineno=3506)
           4	LOAD_METHOD(arg=1, lineno=3506)
           6	LOAD_FAST(arg=0, lineno=3506)
           8	CALL_METHOD(arg=1, lineno=3506)
          10	GET_ITER(arg=None, lineno=3506)
>         12	FOR_ITER(arg=24, lineno=3506)
          14	UNPACK_SEQUENCE(arg=2, lineno=3506)
          16	STORE_FAST(arg=4, lineno=3506)
          18	STORE_FAST(arg=5, lineno=3506)
          20	LOAD_FAST(arg=5, lineno=3507)
          22	POP_JUMP_IF_FALSE(arg=28, lineno=3507)
          24	LOAD_FAST(arg=1, lineno=3507)
          26	JUMP_FORWARD(arg=2, lineno=3507)
>         28	LOAD_FAST(arg=2, lineno=3507)
>         30	LOAD_FAST(arg=3, lineno=3507)
          32	LOAD_FAST(arg=4, lineno=3507)
          34	STORE_SUBSCR(arg=None, lineno=3507)
          36	JUMP_ABSOLUTE(arg=12, lineno=3507)
>         38	LOAD_FAST(arg=3, lineno=3508)
          40	RETURN_VALUE(arg=None, lineno=3508)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3506)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3506)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$cond6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=GET_ITER(arg=None, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$8call_method.3']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi12.0']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=FOR_ITER(arg=24, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$phi12.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=3, lineno=3508)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=3508)
2023-01-03 17:17 DEBUG stack ['$res38.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=14 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi14.0', '$phi14.1']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$phi14.1']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$14unpack_sequence.3', '$14unpack_sequence.2']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=5, lineno=3506)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$14unpack_sequence.3']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi14.0']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=28, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$c20.5']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=24, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=28, stack=('$phi14.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi24.0']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi24.0']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=2, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi24.0', '$x24.1']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=30, stack=('$phi24.0', '$x24.1'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=30 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi28.0']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi28.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=30, stack=('$phi28.0', '$y28.1'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=30 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi30.0', '$phi30.1']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi30.0', '$phi30.1']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi30.0', '$phi30.1', '$res30.2']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi30.0', '$phi30.1', '$res30.2', '$idx32.3']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=JUMP_ABSOLUTE(arg=12, lineno=3507)
2023-01-03 17:17 DEBUG stack ['$phi30.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=12, stack=('$phi30.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=24 nstack_initial=1): set(),
             State(pc_initial=28 nstack_initial=1): set(),
             State(pc_initial=30 nstack_initial=2): {'$phi30.1'},
             State(pc_initial=38 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1),
 '$phi30.1': State(pc_initial=24 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi28.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi30.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
                          ('$y28.1', State(pc_initial=28 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))},
 '$phi30.1': {('$x24.1', State(pc_initial=24 nstack_initial=1)),
              ('$y28.1', State(pc_initial=28 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'},
             State(pc_initial=24 nstack_initial=1): {'$phi30.1': '$x24.1'},
             State(pc_initial=28 nstack_initial=1): {'$phi30.1': '$y28.1'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$cond6.2'}), (8, {'func': '$4load_method.1', 'args': ['$cond6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 14: ('$phi12.0', '$12for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'iterable': '$phi14.1', 'stores': ['$14unpack_sequence.2', '$14unpack_sequence.3'], 'tupleobj': '$14unpack_sequence.4'}), (16, {'value': '$14unpack_sequence.2'}), (18, {'value': '$14unpack_sequence.3'}), (20, {'res': '$c20.5'}), (22, {'pred': '$c20.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi14.0',), 28: ('$phi14.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$x24.1'}), (26, {})), outgoing_phis={'$phi30.1': '$x24.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi24.0', '$x24.1')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'res': '$y28.1'}),), outgoing_phis={'$phi30.1': '$y28.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi28.0', '$y28.1')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=30 nstack_initial=2):
AdaptBlockInfo(insts=((30, {'res': '$res30.2'}), (32, {'res': '$idx32.3'}), (34, {'target': '$res30.2', 'index': '$idx32.3', 'value': '$phi30.1'}), (36, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi30.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$res38.0'}), (40, {'retval': '$res38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    res = arg(3, name=res)                   ['res']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'cond']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 38             ['$12for_iter.3']
label 14:
    $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2) ['$14unpack_sequence.4', '$phi14.1']
    $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.2', '$14unpack_sequence.4']
    $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.3', '$14unpack_sequence.4']
    idx = $14unpack_sequence.2               ['$14unpack_sequence.2', 'idx']
    c = $14unpack_sequence.3                 ['$14unpack_sequence.3', 'c']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None) ['$22pred', 'bool22', 'c']
    branch $22pred, 24, 28                   ['$22pred']
label 24:
    $phi30.1 = x                             ['$phi30.1', 'x']
    jump 30                                  []
label 28:
    $phi30.1 = y                             ['$phi30.1', 'y']
    jump 30                                  []
label 30:
    res[idx] = $phi30.1                      ['$phi30.1', 'idx', 'res']
    jump 12                                  []
label 38:
    $40return_value.1 = cast(value=res)      ['$40return_value.1', 'res']
    return $40return_value.1                 ['$40return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EED820>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EED820>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EED820>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 28
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EED820>
2023-01-03 17:17 DEBUG on stmt: $phi30.1 = x
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 28
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EED820>
2023-01-03 17:17 DEBUG on stmt: $phi30.1 = y
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 30
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EED820>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi30.1
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 38
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3EED820>
2023-01-03 17:17 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $40return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x000001C8F3EDF460>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F3EDF7C0>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F3EDF8E0>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F3EDFA00>],
             '$14unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001C8F3EDFE50>],
             '$14unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001C8F3EDFF70>],
             '$14unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001C8F3EDFD00>],
             '$22pred': [<numba.core.ir.Assign object at 0x000001C8F3ED2580>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3EEDE80>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x000001C8F3ED1220>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8F3EDF040>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x000001C8F3EDF310>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x000001C8F3EDF190>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x000001C8F3EDF6D0>],
             '$phi30.1': [<numba.core.ir.Assign object at 0x000001C8F3ED2790>,
                          <numba.core.ir.Assign object at 0x000001C8F3ED2A60>],
             'bool22': [<numba.core.ir.Assign object at 0x000001C8F3ED2460>],
             'c': [<numba.core.ir.Assign object at 0x000001C8F3ED21C0>],
             'cond': [<numba.core.ir.Assign object at 0x000001C8F3EED9A0>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8F3ED20A0>],
             'res': [<numba.core.ir.Assign object at 0x000001C8F3EEDD00>],
             'x': [<numba.core.ir.Assign object at 0x000001C8F3EEDAC0>],
             'y': [<numba.core.ir.Assign object at 0x000001C8F3EEDBE0>]})
2023-01-03 17:17 DEBUG SSA violators {'$phi30.1'}
2023-01-03 17:17 DEBUG Fix SSA violator on var $phi30.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 28
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $phi30.1 = x
2023-01-03 17:17 DEBUG first assign: $phi30.1
2023-01-03 17:17 DEBUG replaced with: $phi30.1 = x
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 28
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $phi30.1 = y
2023-01-03 17:17 DEBUG replaced with: $phi30.1.1 = y
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 30
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi30.1
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 38
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $40return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {24: [<numba.core.ir.Assign object at 0x000001C8F3ED1400>],
             28: [<numba.core.ir.Assign object at 0x000001C8F3ED1970>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3506)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 38
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3506),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 28
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $phi30.1 = x
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 28
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $phi30.1.1 = y
2023-01-03 17:17 DEBUG on stmt: jump 30
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 30
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi30.1
2023-01-03 17:17 DEBUG find_def var='$phi30.1' stmt=res[idx] = $phi30.1
2023-01-03 17:17 DEBUG find_def_from_top label 30
2023-01-03 17:17 DEBUG insert phi node $phi30.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
2023-01-03 17:17 DEBUG find_def_from_bottom label 24
2023-01-03 17:17 DEBUG incoming_def $phi30.1 = x
2023-01-03 17:17 DEBUG find_def_from_bottom label 28
2023-01-03 17:17 DEBUG incoming_def $phi30.1.1 = y
2023-01-03 17:17 DEBUG replaced with: res[idx] = $phi30.1.2
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 38
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3EED160>
2023-01-03 17:17 DEBUG on stmt: $40return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $40return_value.1
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3F9D9D0>
2023-01-03 17:17 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-01-03 17:17 DEBUG on stmt: tmp1 = arg(1, name=tmp1)
2023-01-03 17:17 DEBUG on stmt: tmp2 = arg(2, name=tmp2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F3FA1790>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3FA18E0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3FA1280>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001C8F3F9D6D0>],
             'tmp1': [<numba.core.ir.Assign object at 0x000001C8CED4E970>],
             'tmp2': [<numba.core.ir.Assign object at 0x000001C8F3FA1100>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_ATTR(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_ATTR(arg=2, lineno=3538)
          10	LOAD_DEREF(arg=1, lineno=3538)
          12	LOAD_CONST(arg=1, lineno=3538)
          14	CALL_FUNCTION_KW(arg=2, lineno=3538)
          16	STORE_FAST(arg=3, lineno=3538)
          18	LOAD_DEREF(arg=0, lineno=3539)
          20	LOAD_FAST(arg=0, lineno=3539)
          22	LOAD_FAST(arg=1, lineno=3539)
          24	LOAD_FAST(arg=2, lineno=3539)
          26	LOAD_FAST(arg=3, lineno=3539)
          28	CALL_FUNCTION(arg=4, lineno=3539)
          30	RETURN_VALUE(arg=None, lineno=3539)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$cond6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4', '$const12.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=3, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$14call_function_kw.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=3539)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=4, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10', '$res26.11']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$28call_function.12']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$cond6.2'}), (8, {'item': '$cond6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'value': '$14call_function_kw.6'}), (18, {'res': '$18load_deref.7'}), (20, {'res': '$cond20.8'}), (22, {'res': '$x22.9'}), (24, {'res': '$y24.10'}), (26, {'res': '$res26.11'}), (28, {'func': '$18load_deref.7', 'args': ['$cond20.8', '$x22.9', '$y24.10', '$res26.11'], 'res': '$28call_function.12'}), (30, {'retval': '$28call_function.12', 'castval': '$30return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=cond, attr=shape) ['$8load_attr.3', 'cond']
    $10load_deref.4 = freevar(npty: int64)   ['$10load_deref.4']
    res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_attr.1', '$8load_attr.3', 'res']
    $18load_deref.7 = freevar(impl: <function _where_x_scalar at 0x000001C8CE6B34C0>) ['$18load_deref.7']
    $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.7', '$28call_function.12', 'cond', 'res', 'x', 'y']
    $30return_value.13 = cast(value=$28call_function.12) ['$28call_function.12', '$30return_value.13']
    return $30return_value.13                ['$30return_value.13']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC0940>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=cond, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.4 = freevar(npty: int64)
2023-01-03 17:17 DEBUG on stmt: res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $18load_deref.7 = freevar(impl: <function _where_x_scalar at 0x000001C8CE6B34C0>)
2023-01-03 17:17 DEBUG on stmt: $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $30return_value.13 = cast(value=$28call_function.12)
2023-01-03 17:17 DEBUG on stmt: return $30return_value.13
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x000001C8F3FBC1C0>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x000001C8F3FBC7C0>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x000001C8F3FBCDF0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3FB6BE0>],
             '$30return_value.13': [<numba.core.ir.Assign object at 0x000001C8F3FBCF40>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001C8F3FB6D60>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001C8F3FBC040>],
             'cond': [<numba.core.ir.Assign object at 0x000001C8F3FB6100>],
             'res': [<numba.core.ir.Assign object at 0x000001C8F3FBC670>],
             'x': [<numba.core.ir.Assign object at 0x000001C8F3FB6940>],
             'y': [<numba.core.ir.Assign object at 0x000001C8F3FB6A60>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3513)
           2	LOAD_GLOBAL(arg=0, lineno=3513)
           4	LOAD_METHOD(arg=1, lineno=3513)
           6	LOAD_FAST(arg=0, lineno=3513)
           8	CALL_METHOD(arg=1, lineno=3513)
          10	GET_ITER(arg=None, lineno=3513)
>         12	FOR_ITER(arg=28, lineno=3513)
          14	UNPACK_SEQUENCE(arg=2, lineno=3513)
          16	STORE_FAST(arg=4, lineno=3513)
          18	STORE_FAST(arg=5, lineno=3513)
          20	LOAD_FAST(arg=5, lineno=3514)
          22	POP_JUMP_IF_FALSE(arg=28, lineno=3514)
          24	LOAD_FAST(arg=1, lineno=3514)
          26	JUMP_FORWARD(arg=6, lineno=3514)
>         28	LOAD_FAST(arg=2, lineno=3514)
          30	LOAD_FAST(arg=4, lineno=3514)
          32	BINARY_SUBSCR(arg=None, lineno=3514)
>         34	LOAD_FAST(arg=3, lineno=3514)
          36	LOAD_FAST(arg=4, lineno=3514)
          38	STORE_SUBSCR(arg=None, lineno=3514)
          40	JUMP_ABSOLUTE(arg=12, lineno=3514)
>         42	LOAD_FAST(arg=3, lineno=3515)
          44	RETURN_VALUE(arg=None, lineno=3515)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3513)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3513)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$cond6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=GET_ITER(arg=None, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$8call_method.3']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi12.0']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=FOR_ITER(arg=28, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$phi12.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=3515)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=3515)
2023-01-03 17:17 DEBUG stack ['$res42.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=14 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi14.0', '$phi14.1']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$phi14.1']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$14unpack_sequence.3', '$14unpack_sequence.2']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=5, lineno=3513)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$14unpack_sequence.3']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi14.0']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=28, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$c20.5']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=24, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=28, stack=('$phi14.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi24.0']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi24.0']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=JUMP_FORWARD(arg=6, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi24.0', '$x24.1']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=34, stack=('$phi24.0', '$x24.1'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=34 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi28.0']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi28.0']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=4, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi28.0', '$y28.1']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi28.0', '$y28.1', '$idx30.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=34, stack=('$phi28.0', '$32binary_subscr.3'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=34 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi34.0', '$phi34.1']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$phi34.1']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2', '$idx36.3']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=12, lineno=3514)
2023-01-03 17:17 DEBUG stack ['$phi34.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=12, stack=('$phi34.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=24 nstack_initial=1): set(),
             State(pc_initial=28 nstack_initial=1): set(),
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1),
 '$phi34.1': State(pc_initial=24 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi28.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi34.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi28.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32binary_subscr.3',
                           State(pc_initial=28 nstack_initial=1)),
                          ('$x24.1', State(pc_initial=24 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))},
 '$phi34.1': {('$32binary_subscr.3', State(pc_initial=28 nstack_initial=1)),
              ('$x24.1', State(pc_initial=24 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'},
             State(pc_initial=24 nstack_initial=1): {'$phi34.1': '$x24.1'},
             State(pc_initial=28 nstack_initial=1): {'$phi34.1': '$32binary_subscr.3'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$cond6.2'}), (8, {'func': '$4load_method.1', 'args': ['$cond6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 14: ('$phi12.0', '$12for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'iterable': '$phi14.1', 'stores': ['$14unpack_sequence.2', '$14unpack_sequence.3'], 'tupleobj': '$14unpack_sequence.4'}), (16, {'value': '$14unpack_sequence.2'}), (18, {'value': '$14unpack_sequence.3'}), (20, {'res': '$c20.5'}), (22, {'pred': '$c20.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi14.0',), 28: ('$phi14.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$x24.1'}), (26, {})), outgoing_phis={'$phi34.1': '$x24.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi24.0', '$x24.1')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'res': '$y28.1'}), (30, {'res': '$idx30.2'}), (32, {'index': '$idx30.2', 'target': '$y28.1', 'res': '$32binary_subscr.3'})), outgoing_phis={'$phi34.1': '$32binary_subscr.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi28.0', '$32binary_subscr.3')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'res': '$res34.2'}), (36, {'res': '$idx36.3'}), (38, {'target': '$res34.2', 'index': '$idx36.3', 'value': '$phi34.1'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi34.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$res42.0'}), (44, {'retval': '$res42.0', 'castval': '$44return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    res = arg(3, name=res)                   ['res']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'cond']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 42             ['$12for_iter.3']
label 14:
    $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2) ['$14unpack_sequence.4', '$phi14.1']
    $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.2', '$14unpack_sequence.4']
    $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.3', '$14unpack_sequence.4']
    idx = $14unpack_sequence.2               ['$14unpack_sequence.2', 'idx']
    c = $14unpack_sequence.3                 ['$14unpack_sequence.3', 'c']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None) ['$22pred', 'bool22', 'c']
    branch $22pred, 24, 28                   ['$22pred']
label 24:
    $phi34.1 = x                             ['$phi34.1', 'x']
    jump 34                                  []
label 28:
    $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>) ['$32binary_subscr.3', 'idx', 'y']
    $phi34.1 = $32binary_subscr.3            ['$32binary_subscr.3', '$phi34.1']
    jump 34                                  []
label 34:
    res[idx] = $phi34.1                      ['$phi34.1', 'idx', 'res']
    jump 12                                  []
label 42:
    $44return_value.1 = cast(value=res)      ['$44return_value.1', 'res']
    return $44return_value.1                 ['$44return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC4280>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC4280>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC4280>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 28
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC4280>
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = x
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 28
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC4280>
2023-01-03 17:17 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = $32binary_subscr.3
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC4280>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi34.1
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 42
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FC4280>
2023-01-03 17:17 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $44return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x000001C8F3FCADC0>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F3FD1160>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F3FD1280>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F3FD13A0>],
             '$14unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001C8F3FD17F0>],
             '$14unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001C8F3FD1910>],
             '$14unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001C8F3FD16A0>],
             '$22pred': [<numba.core.ir.Assign object at 0x000001C8F3FCA0D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3FCA820>],
             '$32binary_subscr.3': [<numba.core.ir.Assign object at 0x000001C8F3FC0340>],
             '$44return_value.1': [<numba.core.ir.Assign object at 0x000001C8F3FD52E0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8F3FCA9A0>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x000001C8F3FCAC70>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x000001C8F3FCA1F0>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x000001C8F3FD1070>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x000001C8F3FC4F40>,
                          <numba.core.ir.Assign object at 0x000001C8F3FC4670>],
             'bool22': [<numba.core.ir.Assign object at 0x000001C8F3FD1DC0>],
             'c': [<numba.core.ir.Assign object at 0x000001C8F3FD1B20>],
             'cond': [<numba.core.ir.Assign object at 0x000001C8F3FCA340>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8F3FD1A00>],
             'res': [<numba.core.ir.Assign object at 0x000001C8F3FCA6A0>],
             'x': [<numba.core.ir.Assign object at 0x000001C8F3FCA460>],
             'y': [<numba.core.ir.Assign object at 0x000001C8F3FCA580>]})
2023-01-03 17:17 DEBUG SSA violators {'$phi34.1'}
2023-01-03 17:17 DEBUG Fix SSA violator on var $phi34.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 28
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = x
2023-01-03 17:17 DEBUG first assign: $phi34.1
2023-01-03 17:17 DEBUG replaced with: $phi34.1 = x
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 28
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = $32binary_subscr.3
2023-01-03 17:17 DEBUG replaced with: $phi34.1.1 = $32binary_subscr.3
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi34.1
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 42
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $44return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {24: [<numba.core.ir.Assign object at 0x000001C8F3FD9880>],
             28: [<numba.core.ir.Assign object at 0x000001C8F3FD92E0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3513)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3513),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 28
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = x
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 28
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $32binary_subscr.3 = getitem(value=y, index=idx, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $phi34.1.1 = $32binary_subscr.3
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi34.1
2023-01-03 17:17 DEBUG find_def var='$phi34.1' stmt=res[idx] = $phi34.1
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG insert phi node $phi34.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 24
2023-01-03 17:17 DEBUG incoming_def $phi34.1 = x
2023-01-03 17:17 DEBUG find_def_from_bottom label 28
2023-01-03 17:17 DEBUG incoming_def $phi34.1.1 = $32binary_subscr.3
2023-01-03 17:17 DEBUG replaced with: res[idx] = $phi34.1.2
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 42
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FD91C0>
2023-01-03 17:17 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $44return_value.1
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2226)
           2	LOAD_GLOBAL(arg=0, lineno=2226)
           4	LOAD_METHOD(arg=1, lineno=2226)
           6	LOAD_FAST(arg=0, lineno=2226)
           8	CALL_METHOD(arg=1, lineno=2226)
          10	STORE_FAST(arg=2, lineno=2226)
          12	LOAD_GLOBAL(arg=0, lineno=2227)
          14	LOAD_ATTR(arg=2, lineno=2227)
          16	LOAD_FAST(arg=2, lineno=2227)
          18	LOAD_ATTR(arg=3, lineno=2227)
          20	LOAD_FAST(arg=2, lineno=2227)
          22	LOAD_ATTR(arg=4, lineno=2227)
          24	LOAD_CONST(arg=1, lineno=2227)
          26	CALL_FUNCTION_KW(arg=2, lineno=2227)
          28	STORE_FAST(arg=3, lineno=2227)
          30	LOAD_FAST(arg=2, lineno=2230)
          32	LOAD_ATTR(arg=5, lineno=2230)
          34	STORE_FAST(arg=4, lineno=2230)
          36	LOAD_GLOBAL(arg=6, lineno=2231)
          38	LOAD_FAST(arg=2, lineno=2231)
          40	LOAD_ATTR(arg=7, lineno=2231)
          42	CALL_FUNCTION(arg=1, lineno=2231)
          44	GET_ITER(arg=None, lineno=2231)
>         46	FOR_ITER(arg=32, lineno=2231)
          48	STORE_FAST(arg=5, lineno=2231)
          50	LOAD_FAST(arg=5, lineno=2232)
          52	LOAD_FAST(arg=1, lineno=2232)
          54	BINARY_ADD(arg=None, lineno=2232)
          56	LOAD_FAST(arg=2, lineno=2232)
          58	LOAD_ATTR(arg=7, lineno=2232)
          60	BINARY_MODULO(arg=None, lineno=2232)
          62	STORE_FAST(arg=6, lineno=2232)
          64	LOAD_FAST(arg=4, lineno=2233)
          66	LOAD_FAST(arg=5, lineno=2233)
          68	BINARY_SUBSCR(arg=None, lineno=2233)
          70	LOAD_FAST(arg=3, lineno=2233)
          72	LOAD_ATTR(arg=5, lineno=2233)
          74	LOAD_FAST(arg=6, lineno=2233)
          76	STORE_SUBSCR(arg=None, lineno=2233)
          78	JUMP_ABSOLUTE(arg=46, lineno=2233)
>         80	LOAD_FAST(arg=3, lineno=2235)
          82	RETURN_VALUE(arg=None, lineno=2235)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$a6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$8call_method.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2227)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$12load_global.4']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=3, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$arr16.6']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$arr20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=CALL_FUNCTION_KW(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', '$const24.10']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$26call_function_kw.11']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2230)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=5, lineno=2230)
2023-01-03 17:17 DEBUG stack ['$arr30.12']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2230)
2023-01-03 17:17 DEBUG stack ['$32load_attr.13']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=6, lineno=2231)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=7, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14', '$arr38.15']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=1, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14', '$40load_attr.16']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$42call_function.17']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.18',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi46.0']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=FOR_ITER(arg=32, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$phi46.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2235)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=2235)
2023-01-03 17:17 DEBUG stack ['$out80.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=48 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi48.0', '$phi48.1']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=STORE_FAST(arg=5, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$phi48.1']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$i50.2']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$i50.2', '$shift52.3']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4']
2023-01-03 17:17 DEBUG dispatch pc=58, inst=LOAD_ATTR(arg=7, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4', '$arr56.5']
2023-01-03 17:17 DEBUG dispatch pc=60, inst=BINARY_MODULO(arg=None, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4', '$58load_attr.6']
2023-01-03 17:17 DEBUG dispatch pc=62, inst=STORE_FAST(arg=6, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$60binary_modulo.7']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$arr_flat64.8']
2023-01-03 17:17 DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$arr_flat64.8', '$i66.9']
2023-01-03 17:17 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=LOAD_ATTR(arg=5, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$out70.11']
2023-01-03 17:17 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=6, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12']
2023-01-03 17:17 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12', '$idx74.13']
2023-01-03 17:17 DEBUG dispatch pc=78, inst=JUMP_ABSOLUTE(arg=46, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=80 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi46.0': {('$44get_iter.18', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.18'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_attr.7'}), (20, {'res': '$arr20.8'}), (22, {'item': '$arr20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'func': '$14load_attr.5', 'args': ['$18load_attr.7', '$22load_attr.9'], 'names': '$const24.10', 'res': '$26call_function_kw.11'}), (28, {'value': '$26call_function_kw.11'}), (30, {'res': '$arr30.12'}), (32, {'item': '$arr30.12', 'res': '$32load_attr.13'}), (34, {'value': '$32load_attr.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$arr38.15'}), (40, {'item': '$arr38.15', 'res': '$40load_attr.16'}), (42, {'func': '$36load_global.14', 'args': ['$40load_attr.16'], 'res': '$42call_function.17'}), (44, {'value': '$42call_function.17', 'res': '$44get_iter.18'})), outgoing_phis={'$phi46.0': '$44get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.18',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 48: ('$phi46.0', '$46for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$i50.2'}), (52, {'res': '$shift52.3'}), (54, {'lhs': '$i50.2', 'rhs': '$shift52.3', 'res': '$54binary_add.4'}), (56, {'res': '$arr56.5'}), (58, {'item': '$arr56.5', 'res': '$58load_attr.6'}), (60, {'lhs': '$54binary_add.4', 'rhs': '$58load_attr.6', 'res': '$60binary_modulo.7'}), (62, {'value': '$60binary_modulo.7'}), (64, {'res': '$arr_flat64.8'}), (66, {'res': '$i66.9'}), (68, {'index': '$i66.9', 'target': '$arr_flat64.8', 'res': '$68binary_subscr.10'}), (70, {'res': '$out70.11'}), (72, {'item': '$out70.11', 'res': '$72load_attr.12'}), (74, {'res': '$idx74.13'}), (76, {'target': '$72load_attr.12', 'index': '$idx74.13', 'value': '$68binary_subscr.10'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$out80.0'}), (82, {'retval': '$out80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    shift = arg(1, name=shift)               ['shift']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'arr']
    $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.4']
    $14load_attr.5 = getattr(value=$12load_global.4, attr=empty) ['$12load_global.4', '$14load_attr.5']
    $18load_attr.7 = getattr(value=arr, attr=shape) ['$18load_attr.7', 'arr']
    $22load_attr.9 = getattr(value=arr, attr=dtype) ['$22load_attr.9', 'arr']
    out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', 'out']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $36load_global.14 = global(range: <class 'range'>) ['$36load_global.14']
    $40load_attr.16 = getattr(value=arr, attr=size) ['$40load_attr.16', 'arr']
    $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.14', '$40load_attr.16', '$42call_function.17']
    $44get_iter.18 = getiter(value=$42call_function.17) ['$42call_function.17', '$44get_iter.18']
    $phi46.0 = $44get_iter.18                ['$44get_iter.18', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 80             ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    $54binary_add.4 = i + shift              ['$54binary_add.4', 'i', 'shift']
    $58load_attr.6 = getattr(value=arr, attr=size) ['$58load_attr.6', 'arr']
    idx = $54binary_add.4 % $58load_attr.6   ['$54binary_add.4', '$58load_attr.6', 'idx']
    $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>) ['$68binary_subscr.10', 'arr_flat', 'i']
    $72load_attr.12 = getattr(value=out, attr=flat) ['$72load_attr.12', 'out']
    $72load_attr.12[idx] = $68binary_subscr.10 ['$68binary_subscr.10', '$72load_attr.12', 'idx']
    jump 46                                  []
label 80:
    $82return_value.1 = cast(value=out)      ['$82return_value.1', 'out']
    return $82return_value.1                 ['$82return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FAADC0>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: shift = arg(1, name=shift)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
2023-01-03 17:17 DEBUG on stmt: arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $18load_attr.7 = getattr(value=arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $22load_attr.9 = getattr(value=arr, attr=dtype)
2023-01-03 17:17 DEBUG on stmt: out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $36load_global.14 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $40load_attr.16 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $44get_iter.18 = getiter(value=$42call_function.17)
2023-01-03 17:17 DEBUG on stmt: $phi46.0 = $44get_iter.18
2023-01-03 17:17 DEBUG on stmt: jump 46
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 46
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FAADC0>
2023-01-03 17:17 DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
2023-01-03 17:17 DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi48.1 = $46for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $46for_iter.3, 48, 80
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FAADC0>
2023-01-03 17:17 DEBUG on stmt: i = $phi48.1
2023-01-03 17:17 DEBUG on stmt: $54binary_add.4 = i + shift
2023-01-03 17:17 DEBUG on stmt: $58load_attr.6 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: idx = $54binary_add.4 % $58load_attr.6
2023-01-03 17:17 DEBUG on stmt: $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $72load_attr.12 = getattr(value=out, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $72load_attr.12[idx] = $68binary_subscr.10
2023-01-03 17:17 DEBUG on stmt: jump 46
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 80
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FAADC0>
2023-01-03 17:17 DEBUG on stmt: $82return_value.1 = cast(value=out)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x000001C8F405DA90>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x000001C8F405DC10>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x000001C8F405DEB0>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x000001C8F4062190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F405D3D0>],
             '$36load_global.14': [<numba.core.ir.Assign object at 0x000001C8F4062B50>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x000001C8F4062DF0>],
             '$42call_function.17': [<numba.core.ir.Assign object at 0x000001C8F4062FA0>],
             '$44get_iter.18': [<numba.core.ir.Assign object at 0x000001C8F4064130>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F40641F0>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F4064310>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F4064430>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8F405D550>],
             '$54binary_add.4': [<numba.core.ir.Assign object at 0x000001C8F4064A90>],
             '$58load_attr.6': [<numba.core.ir.Assign object at 0x000001C8F4064D30>],
             '$68binary_subscr.10': [<numba.core.ir.Assign object at 0x000001C8F4066400>],
             '$72load_attr.12': [<numba.core.ir.Assign object at 0x000001C8F40666A0>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x000001C8F40669A0>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x000001C8F405D910>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x000001C8F40518B0>],
             'a': [<numba.core.ir.Assign object at 0x000001C8F405D130>],
             'arr': [<numba.core.ir.Assign object at 0x000001C8F405D820>],
             'arr_flat': [<numba.core.ir.Assign object at 0x000001C8F40628B0>],
             'i': [<numba.core.ir.Assign object at 0x000001C8F40646D0>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8F4064EB0>],
             'out': [<numba.core.ir.Assign object at 0x000001C8F4062640>],
             'shift': [<numba.core.ir.Assign object at 0x000001C8F405D250>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4428)
           2	LOAD_FAST(arg=0, lineno=4428)
           4	RETURN_VALUE(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4428)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG stack ['$a2.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F400FBE0>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $4return_value.1 = cast(value=a)
2023-01-03 17:17 DEBUG on stmt: return $4return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x000001C8F403A0D0>],
             'a': [<numba.core.ir.Assign object at 0x000001C8F403AB80>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F403ABB0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F402CA60>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F3FF2790>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3FF2550>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3FC0FA0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8F3FF2610>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F3FC0DC0>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8F400FBE0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2226)
           2	LOAD_GLOBAL(arg=0, lineno=2226)
           4	LOAD_METHOD(arg=1, lineno=2226)
           6	LOAD_FAST(arg=0, lineno=2226)
           8	CALL_METHOD(arg=1, lineno=2226)
          10	STORE_FAST(arg=2, lineno=2226)
          12	LOAD_GLOBAL(arg=0, lineno=2227)
          14	LOAD_ATTR(arg=2, lineno=2227)
          16	LOAD_FAST(arg=2, lineno=2227)
          18	LOAD_ATTR(arg=3, lineno=2227)
          20	LOAD_FAST(arg=2, lineno=2227)
          22	LOAD_ATTR(arg=4, lineno=2227)
          24	LOAD_CONST(arg=1, lineno=2227)
          26	CALL_FUNCTION_KW(arg=2, lineno=2227)
          28	STORE_FAST(arg=3, lineno=2227)
          30	LOAD_FAST(arg=2, lineno=2230)
          32	LOAD_ATTR(arg=5, lineno=2230)
          34	STORE_FAST(arg=4, lineno=2230)
          36	LOAD_GLOBAL(arg=6, lineno=2231)
          38	LOAD_FAST(arg=2, lineno=2231)
          40	LOAD_ATTR(arg=7, lineno=2231)
          42	CALL_FUNCTION(arg=1, lineno=2231)
          44	GET_ITER(arg=None, lineno=2231)
>         46	FOR_ITER(arg=32, lineno=2231)
          48	STORE_FAST(arg=5, lineno=2231)
          50	LOAD_FAST(arg=5, lineno=2232)
          52	LOAD_FAST(arg=1, lineno=2232)
          54	BINARY_ADD(arg=None, lineno=2232)
          56	LOAD_FAST(arg=2, lineno=2232)
          58	LOAD_ATTR(arg=7, lineno=2232)
          60	BINARY_MODULO(arg=None, lineno=2232)
          62	STORE_FAST(arg=6, lineno=2232)
          64	LOAD_FAST(arg=4, lineno=2233)
          66	LOAD_FAST(arg=5, lineno=2233)
          68	BINARY_SUBSCR(arg=None, lineno=2233)
          70	LOAD_FAST(arg=3, lineno=2233)
          72	LOAD_ATTR(arg=5, lineno=2233)
          74	LOAD_FAST(arg=6, lineno=2233)
          76	STORE_SUBSCR(arg=None, lineno=2233)
          78	JUMP_ABSOLUTE(arg=46, lineno=2233)
>         80	LOAD_FAST(arg=3, lineno=2235)
          82	RETURN_VALUE(arg=None, lineno=2235)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$a6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=STORE_FAST(arg=2, lineno=2226)
2023-01-03 17:17 DEBUG stack ['$8call_method.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2227)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$12load_global.4']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=3, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$arr16.6']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=4, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$arr20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=CALL_FUNCTION_KW(arg=2, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', '$const24.10']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=2227)
2023-01-03 17:17 DEBUG stack ['$26call_function_kw.11']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=2230)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=5, lineno=2230)
2023-01-03 17:17 DEBUG stack ['$arr30.12']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2230)
2023-01-03 17:17 DEBUG stack ['$32load_attr.13']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=6, lineno=2231)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=7, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14', '$arr38.15']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=1, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$36load_global.14', '$40load_attr.16']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$42call_function.17']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.18',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi46.0']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=FOR_ITER(arg=32, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$phi46.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=2235)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=2235)
2023-01-03 17:17 DEBUG stack ['$out80.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=48 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi48.0', '$phi48.1']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=STORE_FAST(arg=5, lineno=2231)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$phi48.1']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$i50.2']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$i50.2', '$shift52.3']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4']
2023-01-03 17:17 DEBUG dispatch pc=58, inst=LOAD_ATTR(arg=7, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4', '$arr56.5']
2023-01-03 17:17 DEBUG dispatch pc=60, inst=BINARY_MODULO(arg=None, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$54binary_add.4', '$58load_attr.6']
2023-01-03 17:17 DEBUG dispatch pc=62, inst=STORE_FAST(arg=6, lineno=2232)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$60binary_modulo.7']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$arr_flat64.8']
2023-01-03 17:17 DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$arr_flat64.8', '$i66.9']
2023-01-03 17:17 DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=LOAD_ATTR(arg=5, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$out70.11']
2023-01-03 17:17 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=6, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12']
2023-01-03 17:17 DEBUG dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0', '$68binary_subscr.10', '$72load_attr.12', '$idx74.13']
2023-01-03 17:17 DEBUG dispatch pc=78, inst=JUMP_ABSOLUTE(arg=46, lineno=2233)
2023-01-03 17:17 DEBUG stack ['$phi48.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=80 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi46.0': State(pc_initial=0 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.18',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi46.0': {('$44get_iter.18', State(pc_initial=0 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi46.0': '$44get_iter.18'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_attr.7'}), (20, {'res': '$arr20.8'}), (22, {'item': '$arr20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'func': '$14load_attr.5', 'args': ['$18load_attr.7', '$22load_attr.9'], 'names': '$const24.10', 'res': '$26call_function_kw.11'}), (28, {'value': '$26call_function_kw.11'}), (30, {'res': '$arr30.12'}), (32, {'item': '$arr30.12', 'res': '$32load_attr.13'}), (34, {'value': '$32load_attr.13'}), (36, {'res': '$36load_global.14'}), (38, {'res': '$arr38.15'}), (40, {'item': '$arr38.15', 'res': '$40load_attr.16'}), (42, {'func': '$36load_global.14', 'args': ['$40load_attr.16'], 'res': '$42call_function.17'}), (44, {'value': '$42call_function.17', 'res': '$44get_iter.18'})), outgoing_phis={'$phi46.0': '$44get_iter.18'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.18',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 48: ('$phi46.0', '$46for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$i50.2'}), (52, {'res': '$shift52.3'}), (54, {'lhs': '$i50.2', 'rhs': '$shift52.3', 'res': '$54binary_add.4'}), (56, {'res': '$arr56.5'}), (58, {'item': '$arr56.5', 'res': '$58load_attr.6'}), (60, {'lhs': '$54binary_add.4', 'rhs': '$58load_attr.6', 'res': '$60binary_modulo.7'}), (62, {'value': '$60binary_modulo.7'}), (64, {'res': '$arr_flat64.8'}), (66, {'res': '$i66.9'}), (68, {'index': '$i66.9', 'target': '$arr_flat64.8', 'res': '$68binary_subscr.10'}), (70, {'res': '$out70.11'}), (72, {'item': '$out70.11', 'res': '$72load_attr.12'}), (74, {'res': '$idx74.13'}), (76, {'target': '$72load_attr.12', 'index': '$idx74.13', 'value': '$68binary_subscr.10'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$out80.0'}), (82, {'retval': '$out80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    shift = arg(1, name=shift)               ['shift']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', 'a', 'arr']
    $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.4']
    $14load_attr.5 = getattr(value=$12load_global.4, attr=empty) ['$12load_global.4', '$14load_attr.5']
    $18load_attr.7 = getattr(value=arr, attr=shape) ['$18load_attr.7', 'arr']
    $22load_attr.9 = getattr(value=arr, attr=dtype) ['$22load_attr.9', 'arr']
    out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', '$18load_attr.7', '$22load_attr.9', 'out']
    arr_flat = getattr(value=arr, attr=flat) ['arr', 'arr_flat']
    $36load_global.14 = global(range: <class 'range'>) ['$36load_global.14']
    $40load_attr.16 = getattr(value=arr, attr=size) ['$40load_attr.16', 'arr']
    $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.14', '$40load_attr.16', '$42call_function.17']
    $44get_iter.18 = getiter(value=$42call_function.17) ['$42call_function.17', '$44get_iter.18']
    $phi46.0 = $44get_iter.18                ['$44get_iter.18', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 80             ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    $54binary_add.4 = i + shift              ['$54binary_add.4', 'i', 'shift']
    $58load_attr.6 = getattr(value=arr, attr=size) ['$58load_attr.6', 'arr']
    idx = $54binary_add.4 % $58load_attr.6   ['$54binary_add.4', '$58load_attr.6', 'idx']
    $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>) ['$68binary_subscr.10', 'arr_flat', 'i']
    $72load_attr.12 = getattr(value=out, attr=flat) ['$72load_attr.12', 'out']
    $72load_attr.12[idx] = $68binary_subscr.10 ['$68binary_subscr.10', '$72load_attr.12', 'idx']
    jump 46                                  []
label 80:
    $82return_value.1 = cast(value=out)      ['$82return_value.1', 'out']
    return $82return_value.1                 ['$82return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F40A9EE0>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: shift = arg(1, name=shift)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
2023-01-03 17:17 DEBUG on stmt: arr = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:2226)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $18load_attr.7 = getattr(value=arr, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $22load_attr.9 = getattr(value=arr, attr=dtype)
2023-01-03 17:17 DEBUG on stmt: out = call $14load_attr.5($18load_attr.7, func=$14load_attr.5, args=[Var($18load_attr.7, arraymath.py:2227)], kws=[('dtype', Var($22load_attr.9, arraymath.py:2227))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: arr_flat = getattr(value=arr, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $36load_global.14 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $40load_attr.16 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: $42call_function.17 = call $36load_global.14($40load_attr.16, func=$36load_global.14, args=[Var($40load_attr.16, arraymath.py:2231)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $44get_iter.18 = getiter(value=$42call_function.17)
2023-01-03 17:17 DEBUG on stmt: $phi46.0 = $44get_iter.18
2023-01-03 17:17 DEBUG on stmt: jump 46
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 46
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F40A9EE0>
2023-01-03 17:17 DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
2023-01-03 17:17 DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi48.1 = $46for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $46for_iter.3, 48, 80
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F40A9EE0>
2023-01-03 17:17 DEBUG on stmt: i = $phi48.1
2023-01-03 17:17 DEBUG on stmt: $54binary_add.4 = i + shift
2023-01-03 17:17 DEBUG on stmt: $58load_attr.6 = getattr(value=arr, attr=size)
2023-01-03 17:17 DEBUG on stmt: idx = $54binary_add.4 % $58load_attr.6
2023-01-03 17:17 DEBUG on stmt: $68binary_subscr.10 = getitem(value=arr_flat, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $72load_attr.12 = getattr(value=out, attr=flat)
2023-01-03 17:17 DEBUG on stmt: $72load_attr.12[idx] = $68binary_subscr.10
2023-01-03 17:17 DEBUG on stmt: jump 46
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 80
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F40A9EE0>
2023-01-03 17:17 DEBUG on stmt: $82return_value.1 = cast(value=out)
2023-01-03 17:17 DEBUG on stmt: return $82return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x000001C8F40A4E20>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x000001C8F40A4FA0>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x000001C8F40AA280>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x000001C8F40AA520>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F40A4760>],
             '$36load_global.14': [<numba.core.ir.Assign object at 0x000001C8F40AAEE0>],
             '$40load_attr.16': [<numba.core.ir.Assign object at 0x000001C8F40AD1C0>],
             '$42call_function.17': [<numba.core.ir.Assign object at 0x000001C8F40AD370>],
             '$44get_iter.18': [<numba.core.ir.Assign object at 0x000001C8F40AD4C0>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F40AD580>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F40AD6A0>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F40AD7C0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8F40A48E0>],
             '$54binary_add.4': [<numba.core.ir.Assign object at 0x000001C8F40ADE20>],
             '$58load_attr.6': [<numba.core.ir.Assign object at 0x000001C8F40AE100>],
             '$68binary_subscr.10': [<numba.core.ir.Assign object at 0x000001C8F40AE760>],
             '$72load_attr.12': [<numba.core.ir.Assign object at 0x000001C8F40AEA00>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x000001C8F40AED00>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x000001C8F40A4CA0>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x000001C8F40A0D00>],
             'a': [<numba.core.ir.Assign object at 0x000001C8F40A44C0>],
             'arr': [<numba.core.ir.Assign object at 0x000001C8F40A4BB0>],
             'arr_flat': [<numba.core.ir.Assign object at 0x000001C8F40AAC40>],
             'i': [<numba.core.ir.Assign object at 0x000001C8F40ADA60>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8F40AE280>],
             'out': [<numba.core.ir.Assign object at 0x000001C8F40AA9D0>],
             'shift': [<numba.core.ir.Assign object at 0x000001C8F40A45E0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4428)
           2	LOAD_FAST(arg=0, lineno=4428)
           4	RETURN_VALUE(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4428)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4428)
2023-01-03 17:17 DEBUG stack ['$a2.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F40B3D30>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $4return_value.1 = cast(value=a)
2023-01-03 17:17 DEBUG on stmt: return $4return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x000001C8F40A98E0>],
             'a': [<numba.core.ir.Assign object at 0x000001C8F40A9D90>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F40A9BE0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int32, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F40B3B50>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int32, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F40C5D90>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F40C5EE0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F40C5820>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8F40C5BE0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F40C56A0>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8F40C5190>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	LOAD_FAST(arg=2, lineno=3)
          10	CALL_FUNCTION(arg=3, lineno=3)
          12	RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1', '$tmp16.2', '$tmp28.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'res': '$tmp16.2'}), (8, {'res': '$tmp28.3'}), (10, {'func': '$2load_global.0', 'args': ['$tmp04.1', '$tmp16.2', '$tmp28.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    tmp1 = arg(1, name=tmp1)                 ['tmp1']
    tmp2 = arg(2, name=tmp2)                 ['tmp2']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'tmp0', 'tmp1', 'tmp2']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FADEE0>
2023-01-03 17:17 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-01-03 17:17 DEBUG on stmt: tmp1 = arg(1, name=tmp1)
2023-01-03 17:17 DEBUG on stmt: tmp2 = arg(2, name=tmp2)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(tmp0, tmp1, tmp2, func=$2load_global.0, args=[Var(tmp0, <string>:3), Var(tmp1, <string>:3), Var(tmp2, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F3F16280>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3F16460>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3F16070>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001C8F3F16B80>],
             'tmp1': [<numba.core.ir.Assign object at 0x000001C8F3F16B50>],
             'tmp2': [<numba.core.ir.Assign object at 0x000001C8F3F16A60>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_ATTR(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_ATTR(arg=2, lineno=3538)
          10	LOAD_DEREF(arg=1, lineno=3538)
          12	LOAD_CONST(arg=1, lineno=3538)
          14	CALL_FUNCTION_KW(arg=2, lineno=3538)
          16	STORE_FAST(arg=3, lineno=3538)
          18	LOAD_DEREF(arg=0, lineno=3539)
          20	LOAD_FAST(arg=0, lineno=3539)
          22	LOAD_FAST(arg=1, lineno=3539)
          24	LOAD_FAST(arg=2, lineno=3539)
          26	LOAD_FAST(arg=3, lineno=3539)
          28	CALL_FUNCTION(arg=4, lineno=3539)
          30	RETURN_VALUE(arg=None, lineno=3539)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$cond6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$10load_deref.4', '$const12.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=3, lineno=3538)
2023-01-03 17:17 DEBUG stack ['$14call_function_kw.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=3539)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=4, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$18load_deref.7', '$cond20.8', '$x22.9', '$y24.10', '$res26.11']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=3539)
2023-01-03 17:17 DEBUG stack ['$28call_function.12']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$cond6.2'}), (8, {'item': '$cond6.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_deref.4'}), (12, {'res': '$const12.5'}), (14, {'func': '$4load_attr.1', 'args': ['$8load_attr.3', '$10load_deref.4'], 'names': '$const12.5', 'res': '$14call_function_kw.6'}), (16, {'value': '$14call_function_kw.6'}), (18, {'res': '$18load_deref.7'}), (20, {'res': '$cond20.8'}), (22, {'res': '$x22.9'}), (24, {'res': '$y24.10'}), (26, {'res': '$res26.11'}), (28, {'func': '$18load_deref.7', 'args': ['$cond20.8', '$x22.9', '$y24.10', '$res26.11'], 'res': '$28call_function.12'}), (30, {'retval': '$28call_function.12', 'castval': '$30return_value.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=cond, attr=shape) ['$8load_attr.3', 'cond']
    $10load_deref.4 = freevar(npty: float64) ['$10load_deref.4']
    res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None) ['$10load_deref.4', '$4load_attr.1', '$8load_attr.3', 'res']
    $18load_deref.7 = freevar(impl: <function _where_y_scalar at 0x000001C8CE6B35E0>) ['$18load_deref.7']
    $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.7', '$28call_function.12', 'cond', 'res', 'x', 'y']
    $30return_value.13 = cast(value=$28call_function.12) ['$28call_function.12', '$30return_value.13']
    return $30return_value.13                ['$30return_value.13']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3F23F10>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=cond, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.4 = freevar(npty: float64)
2023-01-03 17:17 DEBUG on stmt: res = call $4load_attr.1($8load_attr.3, func=$4load_attr.1, args=[Var($8load_attr.3, arraymath.py:3538)], kws=[('dtype', Var($10load_deref.4, arraymath.py:3538))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $18load_deref.7 = freevar(impl: <function _where_y_scalar at 0x000001C8CE6B35E0>)
2023-01-03 17:17 DEBUG on stmt: $28call_function.12 = call $18load_deref.7(cond, x, y, res, func=$18load_deref.7, args=[Var(cond, arraymath.py:3538), Var(x, arraymath.py:3538), Var(y, arraymath.py:3538), Var(res, arraymath.py:3538)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $30return_value.13 = cast(value=$28call_function.12)
2023-01-03 17:17 DEBUG on stmt: return $30return_value.13
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.4': [<numba.core.ir.Assign object at 0x000001C8F3F4E160>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x000001C8F3F4E1C0>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x000001C8F3EB5850>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3F4EC70>],
             '$30return_value.13': [<numba.core.ir.Assign object at 0x000001C8F3EB5CA0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001C8F3F4EA60>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001C8F3F4EBB0>],
             'cond': [<numba.core.ir.Assign object at 0x000001C8F3FAD1C0>],
             'res': [<numba.core.ir.Assign object at 0x000001C8F3F4E610>],
             'x': [<numba.core.ir.Assign object at 0x000001C8F3FADD00>],
             'y': [<numba.core.ir.Assign object at 0x000001C8F3F0F880>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3FADEE0>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F3EFB3D0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3EFB1C0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3EFB7C0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8F3EFB580>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F3EFBA60>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8F3F23FD0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3520)
           2	LOAD_GLOBAL(arg=0, lineno=3520)
           4	LOAD_METHOD(arg=1, lineno=3520)
           6	LOAD_FAST(arg=0, lineno=3520)
           8	CALL_METHOD(arg=1, lineno=3520)
          10	GET_ITER(arg=None, lineno=3520)
>         12	FOR_ITER(arg=28, lineno=3520)
          14	UNPACK_SEQUENCE(arg=2, lineno=3520)
          16	STORE_FAST(arg=4, lineno=3520)
          18	STORE_FAST(arg=5, lineno=3520)
          20	LOAD_FAST(arg=5, lineno=3521)
          22	POP_JUMP_IF_FALSE(arg=32, lineno=3521)
          24	LOAD_FAST(arg=1, lineno=3521)
          26	LOAD_FAST(arg=4, lineno=3521)
          28	BINARY_SUBSCR(arg=None, lineno=3521)
          30	JUMP_FORWARD(arg=2, lineno=3521)
>         32	LOAD_FAST(arg=2, lineno=3521)
>         34	LOAD_FAST(arg=3, lineno=3521)
          36	LOAD_FAST(arg=4, lineno=3521)
          38	STORE_SUBSCR(arg=None, lineno=3521)
          40	JUMP_ABSOLUTE(arg=12, lineno=3521)
>         42	LOAD_FAST(arg=3, lineno=3522)
          44	RETURN_VALUE(arg=None, lineno=3522)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3520)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3520)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$4load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$4load_method.1', '$cond6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=GET_ITER(arg=None, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$8call_method.3']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi12.0']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=FOR_ITER(arg=28, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$phi12.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=3522)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=3522)
2023-01-03 17:17 DEBUG stack ['$res42.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=14 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi14.0', '$phi14.1']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$phi14.1']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$14unpack_sequence.3', '$14unpack_sequence.2']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=5, lineno=3520)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$14unpack_sequence.3']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=5, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi14.0']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=32, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi14.0', '$c20.5']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=24, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=32, stack=('$phi14.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi24.0']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi24.0']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi24.0', '$x24.1']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi24.0', '$x24.1', '$idx26.2']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi24.0', '$28binary_subscr.3']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=34, stack=('$phi24.0', '$28binary_subscr.3'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=34 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi32.0']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=2, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi32.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=34, stack=('$phi32.0', '$y32.1'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=34 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi34.0', '$phi34.1']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$phi34.1']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi34.0', '$phi34.1', '$res34.2', '$idx36.3']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=12, lineno=3521)
2023-01-03 17:17 DEBUG stack ['$phi34.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=12, stack=('$phi34.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=12 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=24 nstack_initial=1): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi32.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi34.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$28binary_subscr.3',
                           State(pc_initial=24 nstack_initial=1)),
                          ('$y32.1', State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi32.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$28binary_subscr.3',
                           State(pc_initial=24 nstack_initial=1)),
                          ('$y32.1', State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$28binary_subscr.3',
                           State(pc_initial=24 nstack_initial=1)),
                          ('$y32.1', State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi24.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$28binary_subscr.3',
                           State(pc_initial=24 nstack_initial=1)),
                          ('$y32.1', State(pc_initial=32 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))},
 '$phi34.1': {('$28binary_subscr.3', State(pc_initial=24 nstack_initial=1)),
              ('$y32.1', State(pc_initial=32 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'},
             State(pc_initial=24 nstack_initial=1): {'$phi34.1': '$28binary_subscr.3'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$y32.1'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$cond6.2'}), (8, {'func': '$4load_method.1', 'args': ['$cond6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 14: ('$phi12.0', '$12for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'iterable': '$phi14.1', 'stores': ['$14unpack_sequence.2', '$14unpack_sequence.3'], 'tupleobj': '$14unpack_sequence.4'}), (16, {'value': '$14unpack_sequence.2'}), (18, {'value': '$14unpack_sequence.3'}), (20, {'res': '$c20.5'}), (22, {'pred': '$c20.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi14.0',), 32: ('$phi14.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$x24.1'}), (26, {'res': '$idx26.2'}), (28, {'index': '$idx26.2', 'target': '$x24.1', 'res': '$28binary_subscr.3'}), (30, {})), outgoing_phis={'$phi34.1': '$28binary_subscr.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi24.0', '$28binary_subscr.3')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'res': '$y32.1'}),), outgoing_phis={'$phi34.1': '$y32.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi32.0', '$y32.1')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'res': '$res34.2'}), (36, {'res': '$idx36.3'}), (38, {'target': '$res34.2', 'index': '$idx36.3', 'value': '$phi34.1'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi34.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$res42.0'}), (44, {'retval': '$res42.0', 'castval': '$44return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    cond = arg(0, name=cond)                 ['cond']
    x = arg(1, name=x)                       ['x']
    y = arg(2, name=y)                       ['y']
    res = arg(3, name=res)                   ['res']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3520)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'cond']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 42             ['$12for_iter.3']
label 14:
    $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2) ['$14unpack_sequence.4', '$phi14.1']
    $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.2', '$14unpack_sequence.4']
    $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.3', '$14unpack_sequence.4']
    idx = $14unpack_sequence.2               ['$14unpack_sequence.2', 'idx']
    c = $14unpack_sequence.3                 ['$14unpack_sequence.3', 'c']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3520),), kws=(), vararg=None, varkwarg=None, target=None) ['$22pred', 'bool22', 'c']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $28binary_subscr.3 = getitem(value=x, index=idx, fn=<built-in function getitem>) ['$28binary_subscr.3', 'idx', 'x']
    $phi34.1 = $28binary_subscr.3            ['$28binary_subscr.3', '$phi34.1']
    jump 34                                  []
label 32:
    $phi34.1 = y                             ['$phi34.1', 'y']
    jump 34                                  []
label 34:
    res[idx] = $phi34.1                      ['$phi34.1', 'idx', 'res']
    jump 12                                  []
label 42:
    $44return_value.1 = cast(value=res)      ['$44return_value.1', 'res']
    return $44return_value.1                 ['$44return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C451C0>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3520)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C451C0>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C451C0>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3520),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 32
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C451C0>
2023-01-03 17:17 DEBUG on stmt: $28binary_subscr.3 = getitem(value=x, index=idx, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = $28binary_subscr.3
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 32
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C451C0>
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = y
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C451C0>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi34.1
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 42
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C451C0>
2023-01-03 17:17 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $44return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x000001C8F3CD8A90>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F3CD88B0>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F3CD86A0>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F3CD8700>],
             '$14unpack_sequence.2': [<numba.core.ir.Assign object at 0x000001C8F2BE6C10>],
             '$14unpack_sequence.3': [<numba.core.ir.Assign object at 0x000001C8F2BE64F0>],
             '$14unpack_sequence.4': [<numba.core.ir.Assign object at 0x000001C8F2BE6D00>],
             '$22pred': [<numba.core.ir.Assign object at 0x000001C8F2BE6250>],
             '$28binary_subscr.3': [<numba.core.ir.Assign object at 0x000001C8F2BE66A0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3CD80A0>],
             '$44return_value.1': [<numba.core.ir.Assign object at 0x000001C8F2BE28E0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x000001C8F3CD8340>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x000001C8F3CD8FA0>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x000001C8F3CD8D00>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x000001C8F3CD83A0>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x000001C8F2BE67C0>,
                          <numba.core.ir.Assign object at 0x000001C8F2BE6220>],
             'bool22': [<numba.core.ir.Assign object at 0x000001C8F2BE6E80>],
             'c': [<numba.core.ir.Assign object at 0x000001C8F2BE6970>],
             'cond': [<numba.core.ir.Assign object at 0x000001C8F2C70160>],
             'idx': [<numba.core.ir.Assign object at 0x000001C8F2BE63A0>],
             'res': [<numba.core.ir.Assign object at 0x000001C8F3CD8A30>],
             'x': [<numba.core.ir.Assign object at 0x000001C8F2C70280>],
             'y': [<numba.core.ir.Assign object at 0x000001C8F2C70430>]})
2023-01-03 17:17 DEBUG SSA violators {'$phi34.1'}
2023-01-03 17:17 DEBUG Fix SSA violator on var $phi34.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3520)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3520),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 32
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $28binary_subscr.3 = getitem(value=x, index=idx, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = $28binary_subscr.3
2023-01-03 17:17 DEBUG first assign: $phi34.1
2023-01-03 17:17 DEBUG replaced with: $phi34.1 = $28binary_subscr.3
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 32
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = y
2023-01-03 17:17 DEBUG replaced with: $phi34.1.1 = y
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi34.1
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 42
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $44return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {24: [<numba.core.ir.Assign object at 0x000001C8F2C45E80>],
             32: [<numba.core.ir.Assign object at 0x000001C8F2C45E50>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: cond = arg(0, name=cond)
2023-01-03 17:17 DEBUG on stmt: x = arg(1, name=x)
2023-01-03 17:17 DEBUG on stmt: y = arg(2, name=y)
2023-01-03 17:17 DEBUG on stmt: res = arg(3, name=res)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=ndenumerate)
2023-01-03 17:17 DEBUG on stmt: $8call_method.3 = call $4load_method.1(cond, func=$4load_method.1, args=[Var(cond, arraymath.py:3520)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
2023-01-03 17:17 DEBUG on stmt: $phi12.0 = $10get_iter.4
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 12
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $12for_iter.1 = iternext(value=$phi12.0)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi14.1 = $12for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $12for_iter.3, 14, 42
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 14
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.4 = exhaust_iter(value=$phi14.1, count=2)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.2 = static_getitem(value=$14unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $14unpack_sequence.3 = static_getitem(value=$14unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: idx = $14unpack_sequence.2
2023-01-03 17:17 DEBUG on stmt: c = $14unpack_sequence.3
2023-01-03 17:17 DEBUG on stmt: bool22 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $22pred = call bool22(c, func=bool22, args=(Var(c, arraymath.py:3520),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $22pred, 24, 32
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 24
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $28binary_subscr.3 = getitem(value=x, index=idx, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $phi34.1 = $28binary_subscr.3
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 32
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $phi34.1.1 = y
2023-01-03 17:17 DEBUG on stmt: jump 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: res[idx] = $phi34.1
2023-01-03 17:17 DEBUG find_def var='$phi34.1' stmt=res[idx] = $phi34.1
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG insert phi node $phi34.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 24
2023-01-03 17:17 DEBUG incoming_def $phi34.1 = $28binary_subscr.3
2023-01-03 17:17 DEBUG find_def_from_bottom label 32
2023-01-03 17:17 DEBUG incoming_def $phi34.1.1 = y
2023-01-03 17:17 DEBUG replaced with: res[idx] = $phi34.1.2
2023-01-03 17:17 DEBUG on stmt: jump 12
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 42
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C53970>
2023-01-03 17:17 DEBUG on stmt: $44return_value.1 = cast(value=res)
2023-01-03 17:17 DEBUG on stmt: return $44return_value.1
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$tmp04.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
2023-01-03 17:17 DEBUG stack ['$6call_function.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4113520>
2023-01-03 17:17 DEBUG on stmt: tmp0 = arg(0, name=tmp0)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
2023-01-03 17:17 DEBUG on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6call_function.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F40ADF70>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000001C8CEEC5610>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8CEEC55E0>],
             'tmp0': [<numba.core.ir.Assign object at 0x000001C8CEECBD60>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=74)
           2	LOAD_GLOBAL(arg=0, lineno=74)
           4	LOAD_ATTR(arg=1, lineno=74)
           6	LOAD_FAST(arg=0, lineno=74)
           8	LOAD_ATTR(arg=2, lineno=74)
          10	LOAD_CONST(arg=1, lineno=74)
          12	BINARY_SUBSCR(arg=None, lineno=74)
          14	LOAD_CONST(arg=2, lineno=74)
          16	CALL_FUNCTION_KW(arg=1, lineno=74)
          18	STORE_FAST(arg=2, lineno=74)
          20	LOAD_FAST(arg=1, lineno=75)
          22	STORE_FAST(arg=3, lineno=75)
          24	LOAD_GLOBAL(arg=3, lineno=76)
          26	LOAD_FAST(arg=0, lineno=76)
          28	LOAD_ATTR(arg=2, lineno=76)
          30	LOAD_CONST(arg=1, lineno=76)
          32	BINARY_SUBSCR(arg=None, lineno=76)
          34	CALL_FUNCTION(arg=1, lineno=76)
          36	GET_ITER(arg=None, lineno=76)
>         38	FOR_ITER(arg=58, lineno=76)
          40	STORE_FAST(arg=4, lineno=76)
          42	LOAD_FAST(arg=0, lineno=77)
          44	LOAD_FAST(arg=4, lineno=77)
          46	BINARY_SUBSCR(arg=None, lineno=77)
          48	LOAD_FAST(arg=3, lineno=77)
          50	COMPARE_OP(arg=4, lineno=77)
          52	POP_JUMP_IF_FALSE(arg=72, lineno=77)
          54	LOAD_FAST(arg=0, lineno=78)
          56	LOAD_FAST(arg=4, lineno=78)
          58	BINARY_SUBSCR(arg=None, lineno=78)
          60	STORE_FAST(arg=3, lineno=78)
          62	LOAD_CONST(arg=1, lineno=79)
          64	LOAD_FAST(arg=2, lineno=79)
          66	LOAD_FAST(arg=4, lineno=79)
          68	STORE_SUBSCR(arg=None, lineno=79)
          70	JUMP_ABSOLUTE(arg=38, lineno=79)
>         72	LOAD_CONST(arg=3, lineno=81)
          74	LOAD_FAST(arg=0, lineno=81)
          76	LOAD_FAST(arg=4, lineno=81)
          78	BINARY_SUBSCR(arg=None, lineno=81)
          80	LOAD_FAST(arg=3, lineno=82)
          82	BINARY_SUBTRACT(arg=None, lineno=81)
          84	BINARY_MULTIPLY(arg=None, lineno=81)
          86	LOAD_FAST(arg=3, lineno=82)
          88	BINARY_TRUE_DIVIDE(arg=None, lineno=81)
          90	LOAD_FAST(arg=2, lineno=81)
          92	LOAD_FAST(arg=4, lineno=81)
          94	STORE_SUBSCR(arg=None, lineno=81)
          96	JUMP_ABSOLUTE(arg=38, lineno=81)
>         98	LOAD_FAST(arg=2, lineno=83)
         100	RETURN_VALUE(arg=None, lineno=83)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=74)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=74)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=74)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=74)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=74)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$ClosedPostionprofit6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=74)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=74)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=74)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=CALL_FUNCTION_KW(arg=1, lineno=74)
2023-01-03 17:17 DEBUG stack ['$4load_attr.1', '$12binary_subscr.5', '$const14.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=2, lineno=74)
2023-01-03 17:17 DEBUG stack ['$16call_function_kw.7']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=75)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=22, inst=STORE_FAST(arg=3, lineno=75)
2023-01-03 17:17 DEBUG stack ['$init_cash20.8']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_GLOBAL(arg=3, lineno=76)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=76)
2023-01-03 17:17 DEBUG stack ['$24load_global.9']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=LOAD_ATTR(arg=2, lineno=76)
2023-01-03 17:17 DEBUG stack ['$24load_global.9', '$ClosedPostionprofit26.10']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=76)
2023-01-03 17:17 DEBUG stack ['$24load_global.9', '$28load_attr.11']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=76)
2023-01-03 17:17 DEBUG stack ['$24load_global.9', '$28load_attr.11', '$const30.12']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=76)
2023-01-03 17:17 DEBUG stack ['$24load_global.9', '$32binary_subscr.13']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=GET_ITER(arg=None, lineno=76)
2023-01-03 17:17 DEBUG stack ['$34call_function.14']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=38, stack=('$36get_iter.15',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi38.0']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=FOR_ITER(arg=58, lineno=76)
2023-01-03 17:17 DEBUG stack ['$phi38.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=('$phi38.0', '$38for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=40 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=98, inst=LOAD_FAST(arg=2, lineno=83)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=83)
2023-01-03 17:17 DEBUG stack ['$DD_per_array98.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=40 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi40.0', '$phi40.1']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=STORE_FAST(arg=4, lineno=76)
2023-01-03 17:17 DEBUG stack ['$phi40.0', '$phi40.1']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=77)
2023-01-03 17:17 DEBUG stack ['$phi40.0']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=77)
2023-01-03 17:17 DEBUG stack ['$phi40.0', '$ClosedPostionprofit42.2']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=77)
2023-01-03 17:17 DEBUG stack ['$phi40.0', '$ClosedPostionprofit42.2', '$i44.3']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=77)
2023-01-03 17:17 DEBUG stack ['$phi40.0', '$46binary_subscr.4']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=COMPARE_OP(arg=4, lineno=77)
2023-01-03 17:17 DEBUG stack ['$phi40.0', '$46binary_subscr.4', '$max_profit48.5']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=72, lineno=77)
2023-01-03 17:17 DEBUG stack ['$phi40.0', '$50compare_op.6']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=54, stack=('$phi40.0',), blockstack=(), npush=0), Edge(pc=72, stack=('$phi40.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=54 nstack_initial=1), State(pc_initial=72 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi54.0']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=78)
2023-01-03 17:17 DEBUG stack ['$phi54.0']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=78)
2023-01-03 17:17 DEBUG stack ['$phi54.0', '$ClosedPostionprofit54.1']
2023-01-03 17:17 DEBUG dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=78)
2023-01-03 17:17 DEBUG stack ['$phi54.0', '$ClosedPostionprofit54.1', '$i56.2']
2023-01-03 17:17 DEBUG dispatch pc=60, inst=STORE_FAST(arg=3, lineno=78)
2023-01-03 17:17 DEBUG stack ['$phi54.0', '$58binary_subscr.3']
2023-01-03 17:17 DEBUG dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=79)
2023-01-03 17:17 DEBUG stack ['$phi54.0']
2023-01-03 17:17 DEBUG dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=79)
2023-01-03 17:17 DEBUG stack ['$phi54.0', '$const62.4']
2023-01-03 17:17 DEBUG dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=79)
2023-01-03 17:17 DEBUG stack ['$phi54.0', '$const62.4', '$DD_per_array64.5']
2023-01-03 17:17 DEBUG dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=79)
2023-01-03 17:17 DEBUG stack ['$phi54.0', '$const62.4', '$DD_per_array64.5', '$i66.6']
2023-01-03 17:17 DEBUG dispatch pc=70, inst=JUMP_ABSOLUTE(arg=38, lineno=79)
2023-01-03 17:17 DEBUG stack ['$phi54.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=38, stack=('$phi54.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=72 nstack_initial=1), State(pc_initial=38 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi72.0']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=LOAD_CONST(arg=3, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0']
2023-01-03 17:17 DEBUG dispatch pc=74, inst=LOAD_FAST(arg=0, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$const72.1']
2023-01-03 17:17 DEBUG dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$const72.1', '$ClosedPostionprofit74.2']
2023-01-03 17:17 DEBUG dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$const72.1', '$ClosedPostionprofit74.2', '$i76.3']
2023-01-03 17:17 DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=82)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$const72.1', '$78binary_subscr.4']
2023-01-03 17:17 DEBUG dispatch pc=82, inst=BINARY_SUBTRACT(arg=None, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$const72.1', '$78binary_subscr.4', '$max_profit80.5']
2023-01-03 17:17 DEBUG dispatch pc=84, inst=BINARY_MULTIPLY(arg=None, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$const72.1', '$82binary_subtract.6']
2023-01-03 17:17 DEBUG dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=82)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$84binary_multiply.7']
2023-01-03 17:17 DEBUG dispatch pc=88, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$84binary_multiply.7', '$max_profit86.8']
2023-01-03 17:17 DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$88binary_true_divide.9']
2023-01-03 17:17 DEBUG dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$88binary_true_divide.9', '$DD_per_array90.10']
2023-01-03 17:17 DEBUG dispatch pc=94, inst=STORE_SUBSCR(arg=None, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0', '$88binary_true_divide.9', '$DD_per_array90.10', '$i92.11']
2023-01-03 17:17 DEBUG dispatch pc=96, inst=JUMP_ABSOLUTE(arg=38, lineno=81)
2023-01-03 17:17 DEBUG stack ['$phi72.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=38, stack=('$phi72.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1), State(pc_initial=38 nstack_initial=1)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=38 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=40 nstack_initial=2): {'$phi40.1'},
             State(pc_initial=54 nstack_initial=1): set(),
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi38.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.1': State(pc_initial=38 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi54.0', State(pc_initial=54 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi40.0': {('$phi38.0', State(pc_initial=38 nstack_initial=1))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi72.0': {('$phi40.0', State(pc_initial=40 nstack_initial=2))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=2))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi38.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.1': {('$38for_iter.2',
                           State(pc_initial=38 nstack_initial=1))},
             '$phi54.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi72.0': {('$36get_iter.15',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi38.0': {('$36get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi40.1': {('$38for_iter.2', State(pc_initial=38 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi38.0': '$36get_iter.15'},
             State(pc_initial=38 nstack_initial=1): {'$phi40.1': '$38for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$ClosedPostionprofit6.2'}), (8, {'item': '$ClosedPostionprofit6.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$8load_attr.3', 'res': '$12binary_subscr.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$4load_attr.1', 'args': ['$12binary_subscr.5'], 'names': '$const14.6', 'res': '$16call_function_kw.7'}), (18, {'value': '$16call_function_kw.7'}), (20, {'res': '$init_cash20.8'}), (22, {'value': '$init_cash20.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$ClosedPostionprofit26.10'}), (28, {'item': '$ClosedPostionprofit26.10', 'res': '$28load_attr.11'}), (30, {'res': '$const30.12'}), (32, {'index': '$const30.12', 'target': '$28load_attr.11', 'res': '$32binary_subscr.13'}), (34, {'func': '$24load_global.9', 'args': ['$32binary_subscr.13'], 'res': '$34call_function.14'}), (36, {'value': '$34call_function.14', 'res': '$36get_iter.15'})), outgoing_phis={'$phi38.0': '$36get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$36get_iter.15',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'iterator': '$phi38.0', 'pair': '$38for_iter.1', 'indval': '$38for_iter.2', 'pred': '$38for_iter.3'}),), outgoing_phis={'$phi40.1': '$38for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 40: ('$phi38.0', '$38for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=40 nstack_initial=2):
AdaptBlockInfo(insts=((40, {'value': '$phi40.1'}), (42, {'res': '$ClosedPostionprofit42.2'}), (44, {'res': '$i44.3'}), (46, {'index': '$i44.3', 'target': '$ClosedPostionprofit42.2', 'res': '$46binary_subscr.4'}), (48, {'res': '$max_profit48.5'}), (50, {'lhs': '$46binary_subscr.4', 'rhs': '$max_profit48.5', 'res': '$50compare_op.6'}), (52, {'pred': '$50compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ('$phi40.0',), 72: ('$phi40.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=54 nstack_initial=1):
AdaptBlockInfo(insts=((54, {'res': '$ClosedPostionprofit54.1'}), (56, {'res': '$i56.2'}), (58, {'index': '$i56.2', 'target': '$ClosedPostionprofit54.1', 'res': '$58binary_subscr.3'}), (60, {'value': '$58binary_subscr.3'}), (62, {'res': '$const62.4'}), (64, {'res': '$DD_per_array64.5'}), (66, {'res': '$i66.6'}), (68, {'target': '$DD_per_array64.5', 'index': '$i66.6', 'value': '$const62.4'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi54.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=((72, {'res': '$const72.1'}), (74, {'res': '$ClosedPostionprofit74.2'}), (76, {'res': '$i76.3'}), (78, {'index': '$i76.3', 'target': '$ClosedPostionprofit74.2', 'res': '$78binary_subscr.4'}), (80, {'res': '$max_profit80.5'}), (82, {'lhs': '$78binary_subscr.4', 'rhs': '$max_profit80.5', 'res': '$82binary_subtract.6'}), (84, {'lhs': '$const72.1', 'rhs': '$82binary_subtract.6', 'res': '$84binary_multiply.7'}), (86, {'res': '$max_profit86.8'}), (88, {'lhs': '$84binary_multiply.7', 'rhs': '$max_profit86.8', 'res': '$88binary_true_divide.9'}), (90, {'res': '$DD_per_array90.10'}), (92, {'res': '$i92.11'}), (94, {'target': '$DD_per_array90.10', 'index': '$i92.11', 'value': '$88binary_true_divide.9'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$phi72.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$DD_per_array98.0'}), (100, {'retval': '$DD_per_array98.0', 'castval': '$100return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    ClosedPostionprofit = arg(0, name=ClosedPostionprofit) ['ClosedPostionprofit']
    init_cash = arg(1, name=init_cash)       ['init_cash']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape) ['$8load_attr.3', 'ClosedPostionprofit']
    $const10.4 = const(int, 0)               ['$const10.4']
    $12binary_subscr.5 = getitem(value=$8load_attr.3, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$8load_attr.3', '$const10.4']
    DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None) ['$12binary_subscr.5', '$4load_attr.1', 'DD_per_array']
    max_profit = init_cash                   ['init_cash', 'max_profit']
    $24load_global.9 = global(range: <class 'range'>) ['$24load_global.9']
    $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape) ['$28load_attr.11', 'ClosedPostionprofit']
    $const30.12 = const(int, 0)              ['$const30.12']
    $32binary_subscr.13 = getitem(value=$28load_attr.11, index=$const30.12, fn=<built-in function getitem>) ['$28load_attr.11', '$32binary_subscr.13', '$const30.12']
    $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_global.9', '$32binary_subscr.13', '$34call_function.14']
    $36get_iter.15 = getiter(value=$34call_function.14) ['$34call_function.14', '$36get_iter.15']
    $phi38.0 = $36get_iter.15                ['$36get_iter.15', '$phi38.0']
    jump 38                                  []
label 38:
    $38for_iter.1 = iternext(value=$phi38.0) ['$38for_iter.1', '$phi38.0']
    $38for_iter.2 = pair_first(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.2']
    $38for_iter.3 = pair_second(value=$38for_iter.1) ['$38for_iter.1', '$38for_iter.3']
    $phi40.1 = $38for_iter.2                 ['$38for_iter.2', '$phi40.1']
    branch $38for_iter.3, 40, 98             ['$38for_iter.3']
label 40:
    i = $phi40.1                             ['$phi40.1', 'i']
    $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['$46binary_subscr.4', 'ClosedPostionprofit', 'i']
    $50compare_op.6 = $46binary_subscr.4 > max_profit ['$46binary_subscr.4', '$50compare_op.6', 'max_profit']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None) ['$50compare_op.6', '$52pred', 'bool52']
    branch $52pred, 54, 72                   ['$52pred']
label 54:
    max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['ClosedPostionprofit', 'i', 'max_profit']
    $const62.4 = const(int, 0)               ['$const62.4']
    DD_per_array[i] = $const62.4             ['$const62.4', 'DD_per_array', 'i']
    jump 38                                  []
label 72:
    $const72.1 = const(int, 100)             ['$const72.1']
    $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>) ['$78binary_subscr.4', 'ClosedPostionprofit', 'i']
    $82binary_subtract.6 = $78binary_subscr.4 - max_profit ['$78binary_subscr.4', '$82binary_subtract.6', 'max_profit']
    $84binary_multiply.7 = $const72.1 * $82binary_subtract.6 ['$82binary_subtract.6', '$84binary_multiply.7', '$const72.1']
    $88binary_true_divide.9 = $84binary_multiply.7 / max_profit ['$84binary_multiply.7', '$88binary_true_divide.9', 'max_profit']
    DD_per_array[i] = $88binary_true_divide.9 ['$88binary_true_divide.9', 'DD_per_array', 'i']
    jump 38                                  []
label 98:
    $100return_value.1 = cast(value=DD_per_array) ['$100return_value.1', 'DD_per_array']
    return $100return_value.1                ['$100return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDA99D0>
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(1, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: max_profit = init_cash
2023-01-03 17:17 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-03 17:17 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-03 17:17 DEBUG on stmt: jump 38
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 38
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDA99D0>
2023-01-03 17:17 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-03 17:17 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $38for_iter.3, 40, 98
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 40
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDA99D0>
2023-01-03 17:17 DEBUG on stmt: i = $phi40.1
2023-01-03 17:17 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-03 17:17 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $52pred, 54, 72
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 54
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDA99D0>
2023-01-03 17:17 DEBUG on stmt: max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: DD_per_array[i] = $const62.4
2023-01-03 17:17 DEBUG on stmt: jump 99
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 72
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDA99D0>
2023-01-03 17:17 DEBUG on stmt: $const72.1 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-03 17:17 DEBUG on stmt: $84binary_multiply.7 = $const72.1 * $82binary_subtract.6
2023-01-03 17:17 DEBUG on stmt: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-03 17:17 DEBUG on stmt: DD_per_array[i] = $88binary_true_divide.9
2023-01-03 17:17 DEBUG on stmt: jump 99
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDA99D0>
2023-01-03 17:17 DEBUG on stmt: $100return_value.1 = cast(value=DD_per_array)
2023-01-03 17:17 DEBUG on stmt: return $100return_value.1
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 99
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEDA99D0>
2023-01-03 17:17 DEBUG on stmt: jump 38
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$100return_value.1': [<numba.core.ir.Assign object at 0x000001C8F3F96E20>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0x000001C8F2C77790>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0x000001C8F3FAD4F0>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0x000001C8F3D753D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F2C77970>],
             '$32binary_subscr.13': [<numba.core.ir.Assign object at 0x000001C8F2C69160>],
             '$34call_function.14': [<numba.core.ir.Assign object at 0x000001C8F3D75670>],
             '$36get_iter.15': [<numba.core.ir.Assign object at 0x000001C8F3D75520>],
             '$38for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F3D75BB0>],
             '$38for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F3D75B50>],
             '$38for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F3D75CD0>],
             '$46binary_subscr.4': [<numba.core.ir.Assign object at 0x000001C8F3D81760>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000001C8F2C77400>],
             '$50compare_op.6': [<numba.core.ir.Assign object at 0x000001C8F3D813D0>],
             '$52pred': [<numba.core.ir.Assign object at 0x000001C8F3ED10D0>],
             '$78binary_subscr.4': [<numba.core.ir.Assign object at 0x000001C8F3F966A0>],
             '$82binary_subtract.6': [<numba.core.ir.Assign object at 0x000001C8F3F96490>],
             '$84binary_multiply.7': [<numba.core.ir.Assign object at 0x000001C8F3F969A0>],
             '$88binary_true_divide.9': [<numba.core.ir.Assign object at 0x000001C8F3F96820>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x000001C8F2BD2B50>],
             '$const10.4': [<numba.core.ir.Assign object at 0x000001C8F3DBCCA0>],
             '$const30.12': [<numba.core.ir.Assign object at 0x000001C8F3D75490>],
             '$const62.4': [<numba.core.ir.Assign object at 0x000001C8F3F002B0>],
             '$const72.1': [<numba.core.ir.Assign object at 0x000001C8F3F00430>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x000001C8F2BD96D0>],
             '$phi40.1': [<numba.core.ir.Assign object at 0x000001C8F3D752E0>],
             'ClosedPostionprofit': [<numba.core.ir.Assign object at 0x000001C8F2C779A0>],
             'DD_per_array': [<numba.core.ir.Assign object at 0x000001C8CEECB220>],
             'bool52': [<numba.core.ir.Assign object at 0x000001C8F3ED13A0>],
             'i': [<numba.core.ir.Assign object at 0x000001C8F3D75A00>],
             'init_cash': [<numba.core.ir.Assign object at 0x000001C8F2C77A00>],
             'max_profit': [<numba.core.ir.Assign object at 0x000001C8F3FADBE0>,
                            <numba.core.ir.Assign object at 0x000001C8F3F00040>]})
2023-01-03 17:17 DEBUG SSA violators {'max_profit'}
2023-01-03 17:17 DEBUG Fix SSA violator on var max_profit
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(1, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: max_profit = init_cash
2023-01-03 17:17 DEBUG first assign: max_profit
2023-01-03 17:17 DEBUG replaced with: max_profit = init_cash
2023-01-03 17:17 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-03 17:17 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-03 17:17 DEBUG on stmt: jump 38
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 38
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-03 17:17 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $38for_iter.3, 40, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 40
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: i = $phi40.1
2023-01-03 17:17 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-03 17:17 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $52pred, 54, 72
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 54
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: max_profit = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG replaced with: max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: DD_per_array[i] = $const62.4
2023-01-03 17:17 DEBUG on stmt: jump 99
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 72
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: $const72.1 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-03 17:17 DEBUG on stmt: $84binary_multiply.7 = $const72.1 * $82binary_subtract.6
2023-01-03 17:17 DEBUG on stmt: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-03 17:17 DEBUG on stmt: DD_per_array[i] = $88binary_true_divide.9
2023-01-03 17:17 DEBUG on stmt: jump 99
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: $100return_value.1 = cast(value=DD_per_array)
2023-01-03 17:17 DEBUG on stmt: return $100return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 99
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: jump 38
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001C8F2C766D0>],
             54: [<numba.core.ir.Assign object at 0x000001C8F2C76F10>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: ClosedPostionprofit = arg(0, name=ClosedPostionprofit)
2023-01-03 17:17 DEBUG on stmt: init_cash = arg(1, name=init_cash)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
2023-01-03 17:17 DEBUG on stmt: $8load_attr.3 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const10.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: DD_per_array = call $4load_attr.1(func=$4load_attr.1, args=[], kws=[('shape', Var($12binary_subscr.5, nb.py:74))], vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: max_profit = init_cash
2023-01-03 17:17 DEBUG on stmt: $24load_global.9 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $28load_attr.11 = getattr(value=ClosedPostionprofit, attr=shape)
2023-01-03 17:17 DEBUG on stmt: $const30.12 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $34call_function.14 = call $24load_global.9($32binary_subscr.13, func=$24load_global.9, args=[Var($32binary_subscr.13, nb.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $36get_iter.15 = getiter(value=$34call_function.14)
2023-01-03 17:17 DEBUG on stmt: $phi38.0 = $36get_iter.15
2023-01-03 17:17 DEBUG on stmt: jump 38
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 38
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: $38for_iter.1 = iternext(value=$phi38.0)
2023-01-03 17:17 DEBUG on stmt: $38for_iter.2 = pair_first(value=$38for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $38for_iter.3 = pair_second(value=$38for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi40.1 = $38for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $38for_iter.3, 40, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 40
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: i = $phi40.1
2023-01-03 17:17 DEBUG on stmt: $46binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-03 17:17 DEBUG find_def var='max_profit' stmt=$50compare_op.6 = $46binary_subscr.4 > max_profit
2023-01-03 17:17 DEBUG find_def_from_top label 40
2023-01-03 17:17 DEBUG idom 38 from label 40
2023-01-03 17:17 DEBUG find_def_from_bottom label 38
2023-01-03 17:17 DEBUG find_def_from_top label 38
2023-01-03 17:17 DEBUG insert phi node max_profit.2 = phi(incoming_values=[], incoming_blocks=[]) at 38
2023-01-03 17:17 DEBUG find_def_from_bottom label 0
2023-01-03 17:17 DEBUG incoming_def max_profit = init_cash
2023-01-03 17:17 DEBUG find_def_from_bottom label 99
2023-01-03 17:17 DEBUG find_def_from_top label 99
2023-01-03 17:17 DEBUG insert phi node max_profit.3 = phi(incoming_values=[], incoming_blocks=[]) at 99
2023-01-03 17:17 DEBUG find_def_from_bottom label 72
2023-01-03 17:17 DEBUG find_def_from_top label 72
2023-01-03 17:17 DEBUG idom 40 from label 72
2023-01-03 17:17 DEBUG find_def_from_bottom label 40
2023-01-03 17:17 DEBUG find_def_from_top label 40
2023-01-03 17:17 DEBUG idom 38 from label 40
2023-01-03 17:17 DEBUG find_def_from_bottom label 38
2023-01-03 17:17 DEBUG incoming_def max_profit.2 = phi(incoming_values=[Var(max_profit, nb.py:75)], incoming_blocks=[0])
2023-01-03 17:17 DEBUG find_def_from_bottom label 54
2023-01-03 17:17 DEBUG incoming_def max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG incoming_def max_profit.3 = phi(incoming_values=[Var(max_profit.2, nb.py:76), Var(max_profit.1, nb.py:78)], incoming_blocks=[72, 54])
2023-01-03 17:17 DEBUG replaced with: $50compare_op.6 = $46binary_subscr.4 > max_profit.2
2023-01-03 17:17 DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $52pred = call bool52($50compare_op.6, func=bool52, args=(Var($50compare_op.6, nb.py:77),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $52pred, 54, 72
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 54
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: max_profit.1 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $const62.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: DD_per_array[i] = $const62.4
2023-01-03 17:17 DEBUG on stmt: jump 99
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 72
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: $const72.1 = const(int, 100)
2023-01-03 17:17 DEBUG on stmt: $78binary_subscr.4 = getitem(value=ClosedPostionprofit, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-03 17:17 DEBUG find_def var='max_profit' stmt=$82binary_subtract.6 = $78binary_subscr.4 - max_profit
2023-01-03 17:17 DEBUG find_def_from_top label 72
2023-01-03 17:17 DEBUG idom 40 from label 72
2023-01-03 17:17 DEBUG find_def_from_bottom label 40
2023-01-03 17:17 DEBUG find_def_from_top label 40
2023-01-03 17:17 DEBUG idom 38 from label 40
2023-01-03 17:17 DEBUG find_def_from_bottom label 38
2023-01-03 17:17 DEBUG replaced with: $82binary_subtract.6 = $78binary_subscr.4 - max_profit.2
2023-01-03 17:17 DEBUG on stmt: $84binary_multiply.7 = $const72.1 * $82binary_subtract.6
2023-01-03 17:17 DEBUG on stmt: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-03 17:17 DEBUG find_def var='max_profit' stmt=$88binary_true_divide.9 = $84binary_multiply.7 / max_profit
2023-01-03 17:17 DEBUG find_def_from_top label 72
2023-01-03 17:17 DEBUG idom 40 from label 72
2023-01-03 17:17 DEBUG find_def_from_bottom label 40
2023-01-03 17:17 DEBUG find_def_from_top label 40
2023-01-03 17:17 DEBUG idom 38 from label 40
2023-01-03 17:17 DEBUG find_def_from_bottom label 38
2023-01-03 17:17 DEBUG replaced with: $88binary_true_divide.9 = $84binary_multiply.7 / max_profit.2
2023-01-03 17:17 DEBUG on stmt: DD_per_array[i] = $88binary_true_divide.9
2023-01-03 17:17 DEBUG on stmt: jump 99
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: $100return_value.1 = cast(value=DD_per_array)
2023-01-03 17:17 DEBUG on stmt: return $100return_value.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 99
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F2C76E50>
2023-01-03 17:17 DEBUG on stmt: jump 38
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
2023-01-03 17:17 DEBUG stack ['$10call_function.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C691F0>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: dtype = arg(1, name=dtype)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-01-03 17:17 DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2023-01-03 17:17 DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001C8F3E9DAC0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3F96730>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3CCFD30>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000001C8F3CCFCD0>],
             'dtype': [<numba.core.ir.Assign object at 0x000001C8F2C771C0>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8F2C69340>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=2, lineno=329)
           4	LOAD_FAST(arg=3, lineno=329)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=4, lineno=1)
          12	LOAD_FAST(arg=1, lineno=347)
          14	LOAD_FAST(arg=0, lineno=350)
          16	BINARY_SUBTRACT(arg=None, lineno=1)
          18	LOAD_CONST(arg=1, lineno=1)
          20	COMPARE_OP(arg=4, lineno=1)
          22	BINARY_AND(arg=None, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=3, lineno=329)
2023-01-03 17:17 DEBUG stack ['$high_array_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$high_array_12.0', '$highestarr_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=347)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=350)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4', '$ATR_short_112.5']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4', '$ATR_short_112.5', '$ATR_long_114.6']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4', '$16binary_subtract.7']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4', '$16binary_subtract.7', '$const18.8']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=BINARY_AND(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4', '$20compare_op.9']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$22binary_and.10']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$high_array_12.0'}), (4, {'res': '$highestarr_14.1'}), (6, {'lhs': '$high_array_12.0', 'rhs': '$highestarr_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'res': '$ATR_short_112.5'}), (14, {'res': '$ATR_long_114.6'}), (16, {'lhs': '$ATR_short_112.5', 'rhs': '$ATR_long_114.6', 'res': '$16binary_subtract.7'}), (18, {'res': '$const18.8'}), (20, {'lhs': '$16binary_subtract.7', 'rhs': '$const18.8', 'res': '$20compare_op.9'}), (22, {'lhs': '$10compare_op.4', 'rhs': '$20compare_op.9', 'res': '$22binary_and.10'}), (24, {'retval': '$22binary_and.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    ATR_long_1 = arg(0, name=ATR_long_1)     ['ATR_long_1']
    ATR_short_1 = arg(1, name=ATR_short_1)   ['ATR_short_1']
    high_array_1 = arg(2, name=high_array_1) ['high_array_1']
    highestarr_1 = arg(3, name=highestarr_1) ['highestarr_1']
    $6binary_subtract.2 = high_array_1 - highestarr_1 ['$6binary_subtract.2', 'high_array_1', 'highestarr_1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 > $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $16binary_subtract.7 = ATR_short_1 - ATR_long_1 ['$16binary_subtract.7', 'ATR_long_1', 'ATR_short_1']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20compare_op.9 = $16binary_subtract.7 > $const18.8 ['$16binary_subtract.7', '$20compare_op.9', '$const18.8']
    $22binary_and.10 = $10compare_op.4 & $20compare_op.9 ['$10compare_op.4', '$20compare_op.9', '$22binary_and.10']
    $24return_value.11 = cast(value=$22binary_and.10) ['$22binary_and.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3CB3130>
2023-01-03 17:17 DEBUG on stmt: ATR_long_1 = arg(0, name=ATR_long_1)
2023-01-03 17:17 DEBUG on stmt: ATR_short_1 = arg(1, name=ATR_short_1)
2023-01-03 17:17 DEBUG on stmt: high_array_1 = arg(2, name=high_array_1)
2023-01-03 17:17 DEBUG on stmt: highestarr_1 = arg(3, name=highestarr_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = high_array_1 - highestarr_1
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 > $const8.3
2023-01-03 17:17 DEBUG on stmt: $16binary_subtract.7 = ATR_short_1 - ATR_long_1
2023-01-03 17:17 DEBUG on stmt: $const18.8 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $20compare_op.9 = $16binary_subtract.7 > $const18.8
2023-01-03 17:17 DEBUG on stmt: $22binary_and.10 = $10compare_op.4 & $20compare_op.9
2023-01-03 17:17 DEBUG on stmt: $24return_value.11 = cast(value=$22binary_and.10)
2023-01-03 17:17 DEBUG on stmt: return $24return_value.11
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001C8F3F843A0>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x000001C8F3F2F220>],
             '$20compare_op.9': [<numba.core.ir.Assign object at 0x000001C8F3FD54F0>],
             '$22binary_and.10': [<numba.core.ir.Assign object at 0x000001C8F3F84610>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x000001C8F3F84730>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F3F84520>],
             '$const18.8': [<numba.core.ir.Assign object at 0x000001C8F3FD5430>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8F3F844F0>],
             'ATR_long_1': [<numba.core.ir.Assign object at 0x000001C8F2BD29D0>],
             'ATR_short_1': [<numba.core.ir.Assign object at 0x000001C8F3F846A0>],
             'high_array_1': [<numba.core.ir.Assign object at 0x000001C8F3F84A60>],
             'highestarr_1': [<numba.core.ir.Assign object at 0x000001C8F3F84D30>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=0, lineno=329)
           4	LOAD_FAST(arg=1, lineno=329)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=0, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack ['$low_array_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$low_array_12.0', '$lowestarr_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=0, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$low_array_12.0'}), (4, {'res': '$lowestarr_14.1'}), (6, {'lhs': '$low_array_12.0', 'rhs': '$lowestarr_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'retval': '$10compare_op.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    low_array_1 = arg(0, name=low_array_1)   ['low_array_1']
    lowestarr_1 = arg(1, name=lowestarr_1)   ['lowestarr_1']
    $6binary_subtract.2 = low_array_1 - lowestarr_1 ['$6binary_subtract.2', 'low_array_1', 'lowestarr_1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 < $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10compare_op.4) ['$10compare_op.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3E90AF0>
2023-01-03 17:17 DEBUG on stmt: low_array_1 = arg(0, name=low_array_1)
2023-01-03 17:17 DEBUG on stmt: lowestarr_1 = arg(1, name=lowestarr_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = low_array_1 - lowestarr_1
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 < $const8.3
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10compare_op.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001C8F2BFF400>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F2BFF580>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F2BFF100>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8F2BFF280>],
             'low_array_1': [<numba.core.ir.Assign object at 0x000001C8F3E90700>],
             'lowestarr_1': [<numba.core.ir.Assign object at 0x000001C8F3E90D00>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=373)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=4, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=373)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_12.0', '$last_marketpostion_arr_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion_array_12.0'}), (4, {'res': '$last_marketpostion_arr_14.1'}), (6, {'lhs': '$marketpostion_array_12.0', 'rhs': '$last_marketpostion_arr_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'retval': '$10compare_op.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    last_marketpostion_arr_1 = arg(0, name=last_marketpostion_arr_1) ['last_marketpostion_arr_1']
    marketpostion_array_1 = arg(1, name=marketpostion_array_1) ['marketpostion_array_1']
    $6binary_subtract.2 = marketpostion_array_1 - last_marketpostion_arr_1 ['$6binary_subtract.2', 'last_marketpostion_arr_1', 'marketpostion_array_1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 > $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10compare_op.4) ['$10compare_op.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3CCC850>
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr_1 = arg(0, name=last_marketpostion_arr_1)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array_1 = arg(1, name=marketpostion_array_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = marketpostion_array_1 - last_marketpostion_arr_1
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 > $const8.3
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10compare_op.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001C8F3C95A00>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F3C95B20>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F3C958B0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8F3C955B0>],
             'last_marketpostion_arr_1': [<numba.core.ir.Assign object at 0x000001C8F3C95850>],
             'marketpostion_array_1': [<numba.core.ir.Assign object at 0x000001C8F3C95E50>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=377)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=377)
2023-01-03 17:17 DEBUG stack ['$open_array_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$open_array_12.0', '$_262binary_add_18_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_multiply.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$open_array_12.0'}), (4, {'res': '$_262binary_add_18_14.1'}), (6, {'lhs': '$open_array_12.0', 'rhs': '$_262binary_add_18_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    _262binary_add_18_1 = arg(0, name=_262binary_add_18_1) ['_262binary_add_18_1']
    open_array_1 = arg(1, name=open_array_1) ['open_array_1']
    $6binary_multiply.2 = open_array_1 * _262binary_add_18_1 ['$6binary_multiply.2', '_262binary_add_18_1', 'open_array_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2C17970>
2023-01-03 17:17 DEBUG on stmt: _262binary_add_18_1 = arg(0, name=_262binary_add_18_1)
2023-01-03 17:17 DEBUG on stmt: open_array_1 = arg(1, name=open_array_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_multiply.2 = open_array_1 * _262binary_add_18_1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001C8F2C37430>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F2C375B0>],
             '_262binary_add_18_1': [<numba.core.ir.Assign object at 0x000001C8F2C176D0>],
             'open_array_1': [<numba.core.ir.Assign object at 0x000001C8F2C37070>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=376)
           2	LOAD_FAST(arg=0, lineno=376)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=4, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=376)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=376)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr_22.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$entryprice_arr_22.0', '$const4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$entryprice_arr_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$entryprice_arr_22.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    entryprice_arr_2 = arg(0, name=entryprice_arr_2) ['entryprice_arr_2']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = entryprice_arr_2 > $const4.1 ['$6compare_op.2', '$const4.1', 'entryprice_arr_2']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3DB0220>
2023-01-03 17:17 DEBUG on stmt: entryprice_arr_2 = arg(0, name=entryprice_arr_2)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = entryprice_arr_2 > $const4.1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F3D965E0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3D96760>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001C8F3D96460>],
             'entryprice_arr_2': [<numba.core.ir.Assign object at 0x000001C8F3DB0A30>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=373)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=0, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=373)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_22.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_22.0', '$last_marketpostion_arr_24.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=0, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion_array_22.0'}), (4, {'res': '$last_marketpostion_arr_24.1'}), (6, {'lhs': '$marketpostion_array_22.0', 'rhs': '$last_marketpostion_arr_24.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'retval': '$10compare_op.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    last_marketpostion_arr_2 = arg(0, name=last_marketpostion_arr_2) ['last_marketpostion_arr_2']
    marketpostion_array_2 = arg(1, name=marketpostion_array_2) ['marketpostion_array_2']
    $6binary_subtract.2 = marketpostion_array_2 - last_marketpostion_arr_2 ['$6binary_subtract.2', 'last_marketpostion_arr_2', 'marketpostion_array_2']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 < $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10compare_op.4) ['$10compare_op.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4074970>
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr_2 = arg(0, name=last_marketpostion_arr_2)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array_2 = arg(1, name=marketpostion_array_2)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = marketpostion_array_2 - last_marketpostion_arr_2
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 < $const8.3
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10compare_op.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001C8F406EB80>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F406ED00>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F406E880>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8F406EA00>],
             'last_marketpostion_arr_2': [<numba.core.ir.Assign object at 0x000001C8F4074C10>],
             'marketpostion_array_2': [<numba.core.ir.Assign object at 0x000001C8F406E4C0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=387)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=387)
2023-01-03 17:17 DEBUG stack ['$open_array_22.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$open_array_22.0', '$_330binary_subtract_10_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_multiply.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$open_array_22.0'}), (4, {'res': '$_330binary_subtract_10_14.1'}), (6, {'lhs': '$open_array_22.0', 'rhs': '$_330binary_subtract_10_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    _330binary_subtract_10_1 = arg(0, name=_330binary_subtract_10_1) ['_330binary_subtract_10_1']
    open_array_2 = arg(1, name=open_array_2) ['open_array_2']
    $6binary_multiply.2 = open_array_2 * _330binary_subtract_10_1 ['$6binary_multiply.2', '_330binary_subtract_10_1', 'open_array_2']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3F8F6D0>
2023-01-03 17:17 DEBUG on stmt: _330binary_subtract_10_1 = arg(0, name=_330binary_subtract_10_1)
2023-01-03 17:17 DEBUG on stmt: open_array_2 = arg(1, name=open_array_2)
2023-01-03 17:17 DEBUG on stmt: $6binary_multiply.2 = open_array_2 * _330binary_subtract_10_1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001C8F3F8FBB0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3F8FD30>],
             '_330binary_subtract_10_1': [<numba.core.ir.Assign object at 0x000001C8F3F8F190>],
             'open_array_2': [<numba.core.ir.Assign object at 0x000001C8F3F8F7F0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=386)
           2	LOAD_FAST(arg=0, lineno=386)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=4, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=386)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=386)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr_22.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr_22.0', '$const4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$exitsprice_arr_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$exitsprice_arr_22.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    exitsprice_arr_2 = arg(0, name=exitsprice_arr_2) ['exitsprice_arr_2']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = exitsprice_arr_2 > $const4.1 ['$6compare_op.2', '$const4.1', 'exitsprice_arr_2']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3E27820>
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr_2 = arg(0, name=exitsprice_arr_2)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = exitsprice_arr_2 > $const4.1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F3E44130>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3E442B0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001C8F3E27F70>],
             'exitsprice_arr_2': [<numba.core.ir.Assign object at 0x000001C8F3E277C0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=388)
           2	LOAD_FAST(arg=1, lineno=388)
           4	LOAD_FAST(arg=0, lineno=391)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=388)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=388)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=391)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr_1_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$exitsprice_arr_1_12.0', '$entryprice_arr_1_1_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$exitsprice_arr_1_12.0'}), (4, {'res': '$entryprice_arr_1_1_14.1'}), (6, {'lhs': '$exitsprice_arr_1_12.0', 'rhs': '$entryprice_arr_1_1_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    entryprice_arr_1_1_1 = arg(0, name=entryprice_arr_1_1_1) ['entryprice_arr_1_1_1']
    exitsprice_arr_1_1 = arg(1, name=exitsprice_arr_1_1) ['exitsprice_arr_1_1']
    $6binary_subtract.2 = exitsprice_arr_1_1 - entryprice_arr_1_1_1 ['$6binary_subtract.2', 'entryprice_arr_1_1_1', 'exitsprice_arr_1_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3D095E0>
2023-01-03 17:17 DEBUG on stmt: entryprice_arr_1_1_1 = arg(0, name=entryprice_arr_1_1_1)
2023-01-03 17:17 DEBUG on stmt: exitsprice_arr_1_1 = arg(1, name=exitsprice_arr_1_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = exitsprice_arr_1_1 - entryprice_arr_1_1_1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F3CFF550>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3CFF6D0>],
             'entryprice_arr_1_1_1': [<numba.core.ir.Assign object at 0x000001C8F3CFF370>],
             'exitsprice_arr_1_1': [<numba.core.ir.Assign object at 0x000001C8F3CFF250>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=373)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=4, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=373)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_32.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_32.0', '$last_marketpostion_arr_34.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion_array_32.0'}), (4, {'res': '$last_marketpostion_arr_34.1'}), (6, {'lhs': '$marketpostion_array_32.0', 'rhs': '$last_marketpostion_arr_34.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'retval': '$10compare_op.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    last_marketpostion_arr_3 = arg(0, name=last_marketpostion_arr_3) ['last_marketpostion_arr_3']
    marketpostion_array_3 = arg(1, name=marketpostion_array_3) ['marketpostion_array_3']
    $6binary_subtract.2 = marketpostion_array_3 - last_marketpostion_arr_3 ['$6binary_subtract.2', 'last_marketpostion_arr_3', 'marketpostion_array_3']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 > $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10compare_op.4) ['$10compare_op.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4152040>
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr_3 = arg(0, name=last_marketpostion_arr_3)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array_3 = arg(1, name=marketpostion_array_3)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = marketpostion_array_3 - last_marketpostion_arr_3
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 > $const8.3
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10compare_op.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001C8F4152850>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F41529D0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F4152550>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8F41526D0>],
             'last_marketpostion_arr_3': [<numba.core.ir.Assign object at 0x000001C8F3E537F0>],
             'marketpostion_array_3': [<numba.core.ir.Assign object at 0x000001C8F4152190>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=343)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	LOAD_FAST(arg=2, lineno=329)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=343)
2023-01-03 17:17 DEBUG stack ['$open_array_32.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$open_array_32.0', '$fee_1_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=329)
2023-01-03 17:17 DEBUG stack ['$6binary_multiply.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_multiply.2', '$size_18.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10binary_multiply.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$open_array_32.0'}), (4, {'res': '$fee_1_14.1'}), (6, {'lhs': '$open_array_32.0', 'rhs': '$fee_1_14.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$size_18.3'}), (10, {'lhs': '$6binary_multiply.2', 'rhs': '$size_18.3', 'res': '$10binary_multiply.4'}), (12, {'retval': '$10binary_multiply.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    fee_1_1 = arg(0, name=fee_1_1)           ['fee_1_1']
    open_array_3 = arg(1, name=open_array_3) ['open_array_3']
    size_1 = arg(2, name=size_1)             ['size_1']
    $6binary_multiply.2 = open_array_3 * fee_1_1 ['$6binary_multiply.2', 'fee_1_1', 'open_array_3']
    $10binary_multiply.4 = $6binary_multiply.2 * size_1 ['$10binary_multiply.4', '$6binary_multiply.2', 'size_1']
    $12return_value.5 = cast(value=$10binary_multiply.4) ['$10binary_multiply.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F417D7F0>
2023-01-03 17:17 DEBUG on stmt: fee_1_1 = arg(0, name=fee_1_1)
2023-01-03 17:17 DEBUG on stmt: open_array_3 = arg(1, name=open_array_3)
2023-01-03 17:17 DEBUG on stmt: size_1 = arg(2, name=size_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_multiply.2 = open_array_3 * fee_1_1
2023-01-03 17:17 DEBUG on stmt: $10binary_multiply.4 = $6binary_multiply.2 * size_1
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10binary_multiply.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x000001C8F41807C0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F4180940>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001C8F4180520>],
             'fee_1_1': [<numba.core.ir.Assign object at 0x000001C8F417D8B0>],
             'open_array_3': [<numba.core.ir.Assign object at 0x000001C8F4180040>],
             'size_1': [<numba.core.ir.Assign object at 0x000001C8F4180160>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=395)
           2	LOAD_FAST(arg=0, lineno=395)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=4, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=395)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=395)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr_32.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$buy_Fees_arr_32.0', '$const4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$buy_Fees_arr_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$buy_Fees_arr_32.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    buy_Fees_arr_3 = arg(0, name=buy_Fees_arr_3) ['buy_Fees_arr_3']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = buy_Fees_arr_3 > $const4.1 ['$6compare_op.2', '$const4.1', 'buy_Fees_arr_3']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F41B5250>
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr_3 = arg(0, name=buy_Fees_arr_3)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = buy_Fees_arr_3 > $const4.1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F41B6370>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F41B64F0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001C8F41B61F0>],
             'buy_Fees_arr_3': [<numba.core.ir.Assign object at 0x000001C8F41B56D0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=373)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	COMPARE_OP(arg=0, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=373)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_42.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$marketpostion_array_42.0', '$last_marketpostion_arr_44.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=COMPARE_OP(arg=0, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2', '$const8.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10compare_op.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$marketpostion_array_42.0'}), (4, {'res': '$last_marketpostion_arr_44.1'}), (6, {'lhs': '$marketpostion_array_42.0', 'rhs': '$last_marketpostion_arr_44.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$const8.3', 'res': '$10compare_op.4'}), (12, {'retval': '$10compare_op.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    last_marketpostion_arr_4 = arg(0, name=last_marketpostion_arr_4) ['last_marketpostion_arr_4']
    marketpostion_array_4 = arg(1, name=marketpostion_array_4) ['marketpostion_array_4']
    $6binary_subtract.2 = marketpostion_array_4 - last_marketpostion_arr_4 ['$6binary_subtract.2', 'last_marketpostion_arr_4', 'marketpostion_array_4']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10compare_op.4 = $6binary_subtract.2 < $const8.3 ['$10compare_op.4', '$6binary_subtract.2', '$const8.3']
    $12return_value.5 = cast(value=$10compare_op.4) ['$10compare_op.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F41ADA30>
2023-01-03 17:17 DEBUG on stmt: last_marketpostion_arr_4 = arg(0, name=last_marketpostion_arr_4)
2023-01-03 17:17 DEBUG on stmt: marketpostion_array_4 = arg(1, name=marketpostion_array_4)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = marketpostion_array_4 - last_marketpostion_arr_4
2023-01-03 17:17 DEBUG on stmt: $const8.3 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $10compare_op.4 = $6binary_subtract.2 < $const8.3
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10compare_op.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10compare_op.4': [<numba.core.ir.Assign object at 0x000001C8F4207610>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F41E28B0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F4223CA0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000001C8F4223D60>],
             'last_marketpostion_arr_4': [<numba.core.ir.Assign object at 0x000001C8F422F670>],
             'marketpostion_array_4': [<numba.core.ir.Assign object at 0x000001C8F422ABE0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=329)
           2	LOAD_FAST(arg=1, lineno=329)
           4	LOAD_FAST(arg=0, lineno=343)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	LOAD_FAST(arg=2, lineno=329)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=343)
2023-01-03 17:17 DEBUG stack ['$open_array_42.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$open_array_42.0', '$fee_1_24.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=329)
2023-01-03 17:17 DEBUG stack ['$6binary_multiply.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_multiply.2', '$size_28.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10binary_multiply.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$open_array_42.0'}), (4, {'res': '$fee_1_24.1'}), (6, {'lhs': '$open_array_42.0', 'rhs': '$fee_1_24.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$size_28.3'}), (10, {'lhs': '$6binary_multiply.2', 'rhs': '$size_28.3', 'res': '$10binary_multiply.4'}), (12, {'retval': '$10binary_multiply.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    fee_1_2 = arg(0, name=fee_1_2)           ['fee_1_2']
    open_array_4 = arg(1, name=open_array_4) ['open_array_4']
    size_2 = arg(2, name=size_2)             ['size_2']
    $6binary_multiply.2 = open_array_4 * fee_1_2 ['$6binary_multiply.2', 'fee_1_2', 'open_array_4']
    $10binary_multiply.4 = $6binary_multiply.2 * size_2 ['$10binary_multiply.4', '$6binary_multiply.2', 'size_2']
    $12return_value.5 = cast(value=$10binary_multiply.4) ['$10binary_multiply.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4263AC0>
2023-01-03 17:17 DEBUG on stmt: fee_1_2 = arg(0, name=fee_1_2)
2023-01-03 17:17 DEBUG on stmt: open_array_4 = arg(1, name=open_array_4)
2023-01-03 17:17 DEBUG on stmt: size_2 = arg(2, name=size_2)
2023-01-03 17:17 DEBUG on stmt: $6binary_multiply.2 = open_array_4 * fee_1_2
2023-01-03 17:17 DEBUG on stmt: $10binary_multiply.4 = $6binary_multiply.2 * size_2
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10binary_multiply.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x000001C8F4263970>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F42637F0>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x000001C8F4263C10>],
             'fee_1_2': [<numba.core.ir.Assign object at 0x000001C8F4263670>],
             'open_array_4': [<numba.core.ir.Assign object at 0x000001C8F4263C70>],
             'size_2': [<numba.core.ir.Assign object at 0x000001C8F4263D90>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=400)
           2	LOAD_FAST(arg=0, lineno=400)
           4	LOAD_CONST(arg=1, lineno=1)
           6	COMPARE_OP(arg=4, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=400)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=400)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr_22.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=1)
2023-01-03 17:17 DEBUG stack ['$sell_Fees_arr_22.0', '$const4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$sell_Fees_arr_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$sell_Fees_arr_22.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    sell_Fees_arr_2 = arg(0, name=sell_Fees_arr_2) ['sell_Fees_arr_2']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = sell_Fees_arr_2 > $const4.1 ['$6compare_op.2', '$const4.1', 'sell_Fees_arr_2']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F429CF70>
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr_2 = arg(0, name=sell_Fees_arr_2)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $6compare_op.2 = sell_Fees_arr_2 > $const4.1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F429C310>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F429C520>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001C8F42A0640>],
             'sell_Fees_arr_2': [<numba.core.ir.Assign object at 0x000001C8F429CC10>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=393)
           2	LOAD_FAST(arg=1, lineno=393)
           4	LOAD_FAST(arg=0, lineno=398)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_FAST(arg=2, lineno=402)
          10	BINARY_SUBTRACT(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=393)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=393)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=398)
2023-01-03 17:17 DEBUG stack ['$diff_arr_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$diff_arr_12.0', '$buy_Fees_arr_2_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=402)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_subtract.2', '$sell_Fees_arr_1_18.3']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$10binary_subtract.4']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$diff_arr_12.0'}), (4, {'res': '$buy_Fees_arr_2_14.1'}), (6, {'lhs': '$diff_arr_12.0', 'rhs': '$buy_Fees_arr_2_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$sell_Fees_arr_1_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$sell_Fees_arr_1_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    buy_Fees_arr_2_1 = arg(0, name=buy_Fees_arr_2_1) ['buy_Fees_arr_2_1']
    diff_arr_1 = arg(1, name=diff_arr_1)     ['diff_arr_1']
    sell_Fees_arr_1_1 = arg(2, name=sell_Fees_arr_1_1) ['sell_Fees_arr_1_1']
    $6binary_subtract.2 = diff_arr_1 - buy_Fees_arr_2_1 ['$6binary_subtract.2', 'buy_Fees_arr_2_1', 'diff_arr_1']
    $10binary_subtract.4 = $6binary_subtract.2 - sell_Fees_arr_1_1 ['$10binary_subtract.4', '$6binary_subtract.2', 'sell_Fees_arr_1_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F2BF7280>
2023-01-03 17:17 DEBUG on stmt: buy_Fees_arr_2_1 = arg(0, name=buy_Fees_arr_2_1)
2023-01-03 17:17 DEBUG on stmt: diff_arr_1 = arg(1, name=diff_arr_1)
2023-01-03 17:17 DEBUG on stmt: sell_Fees_arr_1_1 = arg(2, name=sell_Fees_arr_1_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_subtract.2 = diff_arr_1 - buy_Fees_arr_2_1
2023-01-03 17:17 DEBUG on stmt: $10binary_subtract.4 = $6binary_subtract.2 - sell_Fees_arr_1_1
2023-01-03 17:17 DEBUG on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
2023-01-03 17:17 DEBUG on stmt: return $12return_value.5
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x000001C8F2C37A90>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000001C8F2C37A00>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000001C8F3CAB8B0>],
             'buy_Fees_arr_2_1': [<numba.core.ir.Assign object at 0x000001C8F2BFFBB0>],
             'diff_arr_1': [<numba.core.ir.Assign object at 0x000001C8F2BFFD60>],
             'sell_Fees_arr_1_1': [<numba.core.ir.Assign object at 0x000001C8F2BFFE20>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=406)
           2	LOAD_FAST(arg=0, lineno=406)
           4	LOAD_FAST(arg=1, lineno=329)
           6	BINARY_ADD(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=406)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=406)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=329)
2023-01-03 17:17 DEBUG stack ['$_516call_method_95_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$_516call_method_95_12.0', '$init_cash_14.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_add.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_516call_method_95_12.0'}), (4, {'res': '$init_cash_14.1'}), (6, {'lhs': '$_516call_method_95_12.0', 'rhs': '$init_cash_14.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    _516call_method_95_1 = arg(0, name=_516call_method_95_1) ['_516call_method_95_1']
    init_cash_1 = arg(1, name=init_cash_1)   ['init_cash_1']
    $6binary_add.2 = _516call_method_95_1 + init_cash_1 ['$6binary_add.2', '_516call_method_95_1', 'init_cash_1']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3F294F0>
2023-01-03 17:17 DEBUG on stmt: _516call_method_95_1 = arg(0, name=_516call_method_95_1)
2023-01-03 17:17 DEBUG on stmt: init_cash_1 = arg(1, name=init_cash_1)
2023-01-03 17:17 DEBUG on stmt: $6binary_add.2 = _516call_method_95_1 + init_cash_1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_add.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x000001C8F3FAF5B0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3FAFD30>],
             '_516call_method_95_1': [<numba.core.ir.Assign object at 0x000001C8CEF25340>],
             'init_cash_1': [<numba.core.ir.Assign object at 0x000001C8F3E98E80>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=409)
           2	LOAD_FAST(arg=0, lineno=409)
           4	LOAD_CONST(arg=1, lineno=1)
           6	BINARY_POWER(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=409)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=409)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2023-01-03 17:17 DEBUG stack ['$DD_per_array_12.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=BINARY_POWER(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$DD_per_array_12.0', '$const4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
2023-01-03 17:17 DEBUG stack ['$6binary_power.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$DD_per_array_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$DD_per_array_12.0', 'rhs': '$const4.1', 'res': '$6binary_power.2'}), (8, {'retval': '$6binary_power.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    DD_per_array_1 = arg(0, name=DD_per_array_1) ['DD_per_array_1']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_power.2 = DD_per_array_1 ** $const4.1 ['$6binary_power.2', '$const4.1', 'DD_per_array_1']
    $8return_value.3 = cast(value=$6binary_power.2) ['$6binary_power.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F3D5A220>
2023-01-03 17:17 DEBUG on stmt: DD_per_array_1 = arg(0, name=DD_per_array_1)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 2)
2023-01-03 17:17 DEBUG on stmt: $6binary_power.2 = DD_per_array_1 ** $const4.1
2023-01-03 17:17 DEBUG on stmt: $8return_value.3 = cast(value=$6binary_power.2)
2023-01-03 17:17 DEBUG on stmt: return $8return_value.3
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_power.2': [<numba.core.ir.Assign object at 0x000001C8F3C5FF40>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001C8F3C5FF70>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001C8F3C5F070>],
             'DD_per_array_1': [<numba.core.ir.Assign object at 0x000001C8F3D5A3D0>]})
2023-01-03 17:17 DEBUG SSA violators set()
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=216)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=237)
         138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	JUMP_ABSOLUTE(arg=130, lineno=241)
>        172	LOAD_FAST(arg=3, lineno=243)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=243)
         176	LOAD_CONST(arg=8, lineno=243)
         178	LOAD_FAST(arg=2, lineno=243)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         182	RETURN_VALUE(arg=None, lineno=243)
>        184	LOAD_FAST(arg=2, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=216)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
2023-01-03 17:17 DEBUG stack ['$2load_deref.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
2023-01-03 17:17 DEBUG stack ['$2load_deref.0', '$const4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
2023-01-03 17:17 DEBUG stack ['$6call_function.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
2023-01-03 17:17 DEBUG stack ['$10load_deref.3']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
2023-01-03 17:17 DEBUG stack ['$10load_deref.3', '$a12.4']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
2023-01-03 17:17 DEBUG stack ['$14call_function.5']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
2023-01-03 17:17 DEBUG stack ['$b18.6']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
2023-01-03 17:17 DEBUG stack ['$b18.6', '$const20.7']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
2023-01-03 17:17 DEBUG stack ['$22compare_op.8']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
2023-01-03 17:17 DEBUG stack ['$const26.0']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2023-01-03 17:17 DEBUG stack ['$b30.1']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
2023-01-03 17:17 DEBUG stack ['$32unary_negative.2']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
2023-01-03 17:17 DEBUG stack ['$exp36.3']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
2023-01-03 17:17 DEBUG stack ['$exp36.3', '$const38.4']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
2023-01-03 17:17 DEBUG stack ['$40compare_op.5']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
2023-01-03 17:17 DEBUG stack ['$const98.0']
2023-01-03 17:17 DEBUG dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
2023-01-03 17:17 DEBUG stack ['$b102.1']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
2023-01-03 17:17 DEBUG stack ['$44load_global.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
2023-01-03 17:17 DEBUG stack ['$48load_deref.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
2023-01-03 17:17 DEBUG stack ['$exp106.0']
2023-01-03 17:17 DEBUG dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
2023-01-03 17:17 DEBUG stack ['$exp106.0', '$const108.1']
2023-01-03 17:17 DEBUG dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
2023-01-03 17:17 DEBUG stack ['$110compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
2023-01-03 17:17 DEBUG stack ['$a52.0']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
2023-01-03 17:17 DEBUG stack ['$a52.0', '$const54.1']
2023-01-03 17:17 DEBUG dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
2023-01-03 17:17 DEBUG stack ['$56compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
2023-01-03 17:17 DEBUG stack ['$114load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
2023-01-03 17:17 DEBUG stack ['$116load_method.1']
2023-01-03 17:17 DEBUG dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
2023-01-03 17:17 DEBUG stack ['$116load_method.1', '$a118.2']
2023-01-03 17:17 DEBUG dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
2023-01-03 17:17 DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3']
2023-01-03 17:17 DEBUG dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
2023-01-03 17:17 DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
2023-01-03 17:17 DEBUG dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
2023-01-03 17:17 DEBUG stack ['$116load_method.1', '$a118.2', '$124call_function.5']
2023-01-03 17:17 DEBUG dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
2023-01-03 17:17 DEBUG stack ['$126call_method.6']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
2023-01-03 17:17 DEBUG stack ['$exp130.0']
2023-01-03 17:17 DEBUG dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
2023-01-03 17:17 DEBUG stack ['$exp130.0', '$const132.1']
2023-01-03 17:17 DEBUG dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
2023-01-03 17:17 DEBUG stack ['$134compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
2023-01-03 17:17 DEBUG stack ['$60load_deref.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
2023-01-03 17:17 DEBUG stack ['$a76.0']
2023-01-03 17:17 DEBUG dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
2023-01-03 17:17 DEBUG stack ['$a76.0', '$const78.1']
2023-01-03 17:17 DEBUG dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
2023-01-03 17:17 DEBUG stack ['$80compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
2023-01-03 17:17 DEBUG stack ['$exp138.0']
2023-01-03 17:17 DEBUG dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
2023-01-03 17:17 DEBUG stack ['$exp138.0', '$const140.1']
2023-01-03 17:17 DEBUG dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
2023-01-03 17:17 DEBUG stack ['$142binary_and.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
2023-01-03 17:17 DEBUG stack ['$invert172.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
2023-01-03 17:17 DEBUG stack ['$64load_deref.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
2023-01-03 17:17 DEBUG stack ['$68load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
2023-01-03 17:17 DEBUG stack ['$68load_global.0', '$const70.1']
2023-01-03 17:17 DEBUG dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
2023-01-03 17:17 DEBUG stack ['$72call_function.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
2023-01-03 17:17 DEBUG stack ['$a84.0']
2023-01-03 17:17 DEBUG dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
2023-01-03 17:17 DEBUG stack ['$a84.0', '$const86.1']
2023-01-03 17:17 DEBUG dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
2023-01-03 17:17 DEBUG stack ['$88compare_op.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
2023-01-03 17:17 DEBUG stack ['$r146.0']
2023-01-03 17:17 DEBUG dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
2023-01-03 17:17 DEBUG stack ['$r146.0', '$a148.1']
2023-01-03 17:17 DEBUG dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
2023-01-03 17:17 DEBUG stack ['$150inplace_multiply.2']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
2023-01-03 17:17 DEBUG stack ['$exp154.0']
2023-01-03 17:17 DEBUG dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
2023-01-03 17:17 DEBUG stack ['$exp154.0', '$const156.1']
2023-01-03 17:17 DEBUG dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
2023-01-03 17:17 DEBUG stack ['$158inplace_rshift.2']
2023-01-03 17:17 DEBUG dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
2023-01-03 17:17 DEBUG stack ['$a162.3']
2023-01-03 17:17 DEBUG dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
2023-01-03 17:17 DEBUG stack ['$a162.3', '$a164.4']
2023-01-03 17:17 DEBUG dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
2023-01-03 17:17 DEBUG stack ['$166inplace_multiply.5']
2023-01-03 17:17 DEBUG dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
2023-01-03 17:17 DEBUG stack ['$const176.0']
2023-01-03 17:17 DEBUG dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
2023-01-03 17:17 DEBUG stack ['$const176.0', '$r178.1']
2023-01-03 17:17 DEBUG dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
2023-01-03 17:17 DEBUG stack ['$180binary_true_divide.2']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
2023-01-03 17:17 DEBUG stack ['$r184.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
2023-01-03 17:17 DEBUG stack ['$const92.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=130 nstack_initial=0)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>, {})
2023-01-03 17:17 DEBUG keep phismap: {}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>, {})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8CEED0460>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x000001C8CEED65E0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F3EB2BB0>],
             '$112pred': [<numba.core.ir.Assign object at 0x000001C8F3EB5D90>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x000001C8F3ED1670>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x000001C8F3ED1910>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x000001C8F3F23520>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x000001C8F3E9D220>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x000001C8F3CBA490>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x000001C8F3F5C1F0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x000001C8F3E44580>],
             '$136pred': [<numba.core.ir.Assign object at 0x000001C8F4073B50>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x000001C8F3F23310>],
             '$144pred': [<numba.core.ir.Assign object at 0x000001C8F3F23220>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x000001C8F2C77C40>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x000001C8CEDCAD30>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x000001C8F3F37640>],
             '$174pred': [<numba.core.ir.Assign object at 0x000001C8F3F37970>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x000001C8CEE0AC10>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x000001C8CEE0A610>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x000001C8CEF2A160>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x000001C8CEF9DF70>],
             '$24pred': [<numba.core.ir.Assign object at 0x000001C8CEF9DA60>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x000001C8F3D5AB20>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x000001C8F2BD9370>],
             '$42pred': [<numba.core.ir.Assign object at 0x000001C8F2BD98E0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x000001C8F2BD9130>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x000001C8F2BD9610>],
             '$50pred': [<numba.core.ir.Assign object at 0x000001C8CEF76D00>],
             '$const108.1': [<numba.core.ir.Assign object at 0x000001C8F3EF4910>],
             '$const132.1': [<numba.core.ir.Assign object at 0x000001C8F3E44880>],
             '$const140.1': [<numba.core.ir.Assign object at 0x000001C8F3F23070>],
             '$const156.1': [<numba.core.ir.Assign object at 0x000001C8CEDCA190>],
             '$const176.0': [<numba.core.ir.Assign object at 0x000001C8CEE0A9D0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x000001C8CEF9DBB0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x000001C8F2BD9AF0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000001C8CEED6850>],
             'a': [<numba.core.ir.Assign object at 0x000001C8F3D5A970>],
             'a.1': [<numba.core.ir.Assign object at 0x000001C8CEED60A0>,
                     <numba.core.ir.Assign object at 0x000001C8F3F37A90>],
             'b': [<numba.core.ir.Assign object at 0x000001C8F3D5A370>],
             'bool112': [<numba.core.ir.Assign object at 0x000001C8F3EB28E0>],
             'bool136': [<numba.core.ir.Assign object at 0x000001C8F4073C40>],
             'bool144': [<numba.core.ir.Assign object at 0x000001C8F3F231C0>],
             'bool174': [<numba.core.ir.Assign object at 0x000001C8F3F37700>],
             'bool24': [<numba.core.ir.Assign object at 0x000001C8CEF9D9D0>],
             'bool42': [<numba.core.ir.Assign object at 0x000001C8F2BD9C70>],
             'bool50': [<numba.core.ir.Assign object at 0x000001C8CEF76C70>],
             'exp': [<numba.core.ir.Assign object at 0x000001C8F2BD92E0>,
                     <numba.core.ir.Assign object at 0x000001C8CEE995E0>,
                     <numba.core.ir.Assign object at 0x000001C8CEDCA2E0>],
             'invert': [<numba.core.ir.Assign object at 0x000001C8CEF9DAC0>,
                        <numba.core.ir.Assign object at 0x000001C8CEE994F0>],
             'r': [<numba.core.ir.Assign object at 0x000001C8CEED6F10>,
                   <numba.core.ir.Assign object at 0x000001C8F2C77C70>]})
2023-01-03 17:17 DEBUG SSA violators {'r', 'invert', 'a.1', 'exp'}
2023-01-03 17:17 DEBUG Fix SSA violator on var r
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG first assign: r
2023-01-03 17:17 DEBUG replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r = $150inplace_multiply.2
2023-01-03 17:17 DEBUG replaced with: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001C8CEF48760>],
             146: [<numba.core.ir.Assign object at 0x000001C8CEF2AFA0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 146
2023-01-03 17:17 DEBUG idom 138 from label 146
2023-01-03 17:17 DEBUG find_def_from_bottom label 138
2023-01-03 17:17 DEBUG find_def_from_top label 138
2023-01-03 17:17 DEBUG idom 130 from label 138
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG find_def_from_top label 130
2023-01-03 17:17 DEBUG insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
2023-01-03 17:17 DEBUG find_def_from_bottom label 106
2023-01-03 17:17 DEBUG find_def_from_top label 106
2023-01-03 17:17 DEBUG idom 0 from label 106
2023-01-03 17:17 DEBUG find_def_from_bottom label 0
2023-01-03 17:17 DEBUG incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def_from_bottom label 154
2023-01-03 17:17 DEBUG find_def_from_top label 154
2023-01-03 17:17 DEBUG insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2023-01-03 17:17 DEBUG find_def_from_bottom label 138
2023-01-03 17:17 DEBUG find_def_from_top label 138
2023-01-03 17:17 DEBUG idom 130 from label 138
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
2023-01-03 17:17 DEBUG find_def_from_bottom label 146
2023-01-03 17:17 DEBUG incoming_def r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-01-03 17:17 DEBUG replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r
2023-01-03 17:17 DEBUG find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
2023-01-03 17:17 DEBUG find_def_from_top label 176
2023-01-03 17:17 DEBUG idom 172 from label 176
2023-01-03 17:17 DEBUG find_def_from_bottom label 172
2023-01-03 17:17 DEBUG find_def_from_top label 172
2023-01-03 17:17 DEBUG idom 130 from label 172
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG replaced with: $180binary_true_divide.2 = $const176.0 / r.2
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3FE2640>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r)
2023-01-03 17:17 DEBUG find_def var='r' stmt=$186return_value.1 = cast(value=r)
2023-01-03 17:17 DEBUG find_def_from_top label 184
2023-01-03 17:17 DEBUG idom 172 from label 184
2023-01-03 17:17 DEBUG find_def_from_bottom label 172
2023-01-03 17:17 DEBUG find_def_from_top label 172
2023-01-03 17:17 DEBUG idom 130 from label 172
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG replaced with: $186return_value.1 = cast(value=r.2)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG Fix SSA violator on var invert
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG first assign: invert
2023-01-03 17:17 DEBUG replaced with: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, False)
2023-01-03 17:17 DEBUG replaced with: invert.1 = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8CEE0AAF0>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r.2)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000001C8CEF48700>],
             98: [<numba.core.ir.Assign object at 0x000001C8CEF2ADC0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: invert.1 = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def_from_top label 172
2023-01-03 17:17 DEBUG idom 130 from label 172
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG find_def_from_top label 130
2023-01-03 17:17 DEBUG idom 106 from label 130
2023-01-03 17:17 DEBUG find_def_from_bottom label 106
2023-01-03 17:17 DEBUG find_def_from_top label 106
2023-01-03 17:17 DEBUG insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2023-01-03 17:17 DEBUG find_def_from_bottom label 48
2023-01-03 17:17 DEBUG find_def_from_top label 48
2023-01-03 17:17 DEBUG idom 26 from label 48
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG incoming_def invert = const(bool, True)
2023-01-03 17:17 DEBUG find_def_from_bottom label 98
2023-01-03 17:17 DEBUG incoming_def invert.1 = const(bool, False)
2023-01-03 17:17 DEBUG replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEED0D90>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r.2)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG Fix SSA violator on var a.1
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG first assign: a.1
2023-01-03 17:17 DEBUG replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: invert.1 = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG replaced with: a.1.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r.2)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001C8F3D14340>],
             154: [<numba.core.ir.Assign object at 0x000001C8CEED0730>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: invert.1 = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def_from_top label 114
2023-01-03 17:17 DEBUG idom 106 from label 114
2023-01-03 17:17 DEBUG find_def_from_bottom label 106
2023-01-03 17:17 DEBUG find_def_from_top label 106
2023-01-03 17:17 DEBUG idom 0 from label 106
2023-01-03 17:17 DEBUG find_def_from_bottom label 0
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 146
2023-01-03 17:17 DEBUG idom 138 from label 146
2023-01-03 17:17 DEBUG find_def_from_bottom label 138
2023-01-03 17:17 DEBUG find_def_from_top label 138
2023-01-03 17:17 DEBUG idom 130 from label 138
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG find_def_from_top label 130
2023-01-03 17:17 DEBUG insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
2023-01-03 17:17 DEBUG find_def_from_bottom label 106
2023-01-03 17:17 DEBUG find_def_from_top label 106
2023-01-03 17:17 DEBUG idom 0 from label 106
2023-01-03 17:17 DEBUG find_def_from_bottom label 0
2023-01-03 17:17 DEBUG incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG find_def_from_bottom label 154
2023-01-03 17:17 DEBUG incoming_def a.1.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 154
2023-01-03 17:17 DEBUG idom 138 from label 154
2023-01-03 17:17 DEBUG find_def_from_bottom label 138
2023-01-03 17:17 DEBUG find_def_from_top label 138
2023-01-03 17:17 DEBUG idom 130 from label 138
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8CEF2A310>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r.2)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG Fix SSA violator on var exp
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG first assign: exp
2023-01-03 17:17 DEBUG replaced with: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: invert.1 = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp = b
2023-01-03 17:17 DEBUG replaced with: exp.1 = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp = $158inplace_rshift.2
2023-01-03 17:17 DEBUG replaced with: exp.2 = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F3C5FE20>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r.2)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000001C8CEE0A310>],
             98: [<numba.core.ir.Assign object at 0x000001C8F3D14C40>],
             154: [<numba.core.ir.Assign object at 0x000001C8CEEA59D0>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: a = arg(0, name=a)
2023-01-03 17:17 DEBUG on stmt: b = arg(1, name=b)
2023-01-03 17:17 DEBUG on stmt: $2load_deref.0 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: $const4.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $10load_deref.3 = freevar(tp: float64)
2023-01-03 17:17 DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $const20.7 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $22compare_op.8 = b < $const20.7
2023-01-03 17:17 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $24pred, 26, 98
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 26
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: invert = const(bool, True)
2023-01-03 17:17 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG on stmt: $const38.4 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
2023-01-03 17:17 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $42pred, 44, 48
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 44
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'OverflowError'>
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 48
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
2023-01-03 17:17 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 98
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: invert.1 = const(bool, False)
2023-01-03 17:17 DEBUG on stmt: exp.1 = b
2023-01-03 17:17 DEBUG on stmt: jump 106
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 106
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
2023-01-03 17:17 DEBUG on stmt: $const108.1 = const(int, 65536)
2023-01-03 17:17 DEBUG on stmt: $110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
2023-01-03 17:17 DEBUG find_def_from_top label 106
2023-01-03 17:17 DEBUG insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2023-01-03 17:17 DEBUG find_def_from_bottom label 48
2023-01-03 17:17 DEBUG find_def_from_top label 48
2023-01-03 17:17 DEBUG idom 26 from label 48
2023-01-03 17:17 DEBUG find_def_from_bottom label 26
2023-01-03 17:17 DEBUG incoming_def exp = unary(fn=<built-in function neg>, value=b)
2023-01-03 17:17 DEBUG find_def_from_bottom label 98
2023-01-03 17:17 DEBUG incoming_def exp.1 = b
2023-01-03 17:17 DEBUG replaced with: $110compare_op.2 = exp.3 > $const108.1
2023-01-03 17:17 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $112pred, 114, 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 114
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2023-01-03 17:17 DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2023-01-03 17:17 DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
2023-01-03 17:17 DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
2023-01-03 17:17 DEBUG on stmt: return $128return_value.7
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 130
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2023-01-03 17:17 DEBUG on stmt: $const132.1 = const(int, 0)
2023-01-03 17:17 DEBUG on stmt: $134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
2023-01-03 17:17 DEBUG find_def_from_top label 130
2023-01-03 17:17 DEBUG insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
2023-01-03 17:17 DEBUG find_def_from_bottom label 106
2023-01-03 17:17 DEBUG incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
2023-01-03 17:17 DEBUG find_def_from_bottom label 154
2023-01-03 17:17 DEBUG incoming_def exp.2 = $158inplace_rshift.2
2023-01-03 17:17 DEBUG replaced with: $134compare_op.2 = exp.4 != $const132.1
2023-01-03 17:17 DEBUG on stmt: bool136 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $136pred, 138, 172
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 138
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $const140.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
2023-01-03 17:17 DEBUG find_def_from_top label 138
2023-01-03 17:17 DEBUG idom 130 from label 138
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG replaced with: $142binary_and.2 = exp.4 & $const140.1
2023-01-03 17:17 DEBUG on stmt: bool144 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $144pred, 146, 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 146
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: r.1 = $150inplace_multiply.2
2023-01-03 17:17 DEBUG on stmt: jump 154
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 154
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2023-01-03 17:17 DEBUG on stmt: $const156.1 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 154
2023-01-03 17:17 DEBUG idom 138 from label 154
2023-01-03 17:17 DEBUG find_def_from_bottom label 138
2023-01-03 17:17 DEBUG find_def_from_top label 138
2023-01-03 17:17 DEBUG idom 130 from label 138
2023-01-03 17:17 DEBUG find_def_from_bottom label 130
2023-01-03 17:17 DEBUG replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: exp.2 = $158inplace_rshift.2
2023-01-03 17:17 DEBUG on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: a.1.1 = $166inplace_multiply.5
2023-01-03 17:17 DEBUG on stmt: jump 130
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 172
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: bool174 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $174pred, 176, 184
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 176
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $const176.0 = const(float, 1.0)
2023-01-03 17:17 DEBUG on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2023-01-03 17:17 DEBUG on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2023-01-03 17:17 DEBUG on stmt: return $182return_value.3
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 184
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F3D14A00>
2023-01-03 17:17 DEBUG on stmt: $186return_value.1 = cast(value=r.2)
2023-01-03 17:17 DEBUG on stmt: return $186return_value.1
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=171)
           2	LOAD_DEREF(arg=0, lineno=171)
           4	STORE_FAST(arg=1, lineno=171)
           6	LOAD_GLOBAL(arg=0, lineno=172)
           8	LOAD_METHOD(arg=1, lineno=172)
          10	LOAD_FAST(arg=0, lineno=172)
          12	CALL_METHOD(arg=1, lineno=172)
          14	GET_ITER(arg=None, lineno=172)
>         16	FOR_ITER(arg=16, lineno=172)
          18	STORE_FAST(arg=2, lineno=172)
          20	LOAD_FAST(arg=1, lineno=173)
          22	LOAD_FAST(arg=2, lineno=173)
          24	LOAD_METHOD(arg=2, lineno=173)
          26	CALL_METHOD(arg=0, lineno=173)
          28	INPLACE_ADD(arg=None, lineno=173)
          30	STORE_FAST(arg=1, lineno=173)
          32	JUMP_ABSOLUTE(arg=16, lineno=173)
>         34	LOAD_FAST(arg=1, lineno=174)
          36	RETURN_VALUE(arg=None, lineno=174)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=171)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=171)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=STORE_FAST(arg=1, lineno=171)
2023-01-03 17:17 DEBUG stack ['$2load_deref.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=172)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=172)
2023-01-03 17:17 DEBUG stack ['$6load_global.1']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=172)
2023-01-03 17:17 DEBUG stack ['$8load_method.2']
2023-01-03 17:17 DEBUG dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=172)
2023-01-03 17:17 DEBUG stack ['$8load_method.2', '$arr10.3']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=GET_ITER(arg=None, lineno=172)
2023-01-03 17:17 DEBUG stack ['$12call_method.4']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=16 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi16.0']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=FOR_ITER(arg=16, lineno=172)
2023-01-03 17:17 DEBUG stack ['$phi16.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=174)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=174)
2023-01-03 17:17 DEBUG stack ['$c34.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=18 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi18.0', '$phi18.1']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=STORE_FAST(arg=2, lineno=172)
2023-01-03 17:17 DEBUG stack ['$phi18.0', '$phi18.1']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=173)
2023-01-03 17:17 DEBUG stack ['$phi18.0']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=173)
2023-01-03 17:17 DEBUG stack ['$phi18.0', '$c20.2']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=173)
2023-01-03 17:17 DEBUG stack ['$phi18.0', '$c20.2', '$v22.3']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=173)
2023-01-03 17:17 DEBUG stack ['$phi18.0', '$c20.2', '$24load_method.4']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=173)
2023-01-03 17:17 DEBUG stack ['$phi18.0', '$c20.2', '$26call_method.5']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=STORE_FAST(arg=1, lineno=173)
2023-01-03 17:17 DEBUG stack ['$phi18.0', '$28inplace_add.6']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=173)
2023-01-03 17:17 DEBUG stack ['$phi18.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=16 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'retval': '$c34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0.0)                   ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $36return_value.1 = cast(value=c)        ['$36return_value.1', 'c']
    return $36return_value.1                 ['$36return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4072B50>
2023-01-03 17:17 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-03 17:17 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2023-01-03 17:17 DEBUG on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2023-01-03 17:17 DEBUG on stmt: $phi16.0 = $14get_iter.5
2023-01-03 17:17 DEBUG on stmt: jump 16
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 16
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4072B50>
2023-01-03 17:17 DEBUG on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2023-01-03 17:17 DEBUG on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi18.1 = $16for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $16for_iter.3, 18, 34
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 18
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4072B50>
2023-01-03 17:17 DEBUG on stmt: v = $phi18.1
2023-01-03 17:17 DEBUG on stmt: $24load_method.4 = getattr(value=v, attr=item)
2023-01-03 17:17 DEBUG on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: c = $28inplace_add.6
2023-01-03 17:17 DEBUG on stmt: jump 16
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F4072B50>
2023-01-03 17:17 DEBUG on stmt: $36return_value.1 = cast(value=c)
2023-01-03 17:17 DEBUG on stmt: return $36return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x000001C8F400BEE0>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x000001C8F400B610>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F400B340>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F400BA00>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F400BC40>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x000001C8F4113640>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x000001C8F4113FD0>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x000001C8F4113DF0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x000001C8F4113370>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x000001C8F400BAF0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x000001C8F400BF70>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x000001C8F400B670>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x000001C8F400BE20>],
             'arr': [<numba.core.ir.Assign object at 0x000001C8F4002AC0>],
             'c': [<numba.core.ir.Assign object at 0x000001C8F4002A60>,
                   <numba.core.ir.Assign object at 0x000001C8F4113730>],
             'v': [<numba.core.ir.Assign object at 0x000001C8F3FD1F40>]})
2023-01-03 17:17 DEBUG SSA violators {'c'}
2023-01-03 17:17 DEBUG Fix SSA violator on var c
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F40720D0>
2023-01-03 17:17 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-03 17:17 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG first assign: c
2023-01-03 17:17 DEBUG replaced with: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2023-01-03 17:17 DEBUG on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2023-01-03 17:17 DEBUG on stmt: $phi16.0 = $14get_iter.5
2023-01-03 17:17 DEBUG on stmt: jump 16
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 16
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F40720D0>
2023-01-03 17:17 DEBUG on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2023-01-03 17:17 DEBUG on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi18.1 = $16for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $16for_iter.3, 18, 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 18
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F40720D0>
2023-01-03 17:17 DEBUG on stmt: v = $phi18.1
2023-01-03 17:17 DEBUG on stmt: $24load_method.4 = getattr(value=v, attr=item)
2023-01-03 17:17 DEBUG on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: c = $28inplace_add.6
2023-01-03 17:17 DEBUG replaced with: c.1 = $28inplace_add.6
2023-01-03 17:17 DEBUG on stmt: jump 16
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x000001C8F40720D0>
2023-01-03 17:17 DEBUG on stmt: $36return_value.1 = cast(value=c)
2023-01-03 17:17 DEBUG on stmt: return $36return_value.1
2023-01-03 17:17 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001C8F40725E0>],
             18: [<numba.core.ir.Assign object at 0x000001C8F4072790>]})
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F4072850>
2023-01-03 17:17 DEBUG on stmt: arr = arg(0, name=arr)
2023-01-03 17:17 DEBUG on stmt: c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG on stmt: $6load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\user\\Desktop\\程式專區\\lab_vbt\\lib\\site-packages\\numpy\\__init__.py'>)
2023-01-03 17:17 DEBUG on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2023-01-03 17:17 DEBUG on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2023-01-03 17:17 DEBUG on stmt: $phi16.0 = $14get_iter.5
2023-01-03 17:17 DEBUG on stmt: jump 16
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 16
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F4072850>
2023-01-03 17:17 DEBUG on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2023-01-03 17:17 DEBUG on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi18.1 = $16for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $16for_iter.3, 18, 34
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 18
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F4072850>
2023-01-03 17:17 DEBUG on stmt: v = $phi18.1
2023-01-03 17:17 DEBUG on stmt: $24load_method.4 = getattr(value=v, attr=item)
2023-01-03 17:17 DEBUG on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG find_def_from_top label 18
2023-01-03 17:17 DEBUG idom 16 from label 18
2023-01-03 17:17 DEBUG find_def_from_bottom label 16
2023-01-03 17:17 DEBUG find_def_from_top label 16
2023-01-03 17:17 DEBUG insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2023-01-03 17:17 DEBUG find_def_from_bottom label 0
2023-01-03 17:17 DEBUG incoming_def c = freevar(zero: 0.0)
2023-01-03 17:17 DEBUG find_def_from_bottom label 18
2023-01-03 17:17 DEBUG incoming_def c.1 = $28inplace_add.6
2023-01-03 17:17 DEBUG replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2023-01-03 17:17 DEBUG on stmt: c.1 = $28inplace_add.6
2023-01-03 17:17 DEBUG on stmt: jump 16
2023-01-03 17:17 DEBUG ==== SSA block rewrite pass on 34
2023-01-03 17:17 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x000001C8F4072850>
2023-01-03 17:17 DEBUG on stmt: $36return_value.1 = cast(value=c)
2023-01-03 17:17 DEBUG find_def var='c' stmt=$36return_value.1 = cast(value=c)
2023-01-03 17:17 DEBUG find_def_from_top label 34
2023-01-03 17:17 DEBUG idom 16 from label 34
2023-01-03 17:17 DEBUG find_def_from_bottom label 16
2023-01-03 17:17 DEBUG replaced with: $36return_value.1 = cast(value=c.2)
2023-01-03 17:17 DEBUG on stmt: return $36return_value.1
2023-01-03 17:17 DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3256)
           2	LOAD_GLOBAL(arg=0, lineno=3256)
           4	LOAD_FAST(arg=0, lineno=3256)
           6	CALL_FUNCTION(arg=1, lineno=3256)
           8	STORE_FAST(arg=2, lineno=3256)
          10	LOAD_GLOBAL(arg=1, lineno=3257)
          12	LOAD_FAST(arg=2, lineno=3257)
          14	CALL_FUNCTION(arg=1, lineno=3257)
          16	GET_ITER(arg=None, lineno=3257)
>         18	FOR_ITER(arg=40, lineno=3257)
          20	STORE_FAST(arg=3, lineno=3257)
          22	LOAD_FAST(arg=0, lineno=3258)
          24	LOAD_FAST(arg=3, lineno=3258)
          26	BINARY_SUBSCR(arg=None, lineno=3258)
          28	LOAD_FAST(arg=1, lineno=3258)
          30	LOAD_GLOBAL(arg=0, lineno=3258)
          32	LOAD_FAST(arg=1, lineno=3258)
          34	CALL_FUNCTION(arg=1, lineno=3258)
          36	LOAD_FAST(arg=2, lineno=3258)
          38	BINARY_SUBTRACT(arg=None, lineno=3258)
          40	LOAD_FAST(arg=3, lineno=3258)
          42	BINARY_ADD(arg=None, lineno=3258)
          44	BINARY_SUBSCR(arg=None, lineno=3258)
          46	COMPARE_OP(arg=3, lineno=3258)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=3258)
          50	LOAD_GLOBAL(arg=2, lineno=3259)
          52	LOAD_CONST(arg=1, lineno=3259)
          54	CALL_FUNCTION(arg=1, lineno=3259)
          56	RAISE_VARARGS(arg=1, lineno=3259)
          58	JUMP_ABSOLUTE(arg=18, lineno=3259)
>         60	LOAD_CONST(arg=0, lineno=3259)
          62	RETURN_VALUE(arg=None, lineno=3259)
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3256)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3256)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3256)
2023-01-03 17:17 DEBUG stack ['$2load_global.0']
2023-01-03 17:17 DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3256)
2023-01-03 17:17 DEBUG stack ['$2load_global.0', '$shape4.1']
2023-01-03 17:17 DEBUG dispatch pc=8, inst=STORE_FAST(arg=2, lineno=3256)
2023-01-03 17:17 DEBUG stack ['$6call_function.2']
2023-01-03 17:17 DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=3257)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=3257)
2023-01-03 17:17 DEBUG stack ['$10load_global.3']
2023-01-03 17:17 DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=3257)
2023-01-03 17:17 DEBUG stack ['$10load_global.3', '$n12.4']
2023-01-03 17:17 DEBUG dispatch pc=16, inst=GET_ITER(arg=None, lineno=3257)
2023-01-03 17:17 DEBUG stack ['$14call_function.5']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=18 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi18.0']
2023-01-03 17:17 DEBUG dispatch pc=18, inst=FOR_ITER(arg=40, lineno=3257)
2023-01-03 17:17 DEBUG stack ['$phi18.0']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: []
2023-01-03 17:17 DEBUG dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=3259)
2023-01-03 17:17 DEBUG stack []
2023-01-03 17:17 DEBUG dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=3259)
2023-01-03 17:17 DEBUG stack ['$const60.0']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=20 nstack_initial=2)])
2023-01-03 17:17 DEBUG stack: ['$phi20.0', '$phi20.1']
2023-01-03 17:17 DEBUG dispatch pc=20, inst=STORE_FAST(arg=3, lineno=3257)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$phi20.1']
2023-01-03 17:17 DEBUG dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0']
2023-01-03 17:17 DEBUG dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$shape22.2']
2023-01-03 17:17 DEBUG dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$shape22.2', '$i24.3']
2023-01-03 17:17 DEBUG dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4']
2023-01-03 17:17 DEBUG dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
2023-01-03 17:17 DEBUG dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
2023-01-03 17:17 DEBUG dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
2023-01-03 17:17 DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
2023-01-03 17:17 DEBUG dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
2023-01-03 17:17 DEBUG dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
2023-01-03 17:17 DEBUG dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
2023-01-03 17:17 DEBUG dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
2023-01-03 17:17 DEBUG dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
2023-01-03 17:17 DEBUG dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=3258)
2023-01-03 17:17 DEBUG stack ['$phi20.0', '$46compare_op.14']
2023-01-03 17:17 DEBUG end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
2023-01-03 17:17 DEBUG stack: ['$phi50.0']
2023-01-03 17:17 DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=3259)
2023-01-03 17:17 DEBUG stack ['$phi50.0']
2023-01-03 17:17 DEBUG dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=3259)
2023-01-03 17:17 DEBUG stack ['$phi50.0', '$50load_global.1']
2023-01-03 17:17 DEBUG dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=3259)
2023-01-03 17:17 DEBUG stack ['$phi50.0', '$50load_global.1', '$const52.2']
2023-01-03 17:17 DEBUG dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=3259)
2023-01-03 17:17 DEBUG stack ['$phi50.0', '$54call_function.3']
2023-01-03 17:17 DEBUG end state. edges=[]
2023-01-03 17:17 DEBUG pending: deque([State(pc_initial=18 nstack_initial=1)])
2023-01-03 17:17 DEBUG -------------------------Prune PHIs-------------------------
2023-01-03 17:17 DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
2023-01-03 17:17 DEBUG defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2023-01-03 17:17 DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2023-01-03 17:17 DEBUG keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2023-01-03 17:17 DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2023-01-03 17:17 DEBUG ----------------------DONE Prune PHIs-----------------------
2023-01-03 17:17 DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-01-03 17:17 DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3258),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3259)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 0
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F42FA9D0>
2023-01-03 17:17 DEBUG on stmt: shape = arg(0, name=shape)
2023-01-03 17:17 DEBUG on stmt: main_shape = arg(1, name=main_shape)
2023-01-03 17:17 DEBUG on stmt: $2load_global.0 = global(len: <built-in function len>)
2023-01-03 17:17 DEBUG on stmt: n = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $10load_global.3 = global(range: <class 'range'>)
2023-01-03 17:17 DEBUG on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
2023-01-03 17:17 DEBUG on stmt: $phi18.0 = $16get_iter.6
2023-01-03 17:17 DEBUG on stmt: jump 18
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 18
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F42FA9D0>
2023-01-03 17:17 DEBUG on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2023-01-03 17:17 DEBUG on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2023-01-03 17:17 DEBUG on stmt: $phi20.1 = $18for_iter.2
2023-01-03 17:17 DEBUG on stmt: branch $18for_iter.3, 20, 60
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 20
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F42FA9D0>
2023-01-03 17:17 DEBUG on stmt: i = $phi20.1
2023-01-03 17:17 DEBUG on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $30load_global.6 = global(len: <built-in function len>)
2023-01-03 17:17 DEBUG on stmt: $34call_function.8 = const(int, 1)
2023-01-03 17:17 DEBUG on stmt: $38binary_subtract.10 = $34call_function.8 - n
2023-01-03 17:17 DEBUG on stmt: $42binary_add.12 = $38binary_subtract.10 + i
2023-01-03 17:17 DEBUG on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
2023-01-03 17:17 DEBUG on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
2023-01-03 17:17 DEBUG on stmt: bool48 = global(bool: <class 'bool'>)
2023-01-03 17:17 DEBUG on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3258),), kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: branch $48pred, 50, 18
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 50
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F42FA9D0>
2023-01-03 17:17 DEBUG on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
2023-01-03 17:17 DEBUG on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
2023-01-03 17:17 DEBUG on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3259)], kws=(), vararg=None, varkwarg=None, target=None)
2023-01-03 17:17 DEBUG on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2023-01-03 17:17 DEBUG ==== SSA block analysis pass on 60
2023-01-03 17:17 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x000001C8F42FA9D0>
2023-01-03 17:17 DEBUG on stmt: $const60.0 = const(NoneType, None)
2023-01-03 17:17 DEBUG on stmt: $62return_value.1 = cast(value=$const60.0)
2023-01-03 17:17 DEBUG on stmt: return $62return_value.1
2023-01-03 17:17 DEBUG defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x000001C8F43042B0>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x000001C8F4304580>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x000001C8F43046D0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x000001C8F4304970>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x000001C8F4304A90>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x000001C8F4304BB0>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x000001C8F4306250>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001C8F42FBD30>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x000001C8F42FB820>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x000001C8F42FA970>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x000001C8F42FAE80>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x000001C8F4123430>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x000001C8F4123AC0>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x000001C8F4306490>],
             '$48pred': [<numba.core.ir.Assign object at 0x000001C8F4306730>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x000001C8F43060D0>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x000001C8F4306AC0>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x000001C8F4306F10>],
             '$const52.2': [<numba.core.ir.Assign object at 0x000001C8F4306910>],
             '$const60.0': [<numba.core.ir.Assign object at 0x000001C8F4306D90>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x000001C8F42FB490>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x000001C8F4304880>],
             'bool48': [<numba.core.ir.Assign object at 0x000001C8F4306610>],
             'i': [<numba.core.ir.Assign object at 0x000001C8F4304E50>],
             'main_shape': [<numba.core.ir.Assign object at 0x000001C8F42FBBB0>],
             'n': [<numba.core.ir.Assign object at 0x000001C8F4304040>],
             'shape': [<numba.core.ir.Assign object at 0x000001C8F42FBA90>]})
2023-01-03 17:17 DEBUG SSA violators set()
